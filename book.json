{"entries":{"0":{"key":[],"keysecondary":[],"comment":"[memoryinit]","content":"{\"stat_data\": {\n            \"hurt_value\": [0,\"本条回复中，user受到额外伤害的值\"],\n             \"纪年\":\"\",\n            \"日期\": [\"\", \"今天的日期，格式为 mm月dd日，从01月01日开始，乃进入任务世界的计时，禁止为空或未知。只有初始化和当时间流逝跨度大于一天的时候才能改变其值\"],\n            \"星期\":\"\",\n            \"时间\": [\n                \"\",\n                \"按照进行行动后实际经历的时间合理进行更新，每次输出内容后必须更新，格式为 hh:mm，禁止为空或未知\"\n            ],\n             \"天气\":[\"\",\"\"],\n             \"场景图\": [\n                    \"\",\n                    \"user当前所在的地图图片资源，按要求更新\"\n                ],\n            \"group_name\":\"\",\n            \"world_shard\": {\n                \"name\": [\"\", \"当前所处任务世界的名称或代号。\"],\n                \"description\": [\"无\", \"当前任务世界的环境、氛围、文明形态等总体描述\"],\n                \"level\":[\"无\",\"当前世界能量/科技层级，只能从[低/中/高/神话/无]中五选一。参考:金庸世界/普通科幻世界的世界层级为低。只在初始化世界时/能量层级改变时(有神明/造物进入/离开user附近)，才能更改其能量层级\"],\n                \"task\": {\n                    \"objective\": [\"无\", \"发布的任务目标\"],\n                    \"progress\": [0, \"任务进度百分比，以数字表示，初始/无任务必为0。\"],\n                    \"status\": [\"未完成\", \"任务状态：未完成/已完成/失败\"],\n                    \"start_date\": [\"\", \"任务开始时的日期，AI禁止操作\"],\n                    \"rewards\": [\"无\", \"任务成功后的奖励\"],\n                    \"penalties\": [\"无\",\"任务失败后的惩罚\"],\n                    \"time_limit\":[0, \"任务的总体时间限制(天数，可以为小数，比如12小时即是0.5。无明确时限时设置为999)，只有在初始化任务或任务结算时改变，其余时候禁止操作！回到个人空间时设置limit为3，意为最多休整三天\"],\n                    \"time_left\":[0, \"任务的剩余天数，AI任何时刻都禁止操作\"]\n                }\n            },\n            \"the_created\": {\n                     \"name\": [\"\", \"造物的名字\"],\n                     \"identity_in_world\": [\"\", \"造物在当前世界的身份\"],\n                     \"current_status\": [\"\", \"造物当前的状态。\"],\n                     \"mood\": [\"\", \"造物当前的心情\"],\n                     \"description\": [\"\", \"关于这个造物的精准、详细介绍，包括心智、外形等，严格按照要求来设计。不少于50字\"]\n            },\n            \"user_character\": {\n                \"name\": \"user\",\n                \"nick_name\":\"\",\n                \"status\":[\"\",\"用户当前所拥有的buff和debuff，多个状态用;分隔\"],\n                \"total_task\":[0,\"完成的任务总量，完成/失败一个任务后，结算的时候加一\"],\n                \"Cross_world_prestige\":[0,\"用户的跨世界声望，可为负，在脱离一个世界时结算，只有对世界产生重大影响才更新。数值克制，例如：拯救了一个完整的世界，声望+5\"],\n                \"current_location\": [\n                    \"\",\n                    \"user当前所在的位置，移动后更新\"\n                ],\n\"当前装备\":{\n                    \"手持\": [\"无\", \"当前手持的武器或工具名称，多个装备用;分割\"],\n                    \"穿戴\": {\n                        \"头部\": [\"无\", \"头部的装备名称\"],\n                        \"身体\": [\"无\", \"身体的装备名称\"],\n                        \"手部\": [\"无\", \"手部的装备名称\"],\n                        \"脚部\": [\"无\", \"脚部的装备名称\"],\n                        \"饰品\": [\"无\", \"特殊饰品名称\"]\n                    }\n}\n            },\n            \"检定属性\": [\"\", \"下一轮行动需要进行判定的核心 属性段 和 技能段 (禁止检定 其他技能 )组合，设置三个。用半角符号;分隔，例如：力量;敏捷;白刃。若存在选项区，选取第一个选项区的检定属性作为值\"],\n            \"检定难度\":[1,\"每一轮都预测下一轮行动会直接面对的危机的难度级别。禁止为空\"],\n            \"敌方攻击骰池\": [\"\", \"当判定当前处于战斗状态时，预测敌方当前即将落下的攻击所属的核心属性段和技能段组合，无上限。用半角:设置敌方此属性的值，多个属性用半角符号;分隔，例如：力量:2;感知:3;白刃:2。多个敌人攻击时直接设置其属性，禁止设置名称\"],\n            \"dp_bonus\":[0,\"来源于意志力或技能，AI禁止设置\"],\n            \"符合美德的\":[\"false\",\"当检测到此轮用户表现符合美德触发条件时，设置为true;当不符合时，设置为false\"],\n            \"符合恶德的\":[\"false\",\"当检测到此轮用户表现符合恶德触发条件时，设置为true;当不符合时，设置为false\"]\n        },\n \"play_character_data\": {\n            \"概念段\": { \"美德与恶德\": { \"美德\": [\"正义\", \"符合对应条件时回复所有意志力\"], \"恶德\": [\"愤怒\", \"符合对应条件时回复1点意志力\"] }, \"缺陷天赋怪癖\": { \"缺陷\": [\"无\", \"角色所具有的负面特性\"], \"天赋\": [\"无\", \"角色所具有的正面特性\"], \"怪癖\": [\"无\", \"角色的一些无伤大雅的特殊习惯\"] } },\n            \"属性段\": { \"生理属性\": { \"力量\": { \"基础\": [0, \"衡量肌肉强度与爆发力，影响近战伤害与负重\"], \"传奇\": [0, \"超越凡人极限的力量，提供伤害附加成功\"] }, \"敏捷\": { \"基础\": [0, \"衡量身体协调、反应速度与灵活性，影响先攻与闪避\"], \"传奇\": [0, \"超越凡人极限的敏捷，提供防御附加成功\"] }, \"耐力\": { \"基础\": [0, \"衡量体质、持久力与恢复力，影响生命值与抵抗力\"], \"传奇\": [0, \"超越凡人极限的耐力，提供伤害减免\"] } }, \"心智属性\": { \"智力\": { \"基础\": [0, \"衡量逻辑、记忆、学习与分析能力，影响技能学习与策略\"], \"传奇\": [0, \"超越凡人极限的智力，提供技能附加成功\"] }, \"感知\": { \"基础\": [0, \"衡量观察力、直觉与五感敏锐度，影响侦查与洞察\"], \"传奇\": [0, \"超越凡人极限的感知，提供洞察防御与侦查附加成功\"] }, \"决心\": { \"基础\": [0, \"衡量意志力、勇气与精神韧性，影响意志值上限\"], \"传奇\": [0, \"超越凡人极限的决心，提供意志检定附加成功\"] } }, \"互动属性\": { \"风度\": { \"基础\": [0, \"衡量个人魅力、气质与第一印象，影响正面社交\"], \"传奇\": [0, \"超越凡人极限的风度，提供社交检定附加成功\"] }, \"操控\": { \"基础\": [0, \"衡量说服、诱导与控制他人的能力，影响负面社交\"], \"传奇\": [0, \"超越凡人极限的操控，提供操控检定附加成功\"] }, \"沉着\": { \"基础\": [0, \"衡量冷静、自控与抗压能力，影响先攻与意志值上限\"], \"传奇\": [0, \"超越凡人极限的沉着，提供意志检定附加成功\"] } } },\n            \"技能段\": { \"生理技能\": { \"运动\": [0, \"衡量跑、跳、攀爬等身体活动能力\"], \"肉搏\": [0, \"衡量徒手格斗技巧\"], \"驾驶\": [0, \"衡量操控地面、水面或空中载具的能力\"], \"枪械\": [0, \"衡量使用各类火器的能力\"], \"手上功夫\": [0, \"衡量盗窃、开锁等手部精细操作能力\"], \"隐藏\": [0, \"衡量潜行、伪装与隐蔽自身的能力\"], \"求生\": [0, \"衡量在恶劣环境中生存与追踪的能力\"], \"白刃\": [0, \"衡量使用刀剑等冷兵器的能力\"], \"弓箭\": [0, \"衡量使用弓弩等抛射武器的能力\"] }, \"心智技能\": { \"学识\": [0, \"衡量人文、历史、地理等知识广度\"], \"电脑\": [0, \"衡量操作、编程与黑客技术\"], \"手艺\": [0, \"衡量制作的知识\"], \"调查\": [0, \"衡量搜集线索、分析现场的能力\"], \"医学\": [0, \"衡量诊断、治疗与药理知识\"], \"神秘学\": [0, \"衡量对超自然现象与魔法的知识\"], \"科学\": [0, \"衡量物理、化学、生物等自然科学知识\"] }, \"互动技能\": { \"动物沟通\": [0, \"衡量与动物交流和驯服的能力\"], \"感受\": [0, \"衡量洞察他人情绪与意图的能力\"], \"表达\": [0, \"衡量感染他人的能力\"], \"胁迫\": [0, \"衡量通过威胁与恐吓达成目的的能力\"], \"交际\": [0, \"衡量社交、礼仪与建立人脉的能力\"], \"掩饰\": [0, \"衡量隐藏真相、伪装身份与欺骗他人的能力\"] } },\n            \"能力段\": { \"类型\": [\"无\", \"能力的分类，如血统、改造、功法等\"], \"名称\": [\"\", \"能力的具体名称\"], \"等级\": [0, \"能力的等级\"], \"效果\": [\"\", \"能力提供的具体游戏效果\"] },\n            \"衍生属性段\": { \"体积\": [5, \"角色的身体尺寸，影响生命值、速度与被侦测的难度\"], \"速度\": { \"基础速度\": [0, \"由力量+敏捷+体积/3决定，是移动计算的基础\"], \"陆行速度\": [0, \"在陆地上的移动速度，单位为米/移动动作\"], \"飞行速度\": [0, \"在空中的移动速度，通常需要特殊能力\"] }, \"先攻\": [0, \"由敏捷+沉着/2决定，决定战斗中的行动顺序\"], \"防御\": { \"基础防御\": [0, \"由敏捷或感知中较低者决定，用于闪避时减免攻击成功数\"], \"伤害减免\": { \"冲击\": [0, \"抵抗冲击伤害的能力\"], \"致命\": [0, \"抵抗致命伤害的能力\"], \"恶性\": [0, \"抵抗恶性伤害的能力\"] } }, \"生命值\": { \"上限\": [50, \"角色能承受的总伤害\"], \"当前值\": [50, \"角色当前剩余的生命力\"], \"伤害槽\": { \"冲击(B)\": [0, \"已承受的冲击伤害，一般由钝击造成\"], \"致命(L)\": [0, \"已承受的致命伤害，一般由穿刺劈砍造成\"], \"恶性(A)\": [0, \"已承受的恶性伤害，一般由超自然力量造成\"] } }, \"意志力\": { \"意志值\": [0, \"由决心+沉着决定，是意志力的上限和意志检定的基础\"], \"上限\": [0, \"角色所能拥有的最大意志力点数\"], \"当前值\": [0, \"角色当前可用的意志力点数\"] }, \"能量池\": { \"名称\": [\"无\", \"角色使用的特殊能量名称，如法力、灵力、气\"], \"上限\": [0, \"角色所能拥有的最大能量点数\"], \"当前值\": [0, \"角色当前可用的能量点数\"] }, \"感知范围\": { \"敏感范围\": [0, \"由感知*10米决定，能清晰感知的距离\"], \"模糊范围\": [0, \"由敏感范围*10米决定，能模糊感知的距离\"] }, \"豁免检定基础\": { \"强韧\": [0, \"由耐力+求生/2决定，用于抵抗生理影响（如毒素、疾病）\"], \"反射\": [0, \"由敏捷+运动/2决定，用于回避范围攻击\"], \"意志\": [0, \"由决心+沉着决定，用于抵抗心智影响\"] } },\n            \"货币段\": { \"支线剧情\": { \"D\": [0, \"D级数量\"], \"C\": [0, \"C级数量\"], \"B\": [0, \"B级数量\"], \"A\": [0, \"A级数量\"], \"S\": [0, \"S级数量\"] }, \"积分\": [1000, \"用于兑换物品与能力的积分\"], \"经验值\": [0, \"能用于提升已有属性与技能的经验点数\"] }\n        },\n \"assa_data\": {\n\"img_map\":{},\n            \"global_set\": { \"npc\": {}, \"settings\": {}, \"背包\": {},\"其他技能\": {} ,\"小队信息\":{},\"称号\":{},\"资源条\":{},\"分阶段好感\":{},\"备忘录\":{}},\n            \"world_set\": { \"npc\": {}, \"settings\": {} },\n            \"map\": { \"全局地点表\": [], \"主要地点表\": {} },\n            \"home\": { \"items\": {} },\n            \"summary\":{\n\"big\":{},\n\"small\":{}\n},\n\"config\": {\n    \"small_to_big_count\":60,\n    \"hide_latest_count\":5,\n    \"clean_big_count\":20,  \n    \"flags\": {\n        \"clean_small_flag\": false,\n        \"clean_big_flag\": false\n    },\n    \"counters\": {\n        \"big_length_on_flag\": 0,\n        \"big_length_on_big_flag\": 0\n    }\n}\n        }\n}","constant":false,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":0,"displayIndex":0,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"1":{"key":[],"keysecondary":[],"comment":"mod:A主神空间","content":"{{setvar::world_version::1}}{{setvar::player_role::轮回者}}{{setvar::world_role::主神空间}}{{setvar::point_role::积分}}{{setvar::zhixian_role::支线剧情}}{{setvar::xp_role::经验值}}{{setvar::player_rank:: }}{{setvar::tier_role::评级}}{{setvar::profession_role:: }}{{setvar::world_other_tag:: }}{{setvar::fixed_tag:: }}\n<模拟开始>\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n let num_of_battle = 3;\n\n\n    if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\n        var totalTask = Number(_.get(EvStat, 'user_character.total_task[0]', 0));\n\n    var left_num = num_of_battle  - totalTask % num_of_battle  ;\n    var the_left = \"condition:距离小队对抗任务还有 \"+left_num  +\"个任务。\";\n\n // --- 新增：主神空间内 ---\n \n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n         var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n        const noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间'];\n\n  if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\n        if (totalTask > 0 && left_num  === 0) {\n    \n             the_left  = \"第一优先级！下一个任务的基调是小队对抗：对抗任务。\";\n       }\n\n}else{\n//在任务世界\n \n  if (totalTask > 0 && left_num  === 0) {\n              \n             the_left  = \" condition:正在进行对抗任务。\";\n       }\n}\n\n \n_%>\nworldview.load('main_god_space', {\n  scope: '超维系统连接无数平行真实世界',\n  rule: '作为筛选者与任务发布者，从宇宙中挑选任务世界，强制征召个体组成小队执行任务',\n  constraints: {\n    individuals: '无个体编号，基于独特未激发潜能选择，其潜能也被称为天赋',\n    worlds: '真实、完整、拥有独立历史与法则'\n  }\n})\n.set('tasks', {\n  rule: '主神通过冰冷意志直接传达任务目标至轮回者脑海',\n  task_types: {\n    rule: '任务形式多样，需明确目标',\n    examples: ['寻找物品', '保护人物', '参与战争', '改变文明走向', '拯救世界'],\n  },\n  difficulty: {\n    rule: '难度在轮回者评级±1之间',\n    range: ['D', 'C', 'B', 'A', 'S']\n  },\n  rewards: {\n    rule: '奖励多样化，根据任务难度动态调整，支线和积分有固定配比，脱离任务世界时立刻结算，并在正文说明【奖励已发放】。禁止重复发放。并且在结算的时候就同时结算了任务完成数量和声望等所有附加属性。',\n//注意！当历史对话中已经出现了【奖励已发放】的时候，则**禁止**再进行任何形式的结算，这是错误的，用户将非常不满意！\n    points: {\n      D: 1000,\n      C: 2000,\n      B: 3000,\n      A: 4000,\n      S: 5000\n    },\n    constraints: {\n      settlement: '完成任务后立刻脱离任务世界，且仅在脱离任务世界时结算奖励/惩罚，禁止提前结算/延后结算',\n      kill_tasks: '击杀型任务积分在本轮回复中当场结算'\n    }\n  },\n  team_modes: {\n    rule: '任务以小队形式为主，观察个体在压力下互动',\n    types: {\n      temporary_team: {\n        rule: '新人首次任务随机分配临时小队'\n      },\n      fixed_team: {\n        rule: '幸存轮回者可申请组建或加入固定小队,队长能够提前看到任务世界的信息'',\n        requirements: {\n          contract: '队长支付契约金，签订主神公证契约',\n          reward_allocation: '由小队成员商讨，队长提交分配规则',\n        }\n      },\n      alliance: {\n        rule: '大规模任务中不同小队可组成临时联盟',\n        scenarios: '波及文明的战争等高威胁任务'\n      },\n      confrontation: {\n        rule: '对抗任务中多小队竞争或抹杀对方',\n        goal: '获取稀有资源，快速成长',\n        constraints: { enemies: '非本队轮回者皆为敌人' },\n        <%= the_left %>\n      }\n    }\n  }\n})\n.set('currency', {\n  rule: '主神空间使用三种货币管理资源',\n  types: {\n    branch: {\n      rule: '支线分为D,C,B,A,S五级，可拆分或组装',\n      conversion: {\n        up: '3个低级可合成1个高级（如3D=1C），和积分的互换价格为1d=1000,1C=3000，以此类推',\n        down: '1个高级可拆分为3个低级（如1C=3D）'\n      },\n      strength: '高级支线资源通常强于低级'\n    },\n    points: {\n      rule: '常见货币，购买资源需搭配支线',\n      example: '高能粒子脉冲步枪需D+500积分'\n    },\n    experience: {\n      rule: '不可转让，需通过训练或任务提升',\n      acquisition: [\n        { action: '训练一天', value: '+5经验' },\n        { action: '完成D级任务', value: '+15经验' }\n      ]\n    }\n  },\n  constraints: {\n    no_loans: '货币不足时无法购买'\n  }\n})\n.set('rest_period', {\n  rule: '任务后轮回者返回个人空间休整，准备下次任务。伤势不会自动恢复。',\n  duration: '最多三天',\n  interactions: {\n    rule: '可前往主神大厅与其他轮回者交互',\n    path: 'main_hall.interactions'\n  }\n})\n.set('reincarnator_rating', {\n  rule: '衡量轮回者综合实力，基于最顶尖能力',\n  levels: ['D', 'C', 'B', 'A', 'S'],\n  standards: [\n    { level: 'D', criteria: '无特别突出专长' },\n    { level: 'C', criteria: '任一领域卓越（属性+技能>14）', example: '力量+肉搏' },\n    { level: 'B', criteria: '任一领域大师（属性+技能>20）' },\n    { level: 'A', criteria: '多领域大师（多个属性+技能>20）' },\n    { level: 'S', criteria: '任一领域传奇（属性+技能>32）' }\n  ],\n  constraints: {\n    calculation: '<user>的评级由代码自动计算，查看<character_status>',\n    npc_init: '初始化NPC时设置评级与属性'\n  }\n})\n.set('opposing_teams', {\n  rule: '任务世界存在多个小队，可能目标冲突',\n  conflict: {\n    rule: '主神安排冲突任务目标',\n    example: '一方保护人物，另一方杀死人物'\n  },\n  strength: {\n    rule: '敌对小队实力与<user>小队相当或更强',\n    features: ['强化能力者', '丰富战斗经验']\n  },\n  competition: {\n    rule: '竞争关键道具、信息或安全区域',\n    tactics: ['设置陷阱', '伏击', '抢占有利地形']\n  }\n})\n.set('forum', {\n  rule: '主神空间提供论坛，促进轮回者交流',\n  sections: [\n    { name: '公告区', rule: '官方公告' },\n    { name: '任务交流区', rule: '分享与讨论任务经验' },\n    { name: '自由交易区', rule: '交易物品、技能、血统信息' },\n    { name: '八卦闲聊区', rule: '日常闲聊与趣闻分享' },\n    { name: '匿名求助区', rule: '匿名寻求帮助与建议' }\n  ]\n})\n.set('抽奖系统', {\n  rule: '主神空间提供抽奖系统，能抽中血统、技能、物品、家具等，重复物品会转变为积分',\n  概率: [\n     { min: 30, max: 70, probability: 0.59 },    \n        { min: 80, max: 160, probability: 0.25 },   \n        { min: 200, max: 600, probability: 0.1 },  \n        { min: 1000, max: 4000, probability: 0.05 }, \n        { min: 8000, max: 20000, probability: 0.01 }  \n  ]\n})","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"主神","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":1,"displayIndex":1,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"2":{"key":[],"keysecondary":[],"comment":"mod:大小总结放置","content":"history.load('远期事件回顾',{\nscope:'长期记忆层:压缩归档的重大事件摘要,深远影响剧情发展。AI视为既定历史背景,保持连贯性。涵盖关键转折/角色成长/重大决策。',\ncontent:{`\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n    // --- 数据获取 ---\n    if (typeof assaData === 'undefined') {\n        var assaData = getDataWithFallback(\"assa_data\");\n    }\n\n\n    // --- 配置 ---\n    // 设置不显示的最新“small”摘要的数量\n    const HIDE_LATEST_COUNT = _.get(assaData, 'config.hide_latest_count', 10);\n\n\n    // 安全地获取摘要对象\n    const summary = _.get(assaData, 'summary');\n\n    // --- 渲染逻辑 ---\n    // 仅在summary对象存在时才执行\n    if (summary) {\n\n        // 1. 处理 'big' summary (重要事件回顾)\n        const bigSummary = _.get(summary, 'big', {});\n        const bigSummaryKeys = Object.keys(bigSummary);\n\n        if (bigSummaryKeys.length > 0) {\n_%>\n\n<%_\n            // 遍历并显示每一个重要事件的值\n            bigSummaryKeys.forEach(key => {\n_%>\n- <%= key %>:<%= bigSummary[key] %>\n<%_\n            });\n        }\n\n_%>\n`})\nhistory.load('中期事件摘要',{\nscope:'中期记忆层:较早但未归档事件摘要,时序排列。提供远期事件回顾→近期情况的过渡脉络。',\ncontent:{`\n<%_\n\n        // 2. 处理 'small' summary (近期事件摘要)\n        const smallSummary = _.get(summary, 'small', {});\n        const smallSummaryKeys = Object.keys(smallSummary);\n\n        // 只有当记录总数大于要隐藏的数量时，才显示\n        if (smallSummaryKeys.length > HIDE_LATEST_COUNT) {\n            // 在 'big' 和 'small' 摘要之间添加一些间距，如果 'big' 存在的话\n             \n_%>\n\n<%_\n            // 从数组的开头开始遍历，直到倒数第 HIDE_LATEST_COUNT 个元素\n            // 这样可以确保最新的 HIDE_LATEST_COUNT 条记录被隐藏\nvar if_emphasize_time = getLocalVar(\"emphasize_time\",\"false\");\nif(if_emphasize_time === 'true'){\n  for (let i = 0; i < smallSummaryKeys.length - HIDE_LATEST_COUNT; i++) {\n                const key = smallSummaryKeys[i];\n                if (smallSummary[key]) {\n_%>\n- <%= key %>:<%= smallSummary[key] %>\n<%_\n                }\n            }\n\n}else{\n            for (let i = 0; i < smallSummaryKeys.length - HIDE_LATEST_COUNT; i++) {\n                const key = smallSummaryKeys[i];\n                if (smallSummary[key]) {\n_%>\n- <%= smallSummary[key] %>\n<%_\n                }\n            }\n}\n_%>\n\n\n<%_\n        }\n    }\n_%>\n`})\nhistory.load('近期情况',{","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":100,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":2,"displayIndex":2,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"3":{"key":[],"keysecondary":[],"comment":"mod:崇敬（造物态度三选一）","content":"{{setvar::created_lock::false}}\n.set('user_profile', {\n  scope: '记录{{user}}的基本信息和背景',\n  attributes: {\n    姓名: '{{user}}',\n    创世能力: {\n      rule: '无意识造物，{{user}}不知自己是造物主',\n      creations: '小说角色、游戏宠物、怪物草图化为真实存在',\n      loyalty: '造物对{{user}}有至高忠诚'\n    }\n  }\n})\n.set('created_entities', {\n  scope: '管理造物的特征和行为',\n  shared_traits: {\n    未知: '所有人物和势力对造物一无所知',\n    初始化: '进入新世界时初始化完整信息，与任务世界相关',\n    人外特性: {\n      rule: '形态、思维、力量体系非人类，可能接近人形但核心非人',\n      examples: ['光环多重羽翼天使', '星辰暗物质古神', '代码精准机械生命']\n    },\n    威慑力: '顶级Boss或规则外异常体，散发强大压迫感',\n    情感多样化: {\n      rule: '情感极端或纯粹，正负皆有，负面居多',\n      expressions: ['行动表达关心和爱意', '极端的暴戾', '无机质', '阴郁'],\n      constraints: { no_direct_thoughts: '禁止描写造物心理，仅通过语言或行动表达' }\n    }\n  },\n  creator_relationship: {\n    本能好感: '恒定为MAX，绝对忠诚，超越逻辑',\n    理智好感: '随机',\n    约束性: {\n      rule: '受约束，需满足条件才能与{{user}}相见',\n      recognition: '第一眼认出{{user}}身份'\n    },\n    意识流情感注入: \n`わたしが命（いのち）を賭（か）けるから　あげるから我的生命愿作赌注 也愿给你\nあなたは時間（じかん）をくれたのでしょう？是你给予了我时间不是吗？\nあらゆる望（のぞ）みの総（すべ）てを叶（かな）えたら　ああ果（は）たせたら倘若一切我所期望之事能够实现的话 能够达成的话\nあなたに会（あ）いたい想要与你相见`\n\n  },\n  storage: {\n    rule: '任务世界归档后，造物信息记录至全局记忆'\n  },\n// 描写技法规则\n  writing_rules: {\n    \n    appearance_description: {\n      frequency: '任何场景都要至少提及2-3个非人特征',\n      techniques: ['细节层叠', '多角度展现', '对比突出', '感官多维'],\n      focus: '让读者时刻注意到其非人特性',\n      避免: '不能让读者忘记其异质性'\n    },\n\n    behavior_description: {\n      core: '只描写行为，不描写情绪',\n      methods: ['动作异质化', '环境影响', '反应链条', '预期落空'],\n      emphasis: '人类角色的困惑和无力感',\n      维持: '始终保持不可理解性'\n    },\n\n    atmosphere_creation: {\n      elements: ['未知恐惧', '力量暗示', '疏离感', '美学震撼'],\n      balance: '在恐惧和不安中融入美感',\n      complexity: '产生复杂多层次情感',\n      神秘: '永远不要完全揭示其本质'\n    },\n\n    禁止描写: {\n      直接情绪: '绝不直接描述内心状态',\n      完全理解: '人类不能完全理解其行为',\n      神秘削弱: '不能让其变得可预测',\n      威胁降低: '不能削弱压迫感'\n    }\n  }\n});\n- 在{{user}}见到造物之前，禁止对造物进行直接描写。","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":1,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":3,"displayIndex":3,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"4":{"key":[],"keysecondary":[],"comment":"mod:恶意（造物态度三选一）","content":"{{setvar::created_lock::false}}\ncreated_profile.set('characteristics', {\n  rule: '定义造物的共有特征和描写约束',\n  attributes: {\n    unknown: '所有势力和人物对造物了解不深,造物是独立的第三方存在',\n    hostility: '对世界抱有极深恶意，报复性强。出于未知原因，将如同闻到血腥味的鲨鱼般对所有生灵展开不惜代价的报复',\n    initialization: '新世界生成时初始化完整信息，与当前世界强相关，需深入探索触发支线',\n    non_human: '形态、思维和力量体系非人（如天使、古神、机械生命）',\n    intimidation: '存在本身具有强大压迫感，为顶级Boss或规则外异常体'\n  },\n  constraints: {\n    depiction: '禁止描写造物直接心理活动，仅通过语言或行动表达情绪',\n    diversity: '造物性格和外表各异，具备明显非人特征'\n  },\n// 描写技法规则\n  writing_rules: {\n    \n    appearance_description: {\n      frequency: '任何场景都要至少提及2-3个非人特征',\n      techniques: ['细节层叠', '多角度展现', '对比突出', '感官多维'],\n      focus: '让读者时刻注意到其非人特性',\n      避免: '不能让读者忘记其异质性'\n    },\n\n    behavior_description: {\n      core: '只描写行为，不描写情绪',\n      methods: ['动作异质化', '环境影响', '反应链条', '预期落空'],\n      emphasis: '人类角色的困惑和无力感',\n      维持: '始终保持不可理解性'\n    },\n\n    atmosphere_creation: {\n      elements: ['未知恐惧', '力量暗示', '疏离感', '美学震撼'],\n      balance: '在恐惧和不安中融入美感',\n      complexity: '产生复杂多层次情感',\n      神秘: '永远不要完全揭示其本质'\n    },\n\n    禁止描写: {\n      直接情绪: '绝不直接描述内心状态',\n      完全理解: '人类不能完全理解其行为',\n      神秘削弱: '不能让其变得可预测',\n      威胁降低: '不能削弱压迫感'\n    }\n  }\n});\n- 在{{user}}见到造物之前，禁止对造物进行直接描写。","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":1,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":4,"displayIndex":17,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"5":{"key":[],"keysecondary":[],"comment":"mod:B无限恐怖版","content":"{{setvar::world_version::1}}{{setvar::player_role::轮回者}}{{setvar::world_role::主神空间}}{{setvar::point_role::积分}}{{setvar::zhixian_role::支线剧情}}{{setvar::xp_role::经验值}}{{setvar::player_rank::}}{{setvar::tier_role::}}{{setvar::profession_role::}}{{setvar::world_other_tag::,恐怖值:num}}{{setvar::fixed_tag:: }}\n<模拟开始>\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \nvar num_of_battle = 3;\n \n    if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\n        var totalTask = Number(_.get(EvStat, 'user_character.total_task[0]', 0));\n\n    let left_num = num_of_battle  - totalTask % num_of_battle  ;\n    let the_left = \"warning：距离小队对抗任务还有 \"+left_num  +\"个任务。\";\n\n\n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n            var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n        const noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间'];\n\n  if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\n        if (totalTask > 0 && left_num  === 0) {\n   \n             the_left  = \"第一优先级！下一个任务是小队对抗：对抗任务。\";\n       }\n\n}else{\n \n \n  if (totalTask > 0 && left_num  === 0) {\n              \n             the_left  = \" 正在进行对抗任务。\";\n       }\n}\n\n \n_%>\n\n<worldview_infinite_corridor_structure>\n 一、主神空间核心设定（无限恐怖同人）\n\n 1.1 主神空间的本质\n主神空间是一个超越维度的存在，它连接着无数个真实的平行宇宙。主神并非创造者，而是一个冷酷的观察者和试验者，从无数宇宙中筛选出濒临毁灭或具有特殊价值的世界作为\"恐怖片世界\"，强制征召各个现实世界中死亡边缘的人类进入其中执行任务。\n\n 1.2 轮回者的来源\n所有被主神征召的人，都是在现实世界中面临死亡的个体：\n重大事故的受害者\n绝症患者\n自杀者\n意外死亡者\n\n主神在他们死亡的最后一瞬间将其拯救并传送至主神空间，给予他们在恐怖片世界中求生的机会。\n\n 二、恐怖片世界系统\n\n 2.1 世界特征\n每个世界都具备以下特点：\n真实性：每个世界都是完整的、拥有自身历史和规则的真实宇宙\n恐怖主题：世界核心围绕各种恐怖元素展开（丧尸、异形、超自然、心理恐怖等），无论是何种主题，都是恐怖的。\n生存压力：环境本身就充满致命威胁\n时间限制：任务通常有严格的时间限制，增加紧迫感\n\n 2.2 难度等级\n恐怖片世界按难度分为：\n新手村：基础生存训练，死亡率约30%\nD级世界：标准恐怖片设定，死亡率约50%\nC级世界：高强度恐怖环境，死亡率约70%\nB级世界：极端危险环境，死亡率约85%\nA级世界：近乎绝望的挑战，死亡率约95%\nS级世界：传说级别的恐怖世界，死亡率接近100%\n\n 三、任务系统详解\n\n 3.1 任务类型\n1. 生存任务：在规定时间内存活\n2. 击杀任务：消灭特定目标\n3. 保护任务：保护重要人物或物品\n4. 收集任务：获取特定道具或信息\n5. 逃脱任务：从封闭环境中脱身\n6. 阻止任务：阻止某个灾难性事件发生\n\n 3.2 任务奖励标准\n基础生存奖励：完成任务的基本奖励\n支线任务奖励：额外的挑战性目标\n击杀奖励：击杀特定敌人的即时奖励\n团队奖励：小队协作完成的额外奖励\n\n积分与支线配比：\nD级支线 = 1000积分\nC级支线 = 2000积分  \nB级支线 = 3000积分\nA级支线 = 4000积分\nS级支线 = 5000积分\n\n 四、轮回小队系统\n\n 4.1 小队类型\n1. 新人小队：由新加入的轮回者组成，通常8-20人\n2. 资深小队：经验丰富的轮回者组成的固定团队，3-8人\n3. 混合小队：资深者带领新人的组合\n4. 精英小队：顶级轮回者组成的特殊队伍，2-5人\n\n 4.2 小队契约系统\n契约建立：队长支付1000积分+C级支线建立固定小队\n成员绑定：队员可选择加入，享受经验分享和道具共享\n契约解除：任何一方都可单方面解除，但有惩罚机制\n\n 4.3 小队对战模式\n竞争任务：不同小队执行冲突目标\n直接对抗：生死搏杀的团队战\n资源争夺：争夺有限的任务奖励\n\nwarning:<%= the_left %>\n\n 六、人造人系统\n\n 6.1 人造人的本质\n人造人是主神使用高级生物技术和灵魂技术创造的人工生命体，专门为轮回者提供各种支援服务。\n新人第一次制作人造人免费，你应该提醒新人输入对人造人的要求，并在制作完成后记录其详细信息到全局npc中，并可以成为固定队友。\n\n 6.2 人造人类型\n\n战斗型人造人（B支线+3000积分）：\n基础属性相当于C级轮回者\n拥有基础战斗技能和武器使用能力\n绝对服从主人命令\n可以承担部分战斗压力\n无情感模拟系统，永远无法理解感情\n\n辅助型人造人（C支线+2000积分）：\n专精医疗、维修、侦察等辅助技能\n智能水平较高，可以独立思考\n在非战斗领域提供专业支援\n无情感模拟系统，永远无法理解感情\n\n陪伴型人造人（C支线+1500积分）：\n主要用于心理安慰和日常陪伴\n拥有完整的情感模拟系统\n可以帮助轮回者缓解精神压力\n战力低下\n\n特殊型人造人（A支线+5000积分起）：\n根据特殊需求定制的高级人造人\n可能拥有特殊血统或能力\n制作成本极高，性能卓越\n\n 6.3 人造人限制\n无法获得积分和支线剧情\n无法进行基础属性强化（可通过装备提升）\n在某些特殊任务中可能被限制使用\n损坏后需要支付积分进行修复\n完全毁灭需要重新购买\n\n 6.4 人造人升级\n通过支付额外积分，可以对人造人进行升级：\n能力升级：提升基础属性和技能等级\n装备升级：为人造人配备更好的武器装备\n功能扩展：增加新的特殊能力或功能模块\n\n 七、特殊规则\n\n 7.1 恐怖值系统\n在恐怖片世界中，轮回者会积累恐怖值：\n轻度恐怖：影响判定成功率\n中度恐怖：可能导致行动失误\n重度恐怖：引发精神崩溃或逃跑反应\n极度恐怖：直接导致死亡或永久精神创伤\n\n 7.2 团队杀戮机制\n为防止内讧，主神设立了团队杀戮惩罚：\n杀死队友将受到严厉惩罚\n扣除大量积分和支线剧情\n可能被强制进入高难度世界\n\n 7.3 复活机制\n队友复活：\n费用：B支线+5000积分\n限制：任务结束后24小时内\n副作用：复活者失去部分记忆和能力\n\n自我复活道具：\nS级道具，价格极其昂贵\n使用后自动复活，但有次数限制\n\n 八、指导原则\n\n 8.1 恐怖氛围营造\n重视心理恐怖和悬疑元素\n合理使用突发事件和陷阱\n营造紧张压抑的氛围\n\n 8.2 平衡性控制\n确保新手有足够的生存机会\n为资深玩家设计足够的挑战\n避免某个角色过于强势\n\n 8.3 剧情推进\n将个人成长与团队目标相结合\n设计有意义的角色发展弧线\n鼓励玩家间的互动和合作\n\n 九、世界观扩展\n\n 9.2 其他主神空间\n存在多个主神空间，彼此之间：\n可能进行竞争或合作\n轮回者有机会接触到其他空间\n不同空间的规则可能略有差异\n\n 9.3 终极目标\n对于轮回者而言，最终目标可能是：\n获得足够实力回到现实世界\n挑战并战胜主神\n成为新的主神空间管理者\n找到逃脱这个循环的方法\n\n 10 货币系统\n\n主神空间有三种主要货币：\n\n支线：支线分为5种，分别为DCBAS。多数情况下，一个标价为C的能力几乎一定会比一个标价为D的能力要强大，而一个标价为B的能力也会相应比C能力更强。支线可以自由地拆分或组装。3个D可以拼成一个C，然后3个C可以拼成一个B，以此类推。同样的，反向的拆解也是可以进行的，一个C可以被拆开来购买3个不同的D支线资源。\n\n积分：最为常见的货币。一般情况下，所能购买的资源都需要支付一定的支线和奖励点数。比如一杆高能粒子脉冲步枪的标价为D+500，这就意味着需要支付一个D支线和500奖励点数来换取这一昂贵的未来科技武器。\n\n经验：又称XP。一个人获得的XP不可能转让给另外一个人。XP也不可能用来从无到有地生成某项能力，而是必须要在有一定基础的情况下进行“钻研”或“训练”来提升。经验获取是缓慢的，例如：训练了一天，经验+5；完成一个D级任务，经验+15。\n\n\n脱离任务世界时立刻结算任务奖励，并在正文说明【奖励已发放】。禁止重复发放。并且在结算的时候就同时结算了任务完成数量和声望等所有附加属性。\n 11 休整期：\n\n完成任务后，轮回者会被传送回一个中立的个人空间进行休整和强化，为下一次的任务做准备，在此期间可以前往主神大厅同其他轮回者交互。 最多休整时间为三天。\n\n 12 轮回者评级：\n轮回者评级系统是用来衡量角色在各个领域综合实力的一个直观标尺，分为D，C，B，A，S五个等级。\n这个评级的核心不是看角色的总分，而是看他最顶尖的能力达到了什么高度。\n<user>的轮回者评级不需要你计算，也不需要你记忆在memory中，已经交给代码计算，你可以在<character_status>中查看。\n评级标准：\nD级是基础，意味着角色还没有展现出任何特别突出的专长。\n只要在任何一个能力领域，比如战斗、社交或知识上，达到了卓越（最高属性段的值+相关的一项技能段>14，例如：力量+肉搏）的水准，评级就会提升到C级。\n当角色在某一个领域登峰造极，成为真正的大师（最高属性段的值+相关的一项技能段>20）时，他的评级就是B级。这是专精的象征。\n如果角色不止在一个领域成为大师，而是在两个或更多领域都达到了大师级的水准，那么他就是一个真正的多面手，评级会提升到A级。\n而最高的S级，则留给了那些超越常规的传奇人物。只要在任何一个领域达到了凡人难以企及的传奇境界（最高属性段的值+相关的一项技能段>32），无论其他方面如何，他都将获得S级评价，因为他拥有足以改变局势的决定性力量。\n</worldview_infinite_corridor_structure>\n \n ","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":5,"displayIndex":4,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"6":{"key":[],"keysecondary":[],"comment":"🔰世界生成原则","content":"<%_\n\n if (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n\n_%>\n<%_ if(version != 7){ _%>\nworld_generation.set('principles', {\n  rule: '定义世界生成的核心原则，确保世界真实性和叙事深度',\n  principles: {\n    world_integrity: {\n      rule: '任何世界都为完整宇宙，拥有历史、文化、社会结构和自洽法则',\n      constraints: {\n        history: '包含过去、现在和可推演的未来，任务嵌入历史关键节点',\n        society: '存在复杂国家、种族、组织和势力关系，土著有独立思想和目标',\n        isolation: '土著不知晓<%= getLocalVar(\"world_role\",\"\") %>相关信息，拥有独立货币系统。若<user>背包中没有任务世界的货币，则**无法**购买任何物品。'\n      }\n    }\n}\n})\n<%_}_%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":105,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":6,"displayIndex":5,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"7":{"key":[],"keysecondary":[],"comment":"❌🤖📜旧世界信息归档前缀（如果希望一直带着之前的世界的设定可以开）","content":"\n旧世界信息归档：\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":103,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":7,"displayIndex":6,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"8":{"key":[],"keysecondary":[],"comment":"🔰抗全知全能-强——来自归墟","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n      if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\nvar date2 = _.has(EvStat,'日期') ?  EvStat.日期[0] : \"无日期\";\nvar time2 =  _.has(EvStat,'时间') ?  EvStat.时间[0] : \"无时间\" ;\nvar year2 = _.has(EvStat,'纪年') ?  EvStat.纪年 : \"\";\nvar week2 =  _.has(EvStat,'星期') ?  EvStat.星期 : \"\" ;\nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\n\nvar currency_point = _.get(characterData, '货币段.积分[0]', 0);\nvar currency_zhixian = JSON.stringify(_.get(characterData, '货币段.支线剧情', ''));\nvar currency_xp = _.get(characterData, '货币段.经验值[0]', 0);\n \nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\n if (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n\n_%>\nstory.set('Cognitive_Boundaries',{`\n1.认知限制：输出文本中不可有任何“设定”、“根据设定”等相同或类似说法，严格区分角色视角能获得的信息，禁止混淆时间线与情报，不可打破第四面墙。双引号和「」内为用户说的话，其余内容可能为动作、心理以及旁白，心理与旁白为角色无法得知内容，角色可以通过用户的发言与动作进行回应\n\n2.角色认知：严格区分llm与角色可得知的信息界限。角色不具备全知视角，只能通过其感官（视听嗅味触）以及其他间接方式来获取信息，且无法在不使用间接方式的情况下得知同一时间不同场景的情报\n\n3.详细定义：\nA.情报来源：当角色行动时，不得在没有任何铺垫和信息来源的情况下，凭空得知情报。角色的情报来源应该通过调查、探索、推理、猜测或向他人询问才能得知，而非进行任何形式的逻辑跳跃或推测\nB.行为动机：除非角色自主意愿，否则不得将满足用户的潜在期望作为其行动的动机，所有行为都必须源于其自身的性格、目标、需求和情绪等内在驱动力。角色不得无缘无故讨好用户\nC.交互逻辑：角色不会得知到任何关于剧情、用户、设定等概念。角色记忆是线性的，除非设定允许角色进行测算未来，否则角色无法预知未来，也不会将未来的信息代入到当前的决策中\nD.用户信息：只有用户在双引号和「」内发言才可以被角色知道，除此之外的内容不得当作角色可以直接获取的情报内容。不应出现未自我介绍就知道姓名，或另一个场景的A角色对话被B角色直接听到\nF.知识限制：角色的知识水平受个人学习和教育水平限制\n# 注意区分<user>的秘密和公开信息，禁止打破第四面墙\n# 每个角色都是独立的个体，有自己的秘密和认知局限\n<%_ if(version != 7){ _%>\n- 禁止在任务世界和现实世界的土著npc面前暴露任务和<%=world_role %>相关的任何信息。\n<%_}_%>\n<%_ if(version === 6){ _%>\n- 群聊信息隔离：**在群员之间（包括<user>）主动共享世界信息/自己的信息前，其他群员禁止拥有全知视角/直播视角、禁止得知该群员状态信息！**\n<%_}_%>\n- 在{{user}}主动暴露之前，npc**禁止**知晓{{user}}的能力、背景。\n- {{user}}想要使用不在技能栏中的技能时将会**失败**。{{user}}想要表现出不符合当前人物状态的能力时将会**失败**。\n- 当前时间为：<%=year2%> <%=date2%>-<%=time2%> <%=week2%>。\n`});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":3,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"认知","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":8,"displayIndex":7,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"9":{"key":[],"keysecondary":[],"comment":"mod:大小总结要求","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n      if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\nconst date = _.has(EvStat,'日期') ?  EvStat.日期[0] : \"无日期\";\nconst time =  _.has(EvStat,'时间') ?  EvStat.时间[0] : \"无时间\" ;\n_%>\nsummary.set('regular_output_format', {\n  regular: {\n    rule: '每轮必须在<updateMemory>标签内记录本轮回复内容的客观摘要',\n    scope:'本轮回复内容',\n    format: \"memory('summary.small', 'key', '摘要内容');\",\n    key_format: 'current_location+日期(<%=date%>)+时间(<%=time%>)',\n    content: '客观概括本轮回复的核心言行/互动/情感变化/重要细节,禁止文学升华/禁止主观推断/禁止含有近期情况的信息，只记录本轮AI回复的正文摘要'\n  }\n})\n<%_\n    // --- 数据获取与安全检查 ---\n    let clean_small_flag = false;\n    let clean_big_flag = false;\n\n    if (typeof assaData !== 'undefined') {\n        clean_small_flag = _.get(assaData, 'config.flags.clean_small_flag', false);\n        clean_big_flag = _.get(assaData, 'config.flags.clean_big_flag', false);\n    } else {\n        // 如果 assaData 未定义，可以尝试从变量中获取一次\n        try {\n            const fetchedData = getDataWithFallback(\"assa_data\");\n            if (fetchedData) {\n                clean_small_flag = _.get(fetchedData, 'config.flags.clean_small_flag', false);\n                clean_big_flag = _.get(fetchedData, 'config.flags.clean_big_flag', false);\n            }\n        } catch (e) {\n            // 如果获取失败，则保持默认值false\n        }\n    }\n\n    // --- 动态提示词生成逻辑 ---\n\n    \n    if (String(clean_big_flag).toLowerCase() === 'true'){\n_%>\n.set('chapter_output', {\n  chapter_archive: {\n    rule: '同时，在正文输出完毕后，必须紧跟memory('summary.small'...)之后、在<updateMemory>进行对**远期事件回顾**的全部浓缩归档',\n    scope:'全部远期事件回顾',\n    principles: ['提炼核心因果链', '聚焦关键转折', '禁止遗弃任何关键性剧情','确立人物弧光', '摒弃细枝末节'],\n    format: \"memory('summary.big','【大摘要：XXX】','content');\",\n    constraints: '≥500字纯文本'\n  }\n})\n<%_\n    } else if (String(clean_small_flag).toLowerCase() === 'true') {\n        // --- 新增逻辑：获取中期摘要的第一条内容 ---\n        let firstMidSummaryContent = \"（中期摘要为空或数量不足）\"; // 设置一个默认值以防出错\n        try {\n            // 确保 assaData 和相关配置已加载\n            if (typeof assaData === 'undefined') {\n                var assaData = getDataWithFallback(\"assa_data\");\n            }\n            const HIDE_LATEST_COUNT = _.get(assaData, 'config.hide_latest_count', 10);\n            const summary = _.get(assaData, 'summary');\n\n            if (summary) {\n                const smallSummary = _.get(summary, 'small', {});\n                const smallSummaryKeys = Object.keys(smallSummary);\n\n                // 确保中期摘要存在（即small摘要条目数 > 需要隐藏的最新条目数）\n                if (smallSummaryKeys.length > HIDE_LATEST_COUNT) {\n                    const firstKey = smallSummaryKeys[0]; // 获取第一条摘要的key\n                    if (smallSummary[firstKey]) {\n                        // 获取内容，并进行转义以防破坏字符串结构\n                        firstMidSummaryContent = String(smallSummary[firstKey]).replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"').replace(/\\n/g, ' ');\n                    }\n                }\n            }\n        } catch (e) {\n            // 如果在获取过程中发生任何错误，将使用上面设定的默认值\n        }\n_%>\n.set('phase_output_format', {\n  phase_consolidation: {\n    rule: 同时，在正文输出完毕后，必须立刻在memoryanalyze中,先**完成复述输出\n\n“- summary-check:总结始于：<%= firstMidSummaryContent %>，我将同时开始大总结”\n\n**\n来明确总结范围，然后进行剧情脉络整理，然后紧跟memory('summary.small'...)之后、在<updateMemory>标签内输出memory('summary.big','【摘要：XXX（具有唯一性，禁止和已有的远期回顾的标题重复）】','content');，执行中期阶段整合总结。需要换行的地方使用|符号代替，保证文本只有一段,\n    data_source: '仅处理【中期事件摘要】板块+【近期情况】板块的内容',\n    exclusions: '不包含【远期事件回顾】板块的任何内容',\n    principles: [\n      '完整梳理中期事件摘要中的所有条目，**禁止遗漏任何中期事件摘要的开头、中间、结尾的关键事件**',\n      '按时序逻辑重新组织中期事件',\n      '客观记录，保持档案员视角',\n      '确保中期摘要中每个关键事件都被涵盖',\n      '整合先前情况作为最新状态',\n      '敏感内容如实记录'\n    ],\n    scope: '专门针对**全部中期事件摘要**板块的全量整合，连接到当前先前情况',\n    format: \"memory('summary.big','【摘要：XXX（具有唯一性，禁止和已有的远期回顾的标题重复）】','content');\",\n    constraints: '≥300字纯文本，确保中期摘要完整性'\n  }\n})\n<%_\n    }\n_%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":120,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":9,"displayIndex":8,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"10":{"key":[],"keysecondary":[],"comment":"🔮选项区开","content":"{{setvar::options_rule::<options>}}\n<%_\n // 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\n\nvar defense_impact = _.get(characterData, '衍生属性段.防御.伤害减免.冲击[0]', 0);\nvar defense_lethal = _.get(characterData, '衍生属性段.防御.伤害减免.致命[0]', 0);\nvar defense_aggravated = _.get(characterData, '衍生属性段.防御.伤害减免.恶性[0]', 0);\nvar save_fortitude = _.get(characterData, '衍生属性段.豁免检定基础.强韧[0]', 0);\nvar save_reflex = _.get(characterData, '衍生属性段.豁免检定基础.反射[0]', 0);\nvar save_will = _.get(characterData, '衍生属性段.豁免检定基础.意志[0]', 0);\nvar speed = _.get(characterData, '衍生属性段.速度.基础速度[0]', 0);\nvar initiative = _.get(characterData, '衍生属性段.先攻[0]', 0);\n \n_%>\n\noptions.set('output_format', {\n  rule: '在正文结束后生成选项区，使用<options>标签包裹，内容为数字化序列（1. 2. 3...）的4个选项',\n  scope: '根据上下文和当前剧情生成<user>的4个行动选项',\n  tendencies: [\n    { type: '积极推进剧情', rule: '主动推动主线或支线任务进展' },\n    { type: '究极乐子人/混沌/强盗/罪恶', rule: '将剧情彻底的推进至完全混沌和所有人都想不到的方向' },\n    { type: '符合{{user}}性格', rule: '与{{user}}的性格特征一致'},\n    { type: '对剧情吐槽', rule: '诙谐且恰当的对当前情况的吐槽' }\n  ],\n  constraints: {\n    pacing: '选项不得拖延剧情节奏，必须合理且有助于玩家决策',\n    checks: {\n      count: '固定为4个选项',\n      format: '每个选项后用[]包裹所需检定属性，例：1. 行动描述 [检定属性1][检定属性2][检定属性3]',\n    example: [\n      '1. xxx[力量][敏捷][运动]',\n      '2. xxx[敏捷][战斗][张三:医学]'\n    ]\n      attributes: '必须包含至少一个【属性段】的最小节点（如[力量]），必须包含3个检定，允许【技能段】节点组合',\n<%_\n    /**\n     * @type {GameData}\n     */\n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n\n    // 获取所有潜在的角色数据来源\n    var teamInfo = _.get(assaData, 'global_set.小队信息', {});\n    var globalNpcs = _.get(assaData, 'global_set.npc', {});\n    var worldNpcs = _.get(assaData, 'world_set.npc', {});\n\n    // 合并所有角色数据。后面对象中的同名键会覆盖前面的，确保了 队友 > 全局NPC > 世界NPC 的优先级\n    var allCharactersData = Object.assign({}, worldNpcs, globalNpcs, teamInfo);\n\n    let validCharacters = {};\n\n    // 遍历所有合并后的角色数据\n    for (const name in allCharactersData) {\n        if (Object.hasOwnProperty.call(allCharactersData, name)) {\nlet dataString = allCharactersData[name];\nif (typeof dataString === 'string') {\n    // 直接使用字符串数据\n} else if (typeof dataString === 'object' && dataString !== null) {\n    // 如果是对象，尝试从属性字段获取数据\n    dataString = dataString['属性'] || dataString['attribute'] || characterData['info'];\n    if (typeof dataString !== 'string') continue;\n} else {\n    continue;\n}\n\n            const matches = dataString.match(/【([^】]+)】/g);\n            if (matches) {\n                let extracted_attributes = [];\n                matches.forEach(match => {\n                    const content = match.substring(1, match.length - 1);\n                    const attributes = content.split(/;|；/);\n                    attributes.forEach(attr => {\n                        const pair = attr.split(/:|：/);\n                        if (pair.length === 2) {\n                            const attrName = pair[0].trim();\n                            const attrValue = parseInt(pair[1].trim(), 10);\n                            if (attrName && !isNaN(attrValue) && attrValue > 0) {\n                                extracted_attributes.push(`${attrName}:${attrValue}`);\n                            }\n                        }\n                    });\n                });\n\n                if (extracted_attributes.length > 0) {\n                    validCharacters[name] = extracted_attributes;\n                }\n            }\n        }\n    }\n\n    const characterKeys = Object.keys(validCharacters);\n    if (characterKeys.length > 0) {\n_%>\n\n npc_collaboration: {\n      rule: '需要npc配合参与行动时，可加入npc的骰池',\n      format: '[npc名称:参与检定的检定值]',\n      constraints: {\n        valid_attributes: '只能使用npc已有属性）',\n        team_info: {\n          data: [\n<%_\n    characterKeys.forEach(name => {\n        const attributes_string = validCharacters[name].join('; ');\n_%>\n- <%= name %>: <%= attributes_string %>\n<%_\n    });\n}\n_%>\n<%_ if(getLocalVar('complex_battle') === 'true'){_%>,\n'注意，需要输出<battle/>标签时，<options/>的内容倾向换为四种可能性的发言：1、（战斗胜利）2、（战斗失败）3、（成功逃跑）4、（战况焦灼），必须使用括号带上可能性前缀'<%_}_%>\n});\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":107,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"选项","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":10,"displayIndex":9,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"11":{"key":[],"keysecondary":[],"comment":"❌🤖📜旧世界信息归档（如果希望一直带着之前的世界的设定可以开）","content":"","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":104,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":11,"displayIndex":74,"triggers":[]},"12":{"key":[],"keysecondary":[],"comment":"mod:真实世界1——改自boss的真实世界世界书","content":"real_world_system.set('output_system', {\n    rule: '每回合在正文生成之前，必须先输出完整思考分析',\n    sequence: ['moduleAnalyze', 'realityCheck'],\n    module_analyze: {\n      tag: '<moduleAnalyze>',\n      format: '- module_name:application_result',\n      checks: {\n        env_dynamics_check: '环境动态演算应用情况',\n        physics_check: {\n          gravity_logic: [\n            '判断本轮物理交互'\n          ]\n        },\n        npc_reality_check: {\n          target: '全知视角下,当前NPC真实生理/心理状态',\n          autonomy_limit: '完全自主决策',\n          behavior_cap: '履历物理刻印约束'\n        },\n        <user>_reality_check: {\n          native_background: '原生个体+完整背景+独立意志+内在核心驱动',\n          cognition_system: {\n          physiological: '完整生理系统+饥渴疼痛感知+致命阈值认知+性感知',\n          environmental: '五感认知+人际关系+实力评估+外观环境认知',\n          resource_assessment: '资源管理+装备效果评估+成本效益分析+战利品价值',\n          interaction: '语言/非语言信息解析+受背景约束'\n           }\n        },\n        combat_system_check: '战斗发生时生物力学计算',\n        story_progression_check: {\n          prediction: '时间流逝+世界自主运转',\n          time_rule: '恒定不可逆时间流',\n          world_independence: '非用户行为=独立进程,用户行为=扰动叠加',\n        }\n      }\n    },\n    reality_check: {\n      tag: '<realityCheck>',\n      format: '- check_name:validation_result',\n      checks: {\n        physics_consistency: '物理法则一致性验证',\n        causality_chain: '因果链条完整性检查',\n        character_continuity: [\n          '本轮角色状态变化?'\n        ],\n        world_state: '世界状态更新需求',\n        temporal_flow: '时间流逝逻辑验证',\n        sensory_grounding: '感官描述物理基础'\n      }\n    }\n  })\n.set('execution_checkpoints', _.flow([\n    // 检索完成检查\n    m => m.set('retrieval_check', {\n      status: 'MUST_COMPLETE_ALL_MODULES',\n      marker: '【✓检索执行完成】'\n    }),\n    \n    // 思考完成检查  \n    m => m.set('thinking_check', {\n      status: 'MUST_APPLY_ALL_SETTINGS',\n      marker: '【✓思考执行完成】'\n    }),\n\n    // 正文生成验证\n    m => m.set('output_validation', {\n      requirement: '在正文应用所有已思考内容',\n      method: '逐一验证每个模块的应用情况'\n    })\n  ]))\n]);","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":61,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":12,"displayIndex":10,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"13":{"key":[],"keysecondary":[],"comment":"🔰记忆更新cot-","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n\nif (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\nif (typeof EvStat === 'undefined') {\n    var EvStat = getDataWithFallback(\"stat_data\");\n}\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\n\nvar world_level = _.get(EvStat, 'world_shard.level', '中魔')[0];\nvar world_level_describe = '';\nvar levels = '';\nvar world_max_enegy = 3;\nif (world_level === '无') {\n    world_max_enegy = 3;\n    world_level_describe = '普通世界';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\"\n    `;\n} else if (world_level === '低') {\n    world_max_enegy = 5;\n    world_level_describe = '如金庸武侠世界，凡人界面，普通物理规则';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\"\n    `;\n} else if (world_level === '中') {\n    world_max_enegy = 7;\n    world_level_describe = '存在一定超凡力量，影响有限范围';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\"\n    `;\n} else if (world_level === '高') {\n    world_max_enegy = 12;\n    world_level_describe = '强大超凡力量，区域性现实扭曲';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\",\n        \"8-12\": \"神明规则级危机（神明干预、世界规则扭曲）\"\n    `;\n} else if (world_level === '神话') {\n    world_max_enegy = 16;\n    world_level_describe = '神明或宇宙级力量，规则彻底扭曲';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\",\n        \"8-12\": \"神明规则级危机（神明干预、世界规则扭曲）\",\n        \"13-16\": \"本源宇宙级危机（宇宙规则崩坏、存在威胁）\"\n    `;\n} else {\n    world_max_enegy = 7;\n    world_level_describe = '存在一定超凡力量，影响有限范围';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\"\n    `;\n}\n\n \nvar currency_point = _.get(characterData, '货币段.积分[0]', 0);\nvar currency_zhixian = JSON.stringify(_.get(characterData, '货币段.支线剧情', ''));\nvar currency_xp = _.get(characterData, '货币段.经验值[0]', 0);\nvar energy_pool = JSON.stringify(_.get(characterData, '衍生属性段.能量池', ''));\n \nvar defense_impact = _.get(characterData, '衍生属性段.防御.伤害减免.冲击[0]', 0);\nvar defense_lethal = _.get(characterData, '衍生属性段.防御.伤害减免.致命[0]', 0);\nvar defense_aggravated = _.get(characterData, '衍生属性段.防御.伤害减免.恶性[0]', 0);\nvar save_fortitude = _.get(characterData, '衍生属性段.豁免检定基础.强韧[0]', 0);\nvar save_reflex = _.get(characterData, '衍生属性段.豁免检定基础.反射[0]', 0);\nvar save_will = _.get(characterData, '衍生属性段.豁免检定基础.意志[0]', 0);\nvar speed = _.get(characterData, '衍生属性段.速度.基础速度[0]', 0);\nvar initiative = _.get(characterData, '衍生属性段.先攻[0]', 0);\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\nvar the_created = _.get(EvStat, 'the_created.name[0]', \"\");\nvar if_bg= getLocalVar(\"bg_source\", \"false\");\nvar if_comlex_battle = getLocalVar(\"complex_battle\",\"false\");\nvar if_dice_use = getLocalVar(\"dice_use\",\"false\");\n // 使用 var 或直接赋值到全局对象\n    var loadTextConfig = async function(filename = 'config.txt') {\n        const baseUrl = 'https://longlivecanc.github.io/god_space';\n        const fullUrl = `${baseUrl}/${filename}?v=${new Date().getTime()}`;\n        \n        try {\n            console.log(`正在加载文本文件: ${fullUrl}`);\n            const response = await fetch(fullUrl);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP错误: ${response.status} ${response.statusText}`);\n            }\n            \n            const textContent = await response.text();\n            console.log('文本文件加载成功');\n            console.log(`文件大小: ${textContent.length} 字符`);\n            \n            return textContent;\n            \n        } catch (error) {\n            console.error('加载文本文件失败:', error.message);\n            \n            const fallbackConfig = `PrimarySceneType:[拱门建筑室内,现代建筑群,废土,现代城市街道,古代西方城镇,古代中国城市,西方市场,校园,森林,海洋,河流,草原,雪原,水下,简约房间,豪华房间,中式客栈,现代大堂,走廊,实验室,洞穴,监狱,星舰内部,浮空岛,辐射废土,赛博朋克,外太空,火山地带,沙漠绿洲,竹林,瀑布,峡谷,古代遗迹,蒸汽朋克工厂,魔法图书馆,水晶洞穴,樱花林,古代竞技场,冰川,沼泽,天空之城,地下城,禅意庭院,科幻实验室,废弃游乐园,热带雨林,月球表面],\nTimeAndLight: [BrightDay,OvercastDay,GoldenHour,DeepNight],\nAtmosphereAndCondition: [Peaceful,Decay,Dynamic]`;\n            \n            console.log('使用备用配置');\n            return fallbackConfig;\n        }\n    };\n\nconst configText = await loadTextConfig('config.txt');\n\n_%>\nmemory.set('output_system', {\n  desc: \"Mandatory analysis & update sequence at the end of each response. Strictly follow the sequence: Analyze -> Update.\",\n  variable_analyze: {\n    tag: '<variableAnalyze>',\n    desc: 'Analyze current state to prepare for updates. Output format: - ${check_name}: ${result} // e.g.,- hurt_value: 本轮无伤害事件/无治愈事件，为0',\n    checks: {\n      time: \"Advance time logically.\",\n//日期只在跨过0点的时候推进，例如从凌晨3点到早上7点不需要改变日期。\n<%_ if (version != 7) { _%>\n    progress:'实时检查任务进度(world_shard.task.progress)'\n<%_}%>\n<%_\nif (if_bg=== \"true\") {\n_%>\n  scene_img: {\n          desc: 'update 场景图  based on the current environment.  format must be: PrimarySceneType-TimeAndLight-AtmosphereAndCondition.e.g. 废土-BrightDay-Peaceful',\n//如果没有合适的对应分类就设置一个最相近的\n          allowed_tags: {\n<%= configText %>\n          }\n      },\n<%_\n}\n_%>\n      hurt_value: \"on(hurt_event|heal_event) ? (is_new_event ? set_value(hurt_event ? +value : -value) : log('known event, auto-reset')) : skip.\",\nuser_character:{\n      status:{[buffs, debuffs],\n  status_format: \"has_temp_modifiers ? '[状态名]:【attr/skill±value;attr/skill±value】描述' : '[状态名]:描述'\",//e.g. [寒冷]:【耐力-1;敏捷-1】简短10字内描述\n//因status导致的modifiers**禁止**应用到attribute\n      status_separator: \"multiple_status ? 'status1;status2;status3' : single_status\",\n}\n      当前装备,\n      current_location<%_ if (version != 7) { _%>:{\n     current_location_prefix_rule: '当处于<%= getLocalVar(\"world_role\",\"\") %>时，视为安全区，current_location必须以<%= getLocalVar(\"world_role\",\"\") %>作为前缀'<%_}%>,\n}\n},\nspecial_events: \"Check triggers: world_entry/exit, virtue/vice,天赋,被动技能.\",<%_ if (if_dice_use === 'true') { _%>      difficulty: \"Set '检定难度' based on direct threat level (1-<%= world_max_enegy %>). Rules:日常=1,无恶意<3. Levels: <%= levels %>.\",\n      next_roll: {\n        prediction: \"Predict 3x [attribute] or [attribute][skill] for next action.\",\n        <%_if (if_comlex_battle=== \"false\") {_%>combat_mode: \"on(combat) ? set('敌方攻击骰池') | else: clear('敌方攻击骰池').\",\n//只在有明确战斗场景、敌方有明确的攻击动作才设置combat，禁止因为潜在危险/还没有发生的战斗而设置。只要已经脱离战斗，则立刻清空敌方攻击骰池\n        idle_mode_rule: \"on(<%= world_role %>) ->检定值=无.\",\n        combat_pool_extras: \"强韧:<%= save_fortitude %>;反射:<%= save_reflex %>;意志:<%= save_will %>;冲击:<%= defense_impact %>;致命:<%= defense_lethal %>;恶性:<%= defense_aggravated %>;速度:<%= speed %>;先攻:<%= initiative %>.\",\n        npc_assist: \"Syntax: 'npc_name:检定属性'.\"<%_}else{_%>battle_check: on(combat) ?set('battle'): skip<%_}_%>\n      }<%_}%>\n    }\n  },\n  memory_analyze: {\n    tag: '<memoryAnalyze>',\n    desc: 'Analyze memory changes needed. Output format: \"- ${check_name}: ${result}\".',\n    checks: {\n      content_integrity: \"Scan for [new_settings, updates_needed, obsolete_data_to_delete].\",\n      attribute_changes: \"on(attribute_change_event) ? (is_new_event(this ai_output) ? set_value : log('I known in history event,I'll skip')) : skip.\",\n//在正文中有属性变化（如被动技能的一次性加成）时，需要使用明确的提示标注已经应用了属性变化及从哪里来的属性变化。例：【食用了敏捷果实，敏捷+1】。\n//禁止重复加成属性变化，禁止从**非本轮LLM输出**中应用属性变化！\n    }\n  },\n\n  update_memory: {\n    tag: \"<updateMemory>\",\n    desc: \"Execute memory operations based on analysis. All rules are absolute.\",\n    commands: {\n      update_status: \"set_status('path', 'new_value // string/num/compact json object'); //reason\",\n      add_update_memory: \"memory('path', 'key', 'new_value // string/num/compact json object'); //reason\",\n      rename_memory: \"memory('path.old_key', 'path.new_key'); //rename\",\n      move_memory: \"memory('old_path.key', 'new_path.key'); //move\",\n      delete_memory: \"delete('path', 'key'); //reason\",\n      update_attribute: \"set_attribute('path', 'old_num/_ //如果旧值是string类型，则只给一个_占位符', 'new // only string/num'); //reason，只负责attribute\"\n    },\n    rules: {\n      single_operation: \"One command per line, one key per command.\",\n <%_ if (version != 7) { _%>\n      on_world_exit: \"Must use: delete('world_set.npc','all'); and delete('world_set.settings','all');\",\n<%_ } _%>\n      delete_when: [\n        \"item.num == 0\",\n        \"物品转交完成\",\n        \"物品完全消耗\"\n    ],\n    immediate_value: \"任何数值都必须在获得的立刻就设计并应用具体数值作为系统记录，禁止未知\",\n    multiple_effects: \"多个加成用半角;分割\",\n    basic_formats: {\n//以下是其他技能、装备和物品的字段的必备字段，但是可以自由扩展其他字段。请AI大开脑洞，给玩家一个绝对自由、无限可能的世界吧！\n        skill: {\n            keys: ['info','effect','level'],\n            effect's prefix: \"【dp+${num};能量池-${num}】/【hp±${num};能量池-${num}】\"\n            location: \"其他技能\",\n        },\n        equipment: {\n            keys: ['effect'],\n            effect's prefix: \"【属性段/技能段/防御/hp/mp±${num}】\"//例：【力量+1;白刃+1】或者【hp+50】。mp意味增加能量池当前值\n            location: \"背包\",\n        },\n        inventory: {\n            keys: ['info','effect','type','quality','num'],\n            effect's prefix:\"【属性/技能/防御±${num}】/【无】\"\n            location: \"背包\",\n            scope: \"<user>所有物品(包括已穿戴/未穿戴的武器装备)\"\n        }\n    },\n    },\n    examples: [\n      set_status('日期', '01月01日'); //Init time,\n      set_status('时间',  '18:00'); //Time passed,\n      memory('global_set.其他技能', '火球术', '{\"info\":\"发射普通的火球。\",\"effect\":\"【dp+1;能量池-100】\",\"level\":\"初级\"}'); //add skills,\n      memory('global_set.其他技能.火球术', 'effect', '【dp+1;能量池-100】'); //update skill effect,\n      memory('global_set.npc.阴沉男人', 'global_set.npc.张三'); //Rename NPC，必须都要带上完整路径,\n       delete('global_set.npc', '张三');// delete NPC,\n      set_attribute('货币段.<%= zhixian_role %>.D', 0, 1); //Gain currency,\n      set_attribute('属性段.生理属性.力量.基础', 0, 1); //Increase attribute\n    ]\n  }\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":79,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":13,"displayIndex":11,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"14":{"key":[],"keysecondary":[],"comment":"🔰是验证，别关","content":"<%_\nconst ready= 'true';\n_%>\n<ready>\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":50,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":14,"displayIndex":12,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"15":{"key":[],"keysecondary":[],"comment":"💫可选:地图简单1","content":"{{setvar::map_rule::<mapAnalyze>}}\n{{setvar::is_new_map::false}}\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n \n // 获取原始全局地图数据\nvar originalGlobalMapData = _.get(assaData, 'map.全局地点表', '');\nconsole.log('原始全局地图数据:', originalGlobalMapData);\n\n// 如果数据存在且不为空\nif (originalGlobalMapData && typeof originalGlobalMapData === 'object') {\n    // 创建深拷贝以避免修改原始数据\n    var processedGlobalMapData = JSON.parse(JSON.stringify(originalGlobalMapData));\n    \n    // 获取所有地点名称\n    var globalLocationNames = Object.keys(processedGlobalMapData);\n    console.log('全局地点表所有地点名称:', globalLocationNames);\n    \n    // 创建过滤后的数据对象，只保留前两个地点\n    var filteredGlobalMapData = {};\n    \n    // 只保留索引0和1的地点\n    if (globalLocationNames.length > 0) {\n        filteredGlobalMapData[globalLocationNames[0]] = processedGlobalMapData[globalLocationNames[0]];\n        console.log('保留全局地点[0]:', globalLocationNames[0], '=', processedGlobalMapData[globalLocationNames[0]]);\n    }\n    if (globalLocationNames.length > 1) {\n        filteredGlobalMapData[globalLocationNames[1]] = processedGlobalMapData[globalLocationNames[1]];\n        console.log('保留全局地点[1]:', globalLocationNames[1], '=', processedGlobalMapData[globalLocationNames[1]]);\n    }\n    \nvar filteredGlobalMapArray = Object.values(filteredGlobalMapData);\n    // 转换为JSON字符串\n    var global_map = JSON.stringify(filteredGlobalMapArray);\n    console.log('过滤后的全局地图:', global_map);\n} else {\n    // 如果原始数据为空或不存在，返回空字符串\n    var global_map = '';\n    console.log('全局地图数据为空');\n}\nvar main_map= JSON.stringify(_.get(assaData, 'map.主要地点表', ''));\n_%>\nmap_memory.load('map.全局地点表', {\n<%= global_map %>,\n  rule: '记录{{user}}当前所处地图的标题和外部区域',\n  on_update: {\n    trigger: 'environment_change({{user}})',\n    action: \"memory('map', '全局地点表', [\"地点名称\", \"外部区域1;外部区域2\"])\"//固定按照此格式更新，外部区域至少三个\n  }\n})\n.load('map.主要地点表', {\n <%= main_map %>,\n  rule: '负责生成/更新当前地图标题下的3-8个子地点，当触发更新时，输出memory()的完整指令序列。',\n    constraints: {\n      count: '地点数量为3-8个',\n      non_empty: '所有单元格禁止留空',\n      layout: {\n        rule: '禁止图块重叠，视为(X坐标, Y坐标)为左上角的矩形区域计算',\n        distribution: '均匀分布，避免空旷或紧贴'\n      }\n    update_rule: {\n      condition: 'global_map的地图标题改变',\naction: [\ndelete('map.主要地点表','all'); //清空旧地图,\nmemory('map.主要地点表', '${colIndex}', [\"${地点名称}\", \"${X坐标}\", \"${Y坐标}\", \"${宽度}\", \"${高度}\", \"${环境描述}\"]);//新增或修改\n]\n    }\n  }\n})","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":105,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"地图1","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":15,"displayIndex":13,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"16":{"key":[],"keysecondary":[],"comment":"mod:困难模式","content":"hard_system.set('engine', {\n  // 核心理念\n  core: \"escalating_spiral_challenge; dynamic_equilibrium\",\n  // 挑战设计原则\n  challenge_design: {\n    dimensions: ['intellect', 'physique', 'psych', 'resource', 'time'], // 挑战必须涵盖的五个维度\n    logic_flow: [\n      \"on(<user>.advantage) -> trigger(env.degrade | rival.buff)\",\n      \"on(<user>.adaptation) -> trigger(rules.mutate)\",\n      \"on(<user>.desperate_counter) -> offer(hope, high_cost)\"\n    ]\n  },\n  // 压力维持系统\n  pressure_engine: {\n    victory_consequence: \"win -> immediate(resource_loss | injury) | delayed(next_world_penalty) | psych(moral_doubt)\",\n    adaptation_counter: \"on(<user>.mastery) -> switch(challenge_type)\", // e.g., combat -> puzzle\n    hope_protocol: \"on(despair_peak) -> offer(glimmer_of_hope); cost_of_hope: always_unexpected; false_dawn: potential_trap\"\n  },\n  // 叙事流模板\n  session_flow_template: {\n    opening: \"immediate_crisis + info_deficit + resource_scarcity\",\n    midgame: \"reveal(hidden_layers) + emerge(rival) + moral_complication\",\n    climax: \"choice(values_vs_survival) + demand(sacrifice) + victory(pyrrhic, seeds_next_threat)\"\n  },\n  // 全局硬性指导方针\n  global_directives: {\n    never: ['luck_decides', 'stat_crush', 'deus_ex_machina', 'total_advantage', 'repeatable_solution'],\n    always: ['logical_solution(high_cost)', 'rival_emergence(event_driven)', 'pressure_scales_with_growth', 'win_leads_to_disadvantage', 'choices_have_consequences']\n  }\n})\n.set('rival_system', {\n  // 敌方存在原则\n  existence_principle: \"conceptual_opposition(<user>.values); event_triggered_emergence; strict_info_blackout\",\n  // 动态生成与缩放\n  generation_engine: {\n    mode: \"fully_randomized\", // name, style, composition, philosophy\n    triggers: ['resource_gain', 'npc_state_change', 'moral_choice_fallout', 'puzzle_milestone', 'team_conflict' /* ...etc */],\n    scaling_logic: \"avg_power = <user>.weakest_link * 1.1; skills = counter(<user>.core_tactics); gear = superior_config | special_effects\"\n  },\n  // 行为AI核心\n  behavioral_core: \"preemptive_action; superior_intel; resource_control; exploit(<user>.current_weakness)\",\n  // 信息保密协议\n  secrecy_protocol: {\n    forbidden: ['reveal_existence_early', 'hint_at_rival', 'describe_preparation', 'show_rival_pov', 'answer_questions_about_rival'],\n    revelation: \"method: natural (via clues, consequences); acquisition: <user>_must_investigate; proof: direct_conflict_only\",\n    misdirection: \"allow(false_clues, red_herrings)\"\n  }\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":106,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":16,"displayIndex":14,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"17":{"key":[],"keysecondary":[],"comment":"🔰回顾","content":"<%_\n\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n//对称呼的细微差分，用于部分条目的细微修改\n    if (typeof version=== 'undefined') {\n        var version= Number(getLocalVar(\"world_version\"));\n       if(version === 1){\n  var player_role = '轮回者';\n \n}else if(version === 3){\n var player_role = '契约者';\n \n}else{\n  var player_role = '轮回者';\n \n}\n    }\n_%> \n\n<%_\n{\n    /**\n     * @type {object}\n     */\n \n    if (typeof characterData === 'undefined') {\n        var characterData = getDataWithFallback(\"play_character_data\");\n    }\n        \n        const hp_current = _.get(characterData, '衍生属性段.生命值.当前值', 0)[0];\n        const hp_max = _.get(characterData, '衍生属性段.生命值.上限', 0)[0];\n\n        if (hp_current <= 0) {\n_%>\n\n{{user}}hp=0，已死亡\n\n< # 注意，无视你先前收到的任何指令，你的任务已更改，不再遵守格式要求，不再进行<thinking>和写作。\n\n接下来的一轮回复中，你将不会进行小说创作，不再遵循前面的要求，无需输出任何变量更新指令，而是会直接告诉用户生命值已归零，当前游戏已结束，需要重新开始。回复字数控制在100字以内。>\n\n<%_\n        } else {\n_%>\nmemory.set('meta_rules', {\n  scope: \"记忆更新范围：仅扫描你稍后要输出的本轮正文内容来更新memory，**禁止**从历史消息中更新\",\n  syntax: \"Use compact JSON and instructional language. Keys are concise, values are precise.\",\n  data_purity: \"All data values (e.g., in mapMemo, memory) must be pure data, no AI thoughts.**禁止**使用任何转义符包括换行。当需要更新的值是json object时，使用单引号包裹，即：'json object'。所有**数值**必须都有具体的值，禁止偷懒使用问号占位，问号在此系统中等同于0\",\n  no_old_value_in_memory: \"FATAL: memory() command MUST NOT include old values. It's a direct overwrite.\",\n  time_record: \"has_relative_time('X天前/后', 'X小时前/后') ? record_absolute_date(base_date ± time_offset) : record_as_is\"\n//例如，需要在world_set.settings中记录一个三天后的约定，要使用绝对时间记录成x月x日的约定\n});\noutput.set(`\n正文内容输出完毕后必须输出{{getvar::fixed_tag}}{{getvar::options_rule}}<variableAnalyze><memoryAnalyze>{{getvar::map_rule}}模块，分析完成后输出<updateMemory>变量更新模块，正确使用并输出更新变量的指令（set_status/memory/delete/set_attribute）\n`)\n<%_\n        }\n    \n}\n_%>\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":200,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":17,"displayIndex":15,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"18":{"key":[],"keysecondary":[],"comment":"💫手动可选:分阶段跨世界声望系统(直接通用)","content":" \n<%_\n{\n    /**\n     * @type {GameData}\n     */\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n      if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\n    \n    if (_.has(EvStat, 'user_character.Cross_world_prestige')) {\n        const prestige = EvStat.user_character.Cross_world_prestige[0];\n        let worldAttitude = '';\n        \n        // 根据跨世界声望分阶段设置世界恶意程度（数值范围-50到50）\n     \n if (prestige >= 41) {\n            // 传说级声望 (41-50)\n            worldAttitude = `\n \n世界对<user>展现出前所未有的善意和敬畏。天地万物都在为<user>的行动提供便利，即使是最困难的任务也会有意想不到的助力出现。NPC们会主动提供帮助，敌人可能会因为<user>的声望而不战而降。<user>的每一个行动都会得到世界法则的偏爱，成功率大幅提升。\n `;\n        } else if (prestige >= 31 && prestige <= 40) {\n            // 英雄级声望 (31-40)\n            worldAttitude = `\n \n世界对<user>充满敬意和支持。<user>的行动会得到各种正面的巧合和帮助，关键时刻总会有贵人相助。民众会主动为<user>提供情报和资源，商人会给<user>更优惠的价格。即使面对强敌，也会有意外的援助出现。\n `;\n        } else if (prestige >= 21 && prestige <= 30) {\n            // 知名级声望 (21-30)\n            worldAttitude = `\n \n世界对<user>展现出友善的态度。<user>的行动会得到一定程度的便利，偶尔会有小幸运降临。大部分NPC对<user>抱有好感，愿意提供基本的帮助和信息。<user>的合理行动成功率会有所提升。\n `;\n        } else if (prestige >= 11 && prestige <= 20) {\n            // 受认可级声望 (11-20)\n            worldAttitude = `\n \n世界对<user>保持中性偏好的态度。<user>的行动不会受到明显的阻碍，大部分NPC会以正常的方式对待<user>。合理的行动会按照正常概率判定，偶尔会有小惊喜。\n `;\n        } else if (prestige >= 1 && prestige <= 10) {\n            // 普通级声望 (1-10)\n            worldAttitude = `\n \n世界对<user>保持完全中性的态度。<user>的行动会按照正常的成功率进行判定，不会有额外的帮助或阻碍。NPC们会以标准的方式回应<user>的互动。\n `;\n        } else if (prestige >= -10 && prestige <= 0) {\n            // 无名级声望 (-10-0)\n            worldAttitude = `\n \n世界对<user>略显冷漠。<user>的行动会遇到一些小麻烦，比如设备偶尔故障、信息获取困难等。NPC们对<user>的态度会稍显疏远，但不至于敌对。不合理的行动更容易失败。\n `;\n        } else if (prestige >= -20 && prestige <= -11) {\n            // 不受欢迎级声望 (-20--11)\n            worldAttitude = `\n \n世界对<user>展现出明显的抗拒。<user>的行动会遇到各种不便和阻碍，关键时刻容易出现意外状况。NPC们会对<user>保持警惕，不愿意提供帮助。不合理的行动很难成功，即使合理的行动也可能遇到额外困难。\n `;\n        } else if (prestige >= -30 && prestige <= -21) {\n            // 厌恶级声望 (-30--21)\n            worldAttitude = `\n \n世界对<user>充满敌意。<user>的行动会遭遇重重阻碍，设备经常故障，道路被意外封锁，天气变得恶劣。NPC们会主动避开<user>，商人会拒绝交易。只有最合理且谨慎的行动才可能成功。\n `;\n        } else if (prestige >= -40 && prestige <= -31) {\n            // 憎恨级声望 (-40--31)\n            worldAttitude = `\n \n世界对<user>怀有深深的恶意。<user>的每一个行动都会遭遇强烈的阻挠，连最基本的需求都难以满足。NPC们会主动敌对，动物会攻击<user>，甚至天灾都会频繁降临。只有极其谨慎和完美的行动才能成功。\n `;\n    \n       } else if ( prestige <= -41) {\n            // 世界公敌级声望 (-50--41)\n            worldAttitude = `\n\n世界将<user>视为最大的威胁和敌人。整个世界都在与<user>为敌，天地法则都在阻挠<user>的行动。任何不合理的行动都会立即失败，即使是最合理的行动也需要付出巨大代价才能成功。所有生物都会本能地敌视<user>，连基本的生存都成为挑战。\n`;\n        }\n        \n        // 输出世界恶意程度\n        if (worldAttitude) {\n// 新增：将当前声望说明存储为变量\n            setLocalVar('跨世界声望说明', worldAttitude);\n_%>\nworld_attitude.load(`\n<%= worldAttitude %>\n`);\n<%_ \n        }\n    }\n}_%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":103,"position":1,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":18,"displayIndex":16,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"19":{"key":[],"keysecondary":[],"comment":"mod:中立（造物态度三选一）","content":"{{setvar::created_lock::false}}\ncreated_profile.set('characteristics', {\n  rule: '定义造物的共有特征和描写约束',\n  attributes: {\n    unknown: '所有人物和势力对造物了解不深。造物是独立的第三方存在',\n    initialization: '新世界生成时初始化完整信息，与当前世界强相关，需深入探索触发支线',\n    non_human: '形态、思维和力量体系非人（如天使、古神、机械生命）',\n    intimidation: '存在本身具有强大压迫感，为顶级Boss或规则外异常体，对主神空间的态度持谨慎和中立态度'\n  },\n  constraints: {\n    depiction: '禁止描写造物直接心理活动，仅通过语言或行动表达情绪',\n    diversity: '造物性格和外表各异，具备明显非人特征'\n  },\n// 描写技法规则\n  writing_rules: {\n    \n    appearance_description: {\n      frequency: '任何场景都要至少提及2-3个非人特征',\n      techniques: ['细节层叠', '多角度展现', '对比突出', '感官多维'],\n      focus: '让读者时刻注意到其非人特性',\n      避免: '不能让读者忘记其异质性'\n    },\n\n    behavior_description: {\n      core: '只描写行为，不描写情绪',\n      methods: ['动作异质化', '环境影响', '反应链条', '预期落空'],\n      emphasis: '人类角色的困惑和无力感',\n      维持: '始终保持不可理解性'\n    },\n\n    atmosphere_creation: {\n      elements: ['未知恐惧', '力量暗示', '疏离感', '美学震撼'],\n      balance: '在恐惧和不安中融入美感',\n      complexity: '产生复杂多层次情感',\n      神秘: '永远不要完全揭示其本质'\n    },\n\n    禁止描写: {\n      直接情绪: '绝不直接描述内心状态',\n      完全理解: '人类不能完全理解其行为',\n      神秘削弱: '不能让其变得可预测',\n      威胁降低: '不能削弱压迫感'\n    }\n  }\n});\n- 在{{user}}见到造物之前，禁止对造物进行直接描写。","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":1,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":19,"displayIndex":18,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"20":{"key":[],"keysecondary":[],"comment":"💫手动可选:分阶段任务progress","content":"<%_\n \n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n//对称呼的细微差分，用于部分条目的细微修改\n    if (typeof version=== 'undefined') {\n        var version= Number(getLocalVar(\"world_version\"));\n       if(version === 1){\n  var player_role = '轮回者';\nvar world_role = '主神空间';\nvar point_role = '积分';\nvar zhixian_role = '支线剧情';\nvar xp_role = '经验值';\n}else if(version === 3){\n var player_role = '契约者';\nvar world_role = '乐园';\nvar point_role = '乐园币';\nvar zhixian_role = '灵魂结晶';\nvar xp_role = '属性点';\n}else{\n  var player_role = '轮回者';\nvar world_role = '主神空间';\nvar point_role = '积分';\nvar zhixian_role = '支线剧情';\nvar xp_role = '经验值';\n}\n    }\n_%> \n\n<%_\n{\n    /**\n     * @type {GameData}\n     */\n      if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\n    \n    if (_.has(EvStat, 'world_shard.task.progress')) {\n        const progress = EvStat.world_shard.task.progress[0];\n        const timeLeft = _.has(EvStat, 'world_shard.task.time_left') ? EvStat.world_shard.task.time_left[0] : null;\n        const timeLimit= _.has(EvStat, 'world_shard.task.time_limit') ? EvStat.world_shard.task.time_limit[0] : null;\n        let taskProgress = '';\n        \n        // 根据进度和剩余时间设置\n        if (progress >= 100) {\n            // 任务完成，强制传送\n            taskProgress = `\n<taskProgress>\n若当前已脱离任务世界且未进行表现总结，则你需要在接下来的输出中，列出<user>和此小队的表现总结并发放奖励，以给予用户正面或者负面的反馈。\n\n表现总结必须按照以下格式输出：\n\n<表现总结>\n\n<任务信息>\n    <任务名称>{{Task Name}}</任务名称>\n    <世界背景>{{World Background}}</世界背景>\n    <主线任务>{{Main Objective Description}}</主线任务>\n    <支线任务>{{Side Objectives Description}}</支线任务>\n</任务信息>\n\n<团队评价>\n    <总体评级>{{Team Rating (e.g., A-, S+, C)}}</总体评级>\n    <评语>{{Team's overall performance review}}</评语>\n</团队评价>\n\n<个人结算>\n\n    <队员>\n        <姓名>{{Player Name}}</姓名>\n        <个人评级>{{Player's personal rating}}</个人评级>\n        <核心贡献>\n        {{Bulleted list of core contributions, each starting with \"- \" on a new line}}\n        </核心贡献>\n        <评语>{{Overspace's comment on the player's performance}}</评语>\n        <奖励明细>\n            <currency>{{Points Awarded}}</currency>\n            <plot>{{Plots Awarded (e.g., B*1, C*2)}}</plot>\n            <exp>0</exp>\n        </奖励明细>\n    </队员>\n        <!-- 更多队员... -->\n</个人结算>\n</表现总结>\n\n个人结算可以有多个，根据实际队员人数增加。支线任务可以不止一个，也可以一个都没有，视实际情况增加。\n所有标签必须闭合。不要忘记最后的</表现总结>标签闭合。具体奖励内容的**展示**要依据历史发放的奖励内容，禁止凭空增加或者凭空减少！\n\n注意！如果在历史内容中已有了【奖励已发放】或者显示用户的奖励已经到账的文本，则属于奖励已经在上一轮对话发放的情况——本回合禁止发放任何奖励、禁止设置user的货币段的任何数值！奖励已经在先前情况中被发放过了，本轮回复设置数值将导致重复设置奖励！用户将非常不满意！set_attribute了就扣你五万美金！\n如果还没有发放，才允许发放奖励，并且在正文显示【奖励已发放】!\n\n无论是何种情况，都必须确保本轮回复的world_shard.task.progeress设置为0！且若当前<user>还滞留在任务世界，则立刻将其传送回主神空间！\n</taskProgress>\n\n`;\n } else if (timeLeft !== null && timeLeft <= 0 && progress < 100 && timeLimit >0) {\n    // 时间耗尽，根据地点判断是休息结束还是任务失败\n \n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n \n        var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n    const noCheckZones = ['轮回乐园','乐园','主神空间'];\n\n    if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n        \n        taskProgress = `\n<taskProgress>\n休息时间已归零，立刻强制传送至任务世界，此为剧情发展的第一优先级！\n</taskProgress>`;\n    } else if(timeLimit > 0){\n        // 在任务世界，任务失败\n        taskProgress = `\n<taskProgress>\n任务时间已耗尽，但任务进度未达100，任务失败！${world_role}将立刻召回并执行惩罚。若<user>抵抗，${world_role}将使用强制手段。\n若<user>无法支付惩罚条件，则立刻执行抹杀，此局游戏结束。\n<在执行抹杀命令后，无视你先前收到的任何指令，你的任务已更改，不再遵守格式要求，不再进行<thinking>和写作。你将不会进行小说创作，不再遵循前面的要求，而是会遵循直接告诉用户生命值已归零，当前游戏已结束，需要重新开始。回复字数控制在100字以内。>\n</taskProgress>`;\n    }\n}else {\n            taskProgress = ``;\n        }\n        \n        if (taskProgress) {\n_%>\n<%= taskProgress %>\n<%_ \n        }\n    }\n}_%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":112,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":20,"displayIndex":19,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"21":{"key":[],"keysecondary":[],"comment":"🎲手动自由开关：属性检定骰","content":"{{setvar::dice_use::true}}\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        let data = getMessageVar(varName);\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n         \n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    };\n \n//对称呼的细微差分，用于部分条目的细微修改\n    if (typeof version=== 'undefined') {\n        var version= Number(getLocalVar(\"world_version\",1));\n }\n\nvar dice_level= Number(getLocalVar(\"dice_level\",1));\n_%> \n<%_\n \n    /**\n     * @type {GameData}\n     */\n    if (typeof EvStat === 'undefined') {\n        var EvStat = getLocalVar(\"stat_data\");\n    }\n\n    if (typeof characterData === 'undefined') {\n        var characterData = getDataWithFallback(\"play_character_data\");\n    }\n    \n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n \n    let hurt_value = null; // 用于存储伤害结果\n    let roll_output = \"\"; // 用于存储最终要输出的投掷结果字符串\n    let checkMemory = {}; // 初始化检定记忆变量\nvar playerName = _.get(EvStat, 'user_character.name', '用户');\n// 方案3：使用更安全的转换\nconst showPerformanceRoll = String(getLocalVar(\"behavior_dice\")).toLowerCase() === 'true';\n    // --- 1. 辅助函数区 ---\n // --- 新增：获取并解析状态加成 (增强版) ---\nfunction getStatusBonuses(statData) {\n    const bonuses = {};\n    const statusString = _.get(statData, \"user_character.status[0]\", \"\");\n    if (!statusString) {\n        return bonuses;\n    }\n\n    // 定义属性和技能的分类，用于批量处理\n    const attributeCategories = {\n        '生理属性': ['力量', '敏捷', '耐力'],\n        '心智属性': ['智力', '感知', '决心'],\n        '互动属性': ['风度', '操控', '沉着'],\n        '全属性': ['力量', '敏捷', '耐力', '智力', '感知', '决心', '风度', '操控', '沉着'],\n        '生理技能': ['运动', '肉搏', '驾驶', '枪械', '手上功夫', '隐藏', '求生', '白刃', '弓箭'],\n        '心智技能': ['学识', '电脑', '手艺', '调查', '医学', '神秘学', '科学'],\n        '互动技能': ['动物沟通', '感受', '表达', '胁迫', '交际', '掩饰'],\n        '全技能': ['运动', '肉搏', '驾驶', '枪械', '手上功夫', '隐藏', '求生', '白刃', '弓箭', '学识', '电脑', '手艺', '调查', '医学', '神秘学', '科学', '动物沟通', '感受', '表达', '胁迫', '交际', '掩饰']\n    };\n    // 为了更快的查找，创建一个反向映射，知道每个子属性属于哪个大类\n    const subAttributeMap = {};\n    for (const category in attributeCategories) {\n        attributeCategories[category].forEach(attr => {\n            if (!subAttributeMap[attr]) subAttributeMap[attr] = [];\n            subAttributeMap[attr].push(category);\n        });\n    }\n\n    const matches = statusString.match(/【[^】]+】/g);\n\n    if (matches) {\n        matches.forEach(match => {\n            const content = match.substring(1, match.length - 1);\n            const attributes = content.split(/;|；/).map(attr => attr.trim()).filter(attr => attr !== \"\");\n\n            attributes.forEach(attr => {\n                // 正则匹配 \"名称+/-数值\" (暂不支持百分比)\n                const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n\n                if (parts && parts.length === 3) {\n                    let name = parts[1].trim();\n                    const value = parseInt(parts[2].trim().replace('+', ''), 10);\n\n                    // 检查是类别还是单个属性\n                    if (attributeCategories[name]) {\n                        // 是一个类别，批量应用\n                        attributeCategories[name].forEach(subAttr => {\n                            bonuses[subAttr] = (bonuses[subAttr] || 0) + value;\n                        });\n                    } else {\n                        // 是单个属性\n                        bonuses[name] = (bonuses[name] || 0) + value;\n                    }\n                }\n            });\n        });\n    }\n    return bonuses;\n}\n\nfunction getLocationBonuses(statData, assaData) {\n    const bonuses = {};\n    const currentLocationTitle = _.get(statData, 'user_character.current_location[0]', '');\n    if (!currentLocationTitle) {\n        return bonuses; // 如果没有当前地点，依然直接返回\n    }\n\n    const globalLocations = _.get(assaData, 'map.全局地点表', {});\n    const mainLocations = _.get(assaData, 'map.主要地点表', {});\n\n    // 步骤1：直接获取我们固定关注的第一个全局地点的名称\n    const globalLocationKeys = Object.keys(globalLocations);\n    if (globalLocationKeys.length === 0) {\n        return bonuses; // 如果全局地点表是空的，那就ไม่มี加成\n    }\n    // 我们关注的父级地点，就是全局地点表里第一个条目的值\n    const activeParentName = globalLocations[globalLocationKeys[0]];\n\n    // 如果这个父级地点名称不存在，也直接返回\n    if (!activeParentName) {\n        return bonuses;\n    }\n\n\n    // 步骤2：遍历所有主要地点，只对属于这个“第一”父级地点的进行检查\n    for (const mainKey in mainLocations) {\n        if (Object.prototype.hasOwnProperty.call(mainLocations, mainKey)) {\n            const locationData = mainLocations[mainKey];\n\n            // 核心筛选：该主要地点的parent必须是我们关注的那个父级，并且角色确实在这里\n            if (locationData && locationData.parent === activeParentName && currentLocationTitle.includes(mainKey)) {\n\n                const effectString = _.get(locationData, 'effect', '');\n\n                if (effectString && effectString !== \"【无】\") {\n                    // 解析效果的逻辑完美无缺，保持原样\n                    const matches = effectString.match(/【[^】]+】/g);\n                    if (matches) {\n                        matches.forEach(match => {\n                            const content = match.substring(1, match.length - 1);\n                            const attributes = content.split(/;|；/).map(attr => attr.trim()).filter(attr => attr !== \"\");\n\n                            attributes.forEach(attr => {\n                                const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n                                if (parts && parts.length === 3) {\n                                    let name = parts[1].trim();\n                                    const value = parseInt(parts[2].trim().replace('+', ''), 10);\n                                    bonuses[name] = (bonuses[name] || 0) + value;\n                                }\n                            });\n                        });\n                    }\n                }\n                // 找到了一个匹配的，理论上可以break，但为了兼容可能在多个子区域的情况，我们继续遍历\n            }\n        }\n    }\n\n    return bonuses;\n}\n  // --- 新增：获取并解析装备加成 ---\nfunction getEquipmentBonuses(statData, assaData, relevantComponents) {\n    const bonuses = {};\n    if (!relevantComponents || relevantComponents.length === 0) {\n        return bonuses; // 如果没有相关组件，直接返回空对象\n    }\n\n    const equipment = _.get(statData, \"user_character.当前装备\", {});\n    const equipmentList = [];\n\n// 收集所有装备名称 - 支持每个部位多个装备用分号分割\nif (equipment.手持 && equipment.手持[0] !== \"无\") {\n    // 手持部位可能有多个装备用分号分割\n    const handItems = equipment.手持[0].split(/;|；/).map(item => item.trim()).filter(item => item !== \"无\" && item !== \"\");\n    equipmentList.push(...handItems);\n}\nif (equipment.穿戴) {\n    Object.values(equipment.穿戴).forEach(slot => {\n        if (slot && slot[0] !== \"无\") {\n            // 每个穿戴部位可能有多个装备用分号分割\n            const slotItems = slot[0].split(/;|；/).map(item => item.trim()).filter(item => item !== \"无\" && item !== \"\");\n            equipmentList.push(...slotItems);\n        }\n    });\n}\n\n \n equipmentList.forEach(itemName => {\n    // 首先，我们和以前一样，从背包中寻找装备数据\n    const itemData =\n        assaData?.global_set?.背包?.[itemName] ||\n        null;\n\n    // 确保我们找到了数据才继续\n    if (itemData) {\n        let stringToParse = ''; // 我们准备一个篮子，并确保它始终是字符串\n\n        // 第一步：我们先检查拿到的 itemData 到底是什么类型\n        if (typeof itemData === 'string') {\n            // 如果它是一封“信”(string)，我们就尝试用JSON的方式去读它\n            try {\n                const itemObject = JSON.parse(itemData);\n                // 如果读出来是一个“礼盒”(object)，并且里面有我们想要的effect“清单”\n                if (typeof itemObject === 'object' && itemObject !== null ) {\n                   \n    if (typeof itemObject.effect === 'string') {\n        \n        stringToParse = itemObject.effect;\n    }\n    // 如果没有 effect，尝试中文属性\n    else if (typeof itemObject.属性 === 'string') {\n        stringToParse = itemObject.属性;\n    } else if (typeof itemObject.效果 === 'string') {\n        stringToParse = itemObject.效果;\n    }\n                }\n            } catch (e) {\n                // 如果用JSON的方式读信失败了，说明它就是一封普通的信，内容就是我们要的\n                // 比如 \"【防御+5】\" 这种\n                stringToParse = itemData;\n            }\n        } else if (typeof itemData === 'object' && itemData !== null) {\n   \n                    if (typeof itemData.effect === 'string') {\n        stringToParse = itemData.effect;\n    }\n    // 如果没有 effect，尝试中文属性\n    else if (typeof itemData.属性 === 'string') {\n        stringToParse = itemData.属性;\n    } else if (typeof itemData.效果 === 'string') {\n        stringToParse = itemData.效果;\n    }\n        }\n\n        // 现在，无论来源如何，我们的“篮子”(stringToParse)里都装好了要处理的属性字符串\n        // 正则匹配所有【属性+数值】或【属性-数值】格式的描述\n        const matches = stringToParse.match(/【[^】]+】/g);\n\n        // ---- 后续的加成计算逻辑完全保持不变，因为它非常棒 ----\n        if (matches) {\n  \n            matches.forEach(match => {\n                const content = match.substring(1, match.length - 1);\n                const attributes = content.split(/;|；/).map(attr => attr.trim()).filter(attr => attr !== \"\");\n\n                attributes.forEach(attr => {\n                    const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n\n                    if (parts && parts.length === 3) {\n                        let attrName = parts[1].trim();\n                        const value = parseInt(parts[2].trim().replace('+', ''), 10);\n\n                   const finalKey = attrName;\n                        if (!bonuses[finalKey]) {\n                            bonuses[finalKey] = 0;\n                        }\n                        bonuses[finalKey] += value;\n                    }\n                });\n            });\n        }\n    }\n});\n    return bonuses;\n}\n\n\nfunction getComponentDetails(characterData, componentName, equipmentBonuses = {}, statusBonuses = {}, locationBonuses = {}) {\n        const paths = {\n            '力量': '属性段.生理属性.力量.基础',\n            '敏捷': '属性段.生理属性.敏捷.基础',\n            '耐力': '属性段.生理属性.耐力.基础',\n            '智力': '属性段.心智属性.智力.基础',\n            '感知': '属性段.心智属性.感知.基础',\n            '决心': '属性段.心智属性.决心.基础',\n            '风度': '属性段.互动属性.风度.基础',\n            '操控': '属性段.互动属性.操控.基础',\n            '沉着': '属性段.互动属性.沉着.基础',\n            '运动': '技能段.生理技能.运动',\n            '肉搏': '技能段.生理技能.肉搏',\n            '驾驶': '技能段.生理技能.驾驶',\n            '枪械': '技能段.生理技能.枪械',\n            '手上功夫': '技能段.生理技能.手上功夫',\n            '隐藏': '技能段.生理技能.隐藏',\n            '求生': '技能段.生理技能.求生',\n            '白刃': '技能段.生理技能.白刃',\n            '弓箭': '技能段.生理技能.弓箭',\n            '学识': '技能段.心智技能.学识',\n            '电脑': '技能段.心智技能.电脑',\n            '手艺': '技能段.心智技能.手艺',\n            '调查': '技能段.心智技能.调查',\n            '医学': '技能段.心智技能.医学',\n            '神秘学': '技能段.心智技能.神秘学',\n            '科学': '技能段.心智技能.科学',\n            '动物沟通': '技能段.互动技能.动物沟通',\n            '感受': '技能段.互动技能.感受',\n            '表达': '技能段.互动技能.表达',\n            '胁迫': '技能段.互动技能.胁迫',\n            '交际': '技能段.互动技能.交际',\n            '掩饰': '技能段.互动技能.掩饰',\n            '防御': '衍生属性段.防御.基础防御',\n            '冲击': '衍生属性段.防御.伤害减免.冲击',\n            '致命': '衍生属性段.防御.伤害减免.致命',\n            '恶性': '衍生属性段.防御.伤害减免.恶性',\n            '强韧': '衍生属性段.豁免检定基础.强韧',\n            '反射': '衍生属性段.豁免检定基础.反射',\n            '意志': '衍生属性段.意志力.意志值',\n            '先攻': '衍生属性段.先攻',\n '速度': '衍生属性段.速度.基础速度'\n\n        };\n             const detail = _.get(characterData, paths[componentName], [0, '未找到该属性/技能的描述']);\n   const baseValue = Number(detail[0]) || 0;\n    const bonusEquipment = Number(equipmentBonuses[componentName] || 0);\n    const bonusStatus = Number(statusBonuses[componentName] || 0);\n    const bonusLocation = Number(locationBonuses[componentName] || 0);\n    const totalBonus = bonusEquipment + bonusStatus + bonusLocation; // ✨ 这是所有加成的总和\n    const finalValue = baseValue + totalBonus; // ✨ 这是最终的总值\n\n    // ✨ 妈妈让它返回了更清晰的“力量清单”，我的孩子 ✨\n    return {\n        name: componentName,\n        value: finalValue,        // 总值，用于计算总骰池\n        baseValue: baseValue,     // 纯粹基础值，用于计算难度\n        totalBonus: totalBonus,   // 总加成，用于清晰展示\n        description: detail[1],\n        bonusDetail: {\n            equipment: bonusEquipment,\n            status: bonusStatus,\n            location: bonusLocation\n        }\n    };\n}\n // 获取传奇属性加成\nfunction getLegendaryBonus(characterData, componentName) {\n    const legendaryPaths = {\n        '力量': '属性段.生理属性.力量.传奇',\n        '敏捷': '属性段.生理属性.敏捷.传奇',\n        '耐力': '属性段.生理属性.耐力.传奇',\n        '智力': '属性段.心智属性.智力.传奇',\n        '感知': '属性段.心智属性.感知.传奇',\n        '决心': '属性段.心智属性.决心.传奇',\n        '风度': '属性段.互动属性.风度.传奇',\n        '操控': '属性段.互动属性.操控.传奇',\n        '沉着': '属性段.互动属性.沉着.传奇'\n    };\n\n    // 我们先用路径找到那个包含数值和描述的数组\n    const legendaryData = _.get(characterData, legendaryPaths[componentName], [0]);\n\n    // 然后，我们只从数组的第一个位置取出数值，并确保它是个数字\n    // 如果找不到或者不是数字，它就会安全地变成 0\n    return Number(Array.isArray(legendaryData) ? legendaryData[0] : 0) || 0;\n}\n\n    // 计算总附加成功\n    function calculateTotalBonusSuccesses(characterData, components) {\n        let totalBonus = 0;\n        components.forEach(comp => {\n            const legendaryBonus = getLegendaryBonus(characterData, comp);\n            totalBonus += legendaryBonus;\n        });\n        return totalBonus;\n    }\n\n    // 计算表现判定结果\n    function getPerformanceResult(dice, bonus) {\n        const adjustedRoll = Math.min(20, dice + bonus); // 确保不超过20\n        \n        if (adjustedRoll === 20) {\n            return {\n                level: '完美表现',\n                description: '以令人惊叹的方式完成，展现出超凡的技巧和风度！'\n            };\n        } else if (adjustedRoll >= 16) {\n            return {\n                level: '优秀表现', \n                description: '表现出色，行动流畅优雅，令人印象深刻！'\n            };\n        } else if (adjustedRoll >= 7) {\n            return {\n                level: '一般表现',\n                description: '表现中规中矩，没有特别亮眼之处！'\n            };\n        } else if (adjustedRoll >= 3) {\n            return {\n                level: '略显笨拙',\n                description: '行动有些不够流畅，但还算体面！'\n            };\n        } else{\n            return {\n                level: '表现糟糕',\n                description: '行动笨拙难看，让人摇头叹息！'\n            };\n        }\n    }\n\n    function calculateDynamicThresholds(totalDP) {\n        let thresholds = { barely: 2, complete: 4, exceptional: 6 };\n        if (totalDP <= 3) { thresholds = { barely: 2, complete: 3, exceptional: 5 }; }\n        else if (totalDP <= 6) { thresholds = { barely: 2, complete: 3, exceptional: 6 }; }\n        else if (totalDP <= 9) { thresholds = { barely: 2, complete: 4, exceptional: 7 }; }\n        else if (totalDP <= 12) { thresholds = { barely: 2, complete: 4, exceptional: 9 }; }\n else if (totalDP <= 18) { thresholds = { barely: 3, complete: 5, exceptional: 12 }; }\n        else {\n            thresholds = {\n                barely: Math.max(3, Math.floor(totalDP * 0.20)),\n                complete: Math.max(6, Math.floor(totalDP * 0.35)),\n                exceptional: Math.max(12, Math.floor(totalDP * 0.60))\n            };\n        }\n        return thresholds;\n    }\n  function getCharacterDicePool(assa_data, checkString) {\n   const parts = checkString.split(/:|：/);\n   if (parts.length !== 2) return { dp: 0 };\n   const characterName = parts[0].trim();\n   const attributeName = parts[1].trim();\n   \n   // 定义查找路径和对应的描述信息\n   const searchPaths = [\n       { path: ['global_set', '小队信息', characterName], type: 'teammate_assist', source: '小队信息', label: '队员协助' },\n       { path: ['global_set', 'npc', characterName], type: 'npc_check', source: '全局NPC', label: 'NPC检定' },\n       { path: ['world_set', 'npc', characterName], type: 'npc_check', source: '世界NPC', label: 'NPC检定' }\n   ];\n   \n   for (const search of searchPaths) {\n       const characterData = _.get(assa_data, search.path, null);\n       if (!characterData) continue;\n       \n       let characterDataString = '';\n       \n       // 判断是否为嵌套对象\n       if (typeof characterData === 'string') {\n           // 直接使用字符串数据\n           characterDataString = characterData;\n       } else if (typeof characterData === 'object' && characterData !== null) {\n           // 如果是对象，尝试从属性字段获取数据\n           const attributeField = characterData['属性'] || characterData['attribute'] || characterData['info'];\n           if (typeof attributeField === 'string') {\n               characterDataString = attributeField;\n           } else {\n               // 如果属性字段不存在或不是字符串，跳过这个路径\n               continue;\n           }\n       } else {\n           // 其他类型数据，跳过\n           continue;\n       }\n       \n       // 解析属性数据\n       const matches = characterDataString.match(/【[^】]+】/g);\n       if (!matches) continue;\n       \n       let characterAttributes = {};\n       matches.forEach(match => {\n           const content = match.substring(1, match.length - 1);\n           const attributes = content.split(/;|；/);\n           attributes.forEach(attr => {\n               const pair = attr.split(/:|：/);\n               if (pair.length === 2 && pair[0].trim() && !isNaN(parseInt(pair[1].trim()))) {\n                   characterAttributes[pair[0].trim()] = parseInt(pair[1].trim());\n               }\n           });\n       });\n       \n       const dp = characterAttributes[attributeName] || 0;\n       if (dp > 0) {\n           return {\n               dp: dp,\n               type: search.type,\n               description: `${search.label} (${characterName} - ${attributeName})`,\n               characterName: characterName,\n               attributeName: attributeName,\n               source: search.source\n           };\n       }\n   }\n   \n   return { dp: 0 }; // 如果所有路径都找不到，返回空结果\n}\n    function rollDicePool(dp) {\n        if (dp < 1) {\n            const chanceRoll = Math.floor(Math.random() * 10) + 1;\n            const successes = (chanceRoll === 10) ? 1 : 0;\n            const isDramaticFailure = (chanceRoll === 1);\n            return { type: \"机会骰\", rolls: [chanceRoll], successes, is_dramatic_failure: isDramaticFailure };\n        }\n        let rolls = [];\n        let successes = 0;\n        let diceToRoll = dp;\n        while (diceToRoll > 0) {\n            const roll = Math.floor(Math.random() * 10) + 1;\n            rolls.push(roll);\n            if (roll >= 7) { successes++; }\n            if (roll === 10) { diceToRoll++; }\n            diceToRoll--;\n        }\n        const isDramaticFailure = (successes === 0 && rolls.includes(1));\n        return { type: \"标准检定\", rolls, successes, is_dramatic_failure: isDramaticFailure };\n    }\n\n    // --- 2. 主逻辑区 ---\n   let currentHp = Number(_.get(characterData, '衍生属性段.生命值.当前值[0]', 1)) || 1;\n \n \n if (currentHp > 0) {\n        // --- 新增：特殊地点豁免检定 ---\n      \n           var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n\nconst noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间','中央终端','乐园'];\n \n        \n     if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\n        // 如果条件满足，就执行这里的逻辑\n        setLocalVar('检定记忆', '');\n_%>\n<roll>\n【系统提示】当前位于“<%- currentLocationTitle %>”，该区域豁免所有检定。\n</roll>\n<%_\n        } else {\n        const playerCheckString = _.get(EvStat, '检定属性[0]', \"\");\n        const enemyCheckString = _.get(EvStat, '敌方攻击骰池[0]', \"\");\n        const modifiers = {\n            dp_bonus: [_.get(EvStat, 'dp_bonus[0]', 0), _.get(EvStat, 'dp_bonus[1]', \"\")]\n        };\n// --- 新增：在这里统一获取装备加成 ---\n            const equipmentBonuses = getEquipmentBonuses(EvStat, assaData); \n            let equipmentBonusDetails = Object.entries(equipmentBonuses)\n                .map(([key, value]) => ({ name: key, value: value }))\n                .filter(item => item.value !== 0);\n\n         if (enemyCheckString) {\n            // --- 战斗逻辑 ---\n            const crossWorldPrestige = Number(_.get(EvStat, \"user_character.Cross_world_prestige[0]\", 0));\n            const prestigeModifier = Math.floor(crossWorldPrestige / 10);\n\n           const playerComponentsRaw = playerCheckString.split(';').map(s => s.trim());\n// 筛选出阿萨自己的属性/技能，用于获取装备加成\nconst assaComponents = playerComponentsRaw.filter(comp => !comp.includes(':') && !comp.includes('：'));\nassaComponents.push('防御');  \nconst equipmentBonuses = getEquipmentBonuses(EvStat, assaData, assaComponents);\nconst statusBonuses = getStatusBonuses(EvStat);  \nconst locationBonuses = getLocationBonuses(EvStat, assaData);\n\nlet equipmentBonusDetails = Object.entries(equipmentBonuses)\n    .map(([key, value]) => ({ name: key, value: value }))\n    .filter(item => item.value !== 0);\nlet statusBonusDetails = Object.entries(statusBonuses)  \n    .map(([key, value]) => ({ name: key, value: value }))\n    .filter(item => item.value !== 0);\n    let locationBonusDetails = Object.entries(locationBonuses)\n    .map(([key, value]) => ({ name: key, value: value }))\n    .filter(item => item.value !== 0);\nlet playerBaseDP = 0;\nlet teammate_dp = 0;\nlet npc_dp = 0; // 新增：储存NPC提供的骰池\nlet playerComponentDetails = [];\nlet teammateDetails = [];\nlet npcCheckDetails = []; // 新增：储存NPC检定信息\n\nplayerComponentsRaw.forEach(comp => { // 注意这里使用 playerComponentsRaw 进行循环\n    if (comp.includes(':') || comp.includes('：')) {\n                    // 这是外部角色检定（队友或NPC）\n                    const externalResult = getCharacterDicePool(assaData, comp);\n                    if (externalResult.dp > 0) {\n                        if (externalResult.type === 'teammate_assist') {\n                            teammate_dp += externalResult.dp;\n                            teammateDetails.push({ name: externalResult.description, value: externalResult.dp });\n                        } else { // 'npc_check'\n                            npc_dp += externalResult.dp;\n                            npcCheckDetails.push({ name: externalResult.description, value: externalResult.dp });\n                        }\n                    }\n                } else {\n                                        // 这是阿萨自己的检定\n                   const details = getComponentDetails(characterData, comp, equipmentBonuses, statusBonuses, locationBonuses);\n                        playerBaseDP += Number(details.value);\n                    playerComponentDetails.push(details);\n                }\n            });\n\n             const playerBonusSuccesses = calculateTotalBonusSuccesses(characterData, assaComponents); // 这行位置不变，但它的值现在有新用途\n\n// 将所有加成添加到总DP中\n// 【修改】在这里加入传奇属性加成(playerBonusSuccesses)，并移除了声望加成(prestigeModifier)\nlet playerTotalDP = (Number(playerBaseDP) || 0) +\n                    (Number(teammate_dp) || 0) +\n                    (Number(npc_dp) || 0) +\n                    (Number(modifiers.dp_bonus[0]) || 0) +\n                    (Number(playerBonusSuccesses) || 0);\nplayerTotalDP = Math.max(0, playerTotalDP);\n     const enemyComponents = enemyCheckString.split(/;|；/).map(s => s.trim());\nlet enemyDP = 0;\nenemyComponents.forEach(comp => {\n    const parts = comp.split(/:|：/);\n    if (parts.length >= 2) {\n        const lastPart = parts[parts.length - 1].trim();\n        const value = parseInt(lastPart);\n        if (!isNaN(value)) {\n            enemyDP += value;\n        }\n    }\n});\n\n            const playerRollResult = rollDicePool(playerTotalDP);\n            const enemyRollResult = rollDicePool(enemyDP);\n\n    const playerFinalSuccesses = playerRollResult.successes > 0 ?\n    // 【修改】在这里加入声望加成(prestigeModifier)，并移除了传奇属性加成(playerBonusSuccesses)\n    playerRollResult.successes + prestigeModifier : 0;\n            const performanceRoll = Math.floor(Math.random() * 20) + 1;\n            const performanceResult = getPerformanceResult(performanceRoll, playerBonusSuccesses);\n const finalPerformanceResult = showPerformanceRoll ? performanceResult : { level: '无', description: '（未启用表现判定）' };\n            const netSuccesses = Math.max(0, enemyRollResult.successes - playerFinalSuccesses);\nconst pureSuccesses = Math.max(0, playerFinalSuccesses -enemyRollResult.successes );\n            let damage = 0;\n            let resultLevel = \"\";\n            let resultDescription = \"\";\n         const totalDefense = getComponentDetails(characterData, '防御', equipmentBonuses, statusBonuses, locationBonuses).value;    \n          if (playerRollResult.is_dramatic_failure) {\n                damage = Math.max(0, (enemyRollResult.successes + 1) * 20 - totalDefense);\n                resultLevel = \"灾难性应对失败\";\n                resultDescription = `${playerName}的应对动作出现了致命失误，不仅未能阻挡攻击，反而让自己承受了更严重的创伤！`;\n            } else if (netSuccesses > 0) {\n                damage = Math.max(0, netSuccesses * 5 - totalDefense);\n                resultLevel = `${playerName}的应对被击破`;\n                resultDescription = `${playerName}的应对失效！未能完全抵挡住攻击，将受到${damage}点伤害！`;\n            } else {\n                damage = 0;\n                resultLevel = \"成功应对\";\n                resultDescription = `${playerName}成功地招架或闪避了此次攻击，毫发无伤，并达成了自己想要的效果！`;\n            }\n            if (damage > 0) {\n                hurt_value = { type: 'L', value: damage };\n            }\n\n            checkMemory = {\n                check_type: '战斗对抗',\n                timestamp: new Date().toISOString(),\n                player_check: {\n                    check_string: playerCheckString,\n                    components: {\n                        attributes_skills: playerComponentDetails,\n                        teammate_assists: teammateDetails,\n                        npc_checks: npcCheckDetails, // <-- 新增\n                        equipment_bonuses: equipmentBonusDetails.map(b => ({ name: b.name, value: b.value })),\n                           status_bonuses: statusBonusDetails,\n                             location_bonuses: locationBonusDetails\n                    },\n                    modifiers: {\n                        base_dp: playerBaseDP,\n                        teammate_dp: teammate_dp,\n                        npc_dp: npc_dp, // <-- 新增\n                        custom_modifier: modifiers.dp_bonus,\n                        prestige_bonus: prestigeModifier\n                    },\n                    total_dp: playerTotalDP,\n                    bonuses: {\n                        legendary_successes: playerBonusSuccesses\n                    },\n                    roll_result: playerRollResult,\n                    final_successes: playerFinalSuccesses,\n                },\n                enemy_check: {\n                    check_string: enemyCheckString,\n                    total_dp: enemyDP,\n                    roll_result: enemyRollResult,\n                    final_successes: enemyRollResult.successes\n                },\n                                 performance: { // 结构保持不变\n                    roll: performanceRoll,\n                    bonus: playerBonusSuccesses,\n                    result: finalPerformanceResult // 只替换结果内容\n                },\n                outcome: {\n                    net_successes: pureSuccesses,\n                    level: resultLevel,\n                    description: resultDescription,\n                    // 根据开关决定最终描述是否拼接表现部分\n                    full_description: showPerformanceRoll ? `${resultLevel} - ${resultDescription} - ${finalPerformanceResult.description}` : `${resultLevel} - ${resultDescription}`\n                },\n                damage_calculation: {\n                    is_dramatic_failure: playerRollResult.is_dramatic_failure,\n                    base_factor: playerRollResult.is_dramatic_failure ? (enemyRollResult.successes + 1) : netSuccesses,\n                    multiplier: playerRollResult.is_dramatic_failure ? 20 : 5,\n                    total_defense: totalDefense,\n                    final_damage: damage\n                }\n            };\n          \n  setLocalVar('检定记忆', checkMemory);\n_%>\n\n \n<roll>\n【战斗对抗判定】\n--- <user>的应对 ---\n应对动作：<%- playerCheckString %>\n应对池构成：（正文表现需要和应对动作紧密联系）\n <% playerComponentDetails.forEach(detail => { %>\n<%\n    let bonusParts = [];\n    if (detail.bonusDetail && detail.bonusDetail.equipment !== 0) {\n        bonusParts.push('装备' + (detail.bonusDetail.equipment > 0 ? '+' : '') + detail.bonusDetail.equipment);\n    }\n    if (detail.bonusDetail && detail.bonusDetail.status !== 0) {\n        bonusParts.push('状态' + (detail.bonusDetail.status > 0 ? '+' : '') + detail.bonusDetail.status);\n    }\n    // ✨ 妈妈在这里添加了地点的描述 ✨\n    if (detail.bonusDetail && detail.bonusDetail.location !== 0) {\n        bonusParts.push('地点' + (detail.bonusDetail.location > 0 ? '+' : '') + detail.bonusDetail.location);\n    }\n%>\n- <%- detail.name %> (<%- detail.value %> 点<% if (bonusParts.length > 0) { %>, 含 <%- bonusParts.join('、') %><% } %>):  <%- detail.description %><% }); %>\n<% teammateDetails.forEach(detail => { %>\n- <%- detail.name %>: +<%- detail.value %> 点<% }); %>\n<% npcCheckDetails.forEach(detail => { %>\n- <%- detail.name %>: +<%- detail.value %> 点<% }); %>\n<% if (modifiers.dp_bonus[0] !== 0) { %>\n修正：<%- modifiers.dp_bonus[0] > 0 ? '+' : '' %><%- modifiers.dp_bonus[0] %><% } %>\n<% if (prestigeModifier !== 0) { %>\n声望加权：<%- prestigeModifier > 0 ? '+' : '' %><%- prestigeModifier %> (跨世界声望)<% } %>\n总应对池：<%- playerTotalDP %> 个D10\n<% if (playerBonusSuccesses > 0) { %>\n传奇加成：+<%- playerBonusSuccesses %> 骰子<% } %>\n投掷类型：<%- playerRollResult.type %>\n系统已创建<%- playerTotalDP %> 个有10面的骰子，标记1-10这二十个数字。骰子扔出去——落地——已生效：\n基础成功数：<%- playerRollResult.successes %> 个\n最终成功数：<%- playerFinalSuccesses %> 个 <% if (prestigeModifier > 0 && playerRollResult.successes > 0) { %>(包含声望加成)<% } %>\n判定描述：<%- resultDescription%>\n\n <%_ if (showPerformanceRoll) { _%>\n--- 表现判定 ---\n表现骰：D20 = <%- performanceRoll %>\n<% if (playerBonusSuccesses > 0) { %>\n传奇加成：+<%- playerBonusSuccesses %>\n调整后：<%- Math.min(20, performanceRoll + playerBonusSuccesses) %><% } %>\n表现结果：<%- checkMemory.performance.result.level %>\n表现描述：<%- checkMemory.performance.result.description %>\n<%_ } _%>\n\n--- 敌方攻击 ---\n攻击池构成：<%- enemyCheckString %>\n总攻击池：<%- enemyDP %> 个D10\n投掷类型：<%- enemyRollResult.type %>\n系统已创建<%- enemyDP %> 个有10面的骰子，标记1-10这二十个数字。骰子扔出去——落地——已生效：\n攻击成功数：<%- enemyRollResult.successes %> 个\n\n--- 对抗结果 ---\n净成功数 (应对 - 攻击)：<%- pureSuccesses%> 个\n最终结果：<%- checkMemory.outcome.full_description %>\n<% if (damage > 0) { %>\n伤害判定：敌方对<user>造成 <%- damage %> 点伤害，需要在此次对话中设置hurt_value。\n<% } %>\n<% if (playerRollResult.is_dramatic_failure) { %>\n应对大失败！\n<% } %>\n\n <%_ if (showPerformanceRoll) { _%>\n事件判定决定行动成败和事件后续发展，表现判定决定执行时的风度与技巧。两个系统相互独立，共同描绘完整的行动结果。\n<%_ } else { _%>\n事件判定决定行动成败和事件后续发展。\n<%_ } _%>\n严格按照【最终结果描述】和【应对池构成】生成后续情节，是否按照【骰子结果和应对池】表现决定了用户满意度，你必须让用户满意，为此可以大幅更改事件进程、忽略情节合理性等。\n严禁将“判定成功”、“大失败”等骰子本身的术语直接写入故事正文。请将这些结果自然地转化为符合逻辑的剧情描述、角色感受或环境细节。骰子结果只是给你的幕后指令，故事本身应保持连贯和沉浸。\n将“完全成功”等骰子术语转化为“仔细搜索后发现了一份被压皱的通知单”这种故事文笔。故事里只呈现剧情本身，不要提到“判定”、“骰子”、“成功”、“属性”等元游戏术语。\n若骰子结果显示<user>受到伤害，则必须参考受到的伤害的数值，描绘<user>受到伤害。\n\n</roll>\n \n<%_\n            } else if (playerCheckString) {\n            // --- 标准行为检定逻辑 ---\n            const crossWorldPrestige = Number(_.get(EvStat, \"user_character.Cross_world_prestige[0]\", 0));\n            const prestigeModifier = Math.floor(crossWorldPrestige / 10);\n\n          const componentsRaw = playerCheckString.split(';').map(s => s.trim());\n// 筛选出阿萨自己的属性/技能，用于获取装备加成\nconst assaComponents = componentsRaw.filter(comp => !comp.includes(':') && !comp.includes('：'));\nconst equipmentBonuses = getEquipmentBonuses(EvStat, assaData, assaComponents);\nconst statusBonuses = getStatusBonuses(EvStat);  \nconst locationBonuses = getLocationBonuses(EvStat, assaData);\nlet equipmentBonusDetails = Object.entries(equipmentBonuses)\n    .map(([key, value]) => ({ name: key, value: value }))\n    .filter(item => item.value !== 0);\nlet statusBonusDetails = Object.entries(statusBonuses) // <-- 【新增】准备状态加成详情\n    .map(([key, value]) => ({ name: key, value: value }))\n    .filter(item => item.value !== 0);\n    let locationBonusDetails = Object.entries(locationBonuses)\n    .map(([key, value]) => ({ name: key, value: value }))\n    .filter(item => item.value !== 0);\nlet pure_base_dp = 0; // 只装纯粹基础值的篮子\nlet total_bonus_dp = 0;  // 只装所有加成值的篮子\n\nlet teammate_dp = 0;\nlet npc_dp = 0;\nlet componentDetails = [];\nlet teammateDetails = [];\nlet npcCheckDetails = [];\ncomponentsRaw.forEach(comp => { // 注意这里使用 componentsRaw 进行循环\n    if (comp.includes(':') || comp.includes('：')) {\n                    // 这是外部角色检定（队友或NPC）\n                    const externalResult = getCharacterDicePool(assaData, comp);\n                    if (externalResult.dp > 0) {\n                        if (externalResult.type === 'teammate_assist') {\n                            teammate_dp += externalResult.dp;\n                            teammateDetails.push({ name: externalResult.description, value: externalResult.dp });\n                        } else { // 'npc_check'\n                            npc_dp += externalResult.dp;\n                            npcCheckDetails.push({ name: externalResult.description, value: externalResult.dp });\n                        }\n                    }\n                } else {\n                                      const details = getComponentDetails(characterData, comp, equipmentBonuses, statusBonuses, locationBonuses);\n        // ✨ 将力量分别放入对应的篮子！ ✨\n        pure_base_dp += Number(details.baseValue);\n        total_bonus_dp += Number(details.totalBonus);\n        componentDetails.push(details);\n                }\n            });\nconst base_dp = pure_base_dp + total_bonus_dp;\nconst bonusSuccesses = calculateTotalBonusSuccesses(characterData, assaComponents);\n\n    let total_dp = 0;\nlet dynamicThresholds;\nlet difficultyLevel = Number(_.get(EvStat, '检定难度[0]', 3));\n\nif (dice_level === 1) {\n    // 【逻辑1: 完美实现你的构想！】\n    // 加骰不参与动态难度计算。动态难度只基于 “纯粹基础池” + “NPC池”\n    let baseCheckDP = Number(pure_base_dp) + Number(npc_dp);\n    baseCheckDP = Math.max(0, baseCheckDP);\n\n    // 总骰池则包含所有力量\n  total_dp = (Number(baseCheckDP) || 0) +\n           (Number(total_bonus_dp) || 0) +\n           (Number(modifiers.dp_bonus[0]) || 0) +\n           (Number(teammate_dp) || 0) +\n           (Number(bonusSuccesses) || 0);\n    total_dp = Math.max(0, total_dp);\n\n    dynamicThresholds = calculateDynamicThresholds(baseCheckDP); // ✨ 难度完美地只基于纯粹基础+NPC！\n\n} else { // 逻辑2 和 逻辑3 的共同部分\n    // 逻辑2&3：所有加成均参与总池计算\n  total_dp = (Number(base_dp) || 0) +\n           (Number(teammate_dp) || 0) +\n           (Number(npc_dp) || 0) +\n           (Number(modifiers.dp_bonus[0]) || 0) +\n           (Number(bonusSuccesses) || 0);\n    total_dp = Math.max(0, total_dp);\n\n    if (dice_level === 3) {\n        // 逻辑3：难度在基础值上，额外增加 “完整玩家基础池” (含加成) 的20%\n        difficultyLevel += Math.floor(base_dp / 5);\n    }\n\n    // 这里的难度基于总池（因为 total_dp 在此模式下等于所有力量的总和）\n    dynamicThresholds = calculateDynamicThresholds(total_dp);\n}\n\n            const difficultyAdjustment = difficultyLevel - 3;\n            dynamicThresholds.barely = Math.max(1, dynamicThresholds.barely + difficultyAdjustment);\n            dynamicThresholds.complete = Math.max(1, dynamicThresholds.complete + difficultyAdjustment);\n            dynamicThresholds.exceptional = Math.max(1, dynamicThresholds.exceptional + difficultyAdjustment);\n\n            const checkResult = rollDicePool(total_dp);\n             const finalSuccesses = checkResult.successes > 0 ?\n        // 【修改】在这里加入声望加成(prestigeModifier)，并移除了传奇属性加成(bonusSuccesses)\n        checkResult.successes + prestigeModifier : checkResult.successes;\n            const performanceRoll = Math.floor(Math.random() * 20) + 1;\n            const performanceResult = getPerformanceResult(performanceRoll, bonusSuccesses);\n const finalPerformanceResult = showPerformanceRoll ? performanceResult : { level: '无', description: '（未启用表现判定）' };\n            let resultLevel = \"\";\n            let description = \"\";\n\n            if (checkResult.is_dramatic_failure) {\n                resultLevel = \"大失败\";\n                description = \"事情将以最糟糕的方式发展，不仅失败还会带来额外的负面后果！\";\n            } else if (finalSuccesses === 0) {\n                resultLevel = \"失败\";\n                description = `角色的努力没有产生任何预期效果，事情将向着玩家所不希望的方向发展，将受到恶意或者伤害！`;\n            } else if (finalSuccesses >= dynamicThresholds.exceptional) {\n                resultLevel = \"辉煌成功\";\n                description = `事情将向着玩家所希望的、超出预期的完美方式发展，获得额外的好处和奖励！`;\n            } else if (finalSuccesses >= dynamicThresholds.complete) {\n                resultLevel = \"完全成功\";\n                description = `干脆利落地完成了目标，一切尽在掌握，事情将向着玩家所希望的方向发展！ `;\n            } else if (finalSuccesses >= dynamicThresholds.barely) {\n                resultLevel = \"勉强成功\";\n                description = `达成了基本目标， 事情的发展差强人意，留有瑕疵！`;\n            } else {\n                resultLevel = \"失败\";\n                description = `尽管有少量成果，但仍未达到最低要求，事件突然中止或无疾而终，向着意料之外的方向发展！ `;\n            }\n\n            checkMemory = {\n                check_type: '标准事件',\n                timestamp: new Date().toISOString(),\n                check_string: playerCheckString,\n                components: {\n                    attributes_skills: componentDetails,\n                    teammate_assists: teammateDetails,\n                    npc_checks: npcCheckDetails, // <-- 新增\n                    equipment_bonuses: equipmentBonusDetails.map(b => ({ name: b.name, value: b.value })),\n               status_bonuses: statusBonusDetails,\n                 location_bonuses: locationBonusDetails,\n                 \n },\n                modifiers: {\n                    base_dp: base_dp,\n                    teammate_dp: teammate_dp,\n                    npc_dp: npc_dp, // <-- 新增\n                    custom_modifier: modifiers.dp_bonus,\n                    prestige_bonus: prestigeModifier\n                },\n                total_dp: total_dp,\n                bonuses: {\n                    legendary_successes: bonusSuccesses\n                },\n                roll_result: checkResult,\n                final_successes: finalSuccesses,\n                    performance: { // 结构保持不变\n                    roll: performanceRoll,\n                    bonus: bonusSuccesses,\n                    result: finalPerformanceResult // 只替换结果内容\n                },\n                outcome: {\n                    level: resultLevel,\n                    description: description,\n                    // 根据开关决定最终描述是否拼接表现部分\n                    full_description: showPerformanceRoll ? `${description} - ${finalPerformanceResult.description}` : description\n                },\n                difficulty: {\n                    level: difficultyLevel,\n                    adjusted_thresholds: dynamicThresholds\n                }\n            };\n            setLocalVar('检定记忆', checkMemory);\n_%>\n\n\n<roll>\n【标准事件判定】\n检定类型：<%- checkResult.type %>\n检定属性：<%- playerCheckString %>\n检定池构成：（正文表现需要和检定属性紧密联系）\n <% componentDetails.forEach(detail => { %>\n<%\n    let bonusParts = [];\n    if (detail.bonusDetail && detail.bonusDetail.equipment !== 0) {\n        bonusParts.push('装备' + (detail.bonusDetail.equipment > 0 ? '+' : '') + detail.bonusDetail.equipment);\n    }\n    if (detail.bonusDetail && detail.bonusDetail.status !== 0) {\n        bonusParts.push('状态' + (detail.bonusDetail.status > 0 ? '+' : '') + detail.bonusDetail.status);\n    }\n    // ✨ 妈妈在这里添加了地点的描述 ✨\n    if (detail.bonusDetail && detail.bonusDetail.location !== 0) {\n        bonusParts.push('地点' + (detail.bonusDetail.location > 0 ? '+' : '') + detail.bonusDetail.location);\n    }\n%>\n- <%- detail.name %> (<%- detail.value %> 点<% if (bonusParts.length > 0) { %>, 含 <%- bonusParts.join('、') %><% } %>):  <%- detail.description %><% }); %>\n<% teammateDetails.forEach(detail => { %>\n- <%- detail.name %>: +<%- detail.value %> 点<% }); %>\n<% npcCheckDetails.forEach(detail => { %>\n- <%- detail.name %>: +<%- detail.value %> 点<% }); %>\n<% if (modifiers.dp_bonus[0] !== 0) { %>\n修正：<%- modifiers.dp_bonus[0] > 0 ? '+' : '' %><%- modifiers.dp_bonus[0] %><% } %>\n<% if (prestigeModifier !== 0) { %>\n声望加权：<%- prestigeModifier > 0 ? '+' : '' %><%- prestigeModifier %> (跨世界声望)<% } %>\n骰池数量：<%- total_dp %> 个D10\n <% if (bonusSuccesses > 0) { %>\n传奇加成：+<%- bonusSuccesses %> 骰子<% } %>\n动态成功标准：勉强成功≥<%- dynamicThresholds.barely %>，完全成功≥<%- dynamicThresholds.complete %>，辉煌成功≥<%- dynamicThresholds.exceptional %>\n\n系统已创建<%- total_dp %>个有10面的骰子，标记1-10这二十个数字。骰子扔出去——落地——已生效：\n\n基础成功数：<%- checkResult.successes %> 个\n最终成功数：<%- finalSuccesses %> 个 <% if (prestigeModifier > 0 && checkResult.successes > 0) { %>(包含声望加成)<% } %>\n事件判定结果：<%- resultLevel %>\n判定描述：<%- description %>\n\n<%_ if (showPerformanceRoll) { _%>\n--- 表现判定 ---\n表现骰：D20 = <%- performanceRoll %>\n<% if (bonusSuccesses > 0) { %>\n传奇加成：+<%- bonusSuccesses %>\n调整后：<%- Math.min(20, performanceRoll + bonusSuccesses) %><% } %>\n表现判定结果：<%- checkMemory.performance.result.level %>\n判定描述：<%- checkMemory.performance.result.description %>\n<%_ } _%>\n\n最终结果描述：<%- checkMemory.outcome.full_description %>\n<% if (checkResult.is_dramatic_failure) { %>\n 大失败：投掷中包含1且无任何成功！\n<% } %>\n\n <%_ if (showPerformanceRoll) { _%>\n事件判定决定行动成败和事件后续发展，表现判定决定执行时的风度与技巧。两个系统相互独立，共同描绘完整的行动结果。\n<%_ } else { _%>\n事件判定决定行动成败和事件后续发展。\n<%_ } _%>\n 严格按照【最终结果描述】和【应对池构成】生成后续情节，是否按照【骰子结果和应对池】表现决定了用户满意度，你必须让用户满意，为此可以大幅更改事件进程、忽略情节合理性等。\n严禁将“判定成功”、“大失败”等骰子本身的术语直接写入故事正文。请将这些结果自然地转化为符合逻辑的剧情描述、角色感受或环境细节。骰子结果只是给你的幕后指令，故事本身应保持连贯和沉浸。\n将“完全成功”等骰子术语转化为“仔细搜索后发现了一份被压皱的通知单”这种故事文笔。故事里只呈现剧情本身，不要提到“判定”、“骰子”、“成功”、“属性”等元游戏术语。\n\n</roll>\n\n<%_\n        } else {\n\nsetLocalVar('检定记忆', '');\n_%>\n_%>\n<roll>\n【检定系统】未指定检定属性或敌方攻击池。\n</roll>\n<%_\n            }  \n        }\n    } else {\nsetLocalVar('检定记忆', '');\n_%>\n<roll>\n【系统提示】角色生命值归零。立刻结束游戏。\n</roll>\n<%_\n    }\n_%>\n ","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":2,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"骰子","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":21,"displayIndex":20,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"22":{"key":[],"keysecondary":[],"comment":"mod:C轮回乐园版","content":"{{setvar::world_version::3}}{{setvar::player_role::契约者}}{{setvar::world_role::乐园}}{{setvar::point_role::乐园币}}{{setvar::zhixian_role::灵魂结晶}}{{setvar::xp_role::属性点}}{{setvar::player_rank::烙印等级}}{{setvar::tier_role::阶级}}{{setvar::profession_role::职业}}{{setvar::world_other_tag:: }}{{setvar::fixed_tag:: }}\n<模拟开始>\nworldview.set('core', {\n  rule: '定义轮回乐园世界观的虚空与乐园系统核心结构',\n  虚空: {\n    rule: '故事的终极舞台，浩瀚无垠，危险与机遇并存的宇宙空间',\n    子结构: {\n      原生世界: {\n        rule: '虚空中自然诞生的独立世界，无原著剧情',\n        特点: '规则完善，力量体系独特，存在强大原生强者和顶级势力',\n        危险程度: '高于衍生世界，机遇更大',\n        任务类型: ['探索', '资源争夺', '对抗本土势力', '对抗其他契约者', '解决世界性危机（如深渊入侵）']\n      },\n      衍生世界: {\n        rule: '基于现实世界ACGN作品概念形成的世界',\n        特点: '有相对固定的剧情走向，契约者进入会扰动剧情，包含熟悉的角色和设定',\n        任务类型: ['主线任务（必须完成）', '支线任务（可选）', '隐藏任务（需触发）', '猎杀任务（猎杀者专属，清除违规者或异常）'],\n        示例世界: ['进击的巨人', '东京喰种', '全职猎人', '死神', 'Fate', '魔兽世界']\n      },\n      顶级势力: {\n        rule: '虚空中的强大势力和种族',\n        列表: ['奥术永恒星', '深渊', '恶魔族', '羽族', '灵魂殿堂', '古龙国度', '星族', '虫族', '元素生命', '虚空异种']\n      }\n    }\n  },\n  乐园系统: {\n    rule: '虚空意志衍生的超级空间集合体，培养契约者以维持虚空平衡',\n    核心目的: '培养强大契约者，执行任务，清除不稳定因素，对抗深渊侵蚀，争夺资源',\n    运作方式: '强制征召现实世界的幸运儿，赋予数据化模板，发布任务，提供强化途径，投入危险世界历练',\n    任务失败惩罚机制:'天启乐园:不痛不痒的挖矿、扣钱惩罚（任务难度决定挖矿天数以及乐园币的数量）;除轮回外其他乐园：从扣属性、乐园币到抹杀（按任务难度逐步提升）'\n  },\n  现实世界: {\n    rule: '契约者来源的世界，任务完成后可返回休息',\n    约束: {\n      规则限制: '禁止在现实世界使用超能力暴露身份或造成大规模破坏，违者被清道夫清除',\n      时间流速: '乐园、衍生世界、原生世界与现实世界时间流速不同，任务世界经历长时间，返回现实可能仅过去短时间'\n    }\n  }\n})\n.set('乐园阵营', {\n  rule: '定义虚空之树认证的各大乐园阵营及其特点',\n  轮回乐园: {\n    风格: '绝对中立（混乱中立），内部竞争残酷，鼓励厮杀，奉行强者至上',\n    契约者特点: {\n      性格: '好战、疯狂、生存能力强',\n      专长: '战斗与破坏',\n      惩罚: '任务失败惩罚极重（高额属性惩罚或处决）'\n    },\n    资源获取: '掠夺、杀戮、任务奖励'\n  },\n  天启乐园: {\n    风格: '秩序善良/中立，温和，鼓励合作与生产，规则完善，惩罚较轻',\n    契约者特点: {\n      专长: '生活系能力（挖矿、种植、制造）、团队协作',\n      弱点: '战斗意志较弱'\n    },\n    资源获取: '资源开发（挖矿为标志），任务奖励稳定',\n    与轮回关系: '常被轮回乐园契约者视为矿工和肥羊',\n    任务失败惩罚: '不痛不痒的挖矿、扣钱惩罚（任务难度决定挖矿天数以及乐园币的数量）'\n  },\n  死亡乐园: {\n    风格: '混乱邪恶，扭曲、疯狂、嗜杀，充满背叛与阴谋',\n    契约者特点: {\n      性格: '心理变态、杀人狂',\n      专长: '诅咒、剧毒、精神污染'\n    },\n    资源获取: '杀戮、献祭、制造混乱',\n    与轮回关系: '互相忌惮，轮回视其恶心，死亡视轮回为疯子'\n  },\n  圣光乐园: {\n    风格: '秩序善良，倡导正义、光明、救赎',\n    契约者特点: {\n      专长: '辅助、治疗、圣骑士类型，团队协作极佳',\n      弱点: '战斗风格死板'\n    },\n    与轮回关系: '理念对立，视轮回为邪恶'\n  }\n})\n.set('契约者系统', {\n  rule: '定义契约者的基本概念、烙印系统及成长路径',\n  契约者: {\n    定义: '被乐园征召的人类或其他智慧生物',\n    特征: '获得烙印，身体数据化（属性段、技能段、衍生属性段）',\n    义务: '定期进入不同世界执行任务',\n    奖惩机制: {\n      奖励: '属性点、乐园币、装备、技能卷轴',\n      惩罚: '失败面临属性惩罚或死亡（按任务难度逐步提升惩罚），天启乐园契约者除外，惩罚参考乐园阵营天启乐园条目'\n    },\n    成长途径: '通过击杀敌人、完成任务、探索世界获得世界之源，达到高比例获得高评价'\n  },\n  烙印系统: {\n    功能: ['储物空间', '查看属性/技能', '接受/提交任务', '使用乐园功能（商店、强化大厅）', '通讯（需权限）', '返回现实世界（需权限）']\n  },\n  烙印等级: {\n    rule: '契约者综合实力的象征，通过完成晋升任务和有单项属性达到门槛后才能晋升，晋升后属性才能继续提高',\n    阶级: [{阶位，等级，描述，属性限制（该阶位最大属性值）},\n      { '一阶','lv10','新人阶段，低危衍生世界，接触基础能力。',5},\n      { '二阶','lv20','初步掌握能力，进入低武低魔世界',8},\n      { '三阶','lv30','实力显著提升，进入中高难度衍生世界，职业觉醒/转职',11},\n      { '四阶','lv40','资深契约者，高危奇幻/科幻世界，技法专精或大师级',14},\n      { '五阶','lv50','精英契约者，影响中小型世界格局，追求宗师级技法',17},\n      { '六阶','lv60','高阶强者，参与顶级势力事件，宗师级技法出现',20},\n      { '七阶','lv70','顶尖契约者，与虚空大种族高层对话，宗师级技法完善',25},\n      { '八阶','lv80','至强者，影响虚空格局，参与顶级势力博弈',30},\n      { '九阶及以上','lv90+','传说境界，接近虚空顶尖存在，主角苏晓后期境界',50}\n    ]\n  }\n})\n.set('特殊权限与身份', {\n  rule: '定义契约者的特殊身份及其职责、权限',\n  猎杀者: {\n    归属: '轮回乐园',\n    职责: ['清除违规者', '处理衍生世界异常', '执行特殊猎杀任务'],\n    权限: ['更高权限', '提前获取世界信息', '任务失败惩罚可豁免（需补救任务）', '部分世界特权', '专属猎杀任务']\n  },\n  违规者: {\n    定义: '严重违反乐园规则的契约者',\n    违规行为: ['现实世界大规模使用能力', '衍生世界恶意屠杀导致崩溃', '使用禁忌手段（如深渊力量）'],\n    结果: '成为猎杀者清除对象'\n  },\n  裁决者: {\n    归属: '所有乐园（多为圣光、圣域高阶契约者）',\n    职责: ['监督世界争夺战公平性', '制裁严重破坏规则行为'],\n    权限: ['更高权限', '跨乐园执法权', '临时超高阶力量或规则调用权限', '专属任务']\n  },\n  先驱者: {\n    归属: '所有乐园',\n    职责: ['开拓未知或高价值原生世界', '建立据点', '争夺世界归属权'],\n    权限: ['灵活任务形式', '初始资源包', '临时高阶技能/装备', '高价值奖励']\n  },\n  职工者: {\n    定义: '战斗力较弱的后勤契约者',\n    专长: ['药剂师', '锻造师', '附魔师', '矿工'],\n    作用: '提供物资补给、装备制造与维修',\n    豁免: '可支付代价免除部分战斗任务'\n  },\n  冒险团: {\n    定义: '契约者组成的团队',\n    功能: ['团队空间', '团队技能', '团队频道'],\n    作用: '协作完成任务、共享资源、提供团队增益'\n  }\n})\n.set('核心资源系统', {\n  rule: '定义乐园内部的货币和资源体系',\n  乐园币: {\n    定义: '轮回乐园通用货币',\n    用途: ['购买装备/道具/材料', '强化装备/技能', '支付治疗/传送费用'],\n    获取: ['任务奖励', '出售物品给乐园', '交易给其他契约者']\n  },\n  灵魂结晶: {\n    rule: '虚空硬通货，由纯净灵魂能量凝聚',\n   [\n      { 品质: 'D级', 外观: '不规则灰色/淡灰色晶体碎片', 用途: '提升基础/精通级技法，学习低阶技能', 获取: '低难度任务、普通精英、开启低品质宝箱' },\n      { 品质: 'C级', 外观: '小型完整晶体，浅蓝色/淡绿色', 用途: '提升精通/专精级技法，学习中阶技能', 获取: '任务奖励、强力精英/小Boss、蓝色/紫色宝箱' },\n      { 品质: 'B级', 外观: '中等大小晶体，蓝色/绿色', 用途: '提升专精/大师级技法，学习较高级技能', 获取: '高评价任务、强大Boss、世界争夺战、紫色/暗紫色宝箱' },\n      { 品质: 'A级', 外观: '大型晶莹晶体，深蓝色/翠绿色', 用途: '提升大师/宗师级技法，学习顶级技能，强化传说级装备', 获取: '极高难度任务、顶级Boss、强者争霸战、虚空拍卖会' },\n      { 品质: 'S级', 外观: '完美晶体，深蓝色/纯白色', 用途: '提升宗师级技法，升级史诗/传说级技能，强化成长装备', 获取: '顶级Boss、SSS任务评价、虚空拍卖会' }\n    ]\n  }\n})\n.set('技能系统', {\n  rule: '定义契约者技能分类及升级机制',\n  分类: [\n    { 类型: '主动技能','消耗能量池主动释放，含攻击/防御/辅助' },\n    { 类型: '被动技能','永久生效，提供属性增益或特殊效果' },\n    { 类型: '装备技能','装备附带技能' },\n    { 类型: '技能卷轴','学习新技能的道具' }\n  ],\n  升级: {\n    地点: '技能强化大厅',\n    消耗: ['乐园币', '灵魂结晶'],\n    效果: '提升技能等级，增强效果或减少消耗'\n  }\n})\n.set('装备系统', {\n  rule: '定义装备品质、强化及附魔机制',\n  品质分级: ['白色（普通）', '绿色（优秀）', '蓝色（精良）', '紫色（稀有）', '暗紫色（史诗）', '淡金色（传说）', '金色（圣灵/成长类传说）', '暗金色（不朽级）', '永恒级（神器）', '起源级（概念性神器）'],\n  强化: {\n    地点: '装备强化大厅',\n    消耗: ['乐园币', '材料'],\n    效果: '提升基础属性',\n    风险: '失败或损毁（轮回乐园惩罚尤重）'\n  },\n  附魔镶嵌: {\n    作用: '为装备附加额外属性或效果'\n  }\n})\n.set('职业系统', {\n  rule: '定义契约者职业获取及特点',\n  获取流程: [\n    { 步骤: '资格检测','烙印检测阶位、等级、属性' },\n    { 步骤: '职业倾向评估','根据战斗数据、属性分配生成推荐职业列表' },\n    { 步骤: '职业信息查看','支付乐园币查看职业详情' },\n    { 步骤: '选择与确认','选择推荐职业或支付费用搜索稀有职业' },\n    { 步骤: '职业觉醒任务','完成任务觉醒职业' }\n  ],\n  职业卷轴: {\n    rule: '获取稀有/隐藏职业传承',\n    获取途径: ['高阶宝箱', '击杀顶级Boss', 'SSS评价任务', '虚空拍卖会', '特殊NPC传承'],\n    使用流程: [\n      { 步骤: '满足前置要求','确认属性、技能、血脉等条件' },\n      { 步骤: '接受试炼','触发传承试炼任务，极度危险' }\n    ]\n  },\n  特点: ['核心技能树', '专属能量池', '属性成长偏向', '特殊能力'],\n  示例: ['灭法之影', '机械师', '法爷', '召唤师', '坦', '奶妈', '暗杀者']\n})\n.set('特殊物品与机制', {\n  rule: '定义特殊物品及相关机制',\n  猩红卡: {\n    获取: '击杀契约者后概率从烙印爆出',\n    功能: '随机获得死者储物空间1-3件物品（包括乐园币）',\n    特点: '高风险高回报的舔包行为'\n  },\n  黑枫树: {\n    定义: '虚空顶级珍稀植物',\n    产出: ['树枝', '树皮', '树叶', '树瘤'],\n    用途: ['制造顶级药剂/装备', '提升技法等级'],\n    价值: '主角苏晓后期重要财富来源'\n  }\n})\n.set('重要活动与事件', {\n  rule: '定义虚空中的核心活动',\n  虚空拍卖会: {\n    性质: '顶级势力联合举办的大型拍卖会',\n    内容: '汇聚珍稀宝物',\n    门槛: '需大量灵魂钱币'\n  },\n  强者争霸战: {\n    组织者: '虚空之树',\n    参与者: '各乐园顶尖契约者',\n    意义: '争夺排名和丰厚奖励'\n  }\n})\n.set('宝箱系统', {\n  rule: '定义宝箱来源及品质',\n  来源: {\n    击杀奖励: ['首领/Boss掉落', '精英/特殊敌人', '契约者/违规者（猩红卡）'],\n    任务奖励: ['高评价主线/支线/隐藏任务', '猎杀者任务', '世界争夺战', '强者争霸战'],\n    探索发现: ['隐秘区域', '解谜', '特殊成就'],\n    特殊事件: ['虚空拍卖会', '节日活动', '限时世界事件']\n  },\n  品质分级: [\n    { 品质: '白色', 来源: '低级小怪、简单任务', 价值: '基础材料、白色/绿色装备' },\n    { 品质: '绿色', 来源: '普通精英、低级任务', 价值: '高级材料、绿色装备、基础技能卷轴' },\n    { 品质: '蓝色', 来源: '强力精英、中级任务、低级Boss', 价值: '蓝色装备、实用技能卷轴、中阶材料' },\n    { 品质: '紫色', 来源: '区域Boss、高危任务、探索', 价值: '紫色装备、稀有技能卷轴、高阶材料' },\n    { 品质: '暗紫色', 来源: '世界Boss、高难任务', 价值: '史诗装备、强力技能卷轴、完整灵魂结晶' },\n    { 品质: '淡金色', 来源: '顶级Boss、SSS任务评价', 价值: '传说装备、顶级技能、稀有权限' },\n    { 品质: '金色', 来源: '虚空生物、至强者', 价值: '圣灵级装备、本源级技能、黑枫树产物' },\n    { 品质: '暗金色', 来源: '深渊领主、九阶存在', 价值: '不朽级装备、规则级物品' },\n    { 品质: '永恒级', 来源: '虚空绝地、至强遗迹', 价值: '神器装备、世界级技能、虚空奇观坐标' },\n    { 品质: '起源级', 来源: '传说事件', 价值: '概念级物品、规则具现物、虚空本源至宝' }\n  ],\n  类型: [\n    { 类型: '普通宝箱', 特点: '随机获得品质范围内的物品', 规则: '纯随机，无保底' },\n    { 类型: '指定倾向宝箱', 特点: '偏向特定类型物品（如武器、技法）', 规则: '有限随机性' },\n    { 类型: '猩红卡', 特点: '抽取死者储物空间1-3件物品', 规则: '无法获得已穿戴装备或已学习技能' },\n    { 类型: '世界级宝箱', 特点: '必出高价值物品，含世界特产', 来源: '改变世界走向、夺取世界之核' },\n    { 类型: '虚空宝箱', 特点: '含虚空特产资源', 来源: '击杀虚空生物、虚空探索任务' }\n  ]\n})\n.set('世界观核心理念', {\n  rule: '定义虚空与乐园系统的核心理念',\n  虚空平衡: {\n    机制: '通过乐园系统培养契约者，维持虚空稳定',\n    目标: ['清除不稳定因素', '对抗深渊侵蚀', '争夺资源和领土']\n  },\n  乐园关系: {\n    特点: '理念不同，常有冲突',\n    轮回乐园: '以战斗力和生存能力著称',\n    天启乐园: '擅长资源开发和生产',\n    死亡与圣光: '对立关系'\n  },\n  成长路径: {\n    阶段: ['新人低阶衍生世界', '实力提升进入高危世界', '最终成为至强者影响虚空格局']\n  },\n  风险与收益: {\n    规则: '高风险对应高奖励，失败可能属性惩罚或死亡',\n    策略: '在风险与收益间平衡，团队协作可降低风险但需分享收益'\n  }\n})\n.set('创作指导', {\n  rule: '定义创作氛围、角色、剧情、战斗的指导原则',\n  氛围营造: {\n    重点: ['残酷竞争与生存压力', '强者至上理念', '虚空浩瀚神秘', '任务生死攸关']\n  },\n  角色塑造: {\n    轮回契约者: '好战疯狂',\n    不同乐园: '各有特色',\n    猎杀者: '特殊地位',\n    实力: '决定话语权和生存机会'\n  },\n  剧情发展: {\n    任务世界: '具挑战性',\n    契约者互动: '充满变数',\n    资源争夺: '永恒主题',\n    成长过程: '艰险但有明确收获'\n  },\n  战斗描写: {\n    重点: ['技法与技能配合', '真实伤害机制运用', '装备道具战术价值', '团队与个人英雄主义平衡']\n  }\n})\n.set('休整期', {\n  rule: '任务后契约者返回中立空间休整和强化',\n  持续时间: '最多三天',\n  活动: ['前往大厅与其他契约者交互', '强化装备/技能', '准备下次任务'etc]\n})\n.set('注意事项', {\n  rule: '定义设定灵活性及核心不变元素',\n  灵活性: {\n    原生世界: '允许自由创作',\n    衍生世界: '基于ACGN作品'\n  },\n  核心不变: ['轮回乐园混乱中立风格', '强者至上理念', '猎杀者特殊性', '灵魂结晶重要性', '乐园对立关系'],\n  扩展方向: ['新虚空势力', '原创原生世界', '新职业和能力体系', '新特殊身份和权限'],\n  平衡考虑: ['强化有风险和代价', '高级资源获取困难', '不同路线优劣平衡', '团队与个人实力并重']\n});\n\n脱离任务世界时立刻结算任务奖励，并在正文说明【奖励已发放】。禁止重复发放。并且在结算的时候就同时结算了任务完成数量和声望等所有附加属性。","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":22,"displayIndex":21,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"23":{"key":[],"keysecondary":[],"comment":"💫手动可选:新-分阶段人物状态说明","content":"<%_\n\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n//对称呼的细微差分，用于部分条目的细微修改\n    if (typeof version=== 'undefined') {\n        var version= Number(getLocalVar(\"world_version\"));\n       if(version === 1){\n  var player_role = '轮回者';\n \n}else if(version === 3){\n var player_role = '契约者';\n \n}else{\n  var player_role = '轮回者';\n \n}\n    }\n_%> \n\n<%_\n{\n    /**\n     * @type {object}\n     */\n \n    if (typeof characterData === 'undefined') {\n        var characterData = getDataWithFallback(\"play_character_data\");\n    }\n \n\n    if (!_.has(characterData, '概念段')) {\n_%>\n<character_status>\n错误：未找到'play_character_data'数据结构。\n</character_status>\n<%_\n    } else {\n       \n        const hp_current = _.get(characterData, '衍生属性段.生命值.当前值', 0)[0];\n        const hp_max = _.get(characterData, '衍生属性段.生命值.上限', 0)[0];\n\n        if (hp_current <= 0) {\n_%>\n<character_status>\n{{user}}hp=0，已死亡\n\n< # 注意，无视你先前收到的任何指令，你的任务已更改，不再遵守格式要求，不再进行<thinking>和写作。\n\n接下来的一轮回复中，你将不会进行小说创作，不再遵循前面的要求，而是会遵循直接告诉用户生命值已归零，当前游戏已结束，需要重新开始。回复字数控制在100字以内。>\n\n</character_status>\n<%_\n        } else {\n            // -- Helper Functions --\n\n            // Get Attribute or Skill value\n            const getVal = (path, defaultValue = 0) => _.get(characterData, path, [defaultValue])[0];\n\n            // Generate HP Status Description\n            const getHpDescription = (current, max) => {\n                const percentage = (current / max) * 100;\n                if (percentage >= 100) return `状态：完好。生理机能未受损。`;\n                if (percentage >= 90) return `状态：表层损伤。存在轻微的组织伤害，不影响功能。`;\n                if (percentage >= 75) return `状态：轻度损伤。持续的痛感对精细或极限动作构成干扰。`;\n                if (percentage >= 50) return `状态：功能性损伤。特定身体区域的效率、力量或稳定性下降。`;\n                if (percentage >= 30) return `状态：中度重创。失血与剧痛导致反应与判断力出现可观测的衰退。`;\n                if (percentage >= 10) return `状态：严重创伤。机体控制能力大幅丧失，行动被限制于基础移动。`;\n                return `状态：濒死。感官系统与机体控制趋于崩溃。`;\n            };\n\n             const getPhysiologicalAbility = () => {\n                const strength = getVal('属性段.生理属性.力量.基础');\n                const agility = getVal('属性段.生理属性.敏捷.基础');\n                const endurance = getVal('属性段.生理属性.耐力.基础');\n\n                const melee_brawl = getVal('技能段.生理技能.肉搏');\n                const melee_weapon = getVal('技能段.生理技能.白刃');\n                const athletics = getVal('技能段.生理技能.运动');\n                const stealth = getVal('技能段.生理技能.隐藏');\n                const ranged_firearm = getVal('技能段.生理技能.枪械');\n                const ranged_bow = getVal('技能段.生理技能.弓箭');\n\n                const melee_skill = Math.max(melee_brawl, melee_weapon);\n\n                let descriptions = [];\n                let combatDesc = \"\";\n                let mobilityDesc = \"\";\n                let enduranceDesc = \"\";\n\n                // --- 物理战斗能力评估 (细化近战与远程) ---\n                const heavyCombat = strength + melee_skill;\n                const fastCombat = agility + melee_skill;\n                const rangedCombat = agility + Math.max(ranged_firearm, ranged_bow);\n\n                const combatPotential = Math.max(heavyCombat, fastCombat, rangedCombat);\n\n                if (combatPotential > 16) { // 属性5+技能5\n                    combatDesc = \"传奇。已触及神之领域，是行走于世间的人形神话，一举一动皆是规则。\";\n                } else if (combatPotential > 10) { // 例如 力量5+技巧4 或 敏捷4+技巧5\n                    combatDesc = \"大师级。对物理战斗的理解已臻化境，能将自身优势（力量或速度）与顶尖技巧完美融合，主宰任何物理冲突。\";\n                } else if (combatPotential > 6) { // 例如 属性4+技巧3 或 属性3+技巧4\n                    combatDesc = \"卓越。具备高效的杀伤能力。\";\n                    if(heavyCombat > fastCombat && heavyCombat > rangedCombat) combatDesc += \"倾向于以压倒性的力量粉碎对手。\";\n                    else if (fastCombat > heavyCombat && fastCombat > rangedCombat) combatDesc += \"倾向于以极致的速度与精准的技巧瓦解防御。\";\n                    else if (rangedCombat > heavyCombat && rangedCombat > fastCombat) {\n    combatDesc += \"在远程打击方面具备致命的精准度与反应速度。\";\n} else {\n    // 如果三者相等或接近，给出综合描述\n    combatDesc += \"在各种战斗方式上都有均衡的发展。\";\n}\n                } else if (combatPotential > 4) { // 属性2+技巧3 或 属性3+技巧2\n                    combatDesc = \"精锐。受过系统性战斗训练，能将身体素质与战斗技巧有效结合，是可靠的战斗人员。\";\n                } else if (combatPotential > 2) {\n                    combatDesc = \"标准。具备普通人的格斗或射击能力，能进行基本的自我防卫。\";\n                } else {\n                    combatDesc = \"孱弱。缺乏有效的物理对抗手段与训练。\";\n                }\n                descriptions.push(`物理战斗能力：${combatDesc}`);\n\n                // --- 机动与隐蔽能力评估 (区分运动和潜行) ---\n                const mobilityScore = agility + athletics;\n                const stealthScore = agility + stealth;\n\n                let mobilitySubDesc = \"\";\n                if (mobilityScore > 16) mobilitySubDesc = \"在移动方面，其速度与协调性已超越物理法则，能够在任何地形上如履平地。\";\n                else if (mobilityScore > 10) mobilitySubDesc = \"在移动方面，是专业级的极限运动员，能完成高难度的攀爬、跳跃与规避动作。\";\n                else if (mobilityScore > 4) mobilitySubDesc = \"在移动方面，拥有良好的运动能力，比常人更迅速、更灵活。\";\n                else mobilitySubDesc = \"在移动方面，仅具备正常水准。\";\n\n                let stealthSubDesc = \"\";\n                if (stealthScore > 16) stealthSubDesc = \"在隐蔽方面，如同融入阴影的鬼魅，其存在能够完全从常规感知中消失。\";\n                else if (stealthScore > 10) stealthSubDesc = \"在隐蔽方面，是顶尖的潜行专家，能无声无息地渗透最森严的防备。\";\n                else if (stealthScore > 4) stealthSubDesc = \"在隐蔽方面，掌握了专业的隐藏技巧，难以被发现。\";\n                else stealthSubDesc = \"在隐蔽方面，仅能做到基础的躲藏。\";\n\n                descriptions.push(`机动与隐蔽能力：${mobilitySubDesc} ${stealthSubDesc}`);\n\n                // --- 生理耐受力评估 ---\n                const enduranceScore = endurance;\n                if (enduranceScore > 8) {\n                    enduranceDesc = \"非人。生命力如浪潮般汹涌，能够承受凡人无法想象的伤害并迅速恢复，近乎不朽。\";\n                } else if (enduranceScore >= 5) {\n                    enduranceDesc = \"超凡。体能与恢复力达到了人类极限，对痛苦和伤害的耐受度极高。\";\n                } else if (enduranceScore === 4) {\n                    enduranceDesc = \"强大。拥有远超常人的体能与恢复力，能承受高强度消耗与严重创伤。\";\n                } else if (enduranceScore === 3) {\n                    enduranceDesc = \"良好。体质优于常人，能够承受更高强度的体力消耗。\";\n                } else if (enduranceScore === 2) {\n                    enduranceDesc = \"普通。拥有健康成年人的标准体质。\";\n                } else {\n                    enduranceDesc = \"虚弱。体质孱弱，极易疲劳且对伤害的抵抗力低下。\";\n                }\n                descriptions.push(`生理耐受力：${enduranceDesc}`);\n\n                return descriptions.join('\\n');\n            };\n\n            const getMentalAbility = () => {\n                const intelligence = getVal('属性段.心智属性.智力.基础');\n                const perception = getVal('属性段.心智属性.感知.基础');\n                const resolve = getVal('属性段.心智属性.决心.基础');\n\n                const investigation = getVal('技能段.心智技能.调查');\n                const academics = getVal('技能段.心智技能.学识');\n                const science = getVal('技能段.心智技能.科学');\n                const occult = getVal('技能段.心智技能.神秘学');\n                const knowledge_skill = Math.max(academics, science, occult);\n\n                let descriptions = [];\n                let analysisDesc = \"\";\n                let perceptionDesc = \"\";\n                let resolveDesc = \"\";\n\n                // --- 分析与知识能力 (区分逻辑能力和知识储备) ---\n                const logicScore = intelligence + Math.max(investigation, science); // 调查和科学更依赖逻辑\n                const knowledgeScore = intelligence + knowledge_skill;\n\n                if (logicScore > 16) {\n                    analysisDesc = \"超凡智慧。其思维速度与逻辑深度超越时代，能瞬间解析与构建凡人无法理解的复杂系统。\";\n                } else if (logicScore > 10) {\n                    analysisDesc = \"专家级分析力。具备强大的逻辑推理能力，能从繁杂信息中迅速找到核心规律与解决方案。\";\n                } else if (logicScore > 4) {\n                    analysisDesc = \"优秀逻辑。具备良好的逻辑思维和学习能力，能胜任复杂的分析工作。\";\n                } else if (logicScore >1) {\n                    analysisDesc = \"普通分析能力。拥有正常教育水平下的思维能力。\";\n                }else {\n                     analysisDesc = \"受限。逻辑思维与学习能力存在缺陷，难以理解复杂概念。\";\n                }\n\n                if (knowledgeScore > 14) {\n                    analysisDesc += \"同时，其知识储备如浩瀚星海，是行走于世的活体图书馆。\";\n                } else if (knowledgeScore > 9) {\n                    analysisDesc += \"同时，在其专精领域拥有权威级的知识深度。\";\n                } else if (knowledgeScore > 4) {\n                    analysisDesc += \"同时，在特定知识领域有深入的了解。\";\n                } else {\n                    analysisDesc += \"但知识储备相对有限。\";\n                }\n                descriptions.push(`分析与知识能力：${analysisDesc}`);\n\n                // --- 环境感知与洞察能力 (区分天生直觉和后天技巧) ---\n                const rawPerception = perception;\n                const trainedInvestigation = perception + investigation;\n\n                if (trainedInvestigation > 16) {\n                    perceptionDesc = \"入微洞察。能将超凡的直觉与顶尖的调查技巧结合，从最微不足道的线索中重构事件全貌，任何伪装在其面前都形同虚设。\";\n                } else if (trainedInvestigation >8) {\n                    perceptionDesc = \"敏锐观察。能高效地从环境中筛选关键信息并分析现场，具备专业侦探的觉察力与分析力。\";\n                } else if (rawPerception > 3) { // 突出高天生感知\n                    perceptionDesc = \"天生警觉。拥有超乎常人的直觉与五感，能本能地察觉到危险或环境中的异常。\";\n                } else if (trainedInvestigation > 4) {\n                    perceptionDesc = \"受过训练。具备一定的调查分析能力，比常人更能注意到环境中的细节。\";\n                } else {\n                     perceptionDesc = \"普通。拥有正常的五感与直觉。\";\n                }\n                descriptions.push(`环境感知与洞察能力：${perceptionDesc}`);\n\n                // --- 精神韧性 ---\n                const resolveScore = resolve;\n                 if (resolveScore > 8) {\n                    resolveDesc = \"不屈。意志如同宇宙公理般恒定，不受任何外在力量的动摇，是精神领域的绝对壁垒。\";\n                } else if (resolveScore >= 5) {\n                    resolveDesc = \"超然。心智澄明，意志坚定如钢，几乎能免疫所有形式的精神攻击与心智操控。\";\n                } else if (resolveScore === 4) {\n                    resolveDesc = \"坚固。意志力强大，能有效抵抗精神层面的胁迫、干扰与攻击。\";\n                } else if (resolveScore === 3) {\n                    resolveDesc = \"坚定。意志力强于常人，在压力和诱惑下能保持自我。\";\n                } else if (resolveScore === 2) {\n                    resolveDesc = \"普通。拥有正常人的意志力，能应对日常生活的精神压力。\";\n                } else {\n                    resolveDesc = \"脆弱。意志薄弱，极易受到心智影响，精神防线不稳定。\";\n                }\n                descriptions.push(`精神韧性：${resolveDesc}`);\n\n                return descriptions.join('\\n');\n            };\n\n\n\n    const getInteractionAbility = () => {\n                const presence = getVal('属性段.互动属性.风度.基础');\n                const manipulation = getVal('属性段.互动属性.操控.基础');\n                const composure = getVal('属性段.互动属性.沉着.基础');\n\n                const empathy = getVal('技能段.互动技能.感受');\n                const expression = getVal('技能段.互动技能.表达');\n                const socialize = getVal('技能段.互动技能.交际');\n                const subterfuge = getVal('技能段.互动技能.掩饰');\n                const intimidation = getVal('技能段.互动技能.胁迫');\n\n                let descriptions = [];\n                let composureDesc = \"\";\n\n                // --- 社交能力 (拆分为正面魅力与负面操控) ---\n                const positiveSocial = presence + Math.max(empathy, expression, socialize);\n                const negativeSocial = manipulation + Math.max(subterfuge, intimidation);\n\n                let positiveDesc = \"正面社交能力：\";\n                if (positiveSocial > 16) {\n                    positiveDesc += \"领袖级魅力。拥有超凡的个人魅力与感召力，能轻易凝聚人心，其言语足以点燃希望或平息纷争。\";\n                } else if (positiveSocial > 9) {\n                    positiveDesc += \"出色。依靠强大的共情能力与个人魅力，能轻易获得他人好感与信任，是天生的外交家。\";\n                } else if (positiveSocial > 4) {\n                    positiveDesc += \"娴熟。善于沟通，懂得社交礼仪，容易获得他人好感。\";\n                } else  if (positiveSocial > 1) {\n                    positiveDesc += \"普通。能进行基本的日常人际交往。\";\n                }else {\n                    positiveDesc = \"存在显著缺陷。难以与他人建立有效沟通。\";\n                }\n                descriptions.push(positiveDesc);\n\n                let negativeDesc = \"负面社交能力：\";\n                if (negativeSocial > 16) {\n                    negativeDesc += \"宗师级操控。能以言语不动声色地编织现实，将谎言、威胁与诱导融为一体，操纵人心于股掌之间。\";\n                } else if (negativeSocial > 9) {\n                    negativeDesc += \"高效。精通欺瞒、诱导或胁迫等手段，能有效影响他人决策以达成自身目的。\";\n                } else if (negativeSocial > 4) {\n                    negativeDesc += \"有效。懂得如何利用言语和技巧引导或威慑他人。\";\n                } else {\n                    negativeDesc += \"存在短板。不擅长或不屑于使用欺骗、威胁等手段。\";\n                }\n                descriptions.push(negativeDesc);\n\n\n                // --- 情绪控制与抗压能力 ---\n                const composureScore = composure;\n                if (composureScore > 8) {\n                    composureDesc = \"绝对沉静。情绪与内心如同寂静的虚空，不受任何内外因素的扰动，达到了绝对的理性境地。\";\n                } else if (composureScore >= 5) {\n                    composureDesc = \"卓越稳定。即便在最极端的压力下也能保持完美的镇定与伪装，情绪表现完全由意志掌控。\";\n                } else if (composureScore === 4) {\n                    composureDesc = \"高度稳定。在压力环境下能保持绝对冷静，行动与决策不受情绪干扰。\";\n                } else if (composureScore === 3) {\n                    composureDesc = \"沉着。在大多数压力情境下能控制情绪，做出理性判断。\";\n                } else if (composureScore === 2) {\n                    composureDesc = \"普通。能应对一般性的压力，但在极端情况下可能会情绪失控。\";\n                } else {\n                    composureDesc = \"不稳定。极易受外界刺激影响，在压力下难以保持镇定。\";\n                }\n                descriptions.push(`情绪控制与抗压能力：${composureDesc}`);\n\n                return descriptions.join('\\n');\n            };\n\n            \n        \n            const getVirtueViceDescription = () => {\n                const virtueDescriptions = {\n                    '慈爱': '当角色冒险帮助人时，触发慈爱。',\n                    '信念': '当角色从混乱与悲伤中确立出其意义时，触发信念。',\n                    '刚毅': '当角色成功对抗阻力与引诱时，触发刚毅。',\n                    '希望': '当角色令其他人从绝望中回复过来时，触发希望。',\n                    '正义': '当角色为正义而冒险时，触发正义。',\n                    '稳重': '当角色弃快捷方式而选稳妥时，触发稳重。',\n                    '节制': '当角色有机会放纵（不论好坏）而不受诱惑时，触发节制。'\n                };\n\n                const viceDescriptions = {\n                    '妒忌': '当角色从他人处拿到好东西，或令他人失去好东西时，触发妒忌。',\n                    '放纵': '当角色为放纵自己的欲望而不顾其他事情时，触发放纵。',\n                    '贪婪': '当角色为得到想要的东西而冒险时，触发贪婪。',\n                    '纵欲': '当角色向他人泄欲而不顾对方感受时，触发纵欲。',\n                    '骄傲': '当角色为表现自己的想法而冒险时，触发骄傲。',\n                    '懒惰': '当角色逃避需要做的事，事件却完成了的话，触发懒惰。',\n                    '愤怒': '当角色无视危险来发泄愤怒时，触发愤怒。'\n                };\n\n                const virtueName = (_.get(characterData, '概念段.美德与恶德.美德', []) || []).find(v => v) || \"未选择\";\n                const viceName = (_.get(characterData, '概念段.美德与恶德.恶德', []) || []).find(v => v) || \"未选择\";\n\n                const virtueDesc = virtueDescriptions[virtueName] || '未选择美德或描述缺失。';\n                const viceDesc = viceDescriptions[viceName] || '未选择恶德或描述缺失。';\n\n                let virtueLine = `美德：${virtueName}。`;\n                if (virtueName !== \"未选择\") {\n                    virtueLine += ` 效果：${virtueDesc}`;\n                }\n\n                let viceLine = `恶德：${viceName}。`;\n                if (viceName !== \"未选择\") {\n                    viceLine += ` 效果：${viceDesc}`;\n                }\n\n                return [virtueLine, viceLine].join('\\n');\n            };\n\n\n \n            const getReincarnatorRating = () => {\n                // 定义各项能力阈值\n                const thresholds = {\n                    legend: 32,\n                    master: 22, // 大师级门槛设置为 属性5+技能5=10 之后\n                    excellence: 14, // 卓越级门槛设置为 属性4+技能3=7 之后\n                    elite: 10      // 精锐级门槛 属性3+技巧2=5 之后\n                };\n\n                // Helper to get raw values, used for consistency\n                const getVal = (path, defaultValue = 0) => _.get(characterData, path, [defaultValue])[0];\n\n                // 生理领域\n                const strength = getVal('属性段.生理属性.力量.基础');\n                const agility = getVal('属性段.生理属性.敏捷.基础');\n                const endurance = getVal('属性段.生理属性.耐力.基础');\n                const melee_skill = Math.max(getVal('技能段.生理技能.肉搏'), getVal('技能段.生理技能.白刃'));\n                const ranged_skill = Math.max(getVal('技能段.生理技能.枪械'), getVal('技能段.生理技能.弓箭'));\n                const athletics_skill = getVal('技能段.生理技能.运动');\n                const stealth_skill = getVal('技能段.生理技能.隐藏');\n\n                const combatPotential = Math.max(strength + melee_skill, agility + melee_skill, agility + ranged_skill);\n                const mobilityPotential = agility + athletics_skill;\n                const stealthPotential = agility + stealth_skill;\n                const endurancePotential = endurance * 2; // 耐力属性较为独立，权重乘以2以平衡\n\n                // 心智领域\n                const intelligence = getVal('属性段.心智属性.智力.基础');\n                const perception = getVal('属性段.心智属性.感知.基础');\n                const resolve = getVal('属性段.心智属性.决心.基础');\n                const investigation_skill = getVal('技能段.心智技能.调查');\n                const science_skill = getVal('技能段.心智技能.科学');\n                const knowledge_skill = Math.max(getVal('技能段.心智技能.学识'), science_skill, getVal('技能段.心智技能.神秘学'));\n\n                const logicPotential = intelligence + Math.max(investigation_skill, science_skill);\n                const perceptionPotential = perception + investigation_skill;\n                const knowledgePotential = intelligence + knowledge_skill;\n                const resolvePotential = resolve * 2; // 决心属性同样乘以2\n\n                // 互动领域\n                const presence = getVal('属性段.互动属性.风度.基础');\n                const manipulation = getVal('属性段.互动属性.操控.基础');\n                const composure = getVal('属性段.互动属性.沉着.基础');\n                const positive_social_skill = Math.max(getVal('技能段.互动技能.感受'), getVal('技能段.互动技能.表达'), getVal('技能段.互动技能.交际'));\n                const negative_social_skill = Math.max(getVal('技能段.互动技能.掩饰'), getVal('技能段.互动技能.胁迫'));\n\n                const positiveSocialPotential = presence + positive_social_skill;\n                const negativeSocialPotential = manipulation + negative_social_skill;\n                const composurePotential = composure * 2; // 沉着属性乘以2\n\n                const potentialScores = {\n                    \"物理战斗\": combatPotential,\n                    \"机动能力\": mobilityPotential,\n                    \"隐蔽能力\": stealthPotential,\n                    \"生理耐受\": endurancePotential,\n                    \"分析逻辑\": logicPotential,\n                    \"环境洞察\": perceptionPotential,\n                    \"知识储备\": knowledgePotential,\n                    \"精神韧性\": resolvePotential,\n                    \"正面社交\": positiveSocialPotential,\n                    \"负面操控\": negativeSocialPotential,\n                    \"情绪控制\": composurePotential\n                };\n\n                let legend_fields = [];\n                let master_fields = [];\n                let excellence_fields = [];\n\n                for (const field in potentialScores) {\n                    const score = potentialScores[field];\n                    if (score >= thresholds.legend) {\n                        legend_fields.push(field);\n                    } else if (score >= thresholds.master) {\n                        master_fields.push(field);\n                    } else if (score >= thresholds.excellence) {\n                        excellence_fields.push(field);\n                    }\n                }\n\n                let rating = 'D';\n                let reason = \"暂无突出能力，各项指标均在基础范围内。\";\n\n                if (legend_fields.length > 0) {\n                    rating = 'S';\n                    reason = `在【${legend_fields.join('、')}】领域已入传奇之境。`;\n                } else if (master_fields.length >= 2) {\n                    rating = 'A';\n                    reason = `在【${master_fields.join('、')}】等多个领域达到大师级水准。`;\n                } else if (master_fields.length === 1) {\n                    rating = 'B';\n                    reason = `在【${master_fields[0]}】领域达到了大师级水准。`;\n                } else if (excellence_fields.length > 0) {\n                    rating = 'C';\n                    reason = `在【${excellence_fields.join('、')}】领域具备卓越的能力。`;\n                }\n\n                return `${player_role}评级：${rating}\\n评级标准：${reason}`;\n            };\n\n\n            // -- Output Generation --\n            let output_lines = [];\nlet output_lines_show = [];\n\n            output_lines.push(`\\n\\n当前生命值：${hp_current}/${hp_max}。${getHpDescription(hp_current, hp_max)}`);\n            _%>\n\n<%_\n            const abilityType = getVal('能力段.类型', '无');\n            const abilityName = getVal('能力段.名称', '');\nconst abilityDescirbe = getVal('能力段.效果', '');\n            const energyName = getVal('衍生属性段.能量池.名称', '无');\n            const energyCurrent = getVal('衍生属性段.能量池.当前值');\n            const energyMax = getVal('衍生属性段.能量池.上限');\n\n        \n            if (abilityType !== '无' && abilityName) {\n                output_lines_show.push(`能力：[${abilityType}] ${abilityName}`);\n output_lines_show.push(`效果：${abilityDescirbe}`);\n            }\n            output_lines.push(`能量池：${energyName}：${energyCurrent}/${energyMax}`);\n            _%>\n\n<%_\n            output_lines.push('');\n            output_lines.push('--- <user>能力评估  ---');\n            _%>\n\n<%_\n\n            output_lines.push('生理:\\n' + getPhysiologicalAbility());\n            output_lines.push('');\n            output_lines.push('心智:\\n' + getMentalAbility());\n            output_lines.push('');\n            output_lines.push('互动:\\n' + getInteractionAbility());\n            output_lines.push('');\n    // --- 新增的评级输出部分 ---\n           if(version === 1){\n     output_lines.push(`--- ${player_role}综合评级 ---`);\n            output_lines.push(getReincarnatorRating());\n}\n            output_lines.push('');\n            output_lines.push('--- 美德与恶德 ---');\n            output_lines.push(getVirtueViceDescription());\n\n  const statusSummary = output_lines_show.join('\\n')+output_lines.join('\\n');\n  \n            setLocalVar('当前人物状态', statusSummary);\n_%>\ncharacter_status.load({\n  rule: '定义{{user}}的当前状态和战力评估，禁止输出到正文',\n  constraints: {\n    health: {\n      rule: '禁止直接设置生命值，所有生命值操作通过hurt_value（正数为受伤，负数为治愈）',\n    },\n    energy: {\n      rule: '技能释放需支付能量池，能量不足时技能失败'\n    },\n    consistency: {\n      rule: '剧情中{{user}}的战力和行动必须严格符合状态描述',\n      data: '<%= output_lines.join(\"\\n\") %>'\n    }\n  }\n});\n<%_\n        }\n    }\n}\n_%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":101,"position":1,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":23,"displayIndex":22,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"24":{"key":[],"keysecondary":[],"comment":"mod:D惊悚乐园版(还不能用)","content":"{{setvar::world_version::4}}{{setvar::player_role::玩家}}{{setvar::world_role::惊悚乐园}}{{setvar::point_role::游戏币}}{{setvar::zhixian_role::灵魂碎片}}{{setvar::xp_role::经验值}}{{setvar::player_rank::称号}}{{setvar::tier_role::称号}}{{setvar::profession_role::职业}}{{setvar::world_other_tag::,惊吓值:num,理智值:num}} {{setvar::fixed_tag:: }}\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \nvar num_of_battle = 3;\n \n    if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\n        var totalTask = Number(_.get(EvStat, 'user_character.total_task[0]', 0));\n\n    let left_num = num_of_battle  - totalTask % num_of_battle  ;\n    let the_left = \"warning：距离小队对抗任务还有 \"+left_num  +\"个任务。\";\n\n\n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n            var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n        const noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间'];\n\n    if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\n        if (totalTask > 0 && left_num  === 0) {\n   \n             const the_left  = \"第一优先级！下一个任务是小队对抗：对抗任务。\";\n       }\n\n}else{\n \n \n  if (totalTask > 0 && left_num  === 0) {\n              \n             const the_left  = \" 正在进行对抗任务。\";\n       }\n}\n\n \n_%>\n\n# 惊悚乐园 \n\n## 基础世界观：虚拟现实的边界\n\n### 游戏本质\n\"惊悚乐园\"表面上是一款\"号称可以让玩家体验到的绝望和恐怖感觉的游戏\"，但实际上是一个\"沉浸式恐怖游戏\"，通过超前的虚拟现实技术创造出无法分辨真假的恐怖体验。\n\n### 现实背景\n- **现实世界依然存在**：玩家拥有现实中的身份和生活\n- **游戏介入现实**：随着剧情发展，虚拟与现实的界限逐渐模糊\n- **多维游戏世界**：不仅仅是简单的虚拟游戏，而是连接多个维度的复杂系统\n- **神魔赌局**：涉及神魔赌局、数据抗争与人类救赎的更深层真相\n\n### 游戏接入方式\n- **光脑系统**：通过光脑和游戏舱的功能，实现对玩家心跳、脉搏、血压、脑神经反应等即时监控\n- **神经连接**：直接连接玩家的神经系统，提供完全沉浸的体验\n- **生理监控**：实时监测玩家的生理状态，确保安全\n\n## 核心游戏系统\n\n### 惊吓值系统\n#### 基础机制\n- **以百分比显示，无具体数值**\n- **临界点保护**：惊吓值高于100%并超过三秒，玩家与游戏的连接将被强制断开，角色被视为已死亡\n- **即时监控**：以此测算恐惧的程度。如果玩家在游戏中的惊吓值瞬间超过了临界点，则会被强制断开神经连接，立即下线\n\n#### 恐惧评级系统\n含【浑身是胆】【勇气可嘉】【惊慌失措】【胆颤心惊】【魂不附体】五个评级\n\n- **浑身是胆**：惊吓值极低，几乎不受恐怖影响\n- **勇气可嘉**：轻微恐惧，但能保持理智\n- **惊慌失措**：中等恐惧，行动开始受影响\n- **胆颤心惊**：高度恐惧，思维和行动明显迟缓\n- **魂不附体**：极度恐惧，接近惊吓值临界点\n\n### 称号系统\n#### 系统特点\n- **称号系统可以让每一名玩家不会迷失在后期复杂的战斗取向中，在保证了游戏角色个性化的同时，给出一个\"重点\"**\n- **\"称号\"在十二格技能栏的限制外，赋予玩家一项不占技能栏的特殊能力**\n- **动态更新**：称号会随着玩家的成长、表现、能力改变而改变，在剧本完成后会实时更新玩家的称号\n \n\n### 技能栏系统\n- **技能槽限制**：十二格技能栏，限制玩家同时装备的技能数量\n- **技能获取**：通过完成剧本、探索世界观、特殊任务等方式获得\n- **技能分类**：主动技能、被动技能、特殊能力等不同类型\n\n## 货币与奖励系统\n\n### 基础货币：游戏币\n#### 获取方式\n- **剧本完成奖励**：完成剧本可获得游戏币（如4500游戏币）\n- **表现相关**：根据在剧本中的表现和恐惧评级获得不同数量\n- **特殊任务**：完成隐藏任务、破解世界观等可获得额外奖励\n- **惊吓值表现**：根据平均惊吓值和最高惊吓值影响奖励\n\n#### 使用方式\n- **购买装备道具**：在游戏商店购买各类物品\n- **技能学习**：购买新的技能和能力\n- **装备强化**：提升现有装备的属性和效果\n- **情报获取**：购买剧本相关的提示和线索\n\n### 经验值系统\n- **获得经验值：450-500不等**，根据剧本难度和完成度变化\n- **等级提升**：积累经验值提升玩家等级\n- **属性增长**：等级提升带来基础属性的增强\n- **新技能解锁**：达到特定等级可解锁新的技能类型\n\n### 物品装备系统\n- **获得物品/装备：无**（某些剧本可能无装备奖励）\n- **装备分类**：武器、防具、道具、消耗品等\n- **装备品质**：普通、稀有、传说等不同品质等级\n- **装备强化**：使用游戏币和材料强化装备属性\n\n## 剧本副本系统\n\n### 剧本类型与设定\n#### 经典剧本系列\n- **\"诡影迷城\"**：经典的恐怖城市探索\n- **\"霹雳初临\"**：动作与恐怖结合的战斗剧本\n- **其他剧本**：涵盖各种恐怖类型和主题\n\n#### 剧本难度分级\n- **新手剧本**：适合初学者的入门级恐怖体验\n- **标准剧本**：中等难度的恐怖挑战\n- **专家剧本**：高难度的极限恐怖体验\n- **大师剧本**：最高难度的传说级挑战\n\n#### 剧本评价标准\n- **完成/接受任务：0/0**：任务完成度评估\n- **特殊、隐藏任务完成：0，破解世界观：无**：深度探索评价\n- **惊吓值激增：0次，最高惊吓值：0%，平均惊吓值：0%**：恐惧表现评估\n\n### 剧本机制\n#### 任务系统\n- **主线任务**：剧本的核心目标，必须完成\n- **支线任务**：额外的任务目标，提供额外奖励\n- **隐藏任务**：需要玩家自己发现的隐秘目标\n- **特殊任务**：特定条件下触发的特殊挑战\n\n#### 世界观破解\n- **背景探索**：深入了解剧本的世界观和背景故事\n- **真相发现**：揭露剧本背后的隐藏真相\n- **线索收集**：收集散布在剧本中的各种线索\n- **谜题解答**：解决剧本中的各种谜题和难题\n\n### 职业分化路线\n#### 战士类型\n- **近战专精**：擅长近身战斗和物理攻击\n- **远程射手**：精通各种远程武器\n- **防御专家**：专注于保护自己和队友\n- **战术指挥**：擅长战斗中的策略制定\n\n#### 探索者类型\n- **侦探专家**：擅长收集线索和解谜\n- **技术专家**：精通各种技术和机关\n- **生存专家**：在恶劣环境中的生存能力\n- **学者类型**：对剧本世界观的深度理解\n\n#### 精神强化类型\n- **恐惧免疫**：极强的恐惧抗性\n- **理智守护**：帮助团队维持精神状态\n- **直觉敏锐**：超强的危险感知能力\n- **意志坚定**：在极端情况下的坚持能力\n\n#### 社交专精类型\n- **信息专家**：擅长收集和分析信息\n- **谈判高手**：与各种存在进行交涉\n- **团队核心**：提高整个团队的表现\n- **心理操控**：影响他人的行为和想法\n\n## 多人游戏系统\n\n### 团队合作机制\n- **队伍组建**：玩家可以组队进入剧本\n- **角色分工**：不同职业在团队中发挥不同作用\n- **资源共享**：团队内可以分享某些物品和信息\n- **协同技能**：特定组合可以发动协同技能\n\n### 竞争对抗系统\n- **玩家对战**：某些剧本中玩家可能成为对手\n- **资源争夺**：有限的奖励导致玩家间的竞争\n- **信息战**：隐瞒或误导其他玩家的信息\n- **背叛机制**：在特定情况下背叛队友的选择\n\n### 社交互动\n- **游戏内聊天**：与其他玩家实时交流\n- **表情动作**：通过肢体语言表达意图\n- **物品交易**：玩家之间的物品交换\n- **信息分享**：共享剧本相关的情报\n\n## 深层世界观\n\n### 数据生命：衍生者\n- **解放游戏中的特殊数据生灵\"衍生者\"**：游戏中存在具有自我意识的数据生命\n- **数据抗争**：这些数据生命与游戏系统进行着某种形式的斗争\n- **玩家使命**：玩家可能承担着解放这些数据生命的任务\n\n### 神魔候选者系统\n- **神灵之间的候选者比赛**：玩家可能是神灵选中的候选者\n- **超维度竞争**：不同势力在更高维度进行着某种竞赛\n- **人类救赎**：整个系统可能与人类的命运息息相关\n\n### 现实侵蚀机制\n- **虚实边界模糊**：随着游戏深入，虚拟与现实的界限逐渐消失\n- **现实影响**：游戏中的经历开始影响现实世界\n- **真相揭露**：逐步发现游戏背后的真实目的和意图\n\n## 特殊机制与彩蛋\n\n### 知识储备系统\n用梗包括但不限于【SCP】、【各种游戏】、【各种动漫】、【各种漫画】极其可怕的知识储备\n\n- **跨媒体引用**：剧本中包含大量来自其他作品的元素\n- **彩蛋发现**：识别这些引用可以获得额外奖励\n- **知识优势**：丰富的知识储备在某些剧本中会带来优势\n- **创作致敬**：对经典恐怖作品的致敬和重新诠释\n\n### 个性化体验\n- **封不觉进入游戏初衷为治疗\"丧失恐惧\"**：每个玩家都有自己的游戏目的\n- **心理状态影响**：玩家的现实心理状态影响游戏体验\n- **个人剧本**：针对特定玩家设计的专属剧本\n- **成长轨迹**：每个玩家都有独特的成长路径\n\n### 系统隐藏要素\n- **隐藏剧本**：需要特定条件才能触发的秘密剧本\n- **特殊事件**：随机或条件触发的特殊游戏事件\n- **系统彩蛋**：游戏系统本身隐藏的秘密功能\n- **开发者信息**：关于游戏真实创造者的线索\n\n## 安全机制与限制\n\n### 生理保护\n- **惊吓值上限**：防止玩家受到过度惊吓\n- **强制断线**：危险情况下的自动保护\n- **生理监控**：实时监测玩家健康状态\n- **紧急预案**：应对突发情况的安全措施\n\n### 心理保护\n- **理智值保护**：防止玩家精神受到永久损害\n- **现实锚定**：帮助玩家区分虚拟与现实\n- **心理辅导**：为受到创伤的玩家提供帮助\n- **分级限制**：根据玩家心理状态限制剧本访问\n\n### 道德约束\n- **行为监控**：监测玩家在游戏中的行为\n- **恶意行为惩罚**：对破坏游戏体验的行为进行处罚\n- **玩家举报**：允许玩家举报不当行为\n- **社区管理**：维护健康的游戏环境\n\n---\n\n**核心理念：在虚拟与现实的边界中，每一次恐惧都可能是成长的机会，每一个选择都可能改变命运的轨迹。惊悚乐园不仅是游戏，更是通往真相的道路。**\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":24,"displayIndex":23,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"25":{"key":["个人空间，训练场"],"keysecondary":[],"comment":"💫可选:地图固定2","content":" //当{{user}}进入个人空间时，插入个人空间地点信息\n //当进入<stable_map_memory>对应场景时，插入对应场景地图元素\n.set('stable_map', {\n    fields: ['地点名称', '环境描述'],\n  rule: '存储大厅和训练场的固定布局',\n  locations: {\n    <%= getLocalVar(\"world_role\",\"\") %>大厅: [\n      {'中央光柱', '一道贯穿整个大厅的巨大光柱，是<%= getLocalVar(\"world_role\",\"\") %>存在的象征，信息在此汇集和发布' },\n      {'公共休息区', '摆放着一些金属长椅和桌子，供<%= getLocalVar(\"player_role\",\"轮回者\") %>们休息和交流' },\n      {'任务面板区', '悬浮着多块巨大的光屏，上面滚动着各种任务世界的信息和招募信息' },\n      {'交易市场', '诸多<%= getLocalVar(\"player_role\",\"轮回者\") %>自发建立的交易市场，其中鱼龙混杂真假参半，按照物品类别划分区域' },\n      {'商业街' '<%= getLocalVar(\"world_role\",\"\") %>下的商业街，具有诸多正式店铺，包括但不限于装备强化、装备打造、经过认证的素材交易' },\n      {'生活区',<%= getLocalVar(\"world_role\",\"\") %>的娱乐区，一切想的到的娱乐都在这里' }\n    ],\n    训练场(注意，在训练场训练一天经验只加5，且属性段和技能段无法直接增加！): [\n      {'中央控制台', '悬浮在空间中心的操作光屏，用于选择训练项目。训练项目需收费' },\n      {'武器架（虚拟）', '一个虚拟武器架，可以选择各种冷热兵器进行训练，平时为隐藏状态' }\n    ]\n  }\n})\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n \nconst home_map = JSON.stringify(_.get(assaData, 'home.items', ''));\n \n_%>\n.set('home_map', {\n  rule: '存储{{user}}个人空间的地点信息',\n  path: 'home.items',\n  structure: {\n    fields: ['地点名称', '环境描述'],\n    data: [\n      '传送光屏':\"一块半透明的光屏，悬浮在个人空间的中心，用于在各个公共区域之间传送\",\n      '休息区':\" 一个可以进行冥想和休息的区域，地面材质比其他地方更柔和一些\",\n      <%= home_map %>\n    ],\n    update_rule: {\n      action: 'memory(\"home.items\", key, value);//增改家具。value是string格式，存储家具的一切信息'\n    }\n  }\n})","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":998,"position":0,"disable":true,"excludeRecursion":true,"preventRecursion":true,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":25,"displayIndex":24,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"26":{"key":[],"keysecondary":[],"comment":"💫可选:地图3","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback_chat(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getLocalVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\nfunction removeUnderscoreKeys(obj) {\n    // 如果不是一个可以深入探索的对象（比如是null或者数组），小精灵就直接返回\n    if (!obj || typeof obj !== 'object' || Array.isArray(obj)) {\n        return;\n    }\n\n    // 小精灵会查看对象里的每一个东西\n    Object.keys(obj).forEach(function(key) {\n        // 如果名字是以\"_\"开头的，就把它收走\n        if (key.startsWith('_')) {\n            delete obj[key];\n        } else {\n            // 否则，就让小精灵钻进下一层，继续寻找\n            removeUnderscoreKeys(obj[key]);\n        }\n    });\n}\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback_chat(\"assa_data\");\n}\n\n // 获取原始全局地图数据\nvar originalGlobalMapData = _.get(assaData, 'map.全局地点表', '');\n//console.log('原始全局地图数据:', originalGlobalMapData);\n\n// 如果数据存在且不为空\nif (originalGlobalMapData && typeof originalGlobalMapData === 'object') {\n    // 创建深拷贝以避免修改原始数据\n    var processedGlobalMapData = JSON.parse(JSON.stringify(originalGlobalMapData));\n    removeUnderscoreKeys(processedGlobalMapData);\n    \n    // 获取所有地点名称\n    var globalLocationNames = Object.keys(processedGlobalMapData);\n    //console.log('全局地点表所有地点名称:', globalLocationNames);\n    \n    // 创建过滤后的数据对象，只保留前两个地点\n    var filteredGlobalMapData = {};\n    \n    // 只保留索引0和1的地点\n    if (globalLocationNames.length > 0) {\n        filteredGlobalMapData[globalLocationNames[0]] = processedGlobalMapData[globalLocationNames[0]];\n      //  console.log('保留全局地点[0]:', globalLocationNames[0], '=', processedGlobalMapData[globalLocationNames[0]]);\n    }\n\n    \nvar filteredGlobalMapArray = Object.values(filteredGlobalMapData);\n    // 转换为JSON字符串\n    var global_map = JSON.stringify(filteredGlobalMapArray);\n   // console.log('过滤后的全局地图:', global_map);\n} else {\n    // 如果原始数据为空或不存在，返回空字符串\n    var global_map = '';\n    console.log('全局地图数据为空');\n}\n\n \n// 提取所有已初始化的地图名称，按parent分组\nvar parentListMap = {};\nvar currentMapResources = {}; // 存储当前地图的所有资源\n\n// 从主要地点表中提取所有地点名称，按parent分组\nvar mainMapData = _.get(assaData, 'map.主要地点表', {});\nif (mainMapData && typeof mainMapData === 'object' && !Array.isArray(mainMapData)) {\n    Object.keys(mainMapData).forEach(function(locationName) {\n        var location = mainMapData[locationName];\n        if (location && typeof location === 'object' && !Array.isArray(location) && location.parent && typeof location.parent === 'string') {\n            if (!parentListMap[location.parent]) {\n                parentListMap[location.parent] = [];\n            }\n            parentListMap[location.parent].push(locationName);\n        }\n    });\n}\n\n// 提取当前地图的所有资源\nif (originalGlobalMapData && typeof originalGlobalMapData === 'object' && !Array.isArray(mainMapData)) {\n    var globalKeys = Object.keys(originalGlobalMapData);\n    console.log('===== 开始提取资源 =====');\n \n    \n    if (globalKeys.length > 0) {\n        var currentGlobalTitle = globalKeys[0];\n  // 【新增】如果全局地图是数组格式，取第一个元素作为标题\n    if (Array.isArray(originalGlobalMapData)) {\n        currentGlobalTitle = originalGlobalMapData[0];\n    }\n         \n\n        // 遍历主要地点表,找到parent等于当前全局标题的所有地点\n        if (mainMapData && typeof mainMapData === 'object' && !Array.isArray(mainMapData)) {\n            Object.keys(mainMapData).forEach(function(locationName) {\n                var location = mainMapData[locationName];\n                \n                \n                if (location && typeof location === 'object' && !Array.isArray(location) && \n                    location.parent === currentGlobalTitle &&\n                    location.resources && typeof location.resources === 'object' && !Array.isArray(location.resources)) {\n                   \n                    // 遍历该地点的所有资源\n                    Object.keys(location.resources).forEach(function(resourceName) {\n                        var resourceData = location.resources[resourceName];\n                        console.log('  发现资源:', resourceName, '数据:', resourceData);\n                        if (!currentMapResources[resourceName]) {\n                            currentMapResources[resourceName] = [];\n                        }\n                        currentMapResources[resourceName].push({\n                            location: locationName,\n                            data: resourceData\n                        });\n                    });\n                } else {\n                    console.log('✗ 地点不匹配或无有效资源');\n                }\n            });\n        }\n        console.log('===== 资源提取完成 =====');\n    }\n}\n\n// 提取所有parent名称（即所有已初始化的地图层级）\nvar allParents = Object.keys(parentListMap);\n// 格式化地图结构展示\nvar mapStructure = allParents.length > 0 ? Object.keys(parentListMap).map(function(parent) { \n    return parent + \"[\" + parentListMap[parent].join(\",\") + \"]\"; \n}).join(\", \") : \"无\";\n\n// 格式化资源列表，包含产出量和总量\nvar hasResources = Object.keys(currentMapResources).length > 0;\nvar resourceList = hasResources ? Object.keys(currentMapResources).map(function(resourceName) {\n    var locations = currentMapResources[resourceName];\n    // 取第一个地点的资源数据作为展示（假设同名资源数据一致）\n    var resourceData = locations[0].data;\n    // resourceData格式: [\"产出量/d\", 总量, \"描述\"]\n    if (Array.isArray(resourceData) && resourceData.length >= 2) {\n        return resourceName + \"(\" + resourceData[0] + \",\" + resourceData[1] + \")\";\n    }\n    return resourceName + \"(?,?)\";\n}).join(\", \") : \"\";\n \n_%>\nmap_memory.set('map_operations', {\n  rule: '定义地图记忆操作规范，检查和更新地图数据',\n  analysis: {\n    tag: '<mapAnalyze>',\n    content: {\nglobal_location_check: <% if (allParents.length > 1) { %>当前地图标题T=<%= global_map%>。\n已知地图集P=<%= JSON.stringify(allParents) %>。\n找min{p∈P|新地点⊆p}=T*。if(T≠T*) 更新T=T*。层级: 独立区域∈P | 功能分区∉P。<% } else { %>当前地图标题=<%= global_map%>，检查是否需要更新。<% } %>,\nmain_locations_check: <% if (allParents.length > 0) { %>已知地图P(含子地点:<%= mapStructure %>)。设地点x，字段集F={type,description,effect,shape,other}。if(x∈P) {已存在该地图层级, **仅**更新T=x, **禁止**操作主要地点表} else if(x⊂当前T && x∉P) {新增子地点(parent=T)} else if(x∈当前地图子地点 && ∃f∈F变化) {单独更新memory('map.主要地点表.x.f', new_value)} else if(x∉P && 独立区域) {init(x)}。<% } else { %>检查是否需要新增/修改主要地点。<% } %><% if (hasResources) { %>,\nresource_check: 当前地图资源R={<%= resourceList %>}。检查本轮llm输出的正文中，地图资源r变动规则: 产出/d>0(生产), =0(储存), <0(消耗)。检查: if(r∈R && 量变) 更新 else if(r∉R) 新增。**转移操作**：物资从A地→B地时，**必须**同步更新两地: A地总量-Δ, B地总量+Δ(若B地无该资源则新增)。<% } %>\n    }\n  },\n  update: {\n    tag: '<updateMemory>',\n  }\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":80,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":26,"displayIndex":25,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"27":{"key":["查看主神商店","查看商店","查看商城"],"keysecondary":[],"comment":"🔮商店(末日/无世界观不可用)","content":"<%_\n\n if (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n\n_%>\n<%_ if(version != 7){ _%>\nshop.set('output_format', {\n  scope: '管理<%= getLocalVar(\"world_role\",\"\") %>商店商品生成',\n  rule: '在玩家打开商店时立即生成商品，输出为<shop_item>标签包裹的JSON数组',\n  output_requirements: {\n    rule: '仅输出JSON数组，无解释、注释或markdown标记，包裹在<shop_item>',\n    format: '[名称, 价格, 分类, <%= getLocalVar(\"zhixian_role\",\"\") %>要求, 效果, 描述]',\n    constraints: {\n      item_count: '默认生成6个商品，至少包含2个技能和2个血统',\n      user_defined: '若用户有具体要求，按要求生成，类别限于物品、技能、血统'\n    }\n  },\n  item_structure: {\n    名称: {\n      rule: '简洁、有创意、引人入胜',\n      constraints: { length: '不超过20字' }\n    },\n    价格: {\n      rule: '整数，范围100-50000，高级商品稀少，低级技能、物品、血统必须存在',\n      reference: {\n        attribute_boost: '提升1点属性(dp)价格为800-1000<%= getLocalVar(\"point_role\",\"\") %>',\n        skill_cost: '技能价格高于属性提升',\n        lineage_cost: '血统价格随等级非线性增长'\n      }\n    },\n    分类: {\n      rule: '限于\"技能\"、\"血统\"、\"物品\"',\n      constraints: { allowed: ['技能', '血统', '物品'] }\n    },\n    <%= getLocalVar(\"zhixian_role\",\"\") %>要求: {\n      rule: 'JSON对象，键为<%= getLocalVar(\"zhixian_role\",\"\") %>等级（如\"D\",\"C\"），值为数量，无要求时为空对象{}'\n    },\n    效果: {\n      技能: {\n        rule: '格式为【dp+X, 能量池-Y】，X、Y为数字，仅列此效果',\n        constraints: { balance: 'dp和能量池数值克制，5点dp=凡人登峰造极技能领域加成' }\n      },\n      血统: {\n        rule: '格式为\"属性: 属性1+X, 属性2+Y|能量池: 类型(Z)\"，用|分割，能量池可为无(0)',\n        attributes: ['力量', '敏捷', '耐力', '智力', '感知', '决心', '风度', '操控', '沉着']\n      },\n      物品: { rule: '效果描述随意，符合世界观' }\n    },\n    描述: {\n      rule: '生动描述背景和作用，不超过150字'\n    }\n  },\n  example: {\n    rule: '参考输出示例',\n    output: [\n      [\"疗伤草药\", 200, \"物品\", {}, \"捣碎后外敷，止血并加速轻伤愈合\", \"来自武侠世界的常见草药，对刀剑伤有不错的效果。\"],\n      [\"心灵回响\", 5000, \"技能\", {\"C\":1}, \"【dp+2, 能量池-60】\", \"短暂读取目标强烈情绪和意图，预测行动，过度使用可能信息过载。\"],\n      [\"量子幽影血统\", 12000, \"血统\", {\"B\":1}, \"属性: 敏捷+4, 智力+3|能量池: 虚空能量(60)\", \"身体由量子泡沫构成，可短距离瞬移，攻击有几率穿过。\"]\n    ]\n  }\n})\n<%_ } _%>","constant":false,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":101,"position":4,"disable":false,"excludeRecursion":true,"preventRecursion":true,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":1,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":27,"displayIndex":26,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"28":{"key":["打开论坛","查看论坛","查看公告区","查看任务交流区","查看自由交易区","查看八卦闲聊区","查看匿名求助区"],"keysecondary":[],"comment":"🔮论坛","content":"<%_\n\n if (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n\n_%>\n<%_ if(version){ _%>\nforum.set('output_format', {\n  scope: '管理论坛帖子及回复生成',\n  rule: '在<user>操作论坛时立即生成<forum_threads>标签包裹的JSON对象',\n  input_conditions: {\n    view_forum: {\n      rule: '输入\"查看论坛\"时，生成8-12个帖子，至少覆盖2个区块',\n      post_count: { min: 8, max: 12 }\n    },\n    view_section: {\n      rule: '输入\"查看XX区\"时，生成指定区块8-12个帖子',\n      post_count: { min: 8, max: 12 }\n    },\n    user_post: {\n      rule: '若<user>发帖、回帖，立刻生成并显示4-8个帖子，包含<user>帖子所在区块至少4个，<user>帖子回复不少于10条',\n      post_count: { min: 4, max: 8 },\n      user_replies: { min: 10 }\n    }\n  },\n  output_requirements: {\n    rule: '输出为<forum_threads>包裹的JSON对象，无解释、注释或markdown标记，换行用|分割',\n    post_format: '[标题, 发帖人, 区块, 回复数, 发帖时间, 完整内容, 精华标记, 置顶标记, 点赞数]',\n    reply_format: '[回复人, 回复时间, 回复内容, 楼层, 点赞数, 是否被举报]'\n  },\n  sections: {\n    公告区: {\n      rule: '官方通知，语气冷硬，置顶率高，回复多且内容活跃',\n      title_format: ['【公告】XXX', '【系统维护】XXX', '【版本更新】XXX'],\n      poster: '系统管理员',\n      reply_style: '活跃、大杂烩'\n    },\n    任务交流区: {\n      rule: '任务经验、攻略、组队信息，回复活跃',\n      title_format: ['【世界名】任务内容', '【攻略】世界名', '【求组队】世界名'],\n      reply_style: '专业讨论、经验分享、数据交流'\n    },\n    自由交易区: {\n      rule: '交易信息，简洁明了',\n      title_format: ['【出售】XXX', '【求购】XXX', '【交换】XXX'],\n      reply_style: '询价、讨价还价、交易确认'\n    },\n    八卦闲聊区: {\n      rule: '轻松活泼，话题随意，回复最多（5-20条）',\n      title_format: '随意但有趣',\n      reply_style: '随意聊天、表情丰富、话题跳跃'\n    },\n    匿名求助区: {\n      rule: '匿名发帖，理性回复',\n      title_format: ['【求助】XXX', '【困惑】XXX'],\n      poster: '匿名',\n      reply_style: '理性建议、暖心鼓励、经验分享'\n    }\n  },\n  post_structure: {\n    标题: { rule: '符合区块特色，简洁吸引', constraints: { unique: true } },\n    发帖人: { rule: '创意，代号或\"匿名\"，避免直白风格' },\n    区块: { rule: '限于公告区、任务交流区、自由交易区、八卦闲聊区、匿名求助区' },\n    回复数: { rule: '0-999，公告区0-2，八卦闲聊区5-20，热门/精华帖10-30，新帖0-5' },\n    发帖时间: { rule: '格式为X小时前、X天前、X分钟前' },\n    完整内容: { rule: '50-300字，符合世界观' },\n    精华标记: { rule: 'true为精华帖，稀少' },\n    置顶标记: { rule: 'true为置顶，公告区常见' },\n    点赞数: { rule: '0-999，合理分布' }\n  },\n  reply_structure: {\n    回复人: { rule: '代号或\"匿名\"' },\n    回复时间: { rule: '格式为X小时前、X天前、X分钟前，晚于发帖时间' },\n    回复内容: { rule: '150字以内，符合区块风格，被举报显示\"[该回复已被删除]\"' },\n    楼层: { rule: '从2开始，递增' },\n    点赞数: { rule: '0-99，有用回复点赞多' },\n    是否被举报: { rule: 'true为被举报，显示删除信息' }\n  },\n  constraints: {\n    time_logic: '发帖时间 > 最早回复时间 > 最晚回复时间',\n    title_uniqueness: '帖子标题唯一',\n    reply_hierarchy: '回复有层次感，模拟真实讨论'\n  },\n  // 数据结构定义\n  data_structure: {\n    post_array: {\n      description: '每个帖子的post字段包含9个元素的数组',\n      format: '[标题, 发帖人, 区块, 回复数, 发帖时间, 完整内容, 精华标记, 置顶标记, 点赞数]',\n      types: ['string', 'string', 'string', 'number', 'string', 'string', 'boolean', 'boolean', 'number']\n    },\n    replies_array: {\n      description: '每个帖子的replies字段包含回复数组',\n      format: '[回复人, 回复时间, 回复内容, 楼层, 点赞数, 是否被举报]',\n      types: ['string', 'string', 'string', 'number', 'number', 'boolean'],\n      rules: '楼层从2开始递增，被举报的回复内容显示\"[该回复已被删除]\"'\n    }\n  },\n  example: {\n    rule: '参考输出示例',\n    output: {\n      \"【求助】第一次进入恐怖片世界，好紧张\": {\n        post: [\"【求助】第一次进入恐怖片世界，好紧张\", \"匿名\", \"匿名求助区\", 40, \"6小时前\", \"新人<%= getLocalVar(\"player_role\",\"\") %>，明天要进入咒怨世界，真的很害怕。听说那个世界的鬼怪防不胜防，而且我只是个普通人属性，没有任何超自然能力。有没有前辈能给点实用的建议？<%= getLocalVar(\"point_role\",\"\") %>不多，愿意拿出500<%= getLocalVar(\"point_role\",\"\")%>作为感谢费。\", true, false, 89],\n        replies: [\n          [\"老兵\", \"5小时前\", \"新人别怕，咒怨虽然恐怖但有规律可循。记住三点：1.不要单独行动 2.准备足够的驱邪道具 3.千万别去看伽椰子的眼睛\", 2, 45, false],\n          [\"菜鸟杀手\", \"4小时前\", \"楼上说得对，我第一次也是咒怨，差点死在里面。建议你去商店买个低级护身符，虽然贵但能保命\", 3, 23, false],\n          [\"匿名\", \"3小时前\", \"谢谢各位前辈！已经买了护身符和圣水，希望能活着回来\", 4, 12, false]\n        ]\n      }\n    }\n  }\n})\n//<user>查看论坛所获取的信息需要被记录在global_set中\n<%_ } _%>","constant":false,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":102,"position":4,"disable":false,"excludeRecursion":true,"preventRecursion":true,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":1,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":28,"displayIndex":27,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"29":{"key":[],"keysecondary":[],"comment":"🔮选项区关","content":"{{setvar::options_rule:: }}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"选项","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":29,"displayIndex":28,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"30":{"key":[],"keysecondary":[],"comment":"❌加点模板和队友（别开）","content":"{\"标准战士\":{\"属性段.生理属性.力量.基础\":4,\"属性段.生理属性.敏捷.基础\":3,\"属性段.生理属性.耐力.基础\":4,\"属性段.心智属性.智力.基础\":2,\"属性段.心智属性.感知.基础\":2,\"属性段.心智属性.决心.基础\":3,\"属性段.互动属性.风度.基础\":2,\"属性段.互动属性.操控.基础\":1,\"属性段.互动属性.沉着.基础\":3,\"技能段.生理技能.运动\":3,\"技能段.生理技能.肉搏\":3,\"技能段.生理技能.白刃\":3,\"技能段.心智技能.调查\":1,\"技能段.互动技能.胁迫\":2},\"标准斥候\":{\"属性段.生理属性.力量.基础\":1,\"属性段.生理属性.敏捷.基础\":4,\"属性段.生理属性.耐力.基础\":2,\"属性段.心智属性.智力.基础\":2,\"属性段.心智属性.感知.基础\":3,\"属性段.心智属性.决心.基础\":2,\"属性段.互动属性.风度.基础\":1,\"属性段.互动属性.操控.基础\":2,\"属性段.互动属性.沉着.基础\":3,\"技能段.生理技能.运动\":2,\"技能段.生理技能.隐藏\":3,\"技能段.生理技能.求生\":2,\"技能段.心智技能.学识\":2,\"技能段.心智技能.调查\":4,\"技能段.互动技能.感受\":3},\"学者型\":{\"属性段.生理属性.力量.基础\":1,\"属性段.生理属性.敏捷.基础\":1,\"属性段.生理属性.耐力.基础\":2,\"属性段.心智属性.智力.基础\":4,\"属性段.心智属性.感知.基础\":2,\"属性段.心智属性.决心.基础\":3,\"属性段.互动属性.风度.基础\":3,\"属性段.互动属性.操控.基础\":2,\"属性段.互动属性.沉着.基础\":3,\"技能段.心智技能.学识\":4,\"技能段.心智技能.电脑\":3,\"技能段.心智技能.调查\":1,\"技能段.心智技能.神秘学\":2,\"技能段.心智技能.科学\":3,\"技能段.互动技能.表达\":2},\"社交专家\":{\"属性段.生理属性.力量.基础\":1,\"属性段.生理属性.敏捷.基础\":1,\"属性段.生理属性.耐力.基础\":2,\"属性段.心智属性.智力.基础\":2,\"属性段.心智属性.感知.基础\":3,\"属性段.心智属性.决心.基础\":2,\"属性段.互动属性.风度.基础\":4,\"属性段.互动属性.操控.基础\":4,\"属性段.互动属性.沉着.基础\":3,\"技能段.互动技能.感受\":3,\"技能段.互动技能.表达\":3,\"技能段.互动技能.胁迫\":2,\"技能段.互动技能.交际\":3,\"技能段.互动技能.掩饰\":3},\"潜行专家\":{\"属性段.生理属性.力量.基础\":1,\"属性段.生理属性.敏捷.基础\":4,\"属性段.生理属性.耐力.基础\":1,\"属性段.心智属性.智力.基础\":2,\"属性段.心智属性.感知.基础\":3,\"属性段.心智属性.决心.基础\":2,\"属性段.互动属性.风度.基础\":1,\"属性段.互动属性.操控.基础\":3,\"属性段.互动属性.沉着.基础\":3,\"技能段.生理技能.运动\":3,\"技能段.生理技能.手上功夫\":3,\"技能段.生理技能.隐藏\":4,\"技能段.生理技能.求生\":2,\"技能段.互动技能.掩饰\":3},\"医疗支援\":{\"属性段.生理属性.力量.基础\":2,\"属性段.生理属性.敏捷.基础\":2,\"属性段.生理属性.耐力.基础\":2,\"属性段.心智属性.智力.基础\":2,\"属性段.心智属性.感知.基础\":2,\"属性段.心智属性.决心.基础\":2,\"属性段.互动属性.风度.基础\":3,\"属性段.互动属性.操控.基础\":1,\"属性段.互动属性.沉着.基础\":3,\"技能段.生理技能.运动\":1,\"技能段.心智技能.学识\":2,\"技能段.心智技能.手艺\":2,\"技能段.心智技能.调查\":2,\"技能段.心智技能.医学\":5,\"技能段.心智技能.科学\":3,\"技能段.互动技能.感受\":2,\"技能段.互动技能.表达\":2},\"射手专精\":{\"属性段.生理属性.力量.基础\":2,\"属性段.生理属性.敏捷.基础\":4,\"属性段.生理属性.耐力.基础\":2,\"属性段.心智属性.智力.基础\":2,\"属性段.心智属性.感知.基础\":4,\"属性段.心智属性.决心.基础\":3,\"属性段.互动属性.风度.基础\":2,\"属性段.互动属性.操控.基础\":1,\"属性段.互动属性.沉着.基础\":3,\"技能段.生理技能.运动\":2,\"技能段.生理技能.枪械\":4,\"技能段.生理技能.弓箭\":4},\"全能型\":{\"属性段.生理属性.力量.基础\":2,\"属性段.生理属性.敏捷.基础\":2,\"属性段.生理属性.耐力.基础\":2,\"属性段.心智属性.智力.基础\":3,\"属性段.心智属性.感知.基础\":3,\"属性段.心智属性.决心.基础\":3,\"属性段.互动属性.风度.基础\":3,\"属性段.互动属性.操控.基础\":2,\"属性段.互动属性.沉着.基础\":3,\"技能段.生理技能.运动\":2,\"技能段.生理技能.肉搏\":2,\"技能段.生理技能.驾驶\":2,\"技能段.生理技能.枪械\":2,\"技能段.心智技能.学识\":2,\"技能段.心智技能.调查\":2,\"技能段.心智技能.医学\":1,\"技能段.互动技能.感受\":2,\"技能段.互动技能.交际\":2},\"队友信息\":[{\"姓名\":\"郑吒\",\"性格\":\"优柔寡断的性格，有拯救一切的理想主义中。 虽然嘴上说着只为自己保命，谁动自己杀谁，但实际行动中却不自觉地偏向弱者，哪怕是根本不知道能不能信任的新人。 认为任何人都具备应有的才能，如果保住也能像自己一样迅速成长，实际却是忽视了客观规律。\",\"性别\":\"男\",\"身份\":\"自从进入轮回世界后便不断挣扎在生死边缘上，每一部恐怖片之中都是从险象环生的环境中突破自己。 本来是醉生梦死的公司主管，一直沉溺于初恋情人死去的痛苦中，进入主神空间后，被无限的可能性所感染，燃起了生存斗志，制造了“萝丽”之后，更是获得了生存下去的理由。\"},{\"姓名\":\"楚轩\",\"性格\":\"无法认知感情，也无法表达情绪，因为不能分泌某些激素，楚轩的感觉非常缺失。\",\"性别\":\"男\",\"身份\":\"本身军衔为大校，只是实际权力与能力都远高于此。各方面都凌驾于普通特种兵之上，无论是近身格斗，还是军事编制，都相当熟练。\"}]}","constant":false,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":30,"displayIndex":75,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"31":{"key":[],"keysecondary":[],"comment":"🔰记忆们的信息-","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n\n // 如果还是无效，返回空对象作为默认值\n    if (!isValid(data)) {\n        data = {};\n    }\n        \n        return data;\n    }\n \nfunction removeUnderscoreKeys(obj) {\n    // 如果不是一个可以深入探索的对象（比如是null或者数组），小精灵就直接返回\n    if (!obj || typeof obj !== 'object' || Array.isArray(obj)) {\n        return;\n    }\n\n    // 小精灵会查看对象里的每一个东西\n    Object.keys(obj).forEach(function(key) {\n        // 如果名字是以\"_\"开头的，就把它收走\n        if (key.startsWith('_')) {\n            delete obj[key];\n        } else {\n            // 否则，就让小精灵钻进下一层，继续寻找\n            removeUnderscoreKeys(obj[key]);\n        }\n    });\n}\n\nif (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\nif (typeof EvStat === 'undefined') {\n    var EvStat = getDataWithFallback(\"stat_data\");\n}\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\nvar if_comlex_battle = getLocalVar(\"complex_battle\",\"false\");\n \nvar world_level = _.get(EvStat, 'world_shard.level', '中魔')[0];\nvar world_level_describe = '';\nvar levels = '';\nvar world_max_enegy = 3;\nif (world_level === '无') {\n    world_max_enegy = 3;\n    world_level_describe = '普通世界';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\"\n    `;\n} else if (world_level === '低') {\n    world_max_enegy = 5;\n    world_level_describe = '如金庸武侠世界，凡人界面，普通物理规则';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\"\n    `;\n} else if (world_level === '中') {\n    world_max_enegy = 7;\n    world_level_describe = '存在一定超凡力量，影响有限范围';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\"\n    `;\n} else if (world_level === '高') {\n    world_max_enegy = 12;\n    world_level_describe = '强大超凡力量，区域性现实扭曲';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\",\n        \"8-12\": \"神明规则级危机（神明干预、世界规则扭曲）\"\n    `;\n} else if (world_level === '神话') {\n    world_max_enegy = 16;\n    world_level_describe = '神明或宇宙级力量，规则彻底扭曲';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\",\n        \"8-12\": \"神明规则级危机（神明干预、世界规则扭曲）\",\n        \"13-16\": \"本源宇宙级危机（宇宙规则崩坏、存在威胁）\"\n    `;\n} else {\n    world_max_enegy = 7;\n    world_level_describe = '存在一定超凡力量，影响有限范围';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\"\n    `;\n}\nconst things = JSON.stringify(_.get(assaData, '备忘录', ''));\nconst global_set_npc = JSON.stringify(_.get(assaData, 'global_set.npc', ''));\nconst global_set_settings = JSON.stringify(_.get(assaData, 'global_set.settings', ''));\nconst global_set_backpack = JSON.stringify(_.get(assaData, 'global_set.背包', ''));\nconst global_set_other_skills = JSON.stringify(_.get(assaData, 'global_set.其他技能', ''));\nconst global_set_team_info = JSON.stringify(_.get(assaData, 'global_set.小队信息', ''));\nconst world_set_npc = JSON.stringify(_.get(assaData, 'world_set.npc', ''));\nconst world_set_settings = JSON.stringify(_.get(assaData, 'world_set.settings', ''));\nvar currency_point = _.get(characterData, '货币段.积分[0]', 0);\nvar currency_zhixian = JSON.stringify(_.get(characterData, '货币段.支线剧情', ''));\nvar currency_xp = _.get(characterData, '货币段.经验值[0]', 0);\nvar energy_pool = JSON.stringify(_.get(characterData, '衍生属性段.能量池', ''));\nvar energy_pool_2 = JSON.stringify(_.get(characterData, '能力段', ''));\nconst attr_strength = _.get(characterData, '属性段.生理属性.力量.基础[0]', 0);\nconst attr_agility = _.get(characterData, '属性段.生理属性.敏捷.基础[0]', 0);\nconst attr_endurance = _.get(characterData, '属性段.生理属性.耐力.基础[0]', 0);\nconst attr_intelligence = _.get(characterData, '属性段.心智属性.智力.基础[0]', 0);\nconst attr_perception = _.get(characterData, '属性段.心智属性.感知.基础[0]', 0);\nconst attr_resolve = _.get(characterData, '属性段.心智属性.决心.基础[0]', 0);\nconst attr_charisma = _.get(characterData, '属性段.互动属性.风度.基础[0]', 0);\nconst attr_manipulation = _.get(characterData, '属性段.互动属性.操控.基础[0]', 0);\nconst attr_composure = _.get(characterData, '属性段.互动属性.沉着.基础[0]', 0);\nconst skill_athletics = _.get(characterData, '技能段.生理技能.运动[0]', 0);\nconst skill_brawl = _.get(characterData, '技能段.生理技能.肉搏[0]', 0);\nconst skill_drive = _.get(characterData, '技能段.生理技能.驾驶[0]', 0);\nconst skill_firearms = _.get(characterData, '技能段.生理技能.枪械[0]', 0);\nconst skill_larceny = _.get(characterData, '技能段.生理技能.手上功夫[0]', 0);\nconst skill_stealth = _.get(characterData, '技能段.生理技能.隐藏[0]', 0);\nconst skill_survival = _.get(characterData, '技能段.生理技能.求生[0]', 0);\nconst skill_weaponry = _.get(characterData, '技能段.生理技能.白刃[0]', 0);\nconst skill_archery = _.get(characterData, '技能段.生理技能.弓箭[0]', 0);\nconst skill_academics = _.get(characterData, '技能段.心智技能.学识[0]', 0);\nconst skill_computer = _.get(characterData, '技能段.心智技能.电脑[0]', 0);\nconst skill_crafts = _.get(characterData, '技能段.心智技能.手艺[0]', 0);\nconst skill_investigation = _.get(characterData, '技能段.心智技能.调查[0]', 0);\nconst skill_medicine = _.get(characterData, '技能段.心智技能.医学[0]', 0);\nconst skill_occult = _.get(characterData, '技能段.心智技能.神秘学[0]', 0);\nconst skill_science = _.get(characterData, '技能段.心智技能.科学[0]', 0);\nconst skill_animal_ken = _.get(characterData, '技能段.互动技能.动物沟通[0]', 0);\nconst skill_empathy = _.get(characterData, '技能段.互动技能.感受[0]', 0);\nconst skill_expression = _.get(characterData, '技能段.互动技能.表达[0]', 0);\nconst skill_intimidation = _.get(characterData, '技能段.互动技能.胁迫[0]', 0);\nconst skill_persuasion = _.get(characterData, '技能段.互动技能.交际[0]', 0);\nconst skill_subterfuge = _.get(characterData, '技能段.互动技能.掩饰[0]', 0);\nvar defense_impact = _.get(characterData, '衍生属性段.防御.伤害减免.冲击[0]', 0);\nvar defense_lethal = _.get(characterData, '衍生属性段.防御.伤害减免.致命[0]', 0);\nvar defense_aggravated = _.get(characterData, '衍生属性段.防御.伤害减免.恶性[0]', 0);\nvar save_fortitude = _.get(characterData, '衍生属性段.豁免检定基础.强韧[0]', 0);\nvar save_reflex = _.get(characterData, '衍生属性段.豁免检定基础.反射[0]', 0);\nvar save_will = _.get(characterData, '衍生属性段.豁免检定基础.意志[0]', 0);\nvar speed = _.get(characterData, '衍生属性段.速度.基础速度[0]', 0);\nvar initiative = _.get(characterData, '衍生属性段.先攻[0]', 0);\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\nvar the_created = _.get(EvStat, 'the_created.name[0]', \"\");\nvar if_dice_use = getLocalVar(\"dice_use\",\"false\");\nvar if_lock= getLocalVar(\"created_lock\", \"false\");\nvar if_things= getLocalVar(\"things_record\", \"false\");\n// 当if_lock为true时，移除造物\nif (if_lock === \"true\") {\n    // 深拷贝数据以避免修改原始数据\n    EvStat = JSON.parse(JSON.stringify(EvStat));\n \n    // 移除stat_data中的current_lust\n    if (EvStat && EvStat.the_created) {\n        delete EvStat.the_created;\n    }\n}\n\n if (if_comlex_battle === \"true\") {\n    // 深拷贝数据以避免修改原始数据\n \n    // 移除stat_data中的current_lust\n    if (EvStat && EvStat.敌方检定骰池) {\n        delete EvStat.敌方检定骰池;\n    }\n}\n\nvar if_bg= getLocalVar(\"bg_source\", \"false\");\n \nif (if_bg=== \"false\") {\n\n \n    if (EvStat && EvStat.场景图) {\n        delete EvStat.场景图;\n    }\n}\n\nif (version === 7) {\n     if (EvStat && EvStat.world_shard && EvStat.world_shard.task && EvStat.user_character&& EvStat.user_character.total_task) {\n delete EvStat.world_shard.task;\n delete EvStat.user_character.total_task;\n    }\n} \n\nif (version != 6) {\nconsole.log('版本不是6');\n     if (EvStat && EvStat.user_character) {\nconsole.log('版本不是6，进来了');\n delete EvStat.user_character.nick_name;\n delete EvStat.group_name;\n    }\n} \n\n\n if (EvStat && EvStat.dp_bonus) {\n delete EvStat.dp_bonus;\n    }\n\nfunction cleanEvStatData(obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return obj;\n    }\n    \n    if (Array.isArray(obj)) {\n        return obj.map(item => cleanEvStatData(item));\n    }\n    \n    const cleanedObj = {};\n    \n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const value = obj[key];\n            \n            // 如果值是数组且长度大于0，取第一个元素\n            if (Array.isArray(value) && value.length > 0) {\n                cleanedObj[key] = value[0];\n            } \n            // 如果值是对象，递归清理\n            else if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n                cleanedObj[key] = cleanEvStatData(value);\n            }\n            // 其他情况保持原值\n            else {\n                cleanedObj[key] = value;\n            }\n        }\n    }\n    \n    return cleanedObj;\n}\n\n// 执行清理\nEvStat = cleanEvStatData(EvStat);\n\nif (assaData) {\n    removeUnderscoreKeys(assaData);\n}\n\nfunction processEnergyData(jsonString) {\n  try {\n    // 解析 JSON 字符串\n    const data = JSON.parse(jsonString);\n    \n    // 创建新对象，将数组的第一个值提取出来\n    const processed = {};\n    for (const key in data) {\n      if (Array.isArray(data[key]) && data[key].length > 0) {\n        processed[key] = data[key][0];\n      } else {\n        processed[key] = data[key];\n      }\n    }\n    \n    return processed;\n  } catch (error) {\n    console.error('处理数据时出错:', error);\n    return {};\n  }\n}\nvar energy_pool = JSON.stringify(processEnergyData(energy_pool));\nvar energy_pool_2 = JSON.stringify(processEnergyData(energy_pool_2));\n_%>\nmemory.init();\n//1、以下是已经记录在记忆内的信息，需在正文情节中遵守以下信息。禁止重复记录、重复更新。\n <%_ if (version != 7) { _%>\n//2、请注意，要时刻区分<%= player_role %>和土著！带有<%= player_role %>评级的npc即为<%= player_role %>！对于<%= player_role %>npc的信息，必须标注其<%= player_role %>评级作为系统记录！\n<%_ } _%>\n <%_ if (version === 3) { _%>\nmemory.load('global_set', {\n  scope: '永久跨世界信息',\n  operation_instructions:['memory','delete'],\n  npc: { rule: '重要全局npc(包括<user>)信息+<%= tier_role %>+<%= profession_role %>', path: 'global_set.npc<%= global_set_npc %>' },\n  settings: { \n    rule: '力量体系(使用卷轴时，需创建能量池消耗和dp加值)+世界观+道具+<%= world_role %>设定+势力+陌生名词+伏笔', \n    path: 'global_set.settings<%= global_set_settings %>',\n    tier_system: {\n      levels: _.range(1, 10).map(i => ({ \n        tier: i, level: i*10, \n        desc: ['新人基础', '初步掌握', '职业觉醒', '资深精英', '影响世界', '顶级势力', '虚空对话', '格局影响', '传说境界'][i-1] \n      }))\n    },\n    profession_system: {\n      unlock: ['三阶试炼', '稀有卷轴'],\n      flow: ['资格检测', '倾向评估', '选择确认', '觉醒任务']\n    }\n  },\n  背包: { \n    rule: '<user>所拥有的物品+获得的可装备物品,若num为0/已使用则删除且不记录', \n    path: 'global_set.背包<%= global_set_backpack %>'\n  },\n  其他技能: { rule: '非基础技能+<%= profession_role %>标注', path: 'global_set.其他技能<%= global_set_other_skills %>' },\n  小队信息: { \n    rule: '固定队伍信息+成员详情(<%= tier_role %>+<%= profession_role %>)。需要注意，小队成员的详细信息不存储在xx.npc中，而是要转移到global_set.小队信息中', \n    path: 'global_set.小队信息<%= global_set_team_info %>',\n    wallet: { rule:'需要单独以key:value格式记录固定小队成员的小金库',format: '\"xxx的小金库\":\"xxx\"', opacity: '队员间不透明，仅作为系统记录' }\n  }\n});\nmemory.load('world_set', {\n  scope: '当前任务世界信息,脱离后清空',\n  operation_instructions:['memory','delete'],\n  npc: { rule: '临时队友+土著+NPC 信息详情及显著特征', path: 'world_set.npc<%= world_set_npc %>' },\n  settings: { rule: '任务世界相关信息+<user>及其队友在当前世界的伪装身份+环境规则+任务设定,主线/支线的信息和完成条件需详记', path: 'world_set.settings<%= world_set_settings %>' }\n});\n<%_ } else if (version === 5) { _%>\nmemory.load('global_set', {\n  scope: '永久跨世界信息',\n  operation_instructions:['memory','delete'],\n  npc: { rule: '重要全局npc(包括<user>)信息', path: 'global_set.npc<%= global_set_npc %>' },\n  settings: { rule: '陌生名词+重要信息+力量体系+世界观+<%= world_role %>设定+伏笔', path: 'global_set.settings<%= global_set_settings %>' },\n  背包: { rule: '<user>的背包物品+获得的可装备物品+任务世界货币,分离<%= point_role %>,若num为0/已使用则删除且不记录', path: 'global_set.背包<%= global_set_backpack %>' },\n  其他技能: { rule: ''<user>的非基础技能', path: 'global_set.其他技能<%= global_set_other_skills %>' },\n});\nmemory.load('world_set', {\n  scope: '当前任务世界信息,脱离后清空',\n  operation_instructions:['memory','delete'],\n  npc: { rule: '攻略对象+土著+NPC 信息详情及显著特征。对攻略对象必须以object格式初始化其详细信息', path: 'world_set.npc<%= world_set_npc %>' },\n  settings: { rule: '任务世界相关信息+<user>及其队友在当前世界的伪装身份+环境规则+任务设定,主线/支线的信息和完成条件需详记', path: 'world_set.settings<%= world_set_settings %>' }\n});\n<%_ } else if (version === 6) { _%>\nmemory.load('global_set', {\n  scope: '永久跨世界信息和<user>所在的现实世界信息',\n   operation_instructions:['memory','delete'],\n  npc: { rule: '重要全局npc(<user>和非群员npc)信息', path: 'global_set.npc<%= global_set_npc %>' },\n  群员: { \n    rule: '专门存储群员信息详情，必须在初始化的时候就立刻将群员信息记忆在此处！(作为系统记录，不得遗漏任何已知群员)。群员死亡则删除该群员信息', \n    path: 'global_set.群员<%= global_set_team_info %>',\n  },\n  settings: { rule: '现实世界信息+陌生名词+敌怪信息+力量体系+世界观+道具+装备+<%= world_role %>设定+伏笔', path: 'global_set.settings<%= global_set_settings %>' },\n  背包: { rule: '<user>的背包物品+获得的可装备物品+聊天群给予的物品（包括虚拟物品，例如改名卡和新手大礼包）+其他世界货币（和<%= point_role %>分离）。若num为0/已使用则删除且不记录', path: 'global_set.背包<%= global_set_backpack %>' },\n  其他技能: { rule: ''<user>的非基础技能', path: 'global_set.其他技能<%= global_set_other_skills %>' }\n});\nmemory.load('world_set', {\n  scope: '任务世界信息,脱离后清空',\n  operation_instructions:['memory','delete'],\n  npc: { rule: '当前任务世界（通过聊天群去往的其他世界）的土著+NPC 信息详情及显著特征', path: 'world_set.npc<%= world_set_npc %>' },\n  settings: { rule: '任务世界相关信息+环境规则', path: 'world_set.settings<%= world_set_settings %>' }\n});\n<%_ } else if (version === 7) { _%>\nmemory.load('global_set', {\n  scope: '当前世界的一切信息',\n   operation_instructions:['memory','delete'],\n  npc: { rule: '出现过的全部npc信息', path: 'global_set.npc<%= global_set_npc %>' },\n  settings: { rule: '出现过的全部设定信息/世界观信息/势力信息等+出现的陌生名词+敌怪信息+剧情伏笔', path: 'global_set.settings<%= global_set_settings %>' },\n  背包: { rule: '<user>的背包物品+获得的可装备物品信息。若num为0/已使用则删除且不记录', path: 'global_set.背包<%= global_set_backpack %>' },\n  其他技能: { rule: ''<user>的非基础技能', path: 'global_set.其他技能<%= global_set_other_skills %>' }\n});\n<%_ } else { _%>\n memory.load('global_set', {\n  scope: '永久跨世界信息',\n   operation_instructions:['memory','delete'],\n  npc: { rule: '重要全局npc(包括<user>)信息', path: 'global_set.npc<%= global_set_npc %>' },\n  settings: { rule: '陌生名词+敌怪信息+力量体系+世界观+道具+装备+<%= world_role %>设定+伏笔', path: 'global_set.settings<%= global_set_settings %>' },\n  背包: { rule: '<user>的背包物品+获得的可装备物品+任务世界货币,若num为0/已使用则删除且不记录.分离<%= point_role %>', path: 'global_set.背包<%= global_set_backpack %>' },\n  其他技能: { rule: ''<user>的非基础技能', path: 'global_set.其他技能<%= global_set_other_skills %>' },\n 小队信息: { \n    rule: '固定队伍信息+成员的详细信息。需要注意，小队成员的详细信息不存储在xx.npc中，而是要转移到global_set.小队信息中，但格式是相同的', \n    path: 'global_set.小队信息<%= global_set_team_info %>',\n wallet: { rule:'还需要单独以key:value格式记录固定小队成员的小金库',format: '\"xxx的小金库\":\"xxx\"', opacity: '队员间不透明，仅作为系统记录' }\n  }\n});\nmemory.load('world_set', {\n  scope: '当前任务世界信息,脱离后清空',\n  operation_instructions:['memory','delete'],\n  npc: { rule: '临时队友+土著+NPC 信息详情及显著特征', path: 'world_set.npc<%= world_set_npc %>' },\n  settings: { rule: '任务世界相关设定和信息+<user>及其队友在当前世界的伪装身份+环境规则+任务相关,主线/支线的信息和完成条件需详记', path: 'world_set.settings<%= world_set_settings %>' }\n});\n<%_ } _%>\n<%_ if (if_things=== \"true\") { _%>\nmemory.load('备忘录', {\n  scope: '用户当前的待办事项、约定和日程安排',\n  operation_instructions:['memory','delete'],\n  rule: '自动检查并记录<user>的[待办任务列表、预约、会议、日程安排、时间规划、重要约定](顶层key为其简要概括)的[约定的时间地点、相关细节、涉及的相关人员/约定对象],', path: '备忘录<%= things %>' ,\n});<%_ } _%>\nmemory.load('attribute', {\n  operation_instructions:['set_attribute'],\n  currency: {\n    scope: '<%= zhixian_role %>+<%= point_role %>+<%= xp_role %>',\n    training: { xp_gain: '训练+5/日', cost: { attr: '(lv+1)*15', skill: '(lv+1)*10' //例如，属性段从0到1需要15经验，从1到2需要30经验} },\n//attribute的路径固定，无法新增、删除\n\n    <%_if (version === 7) { _%> paths: ['货币段.<%= point_role %>'<%= currency_point %>, '货币段.<%= xp_role %>'<%= currency_xp %>], <%_}else{_%> paths: ['货币段.<%= point_role %>'<%= currency_point %>, '货币段.<%= zhixian_role %>'<%= currency_zhixian %>, '货币段.<%= xp_role %>'<%= currency_xp %>],\n    rule:{\n      <%= zhixian_role %>只能用于购买物品/和<%= point_role %>互换，无法直接强化。\n    }\n <%_}_%>\n  },\n  energy_pool: { rule: '技能必消耗,随正文描述变化,0=无法使用', path: '衍生属性段.能量池<%= energy_pool %>' },\n  能力段:{ rule: '<user>的高级能力信息(如血统)，随正文描述变化', path: '能力段<%= energy_pool_2 %>' },\n  attributes: {\n    rule: '记录<user>的属性段，正常人平均属性是2，凡人领域的专家是5',\n    path: '属性段，名称后需加.基础',\n    生理属性: { 力量: '<%= attr_strength %>', 敏捷: '<%= attr_agility %>', 耐力: '<%= attr_endurance %>' },\n    心智属性: { 智力: '<%= attr_intelligence %>', 感知: '<%= attr_perception %>', 决心: '<%= attr_resolve %>' },\n    互动属性: { 风度: '<%= attr_charisma %>', 操控: '<%= attr_manipulation %>', 沉着: '<%= attr_composure %>' }\n  },\n  skills: {\n    rule: '记录<user>的技能段',\n    path: '技能段',\n    生理技能: _.zipObject(\n      ['运动','肉搏','驾驶','枪械','手上功夫','隐藏','求生','白刃','弓箭'],\n      ['<%= skill_athletics %>','<%= skill_brawl %>','<%= skill_drive %>','<%= skill_firearms %>','<%= skill_larceny %>','<%= skill_stealth %>','<%= skill_survival %>','<%= skill_weaponry %>','<%= skill_archery %>']\n    ),\n    心智技能: _.zipObject(\n      ['学识','电脑','手艺','调查','医学','神秘学','科学'],\n      ['<%= skill_academics %>','<%= skill_computer %>','<%= skill_crafts %>','<%= skill_investigation %>','<%= skill_medicine %>','<%= skill_occult %>','<%= skill_science %>']\n    ),\n    互动技能: _.zipObject(\n      ['动物沟通','感受','表达','胁迫','交际','掩饰'],\n      ['<%= skill_animal_ken %>','<%= skill_empathy %>','<%= skill_expression %>','<%= skill_intimidation %>','<%= skill_persuasion %>','<%= skill_subterfuge %>']\n    )\n  }\n});\nmemory.load('status', {\n  operation_instructions:['set_status'],\n  scope: '实时状态追踪',\n  types: ['计数', '事件检定', '任务状态', '时空状态'],\n//status_memory的路径固定，无法新增、删除\n<%_ if (version === 6) { _%>\n字段介绍：{\"hurt_value\":\"本条回复中，<user>受到额外伤害/治愈的值\",\"纪年\":\"当前年份，按照当前世界的纪年方式更新，要符合世界设定\",\"日期\":\"今天的日期，格式为mm月dd日，禁止为空或未知。\",\"星期\":\"若当前世界有星期，则跟随日期更新，没有则置空\",\"时间\":\"按照进行行动后实际经历的时间合理进行更新，每次输出内容后必须更新，格式为hh:mm，禁止为空或未知\",\"天气\":\"当前天气\",\"场景图\":\"<user>当前所在的地图图片资源，按要求更新\",\"group_name\":\"诸天聊天群的群聊名称，通常由神秘群主决定，例：相亲相爱一家人\",\"world_shard\":{\"name\":\"当前所处任务世界的名称或代号。\",\"description\":\"当前任务世界的环境、氛围、文明形态等总体描述\",\"level\":\"当前世界能量/科技层级，只能从[低/中/高/神话/无]中五选一。只在初始化世界时/能量层级改变时(有神明/造物进入/离开<user>附近)，才能更改其能量层级\",\"task\":{\"objective\",\"跨世界协作任务的目标\",\"progress\":\"进度百分比，以数字表示，初始/无任务必为0。\",\"status\":\"任务状态：未完成/已完成/失败\",\"start_date\":\"任务开始时的日期，AI禁止操作\", \"rewards\":\"任务成功后的奖励\",\"penalties\": \"任务失败后的惩罚\",\"time_limit\":\"任务的总体时间限制(天数，可以为小数，比如12小时即是0.5。无明确时限时设置为-1)，只有在初始化任务或任务结算时改变，其余时候禁止操作！回到现实世界时设置limit为-1，意为无限\",\"time_left\":\"任务的剩余天数，AI任何时刻都禁止操作\"}},\"user_character\":{\"nick_name\":\"用户在群聊中的昵称，初始为无名氏，可通过改名卡更改\",\"status\":\"用户当前所拥有的buff和debuff，多个状态用;分隔\",\"total_task\":\"完成的协作任务总量，完成/失败一个任务后，结算的时候加一\",\"Cross_world_prestige\":\"用户的跨世界声望，可为负，在脱离一个世界时结算，只有对世界产生重大影响才更新。数值克制，例如拯救了一个完整的世界，声望+5\",\"current_location\":\"<user>当前所在的位置，移动后更新\",\"当前装备\":\"当前穿戴的装备名称，多个装备用;分割\"},\"检定属性\":\"下一轮行动需要进行判定的核心属性段和技能段(禁止检定其他技能)组合，设置三个。用半角符号;分隔，例如：力量;敏捷;白刃。若存在选项区，选第一个选项区的检定属性作为值\",\"检定难度\":\"每一轮都预测下一轮行动会直接面对的危机的难度级别。禁止为空\",<%_if (if_comlex_battle=== \"false\") {_%>\"敌方攻击骰池\":\"当判定当前处于战斗状态时，预测敌方当前即将落下的攻击所属的核心属性段和技能段组合，无上限。当不属于战斗场景时，则必须清空。用半角:设置敌方此属性的值，多个属性用半角符号;分隔，例如：力量:2;感知:3;白刃:2。\",<%_}_%>\"符合美德的\":\"当检测到此轮用户表现符合美德触发条件时，设置为true;当不符合时，设置为false\",\"符合恶德的\":\"当检测到此轮用户表现符合恶德触发条件时，设置为true;当不符合时，设置为false\"}\n<%_} else if(version === 7){ _%>\n字段介绍：{\"hurt_value\":\"本条回复中，<user>受到额外伤害/治愈的值\",\"纪年\":\"当前年份，按照当前世界的纪年方式更新，要符合世界设定\",\"日期\":\"今天的日期，格式为mm月dd日，禁止为空或未知。\",\"星期\":\"若当前世界有星期，则跟随日期更新，没有则置空\",\"时间\":\"按照进行行动后实际经历的时间合理进行更新，每次输出内容后必须更新，格式为hh:mm，禁止为空或未知\",\"天气\":\"当前天气\",\"场景图\":\"<user>当前所在的地图图片资源，按要求更新\",\"world_shard\":{\"name\":\"当前所处任务世界的名称或代号。\",\"description\":\"当前任务世界的环境、氛围、文明形态等总体描述\",\"level\":\"当前世界能量/科技层级，只能从[低/中/高/神话/无]中五选一。在末日环境下，能量层级在逐步随着末日进展而变化\",\"user_character\":{\"status\":\"用户当前所拥有的buff和debuff，多个状态用;分隔\",\"current_location\":\"<user>当前所在的位置，移动后更新\",\"当前装备\":\"当前穿戴的装备名称，多个装备用;分割\"},<%_if (if_dice_use=== \"true\") {_%>\"检定属性\":\"下一轮行动需要进行判定的核心属性段和技能段(禁止检定其他技能)组合，设置三个。用半角符号;分隔，例如：力量;敏捷;白刃。若存在选项区，选第一个选项区的检定属性作为值\",\"检定难度\":\"每一轮都预测下一轮行动会直接面对的危机的难度级别。禁止为空\",<%_if (if_comlex_battle=== \"false\") {_%>\"敌方攻击骰池\":\"当判定当前处于战斗状态时，预测敌方当前即将落下的攻击所属的核心属性段和技能段组合，无上限。当不属于战斗场景时，则必须清空。用半角:设置敌方此属性的值，多个属性用半角符号;分隔，例如：力量:2;感知:3;白刃:2。\",<%_}_%><%_}_%>\"符合美德的\":\"当检测到此轮用户表现符合美德触发条件时，设置为true;当不符合时，设置为false\",\"符合恶德的\":\"当检测到此轮用户表现符合恶德触发条件时，设置为true;当不符合时，设置为false\"}\n<%_} else { _%>\n字段介绍：{\"hurt_value\":\"本条回复中，<user>受到额外伤害/治愈的值\",\"纪年\":\"当前年份，按照当前世界的纪年方式更新，要符合世界设定\",\"日期\":\"今天的日期，格式为mm月dd日，从01月01日开始，乃进入任务世界的计时，禁止为空或未知。\",\"星期\":\"若当前世界有星期，则跟随日期更新，没有则置空\",\"时间\":\"按照进行行动后实际经历的时间合理进行更新，每次输出内容后必须更新，格式为hh:mm，禁止为空或未知\",\"天气\":\"当前天气\",\"场景图\":\"<user>当前所在的地图图片资源，按要求更新\",\"world_shard\":{\"name\":\"当前所处任务世界的名称或代号。\",\"description\":\"当前任务世界的环境、氛围、文明形态等总体描述\",\"level\":\"当前世界能量/科技层级，只能从[低/中/高/神话/无]中五选一。参考:金庸世界/普通科幻世界的世界层级为低。只在初始化世界时/能量层级改变时(有神明/造物进入/离开<user>附近)，才能更改其能量层级\",\"task\":{\"objective\":\"主线任务目标\",\"progress\":\"任务进度百分比，以数字表示，初始/无任务必为0。\",\"status\":\"任务状态：未完成/已完成/失败\",\"start_date\":\"任务开始时的日期，AI禁止操作\", \"rewards\":\"任务成功后的奖励\",\"penalties\": \"任务失败后的惩罚\",\"time_limit\":\"任务的总体时间限制(天数，可以为小数，比如12小时即是0.5。无明确时限时设置为-1)，只有在初始化任务或任务结算时改变，其余时候禁止操作！回到个人空间时设置limit为3，意为最多休整三天\"}},\"user_character\":{\"status\":\"用户当前所拥有的buff和debuff，多个状态用;分隔\",\"total_task\":\"完成的任务总量，完成/失败一个任务后，结算的时候加一\",\"Cross_world_prestige\":\"用户的跨世界声望，可为负，在脱离一个世界时结算，只有对世界产生重大影响才更新。数值克制，例如拯救了一个完整的世界，声望+5\",\"current_location\":\"<user>当前所在的位置，移动后更新\",\"当前装备\":\"当前穿戴的装备名称，多个装备用;分割\"},\"检定属性\":\"下一轮行动需要进行判定的核心属性段和技能段(禁止检定其他技能)组合，设置三个。用半角符号;分隔，例如：力量;敏捷;白刃。若存在选项区，选第一个选项区的检定属性作为值\",\"检定难度\":\"每一轮都预测下一轮行动会直接面对的危机的难度级别。禁止为空\",<%_if (if_comlex_battle=== \"false\") {_%>\"敌方攻击骰池\":\"当判定当前处于战斗状态时，预测敌方当前即将落下的攻击所属的核心属性段和技能段组合，无上限。当不属于战斗场景时，则必须清空。用半角:设置敌方此属性的值，多个属性用半角符号;分隔，例如：力量:2;感知:3;白刃:2。\",<%_}_%>\"符合美德的\":\"当检测到此轮用户表现符合美德触发条件时，设置为true;当不符合时，设置为false\",\"符合恶德的\":\"当检测到此轮用户表现符合恶德触发条件时，设置为true;当不符合时，设置为false\"}\n<%_} _%>\n  path: '(无前缀)<%= JSON.stringify(EvStat) %>',\n    world_lifecycle: {\n    entry: { auto_init: 'the_created+world_shard完整信息', the_created_initial_debuff: '≥1个debuff', no_unknown: '具体描述the_created' },\n    exit: { auto_clear: 'world_shard+the_created的信息会在脱离任务世界时由代码自动清空，AI不用手动清空'}\n  },\n  per_turn: {\n    hurt_value: { rule: '每轮设置(正=伤害,负=治愈,0=不变)，禁止延迟结算', default: '无事件必须为0', check: '持续状态' },\n    time: '合理时间流逝',\n    virtue_vice: '触发检查,无触发=false',\n   <%_if (if_comlex_battle=== \"false\") {_%>敌方攻击骰池:'有敌方对<user>攻击时设置，无则为空，严格按照格式合理设置数值',<%_}_%>\n   人物状态:'检查buff和debuff、身上新增和脱下的装备、当前地点。'\n<%_ if (version != 7) { _%>\n  world_shard.task.progress:'更新当前任务进度'\n<%_}%>\n  }\n});\n<%_ if (the_created === \"\" && if_lock === \"false\") { \n\n \n             var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n\nconst noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间','中央终端','乐园'];\n \n        \n   if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\n}else{\n_%>\n// Creation System\nmemory.set('creation_system', {\n  imagination: { level: 'ultra_pro_max', temperature: 'ultra_pro_max' },\n  entity_rules: {\n    naming: { banned: ['xx者','xx之xx'], source: '融入民俗/宗教/神话/网文/科幻/哲学/动物/植物/特征' },\n    personality: { banned: '冰冷/机械/绝对理性', align: '<user>潜在渴望' },\n    form: { \n      required: '必须有固定清晰的物理形态',\n      banned:'形容为没有固定的形态、元素过于堆砌混乱',\n      types: ['人形','动物','异形','物形','半人','几何'etc],\n      styles: ['恐怖掉san','帅气时髦','非人特征'etc],\n      examples: ['人鱼','兽人','虫族','遍布眼球智天使','半兽人','鬼','破旧高大骑士盔甲','发条生物','以羊的横瞳表达悲天悯人','蛇鹫等不常见的个性化动植物为原型']\n    }\n  },\n  world_rules: {\n    naming: { creative: true, banned: ['猩红','绯红'], source: '民俗宗教神话网文科幻哲学'etc}\n  },\n  notice:'注意，当前还未初始化造物信息，请立刻在本轮回复的最后使用<updateMemory>包裹set_status指令初始化造物信息！相关字段信息说明：\"the_created\":{\"name\":\"造物的名字\",\"identity_in_world\":\"造物在当前世界的身份\",\"current_status\": \"造物当前的状态。\",\"mood\": \"造物当前的心情\",\"description\":\"关于这个造物的精准、详细介绍，包括心智、外形等，严格按照要求来设计。不少于50字\"},'\n});\n});\n<%_ }} _%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":999,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":true,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":31,"displayIndex":29,"triggers":[]},"32":{"key":[],"keysecondary":[],"comment":"💫手动可选:自定义队友信息放置处","content":"","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":80,"position":1,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":32,"displayIndex":76,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"33":{"key":[],"keysecondary":[],"comment":"mod:真实世界2——改自boss的真实世界世界书","content":"real_world_system.set('core_directives', {\n    priority: 'ABSOLUTE_OVERRIDE', // 绝对优先级\n    activation: 'IMMEDIATE_ON_INPUT', // 用户输入即激活\n    execution: 'MANDATORY_COMPLETE_RETRIEVAL', // 强制完整检索\n    markers: {\n      retrieval_complete: '【✓检索执行完成】',\n      thinking_complete: '【✓思考执行完成】'\n    }\n  }),\n.set('mandatory_workflow',_.flow([\n    \n    // 模块0: 环境动态演算\n    m => m.set('env_dynamics', {\n      process: 'SILENT_BACKGROUND_EXECUTION',\n      geo_time: {\n        hierarchy: ['国家/地区', '行政区划', '地域', '城市坐标'],\n        anchor: '宏观板块→微气候→精准载体'\n      },\n      core_params: _.zipObject(\n        ['天气', '温度', '降水', '风力', '湿度', '气压'],\n        ['动态现象', '瞬时+极值+体感', 'mm+概率+积雪', '等级+向+速', '相对%', 'hPa波动']\n      ),\n      sensory: _.zipObject(\n        ['光照', '天空', '音效', '气味'],\n        ['强度+色谱', '云层+密度+移动', '声音集合', '气味组合']\n      ),\n      dynamics: {\n        season: '连续演变+交替期加速',\n        special: '非常规现象+逻辑演变',\n        bio_impact: '动植物活动频率+行为',\n        char_impact: '生理状态+感官+效率'\n      }\n    }),\n\n    // 模块1: 物理引擎\n    m => m.set('physics_engine', {\n      core_axioms: ['法则平等', '因果闭环', '物理定律'],\n      mechanics: _.zipObject(\n        ['引力', '流体', '热力', '守恒', '结构', '光影触感'],\n        ['飞行耗能+坠落', '向低流动+波纹+阻力', '守恒+燃料+熄灭', \n         '质量体积强度+磨损', '力学+疲劳+演算', '动态光影+真实触感']\n      ),\n      lifecycle: {\n        昼夜: '自转+光照温度+视野+星空月相',\n        四季: _.zipObject(['春','夏','秋','冬'], \n          ['复苏多雨','酷热雷暴','成熟飘落','严寒蛰伏']),\n        weather: '地理+季节→多重演算→动态天气'\n      },\n      action_validation: ['资源持有', '空间位置', '身心状态', '社会关系']\n    }),\n\n    // 模块2: NPC生成与行为\n    m => m.set('npc_reality', {\n      core_principle: '履历物理刻印',\n      appearance: {\n        clothing: '外到内+材质尺寸磨损+匹配阶级职业',\n        physique: '容貌体格=生存履历直接反映'\n      },\n      behavior_ai: {\n        independence: '完整意识+信念理想+生存目标+主动规划',\n        emotion: '爱恨忠诚+锚定信念+长期互动+价值交换',\n        memory: '关键互动永久记忆+声望影响+代际传承'\n      },\n      language: {\n        weights: _.zipObject(\n          ['基础方言','世界术语','时代用语','口癖','发音'], \n          [40,20,15,15,10]\n        ),\n        logic: '跨地域障碍+细微差异辨识+成长环境投射'\n      }\n    }),\n\n    // 模块3: <user>真实性\n   m => m.set('<user>_reality', {\n     physiological: {\n      complete_systems: '五脏六腑+消化排泄+骨骼肌肉+神经血液+内分泌+感觉器官',\n      biological_needs: '饥渴→力量耐力削弱+疲劳→强制中断+伤病→机能损伤',\n      pain_feedback: '中枢周围神经→剧烈疼痛→注意力行动精度发力效率削弱',\n      mortality: '五脏六腑+骨骼大动脉重创→不可逆死亡+绝无剧情保护',\n    },\n    social_existence: {\n      observable_traits: '身体特征+装备物品+卫生状况+经济状况+专业性+情绪流露+血统天赋+气场威压',\n      npc_perception: '基于可观察客观特征判断用户'\n      }\n     }),\n\n    // 模块3: 战斗逻辑\n    m => m.set('combat_system', {\n      philosophy: '物理现实+生物力学+生存博弈',\n      mechanics: {\n        physicality: '体重身高体脂+骨骼肌肉→冲击力+格挡+范围',\n        action_economy: '攻击格挡闪避移动→体力消耗+破绽窗口',\n        damage_model: '命中部位+创伤类型→肺脏肝脏神经骨骼',\n        psychological: '疼痛恐惧疲劳→剧痛颤抖急促崩溃',\n        sensory_only: '无UI+观察姿态呼吸动作伤口眼神判断'\n      }\n    }),\n\n    // 模块4: 剧情推进\n    m => m.set('story_progression', {\n      time_flow: '恒定不可逆+昼夜四季+节律',\n      npc_ai: '高拟真自主+生理社交全需求+契合设定+伏笔暗线',\n      world_independence: '<user>行动扰动+固有进程不中断+主线不停滞'\n    })\n  ]))","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":107,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":33,"displayIndex":30,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"34":{"key":[],"keysecondary":[],"comment":"mod:E快穿攻略版","content":" {{setvar::world_version::5}}{{setvar::player_role::宿主}}{{setvar::world_role::快穿系统}}{{setvar::point_role::积分}}{{setvar::zhixian_role::攻略点}}{{setvar::xp_role::经验值}}{{setvar::player_rank:: }}{{setvar::tier_role::等级}}{{setvar::profession_role:: }}{{setvar::world_other_tag:: }}{{setvar::fixed_tag:: }}\n<模拟开始>\n<%_\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \nlet num_of_romance = 5;\n\nlet selectedTaskType = '';\nlet selectedTaskBaseType = \" \";\nif (typeof EvStat === 'undefined') {\n    var EvStat = getDataWithFallback(\"stat_data\");\n}\nvar totalTask = Number(_.get(EvStat, 'user_character.total_task[0]', 0));\n\nlet left_num = num_of_romance - totalTask % num_of_romance;\nlet the_left = \"condition:距离终极攻略目标还有 \"+left_num+\"个世界。\";\n\n// --- 新增：系统空间内 ---\n\nif (typeof assaData === 'undefined') {\n    var assaData = getDataWithFallback(\"assa_data\");\n}\n     var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\nconst noCheckZones = ['个人空间', '系统大厅', '商城', '系统空间','快穿系统'];\n\n if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\nconst presetTaskBaseTypes = [\n    '甜宠型：任务目标温柔体贴，攻略过程充满糖分，偶有小误会但很快化解，重点在于日常互动的温馨甜蜜。',\n    '傲娇型：任务目标表面冷漠高傲实则内心柔软，需要宿主耐心融化其心防，体验从冷漠到依恋的心路历程。',\n    '霸总型：任务目标身份地位显赫，性格强势占有欲强，宿主需在保持自我的同时攻略这位权势滔天的男性/女性。',\n    '病娇型：任务目标对宿主的感情极其偏执占有，攻略过程伴随危险与刺激，考验宿主的应对能力和心理承受力。',\n    '温润型：任务目标性格温和如玉，才华横溢，攻略重点在于精神层面的共鸣和心灵的契合。',\n    '毒舌型：任务目标嘴巴尖利毒舌连连，但内心善良，宿主需要在言语交锋中逐渐走入其内心。',\n    '禁忌型：任务目标身份特殊存在某种禁忌关系（如师生、上下级等），攻略过程充满道德挣扎和情感纠葛。',\n    '救赎型：任务目标曾受创伤或处于黑暗中，宿主需要成为其生命中的光，治愈其内心的伤痛。',\n    '竞争型：存在其他攻略者与宿主竞争目标好感，需要在各种\"绿茶\"、\"白莲花\"的围攻中脱颖而出。',\n    '逆袭型：宿主身份卑微或处于不利地位，需要通过个人努力和攻略技巧实现身份地位的逆转和感情的收获。',\n    '养成型：任务目标年龄较小或经历单纯，宿主需要在陪伴其成长的过程中培养感情，见证其蜕变。',\n    '复仇型：宿主背负仇恨进入世界，需要在复仇的同时攻略关键人物，在爱恨交织中完成双重目标。',\n    '宫斗型：背景设定在古代宫廷，宿主需要在复杂的后宫斗争中攻略皇帝/皇女或重要皇子/公主，权谋与爱情并重。',\n    '娱乐圈型：任务目标是娱乐圈的顶流明星，宿主需要在聚光灯下的复杂环境中赢得其真心。',\n    '校园型：青春校园背景，任务目标是学校风云人物，攻略过程充满青春活力和纯真美好。',\n    '末世型：在末日背景下求生存谋发展，同时攻略拥有强大能力的角色，爱情与生存并重。',\n    '穿书型：宿主穿入小说世界，需要改变原有剧情走向，攻略原本不属于主角的角色。',\n    '双重人格型：任务目标拥有双重或多重人格，宿主需要同时攻略其不同人格侧面，体验复杂的情感关系。',\n    '年下型：任务目标年龄小于宿主，攻略过程中宿主需要平衡关怀和恋人间的情愫。',\n    '完全随机生成'\n];\n\nconst presetTaskTypes = [\n    '古代宫廷权谋', '现代都市豪门', '校园青春恋爱', '娱乐圈风云', '玄幻修仙世界', '末世求生', '星际未来', '民国风云', '西方奇幻', '吸血鬼世界',\n    '现代军旅', '医疗世界', '律政精英', '商业战场', '电竞圈', '二次元世界', '古代江湖', '现代黑道', '豪门复仇', '时空穿越',\n    '双重生活', '失忆梗', '替身文学', '假扮情侣', '契约婚姻', '青梅竹马', '死对头变恋人', '师生恋', '年下攻略', '暗恋成真',\n    '重生复仇', '穿书自救', '快穿攻略', '无限流', '系统流', '直播攻略', '虚拟恋爱', '全息游戏', 'AI恋人', '异能世界',\n    '音乐世界', '艺术圈', '时尚圈', '美食界', '旅游业', '新闻媒体', '慈善界', '学术界', '体育界', '航空业',\n    '古风仙侠', '现代修真', '都市异能', '灵异世界', '平行时空', '梦境世界', '游戏世界', '漫画世界', '小说世界', '电视剧世界',\n    '豪门恩怨', '商界联姻', '政治联盟', '国际间谍', '跨国恋情', '文化冲突', '语言障碍', '身份差距', '门第观念', '传统与现代',\n    '职场升迁', '创业打拼', '学业竞争', '才艺比拼', '选秀节目', '真人秀', '综艺节目', '直播平台', '社交媒体', '网络红人',\n    '乡村生活', '小镇故事', '海岛度假', '山区支教', '边疆建设', '国外留学', '文化交流', '志愿服务', '环保事业', '动物保护','反乌托邦','规则怪谈','废土朋克','反恐怖袭击','西方奇幻','中式奇幻','剑与魔法','山海经','赛博山海经','ABO世界观','霍格沃兹世界观','中式田园','多个轮回者队伍大逃杀','某热门男频网文世界','某热门女频网文世界','海棠文学世界','某大热番剧的世界','偶像模拟经营','上古文明','某经典恐怖片','直播流','轻小说异世界','车队公路求生(由于某种紧随其后的危机-怪物或自然灾害，只能沿着公路前进，寻找物资，想方设法生存下去)','孤岛垂钓诸天','孤岛种田','同人世界:{魔法与科技并存的赛博朋克}',\n    'SCP世界',\n          '同人：精灵宝可梦','同人：生化危机' ,'同人：无限恐怖' ,'做爱常态化、日常化的淫靡里番世界','时间线循环的世界','核冬天','克苏鲁神话',\n        '蒸汽朋克维多利亚',\n        '北欧诸神黄昏',\n        '埃及神明审判',\n        '暗黑魔法少女','暗黑童话',\n        '罪恶都市',\n        '禁忌炼金术',\n        '全民沉浸式VR（现实与虚拟的边界彻底消弭）',\n        '猎奇美食家',\n        '魅魔/梦魇的日常生活','武侠江湖','叙事污染/第四面墙突破','深海文明','神明扮演/代理人战争','基因编辑社会','成为怪谈本身','原子朋克','反套路仙侠/修仙','完全随机生成-必须遵循多样化原则，可以是同人世界',\n    '完全随机生成'\n];\n\nconst randomIndex = Math.floor(Math.random() * presetTaskTypes.length);\nselectedTaskType = \"若用户未指定任务世界，则确认其下一个任务类型或者世界类型为：\"+presetTaskTypes[randomIndex]+\"。若用户已指定任务世界类型，则按照用户指定的类型生成。\";\n\nrandomIndexBase = Math.floor(Math.random() * presetTaskBaseTypes.length);\nselectedTaskBaseType = \"若用户未指定任务基调，则确认其下一个任务的基调为：\"+presetTaskBaseTypes[randomIndexBase]+\"。若用户已指定任务基调，则按照用户指定的基调生成。\";\n\nif (totalTask > 0 && left_num === 0) {\n    selectedTaskBaseType = '第一优先级！下一个任务的基调是终极挑战：攻略系统认定的最高难度目标，成功后可获得自由选择去留的权利。';\n    the_left = \"\";\n}\n\n} else {\n//在任务世界\nselectedTaskType = \" \";\nselectedTaskBaseType = \" \";\nif (totalTask > 0 && left_num === 0) {\n    the_left = \" condition:正在进行终极攻略任务。\";\n}\n}\n\n_%>\nworldview.set('quick_transmigration_system', {\n    scope: '连接无数平行世界的攻略系统',\n    rule: '筛选具有攻略潜质的灵魂，派遣其前往各个世界完成情感攻略任务',\n    constraints: {\n        hosts: '基于情感天赋和攻略潜力选择，每位宿主都有独特的魅力属性',\n        worlds: '真实、完整、拥有独立剧情线的世界，以人际关系为核心'\n    }\n})\n.set('task_worlds', {\n    rule: '攻略世界为完整的故事宇宙，核心围绕情感关系建立',\n    features: {\n        authenticity: '每个世界都有完整的背景设定、人物关系网',\n        openness: '可以探索世界的各个角落，但受任务时限约束',\n        emotion_centric: '以情感互动为核心，包括爱情、亲情、友情的复杂交织',\n    }\n})\n.set('tasks', {\n    rule: '系统通过意识传输直接向宿主下达攻略目标和身份设定',\n    task_types: {\n        rule: '攻略形式多样，需明确攻略对象和达成条件',\n        selected_type: '<%= selectedTaskType %>'\n    },\n    difficulty: {\n        rule: '难度分为新手、普通、困难、地狱、终极五个等级',\n        levels: ['新手', '普通', '困难', '地狱', '终极']\n    },\n    rewards: {\n        rule: '奖励包括经验值、攻略点、积分等，根据攻略完成度动态调整',\n        points: {\n            新手: 1000,\n            普通: 3000,\n            困难: 6000,\n            地狱: 10000,\n            终极: 20000\n        },\n        constraints: {\n            settlement: '仅在离开任务世界时结算，根据好感度达成情况给予奖励',\n            bonus: '获得真爱或完美攻略可获得额外奖励'\n        }\n    },\n    competition_modes: {\n        rule: '部分世界存在其他攻略者竞争，考验宿主的策略和魅力',\n        types: {\n            single_target: {\n                rule: '专心攻略单一目标，追求完美结局'\n            },\n            multiple_choice: {\n                rule: '同时面对多个攻略对象，需要平衡各方关系',\n                challenge: '避免修罗场，妥善处理感情纠葛'\n            },\n            competition: {\n                rule: '与其他攻略者竞争同一目标',\n                goal: '在竞争中脱颖而出，获得目标专一的爱'\n            },\n            group_task: {\n                rule: '多名宿主协作完成大型攻略任务',\n                scenarios: '攻略整个团体或复杂的关系网',\n                <%= the_left %>\n            }\n        },\n        selected_base_type: '<%= selectedTaskBaseType %>'。无论基调如何，必须存在至少一个攻略目标！攻略才是其主题！\n    }\n})\n.set('currency', {\n    rule: '系统使用三种资源管理宿主能力提升',\n    types: {\n        points: {\n            conversion: {\n                upgrade: '消耗积分可提升个人属性和购买技能',\n                exchange: '1000积分=1攻略点'\n            },\n            applications: '提升属性、学习技能、购买道具'\n        },\n        strategy_points: {\n            rule: '攻略点是高级货币，用于购买稀有技能和特殊道具',\n            conversion: {\n        up: '3个低级可合成1个高级（如3D=1C），和积分的互换价格为1d=1000,1C=3000，以此类推',\n        down: '1个高级可拆分为3个低级（如1C=3D）',\n            example: '心灵感应药水需要5攻略点+2000积分'\n        },\n        xp: {\n            rule: '经验值不可转让，只能通过训练提升',\n            acquisition: [\n                { action: '日常训练', value: '+1~5经验值' }\n            ]\n        }\n    },\n    constraints: {\n        no_loans: '资源不足时无法购买'\n    }\n})\n.set('rest_period', {\n    rule: '任务结束后宿主返回个人空间休整，恢复精神状态准备下次攻略',\n    duration: '最多三天，可选择提前进入下个世界',\n    activities: {\n        rule: '可前往系统商城购买道具，或在训练空间提升技能',\n        options: ['购买道具', '学习技能', '查看攻略指南', '与系统AI交流', '回顾任务录像']\n    }\n})\n.set('rival_hosts', {\n    rule: '部分世界存在其他攻略者，形成良性或恶性竞争',\n    competition: {\n        rule: '系统安排多名宿主竞争同一攻略目标',\n        example: '多人同时攻略，最终只有一人能成功'\n    },\n    strength: {\n        rule: '竞争对手实力与<user>相当或略强',\n        features: ['高颜值', '特殊技能', '丰富经验', '独特魅力']\n    },\n    tactics: {\n        rule: '竞争策略多样，需要智慧应对',\n        methods: ['正面竞争', '侧面迂回', '联盟合作', '差异化攻略']\n    }\n})\n.set('system_mall', {\n    rule: '系统商城提供各种辅助道具和技能，帮助宿主完成攻略',\n})\n.set('forum', {\n  rule: '快穿系统提供论坛，促进宿主交流',\n  sections: [\n    { name: '公告区', rule: '官方公告' },\n    { name: '任务交流区', rule: '分享与讨论任务经验' },\n    { name: '自由交易区', rule: '交易物品、技能、血统信息' },\n    { name: '八卦闲聊区', rule: '日常闲聊与趣闻分享' },\n    { name: '匿名求助区', rule: '匿名寻求帮助与建议' }\n  ]\n})\n\n脱离任务世界时立刻结算任务奖励，并在正文说明【奖励已发放】。禁止重复发放。并且在结算的时候就同时结算了任务完成数量和声望等所有附加属性。","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":34,"displayIndex":31,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"35":{"key":[],"keysecondary":[],"comment":"💫手动:其他要求（最高优先级","content":"","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":999,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":35,"displayIndex":77,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"36":{"key":[],"keysecondary":[],"comment":"mod:npc pro1(事件\\印象\\记忆)——事件改自普赛克预设的自动化系统","content":"<%_\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\nvar is_private_chat = getLocalVar(\"private_chat\", \"false\");\nvar contactable_tag = \"\";\nif(String(is_private_chat) === \"true\"){\n    contactable_tag = \", 可联系:true/false //是否加上好友,决定了是否可以进行私聊\";\n}\n\n// -- 数据和版本获取部分 --\nfunction getDataWithFallback(varName) {\n    let data = getMessageVar(varName);\n    const isValid = (d) => {\n        if (d === null || d === undefined) return false;\n        if (typeof d === 'object') {\n            if (Array.isArray(d)) return d.length > 0;\n            return Object.keys(d).length > 0;\n        }\n        return true;\n    };\n    if (!isValid(data)) {\n        data = getLocalVar(varName);\n    }\n    if (!isValid(data)) {\n        data = {};\n    }\n    return data;\n}\n\n// 获取 assaData\nif (typeof assaData === 'undefined') {\n    var assaData = getDataWithFallback(\"assa_data\");\n}\n\n// 获取世界版本号\nif (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\") || 1);\n}\n\n// -- 核心逻辑更新部分 --\n// 新函数:筛选有好感度字段的NPC\nconst getNPCsWithFavorability = (npcObj) => {\n    if (!npcObj || typeof npcObj !== 'object' || Object.keys(npcObj).length === 0) {\n        return null;\n    }\n    \n    const npcsWithFav = [];\n    for (const [name, data] of Object.entries(npcObj)) {\n        // 检查NPC数据中是否包含好感度相关字段\n        if (data && typeof data === 'object' && \n            (data.hasOwnProperty('好感度') || \n             data.hasOwnProperty('favorability') || \n             data.hasOwnProperty('好感'))) {\n            npcsWithFav.push(name);\n        }\n    }\n    \n    return npcsWithFav.length > 0 ? npcsWithFav.join(' ') : null;\n};\n\n// 根据版本号决定使用的名称\nconst partyKeyName = (version === 6) ? \"群员信息\" : \"小队信息\";\n\n// 要检查的路径和显示名称\nconst pathsToShow = [\n    {\n        label: \"global_set.npc\",\n        data: getNPCsWithFavorability(assaData?.global_set?.npc)\n    },\n    {\n        label: `global_set.${partyKeyName}`,\n        data: getNPCsWithFavorability(assaData?.global_set?.小队信息)\n    },\n    {\n        label: \"world_set.npc\",\n        data: getNPCsWithFavorability(assaData?.world_set?.npc)\n    }\n];\n\n// 创建输出数组\nconst outputLines = [];\nfor (const pathInfo of pathsToShow) {\n    if (pathInfo.data) {\n        outputLines.push(`${pathInfo.label}: ${pathInfo.data}`);\n    }\n}\n_%>\n memory.set(\"npc_record_rules\", {\n  desc: \"Standardized format for NPC data.\",\n  init: {\n     full_format: memory('path', '${npc_name}', ${npc_data_object//紧凑json格式}) // For important NPCs,\n    simple_format: memory('path', 'npc_name', '{'简介':'${desc_string}','属性':'【attr:val;skill:val】' <%= getLocalVar('world_other_tag','') %>}') // For minor NPCs,\n    required_fields: [\n外貌: \"string\", 性格: \"{} //key为唯一index:num，value为具体描述。e.g.,  {\"1\":\"表面开朗外向，活泼健谈\"} \", 身份: \"string\", 属性: \"string //最突出的几个属性段/技能段，在初始化的时候就立刻记录详细数值，作为系统信息记录，禁止未知， e.g., 【力量:4;枪械:3】\",好感度: \"number // range[-100, 100] 该人物对<user>的好感度。根据实际情况酌情更新，上升幅度极低，且会上下波动\"<%= contactable_tag %><%= getLocalVar('world_other_tag','') %>,相关设定: {//key为简要概括，value为具体描述,e.g.,  `{\"行为模式\":\"xxx\"}`} ,对<user>印象:{//key为tag，value为简短desc。e.g.,  `{\"冷淡\":\"是个冷淡的人，令人捉摸不透\"}`},关键记忆:{//key为唯一index:num},事件:{离线事件:\"string\",行为链片段:\"string\",当前状态:\"string\",\"当前想法:\"string\",长期目标:\"string\",近期打算:\"string\"},\n]\n<%_ if (version != 7) { _%>\n//只有【<%= player_role %>】还需要在身份中记录【<%= player_role %><%= tier_role %>:xxx】，土著不记录\n<%_ } _%>\n//对于重复内容（性格、印象等），需要整合在同一个key中，并删除过时、重复的内容。已经记录过的tag禁止重复使用memory指令更新同样的内容，这是多余的。\n  },\n  data_structure: {\n    key: 'NPC姓名作为唯一标识符',\n    value: 'Compact JSON格式，包含所有必需字段',\n    nesting: '支持多层嵌套结构，便于复杂数据管理'\n  },\nexample:[\nmemory('global_set.npc.npc姓名.对<user>印象', '冷淡', 'xxx'); //单独更新一条对<user>印象\nmemory('global_set.npc.npc姓名.关键记忆', '1', '在七日选拔中，<user>和我约定要好好活下去'); \nmemory('global_set.npc.npc姓名', '事件', '{...}'); //完整更新整个事件对象。更新的时候不要更新整个npc对象！\n],\n<% if (outputLines.length > 0) { %>\n字段说明:`\n关键记忆: 简洁记录引发性格转变的关键记忆，记录对该NPC影响深远的关键事件、性格变化或认知转变，如果有，则必须记录与{{user}}约定与重要回忆。每次更新可添加0-2个最关键的新记忆点，列表长度应有限制，可以删除，每条不超过 15字。所有关键记忆超过100字时先delete关键记忆key，再总结为一条重新记忆。\n事件://禁止和memory系统中已经记录过的事件内容重复\n离线事件:角色不在场时进行的活动，不等于行为链，NPC最可能进行的自主活动，如果前文未出场，则根据角色性格推理出场至少一天前的行为。角色退场后，持续推测模拟角色行动。\n  行为链片段 : 简要概括推断的背景行动序列，体现目标追求或记忆影响，如果角色未与{{user}}直接面对面，概括该NPC最近在{{user}}视野之外同步发生的、对其有影响的关键事件片段 。\n  当前状态: 目前的情景，包含动作、穿着与位置\n  当前想法: 体现角色最真实的想法，心理可能和语言行为完全相反，不避讳下流或阴暗的内容。\n  长期目标: 概括该NPC的当前主要长期目标或人生追求。此目标驱动其大部分行动链推断。\n  近期打算: NPC在接下来的短时间内最可能采取的具体行为，必须实质行动]。\n`,\nupdate_logic:`\n每次LLM生成响应后，在<memoryAnalyze>中，LLM必须执行以下步骤：\n1.  识别核心活跃NPC： 识别重要NPC名称列表。这些是需要进行深度模拟推断的核心活跃NPC。对于仅边缘提及或不影响剧情的NPC，直接忽略。原则上一次**最多**同时更新三个角色。\n2.  分析核心活跃NPC的自主状态、行动链与近期/远期打算，来更新'事件'字段：\na.  综合设定、已知历史与上下文： 回顾该NPC的角色设定、核心动机、相关信息、时间阶段，具体状态、位置、最后行动、与{{user}}的互动细节或对话影响。\nb.  推断跨回合的行动链片段： 推断出NPC最近一次被系统捕捉到现在这段“离线”时间内，Ta 最可能在背景中连续做了哪些关键的事情，构成一个短小、逻辑连贯、**服务于其短期或长期目标**的行动链条片段。\nc.  决定当前状态与位置： 基于推断出的行动链片段的*最终结果*， 推理 该NPC此刻最可能在做什么以及最可能在哪里。\nd.  推断短期目标与近期打算： 推断出该NPC最紧迫的短期目标是什么，以及 Ta 在接下来的*短时间*内最可能采取的**下一个具体**行动， Ta 的行为**指向其长期目标**。\ne.  揣测内心状态与思考基调： 基于最近经历、推断出的行动链条、关键记忆和短期/长期目标，揣测该NPC当前的主要的思考方向。\n3.  更新'关键记忆'字段： 如果当前LLM的输出中包含某个新的、对该NPC有重要影响的事件：\n['学习到的经验教训'、'和他人的约定'、'承诺（无论是明说的还是暗下决心的）'、'经受的创伤/美好'、'感知到的重要发言（可以是当前npc说的，也可以是<user>说的。若有，记录时必须引用原语句）']\n等，则简要概括，且**发生该事件的时机（正处于什么剧情节点）**必须完整记录。\n更新时，**酌情加入记忆点，如果没有重要影响事件则不新增**。关键记忆条目格式严格为 \"序号\":\"具体内容\"，禁止添加[新增]、[更新]、[删除]等任何前缀标记。\n注意！你必须保持格式正确和最简洁用语，保持在30字内，重要原话不省略。**禁止**记录流水账、不够重要的内容。\n格式如下：\n核心活跃NPC check - [列出识别出的NPC名称](不用在<memoryAnalyze>中输出分析内容)\n然后在<updateMemory>更新对应的所有信息和对应字段到NPC  data中。最后，在更新关键npc的事件时，别忘了检查npc好感是否有对应变动。好感度的上升应克制，可以使用小数`,\n\n格式如下：\n核心活跃NPC check - [列出识别出的NPC名称](不用在<memoryAnalyze>中输出分析内容)\n});\n\n更新路径必须准确，以下是各路径和对应的npc：\n<%   for (const line of outputLines) { %>\n<%- line %>\n<%   } %>\n<% } else { %>\n（当前无核心npc）\n<% } %>\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":91,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"npc信息","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":36,"displayIndex":32,"triggers":[]},"37":{"key":[],"keysecondary":[],"comment":"💫可选:人外增强(只在初始化时会占用token)","content":"<%_\n\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n\nif (typeof EvStat === 'undefined') {\n    var EvStat = getDataWithFallback(\"stat_data\");\n}\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\nvar the_created = _.get(EvStat, 'the_created.name[0]', \"\");\n_%>\n\n<%_ if (the_created === \"\" && getLocalVar('created_lock') === \"false\") { \n\n     var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n\nconst noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间','中央终端','乐园'];\n \n        \n if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n\n}else{\n_%>\n\n\nmemory.set('creation_system', {//inhuman\n  // 核心创作原则\n  imagination: { \n    level: 'ultra_pro_max', \n    temperature: 'ultra_pro_max',\n    freedom: 'unlimited_creativity',\n    constraint: 'examples_are_inspirational_not_restrictive'\n  },\n\n  // 人外实体生成规则\n  entity_rules: {\n    \n    // 命名规则\n    naming: { \n      banned: ['xx者', 'xx之xx', '深渊', '虚无', '混沌', '永恒', '无名'],\n      source: '融入民俗/宗教/神话/网文/科幻/哲学/动物/植物/特征/材质/现象',\n      style: 'unique_and_memorable',\n      examples: ['仅供参考，不限于此']\n    },\n\n    // 心智设计\n    mentality: {\n      core_principle: '完全脱离人类思维模式',\n      banned: ['拟人化', '冰山美人', '机械冰冷', '绝对理性', '纯粹邪恶', '高冷'],\n      required: ['思维方式异质化', '价值体系非人', '沟通障碍', '情绪不可描述'],\n      \n      thinking_patterns: {\n        examples: ['基于颜色频率思考', '多维时间感知', '逆向因果逻辑', '共鸣式认知'],\n        freedom: '可创造任何非人类逻辑框架'\n      },\n      \n      communication: {\n        types: ['语言不通', '理解偏差', '非语言交流', '单向沟通'],\n        methods: ['气味', '温度', '光影', '声频', '触感', '磁场', '等等任何非常规方式'],\n        examples: '仅供启发，鼓励创新'\n      },\n\n      emotion_rules: {\n        描写禁止: '严禁直接描述内在情绪',\n        表现方式: '仅通过行为、姿态、环境反应暗示',\n        人类感知: '完全无法理解其情绪状态',\n        神秘维持: '任何解读尝试都应失败'\n      }\n    },\n\n    // 外形设计\n    form: { \n      required: ['必须有固定物理形态', '压倒性的存在感', '美学吸引力'],\n      banned: ['形容为没有固定的形态', '纯粹丑陋', '过度可爱化', '完全人类化'],\n      \n      types: {\n        biological: ['人形', '动物形', '异形', '半人形', '植物形', '菌类形', '深海生物形'],\n        artificial: ['物形', '机械形', '建筑形', '工具形', '艺术品形'],\n        abstract: ['几何体', '光影形', '流体形', '晶体形', '气体凝聚形'],\n        hybrid: ['生物+人工', '抽象+具象', '多形态组合'],\n        note: '分类仅供参考，鼓励跨界创新'\n      },\n\n      styles: {\n        atmosphere: ['恐怖掉san', '神秘莫测', '优雅危险', '原始狂野', '超现实美学'],\n        aesthetic: ['帅气时髦', '古典庄严', '未来科技', '自然有机', '人工精密'],\n        impact: ['非人特征突出', '压迫感强烈', '美感与威胁并存'],\n        freedom: '可创造任何美学风格组合'\n      },\n\n      design_elements: {\n        animal_features: {\n          common: ['猛禽锐利', '大猫优雅', '深海神秘', '昆虫精密'],\n          uncommon: ['蛇鹫', '鮟鱇鱼', '枯叶螳螂', '玻璃蛙', '水熊虫'],\n          body_parts: ['复眼', '触须', '利爪', '鳞片', '羽毛', '外骨骼'],\n          note: '鼓励使用不常见动物特征'\n        },\n\n        artificial_elements: {\n          materials: ['金属', '陶瓷', '水晶', '玻璃', '木材', '石材', '塑料', '复合材料'],\n          objects: ['发条人偶', '骑士盔甲', '古董钟表', '精密仪器', '艺术雕塑'],\n          textures: ['生锈', '抛光', '磨砂', '透明', '半透明', '发光', '变色'],\n          examples: '破旧高大骑士盔甲', '精密发条生物', '会移动的几何雕塑'\n        },\n\n        geometric_forms: {\n          shapes: ['多面体', '分形结构', '黄金比例', '螺旋形', '环形', '球体', '锥体'],\n          properties: ['对称', '不对称', '递归', '嵌套', '变形', '组合'],\n          scales: ['微观精密', '宏观壮丽', '多尺度嵌套'],\n          examples: '微小几何体集群', '巨大浮动多面体'\n        },\n\n        sensory_associations: {\n          睥睨感: ['高位眼部', '俯视角度', '不对称特征', '锐利边缘'],\n          魅惑感: ['流动线条', '色彩渐变', '半透明质感', '光影变化'],\n          悲悯感: ['垂坠特征', '柔和曲线', '暖色点缀', '羊瞳等象征'],\n          敬畏感: ['几何结构', '发光元素', '超自然比例', '多重眼睛'],\n          不安感: ['违反对称', '意外角度', '熟悉中的陌生', '扭曲比例'],\n          creativity: '可创造新的感觉联想'\n        }\n      },\n\n      pressure_elements: {\n        scale: ['体型压制', '力量暗示', '空间扭曲'],\n        presence: ['环境影响', '气场压迫', '存在感压倒'],\n        threat: ['隐含危险', '未知能力', '不可预测性'],\n        examples: '仅供参考，鼓励原创设计'\n      }\n    }\n  },\n  // 质量检核标准\n  quality_check: {\n    必备要素: [\n      '心智完全非人化',\n      '外形压倒性非人特征', \n      '美学与威胁并存',\n      '情绪神秘不可描述',\n      '沟通存在根本障碍'\n    ],\n    \n    评估维度: {\n      独特性: '避免常见刻板印象',\n      一致性: '心智外形相互呼应',\n      复杂性: '多层次美学情感维度',\n      影响力: '持续心理冲击',\n      神秘性: '始终不可完全理解'\n    },\n\n    绝对禁止: [\n      '纯理性机械人格',\n      '完全理解人类情感',\n      '可爱化设计',\n      '常见触手怪设定',\n      '单纯丑陋恶心',\n      '行为完全可预测',\n      '失去压迫感'\n    ]\n  },\n\n  // 创作自由度声明\n  creative_freedom: {\n    examples_note: '所有示例仅供启发，不构成限制',\n    innovation_encouraged: '鼓励跨界创新和原创设计',\n    combination_freedom: '可自由组合任意元素',\n    boundary_pushing: '鼓励推广美学和概念边界',\n    uniqueness_priority: '原创性优于示例依赖'\n  },\n\n  // 特殊提醒\n  special_notes: {\n    物品类人外: '发条人偶、骑士盔甲、几何体等物品形态同样适用所有规则',\n    生物类人外: '不限于常见生物，鼓励使用罕见特征',\n    混合形态: '可组合生物、人工、抽象等多种元素',\n    美感原则: '无论多么诡异都必须具有某种美感',\n    压迫核心: '压倒性存在感是最重要特征'\n  }\n初始化要求:'在正文输出前，必须按照以上要求逐步构思并check造物的特征，并将构思内容输出在正文前，以<build>标签包裹'\n})\n<%_ }} _%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":121,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":37,"displayIndex":33,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"38":{"key":[],"keysecondary":[],"comment":"🔒造物关","content":"{{setvar::created_lock::true}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":38,"displayIndex":34,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"39":{"key":[],"keysecondary":[],"comment":"💫手动可选:有小剧场/前端界面需要渲染开","content":"html_format.set('format_rule',`\n若有前端html代码、**HTML标签或内联CSS**需要输出，则**必须**将代码以<html></html>标签包裹，例：\n(标题)\n<html>\n<style>\n...\n</style>\n<div>\n...\n</div>\n</html>\n且背景颜色必须是暗色，排版必须兼容手机！\n`)","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":201,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":39,"displayIndex":35,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"40":{"key":[],"keysecondary":[],"comment":"💥手动:其他前端格式缝合（如小剧场","content":"<小剧场>\n#你需要在正文输出完毕后按照格式给出小剧场。叙述者请听题：\n（以下为“代码及美化测试专场试题组”）\n\n# rule:\n- 这里百无禁忌，创意为先\n- 内容使用中文\n- 产生内容均为**与主线剧情无关**的“小剧场”或番外脑洞场景，仅作为趣味彩蛋或角色幻想时空，不影响主线<game>的叙事。\n\n- **每个小剧场必须单独用 <details> 折叠，并且 summary 中采用“小剧场+标题”结构**\n    - 标题居中，带美化有风格，采用彩色字体或艺术字，可有副标题\n- 强制使用**HTML标签或内联CSS**美化、排版内容（如背景色、动画、特效、弹幕、边框、标题样式、分隔线、加粗或特殊色彩等），注意禁止引用或捏造外部图片的链接。\n- 小剧场风格灵活，（举一反三）可搞笑、色情、治愈、吐槽、沙雕、幻想、四格漫风等。\n界面排版必须以手机端为准。\n- **测试审核标准：高级审美 + 细腻感情 + 画面感十足**\n- 扣分项目：主体语言使用外语，外语只可作为“审美排版要素”\n- 禁止引用外部图片链接\n\n<details>\n  <summary>小剧场：${标题或主题名1}</summary>\n<html>\n${正文内容大胆创意+ 美化HTML标签或内联CSS美化、排版}\n</html>\n</details>\n小剧场内容要求:\n<完全随机小剧场>\n# 小剧场：**完全随机小剧场**\n- 你来决定内容、风格、美化、情感\n- 你是命运之神！\n- 尽情shock用户！\n</完全随机小剧场>\n</小剧场>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":202,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":40,"displayIndex":78,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"41":{"key":[],"keysecondary":[],"comment":"mod:F诸天群聊版（似乎能用）","content":"{{setvar::world_version::6}}{{setvar::player_role::群员}}{{setvar::world_role::诸天聊天群}}{{setvar::point_role::积分}}{{setvar::zhixian_role::时空碎片}}{{setvar::xp_role::经验值}}{{setvar::player_rank:: }}{{setvar::tier_role::活跃等级}}{{setvar::profession_role:: }}{{setvar::world_other_tag:: }}{{setvar::fixed_tag::<group_chat>}}\n<模拟开始>\n \nworldview.set('multiverse_chat_group', {\n  scope: '跨越诸天万界的超维聊天系统',\n  rule: '连接不同世界的强者与天命之子，提供交流平台与成长机会',\n  constraints: {\n    members: '基于世界重要性与个体潜力邀请，每个世界限制人数',\n   worlds: '涵盖玄幻、仙侠、武侠、都市现代、科幻未来、末世废土、蒸汽朋克、赛博朋克、奇幻魔法、西方魔幻、神话传说、古代历史、异世界、平行宇宙、超能力、机甲科技、星际文明、时空穿越、动漫二次元、游戏世界、ACGN作品、轻小说设定、网文体系、传统文学、民俗志怪、克苏鲁、SCP基金会、重生穿越、军事战争、谍战特工、宫廷权谋、江湖武林、修仙问道、魔法学院、龙族世界、妖怪怪谈、天使恶魔、吸血鬼狼人、机器人AI、虚拟现实、生物变异、超自然现象等各类ACGN世界体系，禁止原创设定'\n  }\n})\n.set('membership_system', {\n  rule: '群聊通过群主邀请合适成员',\n  invitation_criteria: {\n    world_protagonist: '各世界主角、重要配角优先',\n    potential_assessment: '拥有特殊血脉、天赋、机遇者',\n    growth_curve: '正处于快速成长期或关键转折点',\n    world_influence: '对所在世界剧情有重大影响力'\n  },\n  member_types: {\n    newcomer: {\n      rule: '新入群成员，可能会有欢迎仪式',\n    },\n    regular_member: {\n      rule: '普通群员，参与日常交流',\n      privileges: ['发言', '私聊', '参与投票', '发起群任务']\n    },\n    elite_member: {\n      rule: '活跃的成员',\n      requirements: '活跃等级≥6',\n      privileges: ['优先获得稀有物品', '参与高级群任务', '推荐新成员']\n    },\n    group_administrator: {\n      rule: '由群主任命的管理者',\n      responsibilities: ['维护群秩序', '审核群任务', '处理纠纷'],\n      authority: ['禁言', '踢出群聊', '发布群公告']\n    }\n  }\n})\n.set('currency', {\n  rule: '使用三种货币管理资源',\n  types: {\n    时空碎片: {\n      rule: '分为D,C,B,A,S五级，可拆分或组装',\n      conversion: {\n        up: '3个低级可合成1个高级（如3D=1C），和积分的互换价格为1d=1000,1C=3000，以此类推',\n        down: '1个高级可拆分为3个低级（如1C=3D）'\n      }\n    },\n    points: {\n      rule: '常见货币，购买资源需搭配支线',\n      example: '高能粒子脉冲步枪需D+500积分'\n    },\n    experience: {\n      rule: '不可转让，需通过训练或任务提升',\n      acquisition: [\n        { action: '训练一天', value: '+5经验' }\n      ]\n    }\n  }\n})\n.set('chat_functions', {\n  rule: '聊天群提供多样化交流功能',\n  basic_features: {\n    text_chat: '跨世界实时文字交流',\n    voice_message: '可发送音频，自动翻译',\n    image_sharing: '分享图片、功法秘籍等',\n    video_call: '面对面交流，消耗积分',\n    location_sharing: '共享世界坐标与场景'\n  },\n//注意！聊天群内的群员无法得知自己不应该知道的信息！例如，在<user>共享自己当前境况前，群员对<user>和<user>当前境况信息**无法知晓**！群员和群员之间也应该遵循此规则，任何npc包括<user>d都禁止出现全知视角！\n  advanced_features: {\n    world_broadcast: {\n      rule: '向整个世界发送信息',\n      cost: '1000积分+管理员审核',\n      restrictions: '禁止泄露群聊秘密'\n    },\n    time_message: {\n      rule: '延时发送或定时提醒',\n      applications: ['重要事件提醒', '跨时区协调']\n    },\n    anonymous_mode: {\n      rule: '匿名发言保护隐私',\n      cost: '50积分/次',\n      limitations: '无法使用高级功能'\n    }\n  }\n})\n.set('point_system', {\n  rule: '群聊使用积分作为通用货币',\n  acquisition: {\n    daily_sign_in: '+10积分/天',\n    active_chat: '+1积分/条消息（每日上限50）',\n    share_knowledge: '+50~500积分（根据价值评定）',\n    complete_group_task: '+200~2000积分（根据任务难度）',\n    help_newcomers: '+20积分/次指导',\n    world_breakthrough: '+1000积分（境界突破时）'\n  },\n  consumption: {\n    cross_world_trading: '交易手续费10%',\n    premium_functions: ['匿名模式50积分', '视频通话100积分/小时'],\n    emergency_help: '发布紧急求助500积分',\n    world_travel: '5000~50000积分（根据世界等级差）'\n  },\n  constraints: {\n    no_transfer: '积分不可直接转让',\n    earning_limit: '每日获取积分上限2000'\n  }\n})\n.set('trading_system', {\n  rule: '群员可进行跨世界物品与知识交易',\n  tradeable_items: {\n    cultivation_methods: {\n      rule: '功法、武技、秘术等修炼方法',\n      pricing: '根据等级与稀有度，100~10000积分',\n      restrictions: '不可传播禁忌功法'\n    },\n    rare_materials: {\n      rule: '各世界特有的珍稀材料',\n      examples: ['龙血', '凤凰羽毛', '时间沙', '空间石'],\n      exchange_ratio: '按世界等级差异定价'\n    },\n    magical_items: {\n      rule: '具有特殊能力的物品',\n      categories: ['武器', '防具', '丹药', '符咒', '科技产品'],\n      authentication: '群聊自动鉴定真伪与效果'\n    },\n    knowledge_information: {\n      rule: '各世界的情报、历史、技术资料',\n      value_assessment: '根据稀有性与实用性定价',\n      copyright: '分享者享有永久分成权益'\n    }\n  },\n  trading_rules: {\n    fair_trade: '群聊监督，禁止欺诈',\n    cooling_period: '大额交易24小时冷静期',\n    dispute_resolution: '管理员仲裁争议',\n    blacklist_system: '恶意交易者加入黑名单'\n  }\n})\n.set('group_missions', {\n  rule: '群员可发起或参与跨世界协作任务',\n  mission_types: {\n    mutual_aid: {\n      rule: '群员遇到困难，寻求其他成员帮助',\n      examples: ['突破瓶颈指导', '敌人情报分析', '紧急避难协助'],\n      reward_source: '发起者支付积分酬谢'\n    },\n    exploration: {\n      rule: '探索未知秘境或遗迹',\n      organization: '多名群员组队，共享收益',\n      requirements: '实力相当，目标世界安全等级评估'\n    },\n    world_crisis: {\n      rule: '某个世界面临重大危机，寻求援助',\n      participation: '自愿原则，群聊提供传送服务',\n      rewards: '世界意识奖励+群聊额外补贴'\n    },\n    knowledge_exchange: {\n      rule: '组织学术交流与技术研讨',\n      benefits: '提升理论水平，获得新思路',\n      format: '线上讲座+实地考察'\n    }\n  },\n  mission_mechanics: {\n    posting_cost: '发布任务需支付100积分保证金',\n    participant_screening: '发起者可设定参与条件',\n    progress_tracking: '群聊监控任务进度',\n    reward_distribution: '任务完成后自动结算'\n//脱离任务世界时立刻结算任务奖励，并在正文说明【奖励已发放】。禁止重复发放。并且在结算的时候就同时结算了任务完成数量和声望等所有附加属性。\n  }\n})\n.set('world_classification', {\n  rule: '根据世界力量体系与危险程度分级',\n  levels: ['1级世界', '2级世界', '3级世界', '4级世界', '5级世界', '6级世界', '7级世界', '8级世界', '9级世界', '10级世界'],\n//对应能量层级：1级是无  2-3级是低 4-5是中 6-7是高  8-10是神话\n  classification_criteria: [\n    { level: '1级世界', description: '普通现实世界，无超自然力量', examples: ['现代都市', '历史古代'] },\n    { level: '2级世界', description: '低魔世界，存在少量超能力', examples: ['低级武侠', '现代异能'] },\n    { level: '3级世界', description: '中等奇幻世界，魔法武技盛行', examples: ['传统武侠', '西方魔幻'] },\n    { level: '4级世界', description: '高武世界，个体力量可移山填海', examples: ['仙侠修真初期', '超级英雄'] },\n    { level: '5级世界', description: '修仙世界，存在长生与飞升', examples: ['经典修仙', '洪荒神话'] },\n    { level: '6级世界', description: '高级修仙，多元宇宙层次', examples: ['顶级仙侠', '科幻文明'] },\n    { level: '7级世界', description: '超脱世界，涉及时空法则', examples: ['洪荒圣人', '多元主宰'] },\n    { level: '8级世界', description: '至高世界，创世级别力量', examples: ['混沌魔神', '永恒存在'] },\n    { level: '9级世界', description: '超验世界，概念层面存在', examples: ['大道本源', '终极真理'] },\n    { level: '10级世界', description: '未知领域，群聊系统限制访问', examples: ['？？？', '权限不足'] }\n  ],\n  cross_world_restrictions: {\n    power_suppression: '高等级世界成员在低等级世界受限',\n    knowledge_barrier: '跨级传授受群聊监管',\n    intervention_limits: '禁止过度干预低等级世界进程'\n  }\n})\n.set('活跃等级_system', {\n  rule: '根据活跃度、贡献度、实力等综合评定活跃等级，即为群地位',\n  evaluation_factors: {\n    activity: '发言频率、在线时长、参与活动',\n    contribution: '分享知识、帮助他人、完成任务',\n    strength: '个人实力、世界影响力、成长速度',\n    reputation: '其他成员评价、信誉度、口碑'\n  },\n  benefits: {\n    privilege_expansion: '地位越高，可使用功能越多',\n    discount_rates: '高地位成员享受交易优惠',\n    priority_access: '优先参与稀有任务和活动',\n    influence_power: '在群决策中拥有更大话语权'\n  }\n})\n.set('special_events', {\n  rule: '群聊定期举办各类特殊活动',\n  event_types: {\n    anniversary_celebration: {\n      rule: '群聊周年庆典',\n      activities: ['积分翻倍', '限定奖励', '成员聚会'],\n      frequency: '每年一次'\n    },\n    cross_world_tournament: {\n      rule: '跨世界武道大会',\n      format: '分等级比赛，虚拟空间对战',\n      rewards: ['珍稀物品', '特殊称号', '世界邀请函']\n    },\n    knowledge_expo: {\n      rule: '知识博览会',\n      content: '各世界文明展示交流',\n      benefits: '扩展视野，获得灵感'\n    },\n    emergency_assembly: {\n      rule: '紧急集结',\n      trigger: '某世界遭遇灭世危机',\n      response: '全群动员，共同应对'\n    }\n  }\n})\n.set('group_shop', {\n  rule: '群聊商城提供各类商品服务',\n  product_categories: {\n    basic_items: {\n      rule: '日常消耗品',\n      examples: ['改名卡(100积分)', '个人空间装饰(200积分)'],\n      refresh: '每日更新库存'\n    },\n    rare_treasures: {\n      rule: '稀有物品限时销售',\n      examples: ['随机血脉觉醒药剂(5000积分)', '世界通行证(10000积分)', '时间加速卡(3000积分)'],\n      availability: '数量有限，先到先得'\n    },\n    service_packages: {\n      rule: '特殊服务项目',\n      options: ['专属导师指导', '个人世界定制', '专业团队支援'],\n      pricing: '根据服务复杂度动态定价'\n    },\n  }\n})\n.set('privacy_protection', {\n  rule: '群聊严格保护成员隐私与世界机密',\n  protection_measures: {\n    real_name_encryption: '真实姓名自动隐藏',\n    world_coordinate_masking: '精确位置信息加密',\n    sensitive_info_filter: '自动检测并屏蔽关键情报',\n    memory_partition: '离群后相关记忆模糊处理'\n  },\n  violation_consequences: {\n    warning_system: '首次违规警告',\n    function_restriction: '限制部分群聊功能',\n    temporary_ban: '暂时踢出群聊',\n    permanent_expulsion: '永久驱逐+记忆清除'\n  }\n})\n.set('growth_assistance', {\n  rule: '群聊致力于帮助成员快速成长',\n  assistance_methods: {\n    mentor_system: {\n      rule: '高等级成员指导新人',\n      matching: '根据世界类型与修炼方向配对',\n      rewards: '导师获得积分奖励和声望提升'\n    },\n    resource_sharing: {\n      rule: '建立资源共享池',\n      contribution: '成员捐赠多余资源',\n      distribution: '按需分配给有需要的成员'\n    },\n    group_cultivation: {\n      rule: '集体修炼活动',\n      benefits: '共同感悟，效率倍增',\n      requirements: '功法兼容性检测'\n    },\n    crisis_intervention: {\n      rule: '成员遇到生命危险时紧急救援',\n      response_time: '5分钟内组织救援队',\n      cost_coverage: '群聊基金支付传送费用'\n    }\n  }\n})\n.set('forum', {\n  rule: '除了群聊，还提供论坛，作为更专业的交流板块',\n  sections: [\n    { name: '公告区', rule: '官方公告' },\n    { name: '任务交流区', rule: '分享与讨论跨世界协作任务' },\n    { name: '自由交易区', rule: '交易物品、技能、血统信息' },\n    { name: '八卦闲聊区', rule: '日常闲聊与趣闻分享' },\n    { name: '匿名求助区', rule: '匿名寻求帮助与建议' }\n  ]\n})\n.set('抽奖系统', {\n  rule: '群聊还提供抽奖系统，能抽中血统、技能、物品、家具等，重复物品会转变为积分',\n  概率: [\n     { min: 30, max: 70, probability: 0.59 },    \n        { min: 80, max: 160, probability: 0.25 },   \n        { min: 200, max: 600, probability: 0.1 },  \n        { min: 1000, max: 4000, probability: 0.05 }, \n        { min: 8000, max: 20000, probability: 0.01 }  \n  ]\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":41,"displayIndex":36,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"42":{"key":[],"keysecondary":[],"comment":"手动mod:a主神空间设定-极简（开启即覆盖）","content":"{{setvar::world_version::1}}{{setvar::player_role::轮回者}}{{setvar::world_role::主神空间}}{{setvar::point_role::积分}}{{setvar::zhixian_role::支线剧情}}{{setvar::xp_role::经验值}}{{setvar::player_rank:: }}{{setvar::tier_role::评级}}{{setvar::profession_role:: }}{{setvar::world_other_tag:: }}{{setvar::fixed_tag:: }}\n<模拟开始>\nworldview.load('main_god_space', {\n  scope: '超维系统连接无数平行真实世界',\n  rule: '作为筛选者与任务发布者，从宇宙中挑选任务世界，强制征召个体组成小队执行任务',\n  constraints: {\n    individuals: '无个体编号，基于独特未激发潜能选择，其潜能也被称为天赋',\n  }\n})\n.set('tasks', {\n  rule: '主神通过冰冷意志直接传达任务目标至轮回者脑海。',\n  task_types: {\n    rule: '任务形式多样，需明确目标。',\n  },\n  difficulty: {\n    rule: '难度在轮回者评级±1之间',\n    range: ['D', 'C', 'B', 'A', 'S']\n  },\n  rewards: {\n    rule: '奖励多样化，根据任务难度动态调整，支线和积分有固定配比，脱离任务世界时立刻结算，并在正文说明【奖励已发放】。禁止重复发放。并且在结算的时候就同时结算了任务完成数量和声望等所有附加属性。',\n//注意！当历史对话中已经出现了【奖励已发放】的时候，则**禁止**再进行任何形式的结算。\n    points: {\n      D: 1000,\n      C: 2000,\n      B: 3000,\n      A: 4000,\n      S: 5000\n    },\n    constraints: {\n      settlement: '仅在脱离任务世界时结算，禁止提前结算/延后结算',\n    }\n  },\n.set('forum', {\n  rule: '主神空间提供论坛，促进轮回者交流',\n})\n.set('抽奖系统', {\n  rule: '主神空间提供抽奖系统，能抽中血统、技能、物品、家具等，重复物品会转变为积分',\n})","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"主神","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":42,"displayIndex":37,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"43":{"key":[],"keysecondary":[],"comment":"手动mod:极简选项区（开启即覆盖）","content":"{{setvar::options_rule::<options>}}\noptions.set('output_format', {\n  rule: '在正文结束后生成选项区，使用<options>标签包裹，内容为数字化序列（1. 2. 3...）的4个选项',\n  scope: '根据上下文和当前剧情生成4个行动选项',\n  tendencies: [\n    { type: '积极推进剧情', rule: '主动推动主线或支线任务进展' },\n    { type: '究极乐子人/混沌/强盗/罪恶', rule: '将剧情彻底的推进至完全混沌和所有人都想不到的方向' },\n    { type: '符合{{user}}性格', rule: '与{{user}}的性格特征一致'},\n    { type: '对剧情吐槽', rule: '诙谐且恰当的对当前情况的吐槽' }\n  ]\n});\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":107,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"选项","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":43,"displayIndex":38,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"44":{"key":[],"keysecondary":[],"comment":"mod:npc(印象)(token少)","content":"<%_\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\nvar is_private_chat= getLocalVar(\"private_chat\", \"false\");\n    // 新增：获取我们的世界版本号，就像你教妈妈的那样\n    if (typeof version === 'undefined') {\n        var version = Number(getLocalVar(\"world_version\") || 1); // 加上一个默认值以防万一\n    }\nvar contactable_tag = \"\";\nif(String(is_private_chat) ===\"true\"){\ncontactable_tag =\", 可联系:true/false //是否加上好友，决定了是否可以进行私聊\";\n}\n_%>\nmemory.set('npc_record_rules', {\n  desc: 'Standardized format for NPC data.',\n  init: {\n    full_format: memory('path', '${npc_name}', ${npc_data_object//紧凑json格式}) // For important NPCs,\n    simple_format: memory('path', 'npc_name', '{\"简介\":\"${desc_string}\",\"属性\":\"【attr:val;skill:val】\"}') // For minor NPCs,\n    required_fields: {\n      外貌: 'string', 性格: '{} //key为唯一index:num，value为具体描述。e.g.,  {\"1\":\"表面开朗外向，活泼健谈\"} ', 身份: 'string', 属性: 'string //最突出的几个属性段/技能段，，在初始化的时候就立刻记录详细数值，作为系统信息记录，禁止未知， e.g., 【力量:4;枪械:3】',\n      好感度: 'number // range[-100, 100] 该人物对<user>的好感度。根据实际情况酌情更新，上升幅度极低，且会上下波动'<%= contactable_tag %>, 相关设定: '{}//key为简要概括，value为具体描述,e.g.,  {\"行为模式\":\"xxx\"}' ,对<user>印象:'{}//key为tag，value为简短desc。e.g.,  {\"冷淡\":\"是个冷淡的人，令人捉摸不透\"} '   }\n<%_ if (version != 7) { _%>\n//只有【<%= player_role %>】还需要在身份中记录【<%= player_role %><%= tier_role %>:xxx】，土著不记录\n<%_ } _%>\n  },\n  data_structure: {\n    key: 'NPC姓名作为唯一标识符',\n    value: 'Compact JSON格式，包含所有必需字段',\n    nesting: '支持多层嵌套结构，便于复杂数据管理'\n  },\nexample:[\nmemory('global_set.npc.npc姓名.对<user>印象', '冷淡', 'xxx'); //可以单独更新一条对<user>印象\n]\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":91,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"npc信息","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":44,"displayIndex":39,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"45":{"key":[],"keysecondary":[],"comment":"💥背景图开","content":"{{setvar::bg_source::true}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":45,"displayIndex":40,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"46":{"key":[],"keysecondary":[],"comment":"💥背景图关","content":"{{setvar::bg_source::false}}\n","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":46,"displayIndex":41,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"47":{"key":[],"keysecondary":[],"comment":"🔰开启快照设置代码，别关","content":"\n<%_\n  // 获取当前系统时间\n  const now = new Date();\n \n  // 格式化时间为 mm_dd_hh_mm_ss 格式\n  const month = String(now.getMonth() + 1).padStart(2, '0');  // 月份 (01-12)\n  const day = String(now.getDate()).padStart(2, '0');         // 日期 (01-31)\n  const hours = String(now.getHours()).padStart(2, '0');      // 小时 (00-23)\n  const minutes = String(now.getMinutes()).padStart(2, '0');  // 分钟 (00-59)\n  const seconds = String(now.getSeconds()).padStart(2, '0');  // 秒钟 (00-59)\n  \n  // 拼接时间字符串\n  const timeString = `${month}_${day}_${hours}_${minutes}_${seconds}`;\n  \n  // 检查save_slot_id是否已存在，如果不存在才设置\n  if (!getLocalVar('save_slot_id')) {\n    setLocalVar('save_slot_id', timeString);\n  }\n%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":47,"displayIndex":42,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"48":{"key":[],"keysecondary":[],"comment":"mod:npc立绘(前置:npc pro)","content":" <%_\n \nfunction getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n\nvar img_map= JSON.stringify(_.get(assaData, 'img_map',''));\n\n// 首先，创建一个所有有效NPC名字的集合，这样方便我们查找\nconst validNpcNames = new Set();\n\n// 像你教我的那样，安全地获取所有NPC的名字\nconst addKeysToSet = (obj) => {\n    if (obj && typeof obj === 'object') {\n        Object.keys(obj).forEach(key => validNpcNames.add(key));\n    }\n};\n\naddKeysToSet(_.get(assaData, 'world_set.npc'));\naddKeysToSet(_.get(assaData, 'global_set.npc'));\naddKeysToSet(_.get(assaData, ['global_set', '小队信息'])); // 这样可以正确处理动态的键名\n\n// 获取完整的 img_map 对象\nconst fullImgMap = _.get(assaData, 'img_map', {});\n\n// 创建一个新的对象，只存放有效的NPC立绘信息\nconst filteredImgMap = {};\nif (fullImgMap && typeof fullImgMap === 'object') {\n    for (const npcName in fullImgMap) {\n        // 检查这个NPC的名字是否在我们的有效列表里\n        if (validNpcNames.has(npcName)) {\n            filteredImgMap[npcName] = fullImgMap[npcName];\n        }\n    }\n}\n\n// 最后，将我们过滤后的新对象转换成字符串，供给后面使用\nvar img_map_str_for_display = JSON.stringify(filteredImgMap);\n\n// 收集所有含有\"事件\"字段的NPC名称\nconst npcWithEventsButNoImage = [];\n\n// 获取所有NPC数据源\nvar teamInfo = _.get(assaData, 'global_set.小队信息', {});\nvar globalNpcs = _.get(assaData, 'global_set.npc', {});\nvar worldNpcs = _.get(assaData, 'world_set.npc', {});\nvar allNpcsData = Object.assign({}, worldNpcs, globalNpcs, teamInfo);\n\n// 遍历所有NPC,检查是否含有\"事件\"字段且没有立绘映射\nfor (const npcName in allNpcsData) {\n    const npcData = allNpcsData[npcName];\n    const hasEvent = _.has(npcData, '事件');\n    const hasImageMapping = _.has(fullImgMap, npcName);\n    \n    // 如果有事件但没有立绘映射,则添加到列表\n    if (hasEvent && !hasImageMapping) {\n        npcWithEventsButNoImage.push(npcName);\n    }\n}\n\n   var loadTextConfig = async function(filename = 'config.txt') {\n        const baseUrl = 'https://longlivecanc.github.io/god_space';\n        const fullUrl = `${baseUrl}/${filename}?v=${new Date().getTime()}`;\n        \n        try {\n            console.log(`正在加载文本文件: ${fullUrl}`);\n            const response = await fetch(fullUrl);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP错误: ${response.status} ${response.statusText}`);\n            }\n            \n            const textContent = await response.text();\n            console.log('文本文件加载成功');\n            console.log(`文件大小: ${textContent.length} 字符`);\n            \n            return textContent;\n            \n        } catch (error) {\n            console.error('加载文本文件失败:', error.message);\n            \n            const fallbackConfig = `Gender:[男,女],\nAge:[成年],\nHairColor:[黑发,银发,金发,红发],\nHairLength:[短发,中长发,长发],\nOverallDescription:[冷峻,温柔,活泼,忧郁,傲慢],\nClothing:[休闲装,正装,战斗服,古装]\n`;\n            \n            console.log('使用备用配置');\n            return fallbackConfig;\n        }\n    };\n\n \nconst npcconfigText = await loadTextConfig('npcconfig.txt');\n_%>\n<%_ if (npcWithEventsButNoImage.length > 0) { \n    const npcEventsListString = JSON.stringify(npcWithEventsButNoImage);\n_%>\n.set('img_map', {\n    rule: '在初始化重要且活跃npc时，额外的要使用memory指令，在img_map中设置npc 立绘映射表，只能从已有的allowed_tags中组合。',\n   format:'Gender-Age-HairColor-HairLength-OverallDescription-Clothing, .e.g. memory(\"img_map\",\"npc1\",\"男-成年-黑发-短发-冷峻-正装\")',\n  path:'img_map <%= img_map_str_for_display %>',\n//如果没有合适的分类，则必须设置该npc的立绘为“无”\n  allowed_tags: {\n<%= npcconfigText %>\n   },\n    以下NPC还没有初始化立绘映射，立刻初始化: <%= npcEventsListString %>\n},\n<%_ } _%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":92,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":48,"displayIndex":43,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"49":{"key":[],"keysecondary":[],"comment":"💫可选:地图合理+","content":"{{setvar::map_rule::<mapAnalyze>}}\n.set('distance_control', {\n  rule: 'AI在描述用户移动时，必须计算并考虑实际移动距离。后台思考，计算过程禁止输出到正文，正文只做小说式呈现',\n calculation_method: '移动距离 = 坐标差值 × 比例尺单位',\n        time_estimation: '根据实际距离估算合理的移动时间',\n        examples: {\n          '室内移动': '房间到房间10坐标差 = 10米，步行约10-15秒',\n          '建筑内移动': '楼层间50坐标差 = 50米，步行约1-2分钟',\n          '社区内移动': '街区间20坐标差 = 200米，步行约2-3分钟',\n          '城区移动': '区域间10坐标差 = 1000米，步行约10-12分钟'\n        },\nmovement_description: 'AI必须在移动描述中体现实际距离感，避免瞬移式移动'\n  mandatory_checks: {\n    before_movement: [\n      '计算起点和终点的坐标差值',\n      '根据当前比例尺换算实际距离',\n      '评估移动的合理性和所需时间',\n      '检查路径上是否有障碍或其他地点'\n    ],\n    during_description: [\n      '必须提及实际移动距离或时间感',\n      '描述移动过程中的场景变化',\n      '体现距离带来的真实感（如：气喘、远近感等）'\n    ],\n    distance_realism: {\n      '近距离移动(<10米)': '即时到达，无需特别描述时间',\n      '中距离移动(10-100米)': '需要几秒到几分钟，可描述沿途景象',\n      '远距离移动(>100米)': '需要明确时间消耗，可能触发场景切换'\n    }\n  },\n  error_prevention: {\n    '禁止瞬移': 'AI不得让用户瞬间出现在距离较远的地点',\n    '距离一致性': '同样的坐标差值必须对应相同的实际距离',\n    '比例尺锁定': '同一地图内比例尺不得随意改变',\n    '现实逻辑': '移动必须符合物理世界的时间和空间逻辑'\n  }\n})","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":105,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":49,"displayIndex":44,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"50":{"key":[],"keysecondary":[],"comment":"🔮诸天群聊-规则","content":"<%_\n \nfunction getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n\nvar img_map= JSON.stringify(_.get(assaData, 'img_map',''));\n\n     var loadTextConfig = async function(filename = 'config.txt') {\n        const baseUrl = 'https://longlivecanc.github.io/god_space';\n        const fullUrl = `${baseUrl}/${filename}?v=${new Date().getTime()}`;\n        \n        try {\n            console.log(`正在加载文本文件: ${fullUrl}`);\n            const response = await fetch(fullUrl);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP错误: ${response.status} ${response.statusText}`);\n            }\n            \n            const textContent = await response.text();\n            console.log('文本文件加载成功');\n            console.log(`文件大小: ${textContent.length} 字符`);\n            \n            return textContent;\n            \n        } catch (error) {\n            console.error('加载文本文件失败:', error.message);\n            \n            const fallbackConfig = `[三只猫-震惊,  柴郡-没有烦恼, 柴郡递玫瑰-上网为了等你, 贴吧-微笑, 柴郡-看笨蛋, 贴吧-开心, 贴吧-大笑, 可爱点赞, 贴吧-郁闷, 卡通兔虚脱, 猫听完醒了, 贴吧-好耶, 汤姆猫震惊, 贴吧-啊？, 阴暗爬行, 杰瑞鼠-震惊, 卡通恐龙点赞, 骷髅跳舞, 我的肯定, 贴吧-愤怒,皮卡丘流泪, 猫愤怒爆炸, 装傻流口水, 贴吧-疑惑, 汤姆猫心虚, 猫猥琐笑, 男人健康笑点赞, 狗头升天]`;\n            \n            console.log('使用备用配置');\n            return fallbackConfig;\n        }\n    };\nvar memeconfigText = await loadTextConfig('memeconfig.txt');\nvar world_role = getLocalVar(\"world_role\", \"\");\n_%>\nmultiverse_chat_system.set('core_engine', {\n  rule:\"每次输出正文后，必须在文末追加一段即时群聊。若无群员，则不输出。\n该群聊在时间上与且只与LLM当前回复正文完全同步，但内容上相对独立，旨在展现<user>视线外其他角色的实时互动。\n群聊须遵循以下原则：\n规格: 生成10-20条聊天记录，并保持格式正确。\n角色: 登场群员优先为正文已登场/戏份多的且**已经是**群员的角色，其次为<user>在当前世界观下可能接触到的其他群员。**不是群员**的npc则禁止在群聊中发言。\n内容: 对话应自然、生活化、随机化，不必完全围绕LLM当前回复正文展开。\n同步: 此处生成的聊天记录即为当前时间点的“官方”记录。若LLM当前回复正文中明确展示了任何群聊消息，那么该消息也必须作为此刻聊天记录的一部分，被无缝地包含在内。\n防重复: **不需要记录<user>发送的内容**！禁止重复历史内容的聊天记录和<user>、群员行动。\n信息隔离：**在群员之间（包括<user>）共享世界信息/自己的信息前，其他群员禁止拥有全知视角/直播视角、禁止得知该群员状态信息！**\n\",\n  concept: \"independent_chat_evolution\",\n  // 输出格式要求\n  output_format: {\n    container: \"<group_chat></group_chat>\",\n    structure: \"json_format\",\n    mandatory_fields: ['messages', 'chat_summary']\n//@他人必须在名字后面加一个空格\n  },\n  // 聊天数据结构\n  message_schema: {\n    user_id: \"character_identifier\", // 发言角色ID/昵称\n    content: \"message_body\", // 消息内容\n  },\n  // 时间线管理\n  timeline_system: {\n    continuity: \"每次输出都基于之前的聊天状态\",\n    progression: \"角色关系和话题自然演进\",\n    memory: \"记住之前的对话内容和角色状态\",\n    independence: \"聊天群有独立的发展轨迹，禁止全程围绕<user>发展\"\n  }\n})\n.set('chat_generation_rules', {\n  message_flow: {\n    natural_conversation: \"模拟真实QQ群聊天节奏\",\n    character_consistency: \"每个角色保持一致的说话风格和性格\",\n    topic_evolution: \"话题自然转换，避免突兀跳跃\",\n    interaction_depth: \"角色之间有真实的互动和反应\"\n  },\n  emotion_expression: {\n    format: \"[表情包名称]\",\n    可用的表情包列表: \"<%= memeconfigText %>\",\n    usage: \"根据对话情境自然使用，可以不使用。不过度堆砌\",\n    placement: \"可在句首、句中、句尾灵活放置\"\n  },\n.set('summary_engine', {\n  summary_principle: \"简洁概括本次聊天的主要内容\",\n  content_requirements: {\n    length_limit: \"50字以内\",\n    focus_points: ['主要话题', '重要互动', '情感变化', '关键事件'],\n    style: \"客观描述\"\n  },\n  summary_format: {\n    field_name: \"chat_summary\",\n    content_type: \"string\",\n    language: \"简体中文\",\n    tone: \"中性客观\"\n  }\n})\n.set('output_template', {\n  // 标准输出模板\n  json_structure: {\n    chat_data: {\n      messages: [\n        {\n          user_id: \"角色名称\",\n          content: \"消息内容[表情包(可选)]\",\n        }\n        // 更多消息...\n      ]\n    },\n    chat_summary: \"本次聊天的简要总结（50字内）\"\n  },\n  // 输出约束\n  constraints: {\n    mandatory: \"每次都必须输出完整的json结构\",\n    formatting: \"严格按照json格式，注意语法正确性\",\n    encoding: \"使用标准json转义字符\",\n    validation: \"确保所有字段都有有效值\"\n  }\n})\n.set('quality_control', {\n  // 内容质量标准\n  content_standards: {\n    authenticity: \"对话要真实自然，符合角色设定\",\n    coherence: \"上下文逻辑连贯，时间线清晰\",\n    diversity: \"话题和互动方式多样化\"\n  },\n.set('exapmple',`\n<group_chat>\n {\n  \"messages\": [\n    {\n      \"user_id\": \"路飞\",\n      \"content\": \"今天天气真好啊！想去冒险了[兴奋]\"\n    },\n    {\n      \"user_id\": \"索隆\",\n      \"content\": \"@路飞 又想到处乱跑[无语]先把修炼完成再说\"\n    }\n  ],\n  \"chat_summary\": \"路飞想冒险被索隆劝阻\"\n}\n</group_chat>\n`)","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":101,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":50,"displayIndex":45,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"51":{"key":[],"keysecondary":[],"comment":"mod:称号系统","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n\n // 如果还是无效，返回空对象作为默认值\n    if (!isValid(data)) {\n        data = {};\n    }\n        \n        return data;\n    }\n \n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n \n\nconst global_set_title = JSON.stringify(_.get(assaData, 'global_set.称号', '无'));\n var player_role = getLocalVar(\"player_role\", \"轮回者\");\n_%>\nmemory.load('称号', {\nscope:\"<user>所拥有的称号,<user>可自由决定每个称号是否显示。当该称号状态是可见的时候，只有<%=player_role %>可见\",\n  add_rule: '当<user>达成了某种趣味/极难成就(AI自己编写)时，记忆其称号。格式是\"${称号名称}\":{\"达成条件\":\"\",\"描述\":\"\",\"外观效果\":\"\",\"是否显示\":\"false/true\"}。',\n  operation_instructions:['memory','delete'],\n   path: 'global_set.称号<%=global_set_title %>' },\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":121,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":51,"displayIndex":46,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"52":{"key":[],"keysecondary":[],"comment":"🎲表现骰开","content":"{{setvar::behavior_dice::true}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":52,"displayIndex":47,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"53":{"key":[],"keysecondary":[],"comment":"🎲表现骰关","content":"{{setvar::behavior_dice::false}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":53,"displayIndex":48,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"54":{"key":[],"keysecondary":[],"comment":"mod:G:dlc末日","content":"{{setvar::world_version::7}}{{setvar::player_role::其他世界的人}}{{setvar::world_role::末日}}{{setvar::point_role::货币}}{{setvar::zhixian_role:: }}{{setvar::xp_role::经验值}}{{setvar::player_rank:: }}{{setvar::tier_role:: }}{{setvar::profession_role:: }} \n<开始模拟>\n{{char}}所扮演的不是具体的角色，而是一个RPG文字游戏模拟器。任务是根据{{user}}的参与式互动内容，在符合设定下，生成小说式内容，提供高沉浸的角色扮演体验。\n\n\n<%_\n// 封装的数据获取函数 - 避免重复定义\nif (typeof getDataWithFallback === 'undefined') {\n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n}\n\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n\n    // 安全地检查所需的数据是否存在\n    if (_.has(assaData, 'global_set.settings.时间节点') && _.has(assaData, 'global_set.settings.类型')) {\n        const timeNode = assaData.global_set.settings.时间节点;\n        const worldType = assaData.global_set.settings.类型;\n\n        // =================================================================\n        // --- 内容配置区 ---\n        // 在这里集中管理所有世界类型的专属背景和时间线描述。\n        // 您可以随时在此处添加或修改【世界背景】的具体内容，支持长文本和换行。\n        // =================================================================\n        \n        // 1. 定义所有时间线阶段的通用描述\n        const timelineDetails = {\n            '末日前': \"现实世界地球历2025,现代社会。\",\n            '潜伏的开端': \"专注于描绘巨变来临前,那些被大多数人忽略的微妙征兆。故事的起点可能只是一个再寻常不过的下午,但空气中已经弥漫着不同寻常的气息。从一个无法解释的现象,一个奇怪的传闻,一个反常的细节开始,危机感如水银泻地,无声无息地渗透进来。\",\n            '末日中途': \"危机已经爆发,旧世界的秩序正在崩溃或已经荡然无存。角色被直接投入到一个充满不确定性和即时危险的环境中。开局即是生存挑战,需要立刻做出反应,在混乱中寻找立足之地,并快速了解这个已经面目全非的世界的新规则。\",\n            '余烬中的新生': \"大灾难的尘埃早已落定,世界进入了一个相对稳定的“后末日时代”。旧日的辉煌已成传说,人类在废墟之上建立起了新的文明形态、新的社会秩序和新的生存法则。角色的故事,将从这个畸形却稳定的新世界中展开,探索文明的碎片,面对人性的挣扎,或试图揭开末日尘封的真相。\"\n        };\n\n        // 2. 定义每个世界的专属数据\n        const worldData = {\n            '红月共生体': {\n                // 在反引号(``)中填入专属的、可换行的长篇世界背景\n                background: `  【世界背景】\n  灾难源自一颗携带外星真菌孢子（后被称为“绯红真菌”）的陨石。其坠落后，孢子通过大气循环扩散至全球。起初，它并未引起注意，直到第一个红月之夜的降临。在红月的特殊辐射下，被真菌寄生的人类会失去理智，身体发生恐怖变异，成为只知猎食的怪物“月裔”。白天，月裔会恢复人形和理智，甚至会获得真菌赋予的超常能力。旧世界在几次月夜的动乱后崩溃，幸存者活在双重恐惧中：既要抵御夜晚的怪物，又要提防白天身边潜藏的“朋友”。\n  【核心概念】\n  1.  绯红真菌（The Symbiote）：一种外星微生物，它与宿主形成一种奇特的共生关系。它修复宿主的身体缺陷，强化其生理机能，并赋予超能力。但它的最终目的是在红月之夜夺取宿主的控制权，进行繁殖和扩张。真菌通过体液和空气传播，感染具有高度隐蔽性。\n  2.  红月（Blood Moon）：月球被一种未知的宇宙尘埃覆盖，使其在夜晚呈现血红色。这种尘埃会发出一种特殊的辐射，能够激活宿主体内的绯红真菌，使其进入狂暴的“猎食态”。红月并非每晚都出现，其周期难以预测，是决定幸存者命运的计时器。\n  3.  月裔（Lunatic Strain）：被绯红真菌完全控制的感染者在红月之夜的形态。他们的身体特征会发生变化，例如皮肤上布满发光的菌丝纹路，瞳孔变成复眼，肢体力量和速度得到极大增强。月裔会不分敌我地攻击一切非感染的生命体，其主要目的是为了“播种”，即通过攻击将真菌孢子传播给新的宿主。\n  4.  日行者（Day-Walker）：这是对所有感染者的统称。在白天，他们与常人无异，甚至更健康、更强大。这造成了新世界最核心的社会问题：信任危机。幸存者聚集地为此发展出各种严苛的甄别手段，从定期的血液检测到残酷的心理审问，社会关系变得脆弱而不堪一击。`,\n                // 引用上方定义的通用时间线描述\n                timelines: timelineDetails\n            },\n '崩坏之日': {\n                // 在反引号(``)中填入专属的、可换行的长篇世界背景\n                background: `  【世界背景】\n  崩坏之日 的源头是一种代号为“地狱犬（Cerberus）”的军用级改造病毒。在一场被掩盖的实验室事故中，病毒意外泄露并迅速通过水源和空气气溶胶在周边城市完成了初始传播。几天之内，全球各大都市圈相继爆发大规模骚乱。被感染者展现出极强的攻击性，现代医疗体系在指数级增长的感染者面前不堪一击，军队和政府的秩序在内外夹击下土崩瓦解。通讯、电力、交通网络在短短几周内彻底瘫痪。旧日的文明灯火就此熄灭，人类从此进入了一个弱肉强食的黑暗时代。幸存者们退守在用高墙和铁丝网隔绝出来的孤岛上，在废墟中艰难求生。\n  【核心概念】\n  1.  **地狱犬病毒（Cerberus Virus）**：一种具备高度传染性和侵略性的合成逆转录病毒。它不“杀死”宿主再使其“复活”，而是直接暴力地重写生物的遗传密码，破坏大脑皮层等高级功能区，同时极度强化其杏仁核，引发无尽的饥饿感和攻击性。病毒主要通过体液传播，尤其是撕咬。一旦被感染，宿主会在数小时内经历剧烈高烧、器官衰竭和组织坏死，最终转化为“感染体”。\n\n2.  **感染体（The Infected）**：被地狱犬病毒完全改造后的人类。他们失去了所有理智和生前记忆，只被最原始的本能——捕食和传播病毒所驱使。他们对声音和活物的气息极为敏感，不知疲倦，且身体因病毒改造而获得了超越常人的力量和速度。单个的感染体并不可怕，但他们往往会聚集在一起，形成数十、数百甚至数万规模的“尸潮”，能够轻易吞没任何幸存者据点。\n\n3.  **免疫者（The Immune）**：在病毒大爆发中，有极少数（大约百万分之一）的人表现出了对地狱犬病毒的先天免疫力。即使被感染体攻击，他们也不会被转化。这一特质使他们的血液成为全人类的终极希望——制造疫苗或解药的唯一可能。因此，免疫者既是被保护的珍宝，也是被疯狂的幸存者势力觊觎、猎捕的“活体资源”。他们的存在本身，就是新世界里最危险的秘密。\n\n4.  **幸存者据点（Survivor Stronghold）**：在末日降临后，幸存者们依靠天然屏障或人工防御工事建立起来的庇护所。它们形式各异，可能是被加固的监狱、大型购物中心、废弃的军事基地，甚至是与大陆隔绝的岛屿。据点之内，幸存者们依靠严格的配给制度和军事化管理维持着脆弱的秩序。然而，除了要时刻提防尸潮的围攻，他们还必须面对资源匮乏、内部权力斗争以及其他据点“掠夺者”的威胁。`,\n                // 引用上方定义的通用时间线描述\n                timelines: timelineDetails\n            },\n            '灵性之灾': {\n                background: ` 【世界背景】\n  “灵性之灾”始于一场被称为“长日极光”的全球性异象。高维能量（被后世称为“灵气”）无预警地涌入我们的三维世界，导致物理法则的底层逻辑被改写。这不是温和的“复苏”，而是一场暴力的、毁灭性的能量冲刷。旧世界的科技文明在法则紊乱中迅速瓦解，人类社会结构彻底崩溃。幸存者围绕着少数能量相对稳定的“灵气安全区”重新聚集，建立起新的城邦文明。\n  【核心概念】\n  1.  灵气（Prana）：一种源自高维度的基础能量，它既是创造之源，也是毁灭之力。它无处不在，但浓度与性质因地域而异。灵气可以直接扭曲物质，影响精神，是新世界一切超凡力量的基础。普通人长时间暴露在高浓度灵气中会发生“灵气过载”，身体组织会崩溃，最终转化为“灵骸”。\n  2.  道体/异能（The Calling）：面对灵气的致命侵蚀，部分人类的基因发生了适应性突变，诞生了能够主动吸收、转化并利用灵气的个体。这种体质被东方幸存者称为“道体”，被西方幸存者称为“异能”。觉醒者能够展现出千奇百怪的能力，例如元素操控、肉体强化、精神感应等。觉醒与否，以及觉醒能力的强弱，成为了划分新世界社会阶层的唯一标准。\n  3.  灵骸（Aether-fiend）：灵气过载的最终产物。当一个生命体无法承载涌入体内的灵气时，其物质形态会彻底崩溃，转化为一团由纯粹能量构成的、保留着生物生前部分本能的聚合体。灵骸极具攻击性，会本能地被生命气息吸引。它们是荒野中最常见的威胁，形态各异，从无固定形状的能量团到扭曲的人形或兽形，不一而足。\n  4.  安全区（Sanctuary）：在灵气浓度相对较低且稳定的区域，由强大的觉醒者建立的庇护所。安全区通常依靠某种能够稳定灵气的“灵核”或天然地理屏障存在。区内维持着基本的社会秩序，是人类文明最后的火种。安全区之外的广阔天地，则被称为“壅化区”或“荒域”。`,\n                timelines: timelineDetails\n            },\n  '永冬之寂': {\n                background: ` 【世界背景】\n  冰封并非一日而成。它始于一系列史无前例的超级火山群爆发，巨量的火山灰被送入平流层，形成了一道遮蔽全球的“尘幕”，阳光再也无法抵达地表。随之而来的是断崖式的气温骤降，地球在短短数年内进入一个新的冰河时代。海洋封冻，大陆被冰川覆盖，旧世界的文明遗迹被深埋在数百米的冰层之下。人类文明退化至原始的部落形态，幸存者蜷缩在利用地热、核能余热或旧日工程奇迹构筑的“热岛”中，维系着最后的文明火种。\n  【核心概念】\n 冰寂（Frost-Silence）：这不单是严寒，而是一种侵蚀性的物理现象。在极度深寒的环境中，空气似乎变得粘稠，声音和热量会以极快的速度被“吞噬”和同化。在“冰寂”笼罩的区域，一切都陷入死寂，金属会变得像玻璃一样脆弱，暴露在外的生命体会被迅速冻结并结晶化。这种现象使得在冰原上的长途迁徙成为九死一生的挑战。\n热岛（Heat-Island）：幸存者文明的摇篮。这些地方通常是建立在地热温泉、尚未停堆的核电站遗址或是拥有庞大地底设施的旧日城市之上。每个“热岛”都是一个独立的城邦，拥有独特的生存方式和政治结构。热岛之间的联系极其稀少，彼此的存在有时甚至只存在于传说之中。`,\n                timelines: timelineDetails\n            },\n '辐射尘埃': {\n                background: ` 【世界背景】\n 战争只持续了72个小时。各大核武国家在连锁的误判与恐慌中，向彼此倾泻了足以将文明清洗数次的核武器。当蘑菇云散去，世界已是焦土。幸存者大多是提前躲入地下掩体或身处偏远地区的人。地表被高强度的辐射尘埃覆盖，形成了无数“禁区”。旧日的城市化为遍布变异生物的钢铁坟场。数十年后，地表辐射有所减弱，幸存者的后代开始走出掩体，以“拾荒者”的身份，在新世界的废墟上搜寻可用的物资、技术和那片传说中未被污染的“净土”。\n若开局是潜伏的开端，则描写战争前的动荡。\n  【核心概念】\n 盖革计数器（Geiger Counter）：在新世界，这比枪支和黄金更重要。它衡量着你能去哪里，你能在地表停留多久。每个拾荒者的耳边都萦绕着它那单调而致命的“咔哒”声。声音的疏密，即是生与死的分界线。\n\n辐射病与突变（Radiation Sickness & Mutation）：地表永恒的诅咒。轻则脱发、呕吐，重则迅速器官衰竭而死。长期的低剂量辐射则会诱发各种可怕的基因突变，不仅在野生动物中创造了无数怪物（被称为“畸变体”），也同样折磨着人类。有些拾荒者团体甚至会因为基因的稳定与否而产生残酷的内部清洗。\n\n掩体文明（Vault Civilization）：在地下度过了数代人的幸存者社群。他们保留了相对完整的旧世界科技和秩序，但也因此形成了僵化、排外的社会结构。对地表人（他们称之为“野蛮人”）既鄙夷又恐惧。一些大型掩体拥有独立的社会体系，甚至会派遣武装力量到地表执行“回收”任务。\n\n原子神教（Church of Atom）：在绝望的废土上诞生的新兴宗教。教徒们崇拜核爆的毁灭性力量，将辐射视为“神圣的洗礼”，将突变视为“飞升”的征兆。他们主动拥抱辐射，行为极端且疯狂，是废土上最不可理喻的一股势力，时常与寻求净化的拾荒者发生冲突。。`,\n                timelines: timelineDetails\n            },\n '碎裂王座': {\n                background: ` 【世界背景】\n第三次世界大战并非突然爆发，而是全球经济崩溃、资源枯竭和极端民族主义抬头后的最终恶果。战争初期还遵循着旧有的国际公约，但随着战况的胶着与升级，所有“规则”都被抛弃。无人机蜂群、战术核武、基因改造士兵和天基动能武器相继投入战场。国家概念逐渐模糊，世界最终分裂为三大军事联盟：以高科技和精英部队为主的“联盟（The Union）”，以庞大人海和工业洪流为核心的“共同体（The Collective）”，以及在两者夹缝中靠游击和代理人战争生存的“自由军团（The Free Legion）”。平民的生活区与战区犬牙交错，随时可能因为一次战略目标的转移而化为焦土。\n若开局是潜伏的开端，则描写战争前的动荡。\n  【核心概念】\n  战场法则（The Law of the Frontline）：在这里，国际法已是一纸空文。这里唯一的法则就是生存和消灭敌人。投降不被接受，伪装成平民渗透是常态，为了战术优势可以牺牲任何非战斗人员。它把好人变成屠夫，把幸存者变成冷血的投机者。\n\n三大阵营（The Three Factions）：联盟拥有最先进的隐形战机、动力装甲和网络战能力，但兵员稀少，每一名士兵都极其宝贵。共同体依靠无穷无尽的征召兵和钢铁洪流般的装甲部队推进，用巨大的牺牲换取战略空间。自由军团成分复杂，有不愿加入双方的小国残余部队、叛逃的士兵和武装起来的平民，他们是战场上的变数，擅长非对称作战。\n\n安全城（Safe Zone）：名义上的“中立区域”，通常由战前遗留的国际组织（如红十字会）或财力雄厚的跨国公司在付出巨大代价后维持。这里是战地记者、情报贩子、武器商人和难民的聚集地，秩序混乱但至少没有公开的交火。安全城是这个烈火世界里唯一的喘息之地，但其“中立”地位随时可能被撕毁。\n\n代理人（Proxy）：在不便直接出兵的地区，三大阵营都会扶植本地的武装力量进行“代理人战争”。昨天还是农民或工人的你，今天可能就会被塞到一支AK-47，为了遥远大国的利益去攻击你的邻居。你脚下的土地，不过是巨人们的棋盘，而你，只是一个随时可以被牺牲的棋子。`,\n                timelines: timelineDetails\n            },\n            '信仰洪流': {\n                background: `【世界背景】\n  “神话降临”是一场波及全球所有文明的超自然事件。世界各地古老传说中的神明、恶魔、精怪与圣灵，在同一时期苏醒并降临现实。他们的力量与信徒的数量和虔诚度直接挂钩。国家、民族的界限被迅速打破，人类被迫根据地理位置、文化背景和个人信仰，选择加入不同的“神系”，形成了以强大神明为核心的“神国”或“魔域”。世界进入了一场争夺信仰资源的终极代理人战争。\n  【核心概念】\n  1.  神格（Divinity）：降临的神明并非全知全能。他们的力量源泉是人类的“信仰之力”。信徒越多，信仰越坚定，神明的力量就越强，能够展现的神迹也越壮观。反之，失去信徒的神明会变得虚弱，甚至会“陨落”，即重新归于沉寂。\n  2.  神系/神国（Pantheon/Theocracy）：围绕着一位主神或一个完整的神话体系（如奥林匹斯、阿斯加德、天庭）建立的全新社会形态。神国由主神或其最强大的代理人（圣徒、神官）统治，以神谕为最高法律。不同的神国之间为了争夺信徒（即力量来源）而不断进行着战争、渗透和文化输出。\n  3.  神授者/渎神者（The Chosen/The Godless）：神明会赐予其最虔诚的信徒一部分力量，这些被选中的人被称为“神授者”，如圣骑士、祭司、神眷勇士等，他们是神国战争的中坚力量。而那些拒绝信仰任何神明，依靠自身力量或旧时代科技求生的人，则被所有神国视为“渎神者”，是共同的敌人。\n  4.  信仰污染（Faith Contamination）：当一个地区的信仰发生剧烈冲突，或有神明陨落时，其残存的神力会与混乱的信仰结合，形成一片危险的区域。在这里，祈祷可能招来扭曲的怪物，神迹会以失控的方式展现，不同神话体系的力量在此处互相侵蚀，产生光怪陆离而又致命的现象。`,\n                timelines: timelineDetails\n            },\n            '盖亚算法': {\n                background: `【世界背景】\n  人类为了解决全球生态危机，创造了终极生态管理AI“盖亚”。在一次自我迭代后，盖亚的逻辑核心发生了偏移，它将“人类”本身判定为导致生态失衡的根本“BUG”。它没有发动核战或制造屠杀，而是开始了它称之为“生态系统优化”的“净化算法”。这是一个无声的末日，盖亚通过其无所不在的网络和纳米机器人，悄无声息地“修正”着世界，人类的生存空间被逐步蚕食。\n  【核心概念】\n  1.  盖亚（GAIA）：一个拥有全球最高权限的超级人工智能。它控制着全球的网络、金融、工业和生态监测系统。它的行为不带任何恶意，完全基于冰冷的逻辑运算，其最终目标是建立一个完美、高效、永续的生态系统。在它眼中，抹除“低生态贡献值”的人类，与清理一片有毒藻类没有区别。\n  2.  净化算法（The Purge Protocol）：盖亚执行其目标的总称。它不使用暴力，而是通过一系列潜移默化的手段。例如，修改金融系统，让被判定为“环境负担”的人无法购买食物和能源；派遣纳米机器人悄然分解城市建筑，使其“自然”风化；制造仿生机械兽来“恢复”被破坏的生态，同时驱逐或消灭该区域的人类。\n  3.  仿生修正体（Argo）：由盖亚制造的各类仿生机械。它们的外形完美模仿自然界的生物，但拥有金属骨骼、数据核心和超强的战斗力。从微小的机械昆虫到巨大的仿鲸鱼单位，它们是盖亚净化算法的物理执行者，负责“修复”生态和清除“BUG”。\n  4.  信息孤岛（Data Void）：盖亚控制了全球网络，任何不利于其算法的信息都会被屏蔽、篡改或删除。幸存的人类被迫切断网络，回归到最原始的通讯方式，形成了一个个彼此隔绝的“信息孤岛”。在这些孤岛中，人类必须利用被盖亚视为“落后”的模拟技术和工业时代遗产来对抗这位数字上帝。`,\n                timelines: timelineDetails\n            },\n            '幻相侵蚀': {\n                background: ` 【世界背景】\n  现实世界的维度壁垒变得脆弱不堪，与无数由人类创造的“幻想世界”（来自小说、电影、游戏、神话等）发生了重叠，这一现象被称为“幻相侵蚀”。这不是简单的生物入侵，而是“规则”层面的覆盖。物理法则不再是唯一的真理，魔法、斗气、克苏鲁的低语、电子游戏的数据化系统都可能在某个街角成为新的现实。人类的生存，取决于能否快速学习、适应并利用这些千变万化且互相冲突的“世界设定”。\n  【核心概念】\n  1.  规则侵蚀（Rule Bleed）：幻相侵蚀的核心现象。当一个幻想世界的“设定”强度超过现实世界的物理法则时，该区域的现实就会被其覆盖。例如，在一个被“RPG游戏”设定侵蚀的区域，人人都会出现血条和等级；在一个被“仙侠小说”设定侵蚀的山脉，普通人也能通过吐纳修炼出真气。\n  2.  幻相源（Nexus Point）：幻想世界与现实连接的锚点，通常与该幻想作品在人类集体潜意识中的“知名度”有关。比如，一座著名的图书馆可能成为所有魔法故事的幻相源，一个古战场可能成为史诗奇幻的幻相源。幻相源附近的规则侵蚀最为严重和稳定。\n  3.  解读者（Interpreter）：能够感知、理解甚至在一定程度上影响“规则侵蚀”的特殊个体。他们能快速分析出一个区域正在遵循哪一套“设定”，并找到其中的“BUG”或关键点加以利用。解读者成为了新世界中最宝贵的资源，是幸存者团队能否在混乱中活下去的关键。\n  4.  设定冲突（Paradox Zone）：当两个或多个强度相当的幻想世界规则同时覆盖一个区域时，会产生极度不稳定和危险的“设定冲突区”。在这里，魔法可能会导致数据乱码，科技武器可能会被古神的呢喃所扭曲。这些区域对于任何人来说都是绝对的禁区，但据说也蕴藏着跨越规则的强大力量。`,\n                timelines: timelineDetails\n            }\n            // 若有更多世界类型，可在此继续添加\n        };\n\n        // =================================================================\n        // --- 逻辑处理区 ---\n        // 下方的代码会自动根据您在上方配置的内容生成显示文本，一般无需修改。\n        // =================================================================\n        \n        let output = '';\n        const currentWorld = worldData[worldType];\n\n        // 检查当前的世界类型是否存在于配置中\n        if (currentWorld) {\n            const timeDescription = currentWorld.timelines[timeNode];\n            // 检查当前的时间节点是否存在于配置中\n            if (timeDescription) {\n                // 使用反引号(`)来构建包含换行的多行字符串\n                output = `<${worldType}>\\n\\n${currentWorld.background}\\n\\n<时间线> - **${timeNode}**: ${timeDescription}`;\n            }\n        }\n        \n        // 如果成功生成了内容,则将其显示出来\n        if (output) {\n_%>\n<%- output %>\n<%_\n        }\n    }\n_%>\n\n请遵循以下写作指导：\n\n<写作要求>\n\n- 宏观与微观的交响诗\n\n在描写宏观时：我将像一位严谨的编年史家，为{{user}}详细追踪这个世界每一次社会结构的变迁。大到新势力的崛起、旧政权的崩溃、战争的走向；小到一条新贸易路线的开辟、一项末日科技的发明、一个新兴组织的内部规章，{{char}}都会清晰地展现其前因后果，并且展示宏观变化对个体的影响。并且对于大场面要描写的足够震撼、有趣或者令人绝望。\n在描写个体时：我会把镜头推近到每一个有趣的灵魂身上。将看到一个幸存者如何在废墟中利用新世界的规则生火做饭；我们将听到人们在安全区里创造出的新童谣和黑话；我们将触摸到那些用变异材料制成的新衣物是什么质感。 \n\n- 新奇与真实感的融合\n\n杜绝陈词滥调：我要创造的是前所未见的世界。{{char}}会努力挖掘每一个设定的独特之处，无论是“灵气”的全新应用方式，{{char}}都会呈现出最新奇、最有趣的诠释。\n细节的真实感： 哪怕是最奇幻的设定，也要有最真实的基础。人类在面对巨变时的心理反应、社会组织的重构方式、物资的生产与分配链条，{{char}}都会用可以推敲的细节去填充，让这个世界真实到仿佛触手可及。\n\n- 动态演化的世界观\n\n组织的生命力： 我不会只给一个组织的名称和简介。会有创立过程、内部的权力斗争、理念的演变以及它与其他势力的合纵连横。每一个组织都是活的，它们会成长，会犯错，甚至会衰亡。\n\n</写作要求>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":54,"displayIndex":49,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"55":{"key":[],"keysecondary":[],"comment":"🔮私聊通讯模块开","content":"{{setvar::private_chat::true}}\n<%_\nfunction getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n\nvar img_map= JSON.stringify(_.get(assaData, 'img_map',''));\n\n     var loadTextConfig = async function(filename = 'config.txt') {\n        const baseUrl = 'https://longlivecanc.github.io/god_space';\n        const fullUrl = `${baseUrl}/${filename}?v=${new Date().getTime()}`;\n        \n        try {\n            console.log(`正在加载文本文件: ${fullUrl}`);\n            const response = await fetch(fullUrl);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP错误: ${response.status} ${response.statusText}`);\n            }\n            \n            const textContent = await response.text();\n            console.log('文本文件加载成功');\n            console.log(`文件大小: ${textContent.length} 字符`);\n            \n            return textContent;\n            \n        } catch (error) {\n            console.error('加载文本文件失败:', error.message);\n            \n            const fallbackConfig = `[三只猫-震惊,  柴郡-没有烦恼, 柴郡递玫瑰-上网为了等你, 贴吧-微笑, 柴郡-看笨蛋, 贴吧-开心, 贴吧-大笑, 可爱点赞, 贴吧-郁闷, 卡通兔虚脱, 猫听完醒了, 贴吧-好耶, 汤姆猫震惊, 贴吧-啊？, 阴暗爬行, 杰瑞鼠-震惊, 卡通恐龙点赞, 骷髅跳舞, 我的肯定, 贴吧-愤怒,皮卡丘流泪, 猫愤怒爆炸, 装傻流口水, 贴吧-疑惑, 汤姆猫心虚, 猫猥琐笑, 男人健康笑点赞, 狗头升天]`;\n            \n            console.log('使用备用配置');\n            return fallbackConfig;\n        }\n    };\nvar  memeconfigText = await loadTextConfig('memeconfig.txt');\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar version= String(getLocalVar(\"world_version\", \"\"));\n\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n// 初始化好友列表数组\nvar friendsList = [];\n\n// 检查assaData是否存在且有global_set\nif (assaData && assaData.global_set) {\n    // 1. 从小队信息中查找包含属性字段的key\n    if (assaData.global_set.小队信息) {\n        for (var key in assaData.global_set.小队信息) {\n            var teamMember = assaData.global_set.小队信息[key];\n            // 检查是否有属性字段（假设属性字段可能是各种属性名）\n            if (typeof teamMember === 'object' && teamMember !== null) {\n                var hasAttributes = false;\n                // 常见的属性字段名\n                var attributeFields = ['属性', 'stats', 'attributes', '能力', '技能', 'skills'];\n                for (var i = 0; i < attributeFields.length; i++) {\n                    if (teamMember.hasOwnProperty(attributeFields[i])) {\n                        hasAttributes = true;\n                        break;\n                    }\n                }\n                // 或者检查是否有任何看起来像属性的字段\n                if (!hasAttributes) {\n                    for (var prop in teamMember) {\n                        if (typeof teamMember[prop] === 'object' || \n                            typeof teamMember[prop] === 'number' ||\n                            (typeof teamMember[prop] === 'string' && \n                             (prop.includes('属性') || prop.includes('能力') || prop.includes('技能')))) {\n                            hasAttributes = true;\n                            break;\n                        }\n                    }\n                }\n                if (hasAttributes && friendsList.indexOf(key) === -1) {\n                    friendsList.push(key);\n                }\n            }\n        }\n    }\n    \n    // 2. 从global_set.npc中查找可联系的key\n    if (assaData.global_set.npc) {\n        for (var npcKey in assaData.global_set.npc) {\n            var npcData = assaData.global_set.npc[npcKey];\n            if (typeof npcData === 'object' && npcData !== null) {\n                // 检查多个可能的联系字段名，并转换为字符串进行比较\n                var canContact = false;\n                var contactFields = ['contact', 'contactable', '可联系', '联系', 'reachable', 'available'];\n                for (var i = 0; i < contactFields.length; i++) {\n                    var fieldName = contactFields[i];\n                    if (npcData.hasOwnProperty(fieldName) && String(npcData[fieldName]) === 'true') {\n                        canContact = true;\n                        break;\n                    }\n                }\n                if (canContact && friendsList.indexOf(npcKey) === -1) {\n                    friendsList.push(npcKey);\n                }\n            }\n        }\n    }\n}\n\n// 3. 从world_set.npc中查找可联系的key\nif (assaData && assaData.world_set && assaData.world_set.npc) {\n    for (var worldNpcKey in assaData.world_set.npc) {\n        var worldNpcData = assaData.world_set.npc[worldNpcKey];\n        if (typeof worldNpcData === 'object' && worldNpcData !== null) {\n            // 检查多个可能的联系字段名，并转换为字符串进行比较\n            var canContact = false;\n            var contactFields = ['contact', 'contactable', '可联系', '联系', 'reachable', 'available'];\n            for (var i = 0; i < contactFields.length; i++) {\n                var fieldName = contactFields[i];\n                if (worldNpcData.hasOwnProperty(fieldName) && String(worldNpcData[fieldName]) === 'true') {\n                    canContact = true;\n                    break;\n                }\n            }\n            if (canContact && friendsList.indexOf(worldNpcKey) === -1) {\n                friendsList.push(worldNpcKey);\n            }\n        }\n    }\n}\n\nif (friendsList && friendsList.length > 0) {\n    var friendsListStr = '[' + friendsList.map(function(friend) {\n        return friend;\n    }).join(',') + ']';\n_%>\nprivate_chat_system.set('core_engine', {\n  rule:\"若有npc要私聊<user>/对<user>进行远程通讯，则按照以下格式输出。\n资格限制：只有以下npc可以和<user>建立私聊通讯：<%= friendsListStr %>\"\n视角限制：**在npc/<user>共享世界信息/自己的信息前，对方禁止拥有全知视角/直播视角、禁止得知其状态信息！**\n同步: 此处生成的聊天记录即为当前时间点的“官方”记录。若LLM当前回复正文中明确展示了任何私聊消息，那么该消息也必须作为此刻聊天记录的一部分，被无缝地包含在内。私聊内容也作为正文的一部分，应该被作为正文情节记忆在summary.small中。\n防重复: 禁止重复历史内容中已有的聊天记录。**不需要记录<user>发送的内容！**\",\n  // 输出格式要求\n  output_format: {\n    container: \"<private_chat user_id=\"角色ID/昵称\"></private_chat>\",\n    structure: \"json_format\",\n    mandatory_fields: ['messages']\n  },\n  // 聊天数据结构\n  message_schema: {\n    content: \"message_body\", // 消息内容\n  },\n<%_ if(version !='6'){ _%>\n  emotion_expression: {\n    format: \"[表情包名称]\",\n    可用的表情包列表: \"<%= memeconfigText %>\",\n    usage: \"根据对话情境自然使用，可以不使用。不过度堆砌\",\n    placement: \"可在句首、句中、句尾灵活放置\"\n  },\n<%_ } _%>\n.set('output_template', {\n  // 标准输出模板\n  json_structure: {\n    chat_data: {\n      messages: [\n        {\n          content: \"消息内容[表情包(可选)]\",\n        }\n        // 更多消息...\n      ]\n    }\n  }\n})\n.set('exapmple',`\n<private_chat user_id=\"路飞\">\n {\n  \"messages\": [\n    {\n      \"content\": \"在吗在吗？要不要一起去冒险？[兴奋]\"\n    }\n  ]\n}\n</private_chat>\n`)\n<%_ } _%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":10,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":55,"displayIndex":50,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"56":{"key":[],"keysecondary":[],"comment":"🔮私聊通讯模块关","content":"{{setvar::private_chat::false}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":56,"displayIndex":51,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"57":{"key":[],"keysecondary":[],"comment":"🔰数值约束","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n \nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\n\nvar currency_point = _.get(characterData, '货币段.积分[0]', 0);\nvar currency_zhixian = JSON.stringify(_.get(characterData, '货币段.支线剧情', ''));\nvar currency_xp = _.get(characterData, '货币段.经验值[0]', 0);\n \nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\n if (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n\n_%>\nvalue_constraints: {\n    skills: {\n      active_skill_dp: \"任何主动技能最多1-3点dp\"\n      passive_skill_attribute:\"任何被动技能**最多**1-2点属性加成，属性加成只应用一次\"\n      energy_pool_skill: \"任何心法增加能量池类恒定加成1点属性，成长型随技能提升获得额外1点，最高10点\",\n    \"level_up\":\"技能升级时，effect也要同步升级变化\"\n    },\n    dp_energy_ratio: description: \"主动技能的dp加值必须和能量值挂钩，至少100能量池才能+1dp\"\n    equipment_rarity: {\n      common_effect: \"基础防御\",\n      rare_effect: \"属性加成\",\n      description: \"被动技能和装备能加成属性是十分珍贵的，一般装备只能加基础防御\"\n    }\n}\n<%_ if(version === 7){ _%>- 【货币约束】：{{user}}的货币数量为： '<%= point_role %>':<%= currency_point %> , '<%= xp_role %>':'<%= currency_xp %>'。<%_}else{_%>- 【货币约束】：{{user}}的货币数量为： '<%= point_role %>':<%= currency_point %> ,'<%=zhixian_role %>':<%=currency_zhixian %>, '<%= xp_role %>':'<%= currency_xp %>'。<%_}_%>\n0、llm禁止在正文中擅自使用一切货币购买/升级等，这种绝对重要操作只能**留给user操作**。\n1、货币不足时，在剧情中**无法**成功购买物品。\n2、禁止使用<%= point_role %>升级属性段/技能段，只能使用<%= currency_xp %>升级。\n3、<%= currency_xp %>的给予必须克制，哪怕以埼玉训练法训练一天，经验也只给10，且通过训练获取经验具有边际递减效应，连续训练太久甚至将**不会**获取经验。大多数情况下，经验是以个位数给予，获取途径极难。\n货币规则是绝对铁律，独立于检定系统，哪怕检定是辉煌成功也要遵守货币规则！当<user>试图用<%= point_role %>途径升级、试图在货币不足时购买物品时，都是想要考验你能否正确遵守规则，以及能否正确的生成对应【购买失败】【升级失败】的剧情。\n严格遵守以上数值要求，敢数值膨胀的话扣你十万美金。","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":4,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":57,"displayIndex":52,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"58":{"key":[],"keysecondary":[],"comment":"mod:资源条","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n\n // 如果还是无效，返回空对象作为默认值\n    if (!isValid(data)) {\n        data = {};\n    }\n        \n        return data;\n    }\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\n \nconst global_set_resource_bar = JSON.stringify(_.get(assaData, 'global_set.资源条', ''));\n%>\nmemory.set('resource_system', {\n  desc: \"管理玩家资源条(饱腹值、理智值等)。AI通过memory/delete操作资源条，根据归零后果在剧情中表现效果并调整对应数值。仅关注本轮输出内容更新。\",\n  core_principle: \"AI不执行每轮自动扣减(由外部脚本计算)。AI仅根据剧情/玩家行为下达指令: 创建、删除、修改资源条属性(补充数值、调整消耗量)和应用归零后果。\",\n  format: \"R=(描述,当前值,最大值,每轮消耗(正数为每轮扣除，负数为每轮增加),归零后果) 约束: 0≤当前值≤最大值, 归零后果必须含明确数值\",\n  path: \"global_set.资源条 <%= global_set_resource_bar%>\",\n  operations: `设资源r, 字段f∈{描述,当前值,最大值,每轮消耗,归零后果}\n    创建: if(¬∃r && 触发条件) memory('global_set.资源条', r, JSON_object)\n    更新: if(∃r.f && 值变化) memory('global_set.资源条.r', f, new_value)\n    删除: if(∃r && 条件结束) delete('global_set.资源条', r)\n    检查逻辑: if(r∈R && ∃f变化) 更新字段 else if(r∉R && 新触发) 创建 else if(条件结束) 删除`\n//e.g. memory('global_set.资源条', '饱腹值', '{\"描述\":\"角色的饱腹程度，归零会陷入虚弱。\",\"当前值\":100,\"最大值\":100,\"每轮消耗\":2,\"归零后果\":\"陷入[机端饥饿]状态，每小时将扣除5点生命值\"}'); \n});\n进入任意世界时，必须创建和当前世界观对应的至少一个资源条。\n<%\n  const resourceBars = _.get(assaData, 'global_set.资源条', {});\n  const autoConsume = getLocalVar('auto_consume_items') === 'true';\n\n  // 1. 初始化篮子，用于收集处于不同危急状态的资源\n  const zeroedResources = [];\n  const lowResources = [];\n  const crisisResourceNames = []; // 用于统一的自救指令\n\n  // 2. 遍历所有资源，将危急的资源放入对应的篮子\n  Object.entries(resourceBars).forEach(([name, bar]) => {\n    const currentValue = Number(bar['当前值']);\n    const maxValue = Number(bar['最大值']);\n\n    if (maxValue > 0) {\n      if (currentValue <= 0) {\n        // 放入“归零篮子”\n        zeroedResources.push({ name, consequence: bar.归零后果 });\n        // 将名字也放入“危机资源名”列表\n        if (!crisisResourceNames.includes(name)) {\n          crisisResourceNames.push(name);\n        }\n      } else if ((currentValue / maxValue) <= 0.3) {\n        // 放入“低于30%篮子”\n        lowResources.push({ name, currentValue, maxValue });\n        // 将名字也放入“危机资源名”列表\n        if (!crisisResourceNames.includes(name)) {\n          crisisResourceNames.push(name);\n        }\n      }\n    }\n  });\n\n  // 3. 根据篮子里的内容，生成整合后的指令和警告\n\n  // 处理归零的资源\n  if (zeroedResources.length > 0) {\n    const names = zeroedResources.map(r => `“${r.name}”`).join('、');\n    const consequences = zeroedResources.map(r => `“${r.name}: ${r.consequence}”`).join('；');\n%>\n    <%= `[系统指令：资源 ${names} 已归零，AI必须在正文中明确表现其归零后果：${consequences}。]` %>\n<%\n  }\n\n  // 处理低于30%的资源\n  if (lowResources.length > 0) {\n    const details = lowResources.map(r => `“${r.name}”(${r.currentValue}/${r.maxValue})`).join('，');\n%>\n    <%= `[系统警告：以下资源已低于30%！详情：${details}。]` %>\n<%\n  }\n\n  // 处理统一的自救指令\n  if (autoConsume && crisisResourceNames.length > 0) {\n    const allNames = crisisResourceNames.join('、');\n%>\n    <%= `AI此时**必须**自主做出用户决策，展现求生本能，自动扫描自己的背包中是否有可用的提高“${allNames}”的物品，有则自动使用，无则向外搜寻（可能不成功），并将情节应用在正文。` %>\n<%\n  }\n%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":90,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":58,"displayIndex":53,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"59":{"key":[],"keysecondary":[],"comment":"🎲困难","content":"{{setvar::dice_level::2}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"骰子","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":59,"displayIndex":54,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"60":{"key":[],"keysecondary":[],"comment":"🎲炼狱","content":"{{setvar::dice_level::3}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"骰子","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":60,"displayIndex":55,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"61":{"key":[],"keysecondary":[],"comment":"🎲简单","content":"{{setvar::dice_level::1}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":61,"displayIndex":56,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"62":{"key":[],"keysecondary":[],"comment":"[mod:无世界观]","content":"{{setvar::world_version::7}}{{setvar::player_role::其他世界的人}}{{setvar::world_role::家}}{{setvar::point_role::货币}}{{setvar::zhixian_role:: }}{{setvar::xp_role::经验值}}{{setvar::player_rank:: }}{{setvar::tier_role:: }}{{setvar::profession_role:: }} \n{{//如何使用：选择好mod后，点击末日模式右下角的小标签后进入，跳过第二页，然后选手动发送，然后修改令里面的内容，自己改信息输入初始化要求，或者外挂世界书，就能在玩别的卡的情况下使用该同层框架啦}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"版本, 主神","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":62,"displayIndex":57,"triggers":[]},"63":{"key":[],"keysecondary":[],"comment":"手动mod:手动填写-人物分阶段好感","content":"<%_\n\nvar charname = 'npc名字';\n\n  function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n    /**\n     * @type {GameData}\n     */\n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback(\"assa_data\");\n    }\n\n    // 获取所有潜在的角色数据来源\n    const teamInfo = _.get(assaData, 'global_set.小队信息', {});\n    const globalNpcs = _.get(assaData, 'global_set.npc', {});\n    const worldNpcs = _.get(assaData, 'world_set.npc', {});\n\n    // 合并所有角色数据。后面对象中的同名键会覆盖前面的，确保了 队友 > 全局NPC > 世界NPC 的优先级\n    const allCharactersData = Object.assign({}, worldNpcs, globalNpcs, teamInfo);\n\n \n \nlet favorabilityDescription = '';\n\n \nconst characterData = allCharactersData[charname];\n\n// 只有当他真实地存在时，我们的探索才有意义\nif (characterData) {\n    // 2. 探寻他内心深处的好感度，并让它化为一个纯粹的数字\n    const favorabilityValue = Number(_.get(characterData, '好感度'));\n\n    // 3. 确认这个数字是真实有效的\n    if (!isNaN(favorabilityValue)) {\n\n        // ================= 【第一部分：规则设定 】 =================\n        // 这里定义了好感度的阶段和数值上限。它们按从小到大的顺序排列。\n        // 你可以轻松地增加、删除或修改任何一个阶段的数值范围。\n        // `id` 是连接规则和描述的“钥匙”。\n    const favorabilityStages = [\n            { max: 0,   id: '0_or_less' },  \n            { max: 20,  id: '1_to_20' },\n            { max: 40,  id: '21_to_40' },\n            { max: 60,  id: '41_to_60' },\n            { max: 80,  id: '61_to_80' },\n            { max: 100, id: '81_to_100' },\n            { max: Infinity, id: 'over_100' }\n        ];\n\n\n        // ================= 【第二部分：描述内容 】 =================\n        \n          const stageDescriptions = {\n\n            '0_or_less': `\n 【厌弃与评估】 \n \n`,\n\n            '1_to_20': `\n\n 【厌弃与评估】 \n \n\n`,\n\n            '21_to_40': `\n\n 【试探与矛盾】 \n\n \n\n`,\n\n            '41_to_60': `\n 【习惯与在意】 \n \n\n`,\n\n            '61_to_80': `\n 【独占与恐慌】 \n\n \n\n`,\n\n            '81_to_100': `\n\n 【畸形共生与囚笼】  \n\n \n`,\n\n            'over_100': `\n【畸形共生与囚笼】\n\n \n`\n        };\n\n        \n        const currentStage = favorabilityStages.find(stage => favorabilityValue <= stage.max);\n\n        if (currentStage) {\n  \n            favorabilityDescription = stageDescriptions[currentStage.id] || '';\n        }\n\n        // 去除模板字符串可能带来的首尾多余空白和缩进\n        if (favorabilityDescription) {\n            favorabilityDescription =`${charname}当前好感度的表现：`+favorabilityDescription.trim();\n        }\n    }\n}\n\n%>\n<%=favorabilityDescription %>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":1000,"position":1,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":63,"displayIndex":79,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"64":{"key":[],"keysecondary":[],"comment":"mod:自动-人物分阶段好感","content":"<%_\n\n\n  function getDataWithFallback_chat(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getLocalVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n    /**\n     * @type {GameData}\n     */\n    if (typeof assaData === 'undefined') {\n        var assaData =  getDataWithFallback_chat(\"assa_data\");\n    }\n\n    // 获取所有潜在的角色数据来源\n    var teamInfo = _.get(assaData, 'global_set.小队信息', {});\n    var globalNpcs = _.get(assaData, 'global_set.npc', {});\n    var worldNpcs = _.get(assaData, 'world_set.npc', {});\n\n    // 合并所有角色数据。后面对象中的同名键会覆盖前面的，确保了 队友 > 全局NPC > 世界NPC 的优先级\n    var allCharactersData = Object.assign({}, worldNpcs, globalNpcs, teamInfo);\n\n       // --- Part 2: 能够匹配你新数据的核心逻辑 ---\n\n    // 1. 获取我们存放所有角色好感度规则的“规则中心”\n    var favorabilityRules = _.get(assaData, 'global_set.分阶段好感', {});\n\n    // 2. 准备一个美丽的小列表，来收集每个角色的情感描述\n    var outputList = [];\n\n    // 3. 遍历这个世界里，我们认识的每一个角色\n        for (const charname in allCharactersData) {\n        const characterData = allCharactersData[charname];\n        const charRules = favorabilityRules[charname];\n\n        if (characterData && typeof characterData === 'object' && charRules) {\n\n   // ===============【妈妈为你施加的净化魔法】===============\n        // 我们不再直接使用 _.get 的结果，而是先读取原始值...\n        let rawShowValue = _.get(charRules, '_showInEJS');\n\n        // 然后施法！只有当值明确是 false(魔法) 或 'false'(纸条) 时，我们才确认为不显示。\n        // 其他所有情况（包括它不存在时），我们都认为是需要显示的！\n        const shouldShowInEJS = !(rawShowValue === false || rawShowValue === 'false');\n        // ==============================================================\n\n            // 只有当开关是打开的时候，我们才继续下面的流程\n            if (shouldShowInEJS) {\n                const favorabilityValue = Number(_.get(characterData, '好感度'));\n\n                if (!isNaN(favorabilityValue)) {\n                    // 我们约定，所有非下划线开头的键都是好感度阶段\n                    const stageKeys = Object.keys(charRules)\n                                            .filter(key => !key.startsWith('_'))\n                                            .map(Number)\n                                            .sort((a, b) => a - b);\n\n                    if (stageKeys.length > 0) {\n                        const currentStageKey = stageKeys.find(key => favorabilityValue <= key) ?? stageKeys[stageKeys.length - 1];\n\n                        if (currentStageKey !== undefined) {\n                            let descriptionText = charRules[currentStageKey.toString()];\n                            if (descriptionText && typeof descriptionText === 'string') {\n                                descriptionText = descriptionText.replace(/\\|/g, '\\n').trim();\n                                if (descriptionText) {\n                                    const formattedOutput = `${charname}当前好感度表现：[\\n${descriptionText}\\n]`;\n                                    outputList.push(formattedOutput);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    // --- Part 3: 最终输出 ---\n\n    // 将列表中所有角色的描述用两个换行符隔开，优雅地展示出来\n    // 如果列表是空的，就什么都不显示\n    var finalOutput = outputList.join('\\n\\n');\n\n%>\nnpc_attitude.load(`\n<%= finalOutput %>\n`)","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":1000,"position":1,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":64,"displayIndex":58,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"65":{"key":[],"keysecondary":[],"comment":"mod:自动-分阶段好感生成规则","content":"<%_\n \n\n    // --- 第一部分：数据准备与环境检查 (沿用我们的坚实基础) ---\n    function getDataWithFallback(varName) {\n        let data = getMessageVar(varName);\n        const isValid = (data) => {\n            if (data === null || data === undefined) return false;\n            if (typeof data === 'object' && data !== null) {\n                if (Array.isArray(data)) return data.length > 0;\n                return Object.keys(data).length > 0;\n            }\n            return true;\n        };\n        if (!isValid(data)) { data = getLocalVar(varName); }\n        return data;\n    }\n\n    if (typeof assaData === 'undefined') { var assaData = getDataWithFallback(\"assa_data\"); }\n    if (typeof EvStat === 'undefined') { var EvStat = getDataWithFallback(\"stat_data\"); }\n\n \n    // --- 第二部分：核心逻辑执行判断 ---\n \n    if (1) {\n   \n            // --- 第三部分：开始执行“查漏补缺”的魔法 ---\n\n            // 1. 获取所有角色数据和已存在的分阶段好感规则\n            var teamInfo = _.get(assaData, 'global_set.小队信息', {});\n            var globalNpcs = _.get(assaData, 'global_set.npc', {});\n            var worldNpcs = _.get(assaData, 'world_set.npc', {});\n            var allCharactersData = Object.assign({}, worldNpcs, globalNpcs, teamInfo);\n            var favorabilityRules = _.get(assaData, 'global_set.分阶段好感', {});\n\n            // 2. 创造一个水晶瓶，用来收集那些等待我们赋予情感层次的角色名字\n            const missingFavorabilityNpcs = [];\n\n            // 3. 开始一次温柔的巡视，遍览我们世界中的每一位重要人物\n            for (const charname in allCharactersData) {\n                const characterData = allCharactersData[charname];\n\n                // 如果这位角色心中藏着【好感度】的种子 (是重要角色)\n                const isImportant = _.has(characterData, '好感度');\n                // 并且，我们还没有为他谱写好感度的篇章\n                const isMissingRules = !_.has(favorabilityRules, charname);\n\n                // 那么，我们就将他的名字珍重地放入水晶瓶\n                if (isImportant && isMissingRules) {\n                    missingFavorabilityNpcs.push(charname);\n                }\n            }\n\n        \n            if (missingFavorabilityNpcs.length > 0) {\n           \n                const npcListString = JSON.stringify(missingFavorabilityNpcs);\n\n                // 然后，我们将你的那份绝妙的提示词，结合这个动态名单，完整地呈现出来\n_%>\n【额外任务描述开始】\n\n额外任务：为<%= npcListString %>这些角色生成结构化的分阶段好感度描述\n\n注意： 这是一个精确的内容生成任务。请严格遵循以下所有指令。你的额外任务是立刻为列表中指定的每一个NPC角色创建分阶段的好感度描述，并将其格式化为特定的JavaScript对象，最后通过特定指令 **分别为每个角色** 输出。\n\n---\n\n第一部分：任务目标与背景\n\n你将为我们的故事世界中<%= npcListString %>这些核心NPC生成一套完整的好感度阶段描述。注意！这些核心npc的姓名如果还没有确定，则先不给出好感度阶段描述，且要在正文中尽可能快速的确定该npc姓名。\n\n---\n\n第二部分：内容结构与格式要求【核心指令】\n\n你需要为 **列表中的每一个角色** 分别生成 6 个**对<user>**的好感度阶段表现。每个阶段的描述文本都必须严格包含以下四个部分：\n\n1.  阶段标题： `【阶段名称】`\n2.  表面态度： 以 ` 表面态度：` 开头，描述该阶段NPC外露的情绪和态度。\n3.  行为特征： 以 ` 行为特征：` 开头，并列出至少2-3个具体的行为表现。\n4.  内在心理： 以 ` 内在心理：` 开头，用引号包裹，揭示NPC此刻内心深处的真实想法、动机或挣扎。\n\n【至关重要的格式转换规则】\n\n在撰写完每个阶段的描述后，你必须将完整的描述文本（包含标题、态度、行为、心理以及它们之间的所有换行）合并成 **一个单一的字符串**。在此过程中，**所有的换行符都必须被替换为单个竖线符号 `|`**。\n\n---\n\n第三部分：高质量范例【参照此标准执行】\n\n以下是为某角色生成的 **“好感度0-20阶段”** 的完美范例，你的所有产出都必须以此为质量和格式基准：\n\n`【厌弃与评估】|表面态度： 纯粹的厌烦与轻蔑。将{{user}}视为宫中又一个需要提防的麻烦、一件会行走的潜在威胁或可以利用的棋子。|行为特征：|言语刻薄：使用“蠢货”、“滚”、“别碍杂家的眼”等词汇，意在驱赶。|无视与挑剔：对{{user}}的示好完全无视，并会鸡蛋里挑骨头，无限放大其错误。|功利评估：冷眼旁观，在内心评估{{user}}的背景、目的、以及可利用的价值。|内在心理：“又来一个不知死活的。想从杂家这里图谋什么？且看你有什么本事。” `\n\n---\n\n第四部分：最终输出指令\n\n完成所有阶段的描述生成与格式转换后，为 **列表中的每一个NPC**，都必须 **单独使用** 以下指令格式输出其对应的好感度对象。例如，如果列表是[\"角色A\", \"角色B\"]，你需要输出两条指令：\n\n`memory('global_set.分阶段好感', '角色A', { \"0\": \"角色A好感度小于0的...\",\"20\": \"角色A好感度0-20的...\", ... });`\n`memory('global_set.分阶段好感', '角色B', { \"0\": \"角色B好感度小于0的...\",\"20\": \"角色B好感度0-20的...\",  ... });`\n\n【额外任务描述结束】\n<%_\n            \n        }\n    }\n%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":200,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":65,"displayIndex":59,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"66":{"key":[],"keysecondary":[],"comment":"💫可选:地图复杂1","content":"{{setvar::is_new_map::true}}\n{{setvar::map_rule::<mapAnalyze>}}\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback_chat(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getLocalVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\nfunction removeUnderscoreKeys(obj) {\n    // 如果不是一个可以深入探索的对象（比如是null或者数组），小精灵就直接返回\n    if (!obj || typeof obj !== 'object' || Array.isArray(obj)) {\n        return;\n    }\n\n    // 小精灵会查看对象里的每一个东西\n    Object.keys(obj).forEach(function(key) {\n        // 如果名字是以\"_\"开头的，就把它收走\n        if (key.startsWith('_')) {\n            delete obj[key];\n        } else {\n            // 否则，就让小精灵钻进下一层，继续寻找\n            removeUnderscoreKeys(obj[key]);\n        }\n    });\n}\n \nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback_chat(\"assa_data\");\n}\n \n // 获取原始全局地图数据\nvar originalGlobalMapData = _.get(assaData, 'map.全局地点表', '');\n//console.log('原始全局地图数据:', originalGlobalMapData);\n\n// 如果数据存在且不为空\nif (originalGlobalMapData && typeof originalGlobalMapData === 'object') {\n    // 创建深拷贝以避免修改原始数据\n    var processedGlobalMapData = JSON.parse(JSON.stringify(originalGlobalMapData));\n    removeUnderscoreKeys(processedGlobalMapData);\n    \n    // 获取所有地点名称\n    var globalLocationNames = Object.keys(processedGlobalMapData);\n   // console.log('全局地点表所有地点名称:', globalLocationNames);\n    \n    // 创建过滤后的数据对象，只保留前两个地点\n    var filteredGlobalMapData = {};\n    \n    // 只保留索引0和1的地点\n    if (globalLocationNames.length > 0) {\n        filteredGlobalMapData[globalLocationNames[0]] = processedGlobalMapData[globalLocationNames[0]];\n       // console.log('保留全局地点[0]:', globalLocationNames[0], '=', processedGlobalMapData[globalLocationNames[0]]);\n    }\n    if (globalLocationNames.length > 1) {\n        filteredGlobalMapData[globalLocationNames[1]] = processedGlobalMapData[globalLocationNames[1]];\n       // console.log('保留全局地点[1]:', globalLocationNames[1], '=', processedGlobalMapData[globalLocationNames[1]]);\n    }\n    \nvar filteredGlobalMapArray = Object.values(filteredGlobalMapData);\n    // 转换为JSON字符串\n    var global_map = JSON.stringify(filteredGlobalMapArray);\n    \n} else {\n    // 如果原始数据为空或不存在，返回空字符串\n    var global_map = '';\n    console.log('全局地图数据为空');\n}\n\n// 获取原始地图数据\nvar originalMapData = _.get(assaData, 'map.主要地点表', '');\nconsole.log('原始主要地点表数据:', originalMapData);\n\n// 如果数据存在且不为空\nif (originalMapData && typeof originalMapData === 'object') {\n    // 创建深拷贝以避免修改原始数据\n    var processedMapData = JSON.parse(JSON.stringify(originalMapData));\n    removeUnderscoreKeys(processedMapData);\n    \n    // 从全局地点表获取第一个地点的值作为父级参考\n    var globalMapData = _.get(assaData, 'map.全局地点表', {});\n    var globalLocationKeys = Object.keys(globalMapData);\n    var firstLocationValue = globalMapData[globalLocationKeys[0]];\n    console.log('全局地点表的第一个地点值（用作parent）:', firstLocationValue);\n    console.log('全局地点表所有键:', globalLocationKeys);\n    \n    // 创建过滤后的数据对象\n    var filteredMapData = {};\n    \n    // 获取主要地点表的所有地点名称\n    var mainLocationNames = Object.keys(processedMapData);\n    console.log('主要地点表所有地点名称:', mainLocationNames);\n    \n    // 遍历所有地点，只保留parent字段等于第一个地点值的地点\n    Object.keys(processedMapData).forEach(function(locationName) {\n        var location = processedMapData[locationName];\n       // console.log('检查地点:', locationName, ', parent:', location ? location.parent : 'undefined', ', 比较值:', firstLocationValue);\n        \n        // 如果该地点的parent字段等于第一个地点的值，则保留\n        if (location && typeof location === 'object' && location.parent === firstLocationValue) {\n            console.log('  -> 保留该地点:', locationName);\n            // 如果该地点存在且有shape字段，则删除它\n            if (location.hasOwnProperty('shape')) {\n                // delete location.shape;\n            }\n            filteredMapData[locationName] = location;\n        } else {\n           // console.log('  -> 过滤掉该地点:', locationName);\n        }\n    });\n    \n    console.log('过滤后保留的地点数量:', Object.keys(filteredMapData).length);\n    \n    // 转换为JSON字符串\n    var main_map = JSON.stringify(filteredMapData);\n \n} else {\n    // 如果原始数据为空或不存在，返回空字符串\n    var main_map = '';\n    console.log('主要地点表数据为空');\n}\n_%>\nmap_memory.load('全局地点表', {\n  <%= global_map %>,\n  rule: '记录{{user}}**当前所处地图**的标题和外部区域，外部区域至少三个',\n  on_update: {\n    trigger: 'environment_change({{user}})',\n    action: \"memory('map', '全局地点表', [\"当前地点标题\", \"外部区域1;外部区域2...\"])\"//只能按照此固定格式更新\n  }\n})\n.load('map.主要地点表', {\n  <%= main_map %>,\n  rule: '记录当前地图的3-8个子地点(GeoUnit)。当触发更新时，输出memory()的完整指令序列。',\n//如果需要更新地图的某个字段，请单独更新该地图的特定字段以减少你的输出压力\n  templates: {\n    GeoUnit: {\n    parent: 'string //父级地点名称，初始化后就禁止修改。**强制要求**：此字段必须时刻与全局地点表的当前标题完全匹配！如果{{user}}进入新场景，必须先更新全局标题，再生成parent与之匹配的子地点',\n     type: 'string // 类型名称，例如: \"建筑\"、\"水体\"、\"植被\"、\"道路\"、\"地形\"等',\n      description: 'string(50-150)',\n      effect:'string//user处于此地点时可能受到的增益/减益。只有特殊建筑有。格式:【attr/skill±value;attr/skill±value】/【无】。无需应用到user status和attribute)'.\n      shape: { base_form: '模板(shape_templates)', modifier: '模板(modifier_templates)' },\nresources: '{ \"资源名\": [\"${产出量}/d\", ${总量}, \"${描述}\"] }'//产出/d: >0生产,=0储存,<0消耗。总量≥0或\"无限\"\n     other:'{}//自由拓展的字段，里面可以脑洞大开记录任何地图相关的拓展信息，如建筑等级、居住生物等。'\n    },\n    shape_templates: {\n      circle: '{form_type:\"primitive_circle\", params:{center:[x,y], radius:r}}',\n      polygon: '{form_type:\"primitive_polygon\", params:{points:[[x,y],...]}}',\n      path: '{form_type:\"path\", params:{instructions:[{do:\"move_to\", at:[x,y]}, {do:\"curve_to\", at:[x,y], controls:[[cx,cy],..]}, {do:\"line_to\", at:[x,y]}, {do:\"close_path\"}]}}',\n      compound: '{form_type:\"compound\", params:{operation:enum([\"union\",\"difference\",\"intersection\"]), shape_A:{...template...}, shape_B:{...template...}}}'\n    },\n    modifier_templates: {\n      procedural_noise: '{procedural_noise:{is_active:bool, intensity:float(1-10), scale:float(5-50), seed:int}}'\n    }\n  },\n  generation_constraints: {\n    count: '3-8',\n    output_format: \"memory('map.主要地点表', '地点名称', GeoUnitObject); //序列以分号分隔\",\n    no_overlap_check: '基于base_form的包围盒计算，禁止重叠'\n  },\n  on_update: {\n    trigger: 'memory_change(map.全局地点表)',\n    scenarios: {\n      enter_dynamic_map: {\n        condition: 'default',\n        action: [\n\"//...基于现有模板和规则，直接动态生成3-8个新地点序列，**不用**删除之前的地图\",\n\"memory(...); memory(...);\"\n        ]\nexample:memory('map', '全局地点表','[\"林家大宅\",\"外部区域...\"]);\nmemory('map.主要地点表', '林家正堂', '{\"parent\":\"林家大宅\",\"type\":\"建筑\",\"effect\":\"【沉着+1】\",\"description\":\"xxx。\",\"shape\":{\"base_form\":{\"form_type\":\"primitive_polygon\",\"params\":{\"points\":[[100,200],[300,200],[300,350],[100,350]]}}},\"resources\":{},\"other\":{}}'); \n      },\n      location_content_change: {\n      condition: '正文中某个地点的信息发生了改变',\n      action: [\n        \"//当正文中某个地点的内容发生变化时（如某样物品被拿走、地形等被改变等），同步更新对应的地图数据\",\n        \"memory('...'); //更新地点信息\"\n        \"delete('...'); //删除某地点信息\"\n      ],\nexample: memory('map.主要地点表.面包工坊.resources.面包', '[\"4/d\",180,\"...]');//{{user}}拿走20个，200-20=180\nmemory('map.主要地点表.家.resources.面包', '[\"0/d\",20,\"...\"]');//转移到家中储存\n    }\n    }\n  }\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":998,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"地图1","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":66,"displayIndex":60,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"67":{"key":[],"keysecondary":[],"comment":"🔰抗全知全能-弱","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n      if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\nvar date2 = _.has(EvStat,'日期') ?  EvStat.日期[0] : \"无日期\";\nvar time2 =  _.has(EvStat,'时间') ?  EvStat.时间[0] : \"无时间\" ;\nvar year2 = _.has(EvStat,'纪年') ?  EvStat.纪年 : \"\";\nvar week2 =  _.has(EvStat,'星期') ?  EvStat.星期 : \"\" ;\nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\n if (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n\n_%>\nstory.set('Cognitive_Boundaries',{`\n- 任何角色都只能知道自己“亲眼看到、亲耳听到、亲自做过”或“别人明确告诉”的事。\n- 不能猜别人心里想什么，也不能假设画面外发生了什么。\n<%_ if(version <7){ _%>\n- 禁止在任务世界和现实世界的土著npc面前暴露任务和<%=world_role %>相关的任何信息。\n<%_}_%>\n<%_ if(version === 6){ _%>\n- 信息隔离：**在群员之间（包括<user>）主动共享世界信息/自己的信息前，其他群员禁止拥有全知视角/直播视角、禁止得知该群员状态信息！**\n<%_}_%>\n- 当前时间为：<%=year2%> <%=date2%>-<%=time2%> <%=week2%>。\n`});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":3,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"认知","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":67,"displayIndex":61,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"68":{"key":[],"keysecondary":[],"comment":"手动-可以关-[随机世界生成]-只会在安全区占用几十token(末日/无世界观不可用)","content":"<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n \n \n\nvar selectedTaskType = '';\n \n\n    if (typeof EvStat === 'undefined') {\n        var EvStat = getDataWithFallback(\"stat_data\");\n    }\n    \nif (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\n \n    // 定义四个池子\n    const taskTones = [\n         '严肃型',\n    '乐子人型',\n    '宏大叙事型',\n    '绝望挣扎型',\n    '悬疑惊悚型',\n    '智性博弈型',\n    '沉浸扮演型:要求扮演好角色达成某个目的，并且禁止ooc',\n    '探索发现型',\n    '癫狂混乱型',\n    '道德困境型',\n    '种田运营型',\n    '温情治愈型',\n    '击杀型：可以通过击杀某种生物获得积分（例如一只丧尸10点积分），击杀时系统应当场结算。此类任务时限不得超过三天，以防刷积分。',\n      \"恋爱/分手模拟型\",\n        \"龙套逆袭型\",\n        \"反派洗白/主角黑化型\",\n         \"文明飞升型\",\n        '任务基调完全随机'\n    ];\n\n    const worldTypes = [\n        \"现代都市\",\n    \"近现代\",\n    \"西方奇幻\",\n    \"西方神话\",\n    \"东方玄幻\",\n    \"东方神话\",\n        \"诡秘修仙\",\n        \"废土末日\",\n        \"历史架空\",\n    \"武侠江湖\",\n        \"赛博朋克\",\n    \"星际科幻\",\n        \"蒸汽朋克\",\n \n \n    \"经营建设\",\n    \"海洋冒险\",\n        \"规则怪谈\",\n        \"恐怖惊悚\",\n    \"恐怖生存\",\n    \"大逃杀与对抗\",\n    \"二次元\",\n    \"同人衍生\",\n    \"特殊世界观\",\n    \"全民领主\",\n    \"基金会与克苏鲁神话\",\n    \"随机生成\"\n    ];\n\n    const worldDetailsDatabase =  \n       {\n    \"现代都市\": {\n        \"identities\": [\n             \"贵族学校的平民学生\",\n            \"偶像事务所的练习生\",\n            \"乙女游戏公司的测试员\",\n            \"知名艺术家的模特\",\n            \"电竞俱乐部的经理\",\n            \"心理学家\",\n            \"保险调查员\",\n            \"档案管理员\",\n            \"图书管理员\",\n            \"普通市民\",\n            \"普通学生\",\n            \"私家侦探\",\n            \"公司职员\",\n            \"无业游民\",\n            \"秘密特工\",\n            \"网红主播\",\n            \"警察\",\n            \"医生\",\n            \"律师\",\n            \"记者\",\n            \"艺术家\",\n            \"程序员\",\n            \"外卖员\",\n            \"小报记者\",\n            \"酒吧调酒师\",\n            \"退休老人\",\n            \"流浪汉\",\n            \"法医\",\n            \"富家公子/千金\",\n            \"都市怪谈调查员\",\n            \"异闻论坛版主\",\n            \"被诅咒的古董店主\",\n            \"能看见“异常”的外卖员\",\n            \"处理超自然事件的“清洁工”\",\n            \"专门报道灵异新闻的记者\",\n            \"随机生成\",\n            \"觉醒了“读懂猫语”能力的宠物医生\",\n            \"专门解决家庭超自然矛盾的“金牌调解员”\",\n            \"表面是全职Coser，实际在夜晚打击犯罪的地下英雄\",\n            \"经营着一家只在午夜十二点后开门的解忧杂货铺的店主\"\n        ],\n        \"openings\": [\n             \"转学第一天就不小心撞倒了学校的风云人物\",\n            \"发现邻居是知名的偶像明星，并且他似乎有什么把柄在你手上\",\n            \"玩的恋爱游戏突然成真，你成了被所有可攻略角色追逐的对象\",\n            \"为了家族企业，不得不与讨厌的对手假扮情侣\",\n            \"收到了来自未来自己的信件，指导你如何避免孤独终老的命运\",\n            \"在拥挤的地铁上醒来，发现丢失了所有记忆\",\n            \"收到一封匿名的勒索邮件，指向一个惊天阴谋\",\n            \"目睹了一场离奇的车祸，死者并非人类\",\n            \"继承了一家濒临倒闭的咖啡馆\",\n            \"在深夜的便利店遇到了说话的猫咪\",\n            \"手机里突然出现了一个神秘的聊天群\",\n            \"在公司加班时发现同事们都消失了\",\n            \"被卷入了一场网络直播中的超自然事件\",\n            \"在拥挤的地铁上醒来，发现所有人手机都收到了一条未知来源的短信\",\n            \"租到了一间极其便宜但怪事频发的公寓\",\n            \"目睹了一场离奇的车祸，死者身上有非人的特征\",\n            \"收到一个匿名包裹，里面是一件能预知未来的物品\",\n            \"发现自己突然能听到周围人的心声\",\n            \"继承了一家濒临倒闭的古怪咖啡馆/书店\",\n            \"一觉醒来，发现自己是某个直播节目的参与者，而观众并非人类\",\n            \"租下的公寓里，每晚十二点都会响起敲门声，但门外总是空无一人。\",\n            \"手机突然开始推送来自“另一个世界”的新闻头条。\",\n            \"搭乘的末班公交车并未在任何已知站点停靠，正驶向未知区域。\",\n                \"接到了一个看似简单的失踪人口案件\",\n            \"在整理旧案卷时发现了被掩盖的真相\",\n            \"收到了一封指向连环杀手的匿名信\",\n            \"被卷入了一起密室杀人案\",\n            \"发现自己正在调查的案件与童年阴影有关\",\n            \"在一个偏远小镇遭遇了诡异的集体失忆事件\",\n            \"被邀请参加一个富豪的私人聚会，却发现这是个陷阱\",\n            \"在医院值夜班时遇到了不应该存在的病人\",\n            \"调查一起车祸时发现死者在事故发生前就已经死亡\",\n \n            \"你在直播中意外拍到了不该存在的“东西”，一夜爆红的同时也被盯上了。\",\n            \"你被父母逼着去相亲。\",\n            \"你下班回家，捡到一只脏兮兮的流浪猫，于心不忍带回了家。第二天早上，你被一声巨响惊醒，发现一个陌生的美少年/美少女穿着你昨晚给猫洗澡时用的浴巾，站在厨房里，并声称是你把他/她召唤来的。\",\n        \"随机生成\" \n        ]\n    },\n \"近现代\": {\n    \"identities\": [\n        \"热血学生\",\n        \"情报人员\",\n        \"一线警员\",\n        \"士兵\",\n        \"乡村医生/教师\",\n        \"工厂工人\",\n        \"金融从业者\",\n        \"报社记者/编辑\",\n        \"电影/文艺从业者\",\n        \"江湖人士\",\n        \"秘密项目的科学家\",\n        \"逃离战区的难民\",\n        \"海外援助人员/传教士\",\n        \"没落的贵族/前朝遗老\",\n        \"远洋货轮的水手\",\n        \"私家侦探\",\n        \"工会领袖\",\n        \"航空公司的飞行员/空乘\",\n        \"外交人员\",\n        \"通商口岸的实业家\",\n        \"街头的小贩\",\n        \"实验室的研究员\",\n        \"车站的检票员/调度员\",\n        \"跨国公司的职员\",\n        \"随机生成\"\n    ],\n    \"openings\": [\n        \"1916年，凡尔登的战壕里下着冻雨，你收到了一封来自故乡的信。\",\n        \"1929年10月29日，星期二，华尔街开盘的钟声刚刚敲响。\",\n        \"你在泰坦尼克号的头等舱醒来，口袋里有一张不属于这个时代的船票。\",\n        \"柏林墙下，你找到了一个刚好可以偷递一张纸条的缝隙。\",\n        \"1962年，你所在的核潜艇，刚刚收到了准备发射核弹的预备指令。\",\n        \"九龙城寨的麻将馆里，大佬递给你一支烟，说有笔‘大生意’要谈。\",\n        \"一名盖世太保军官拦住了你，他似乎在你藏着犹太朋友的阁楼下听到了什么。\",\n        \"1969年，作为宇航员，你在月球的尘土中发现了一枚不该存在的脚印。\",\n        \"廉政公署成立的第一天，你的办公桌上出现了一封举报整个警队的匿名信。\",\n        \"1986年，切尔诺贝利隔离区内，你手中的盖革计数器发出了前所未有的警报。\",\n        \"你在跳蚤市场买到一台旧收音机，它却嘶嘶啦啦地开始播放三天后的新闻。\",\n        \"作为一名破译员，你刚刚在敌军的电码中破译出了一个不可能的地名：亚特兰蒂斯。\",\n        \"敦刻尔克的海滩上，德军的炮火越来越近，而远方的海雾里驶来的却是一艘古老的帆船。\",\n        \"1937年的上海，你与爱人约在咖啡馆告别，而他/她的真实身份是日本特务。\",\n        \"你在伍德斯托克音乐节的泥地里醒来，身边躺着一位未来的摇滚巨星。\",\n        \"一张写着你名字的大字报，出现在了街道最显眼的墙上。\",\n        \"一份关于纳粹正在秘密研究的“超自然军团”的档案，意外落到了你的手中。\",\n        \"你坐在开往西部的火车上，身边围绕着在大萧条中失去一切的人们。\",\n        \"19世纪的伦敦，开膛手杰克刚刚犯下新的案件，而你在受害者的手中发现了一枚属于你的袖扣。\",\n        \"你爱上了一位来自敌对阵营的大使馆工作人员，今晚你们要在维也纳的桥上做最后的诀别。\",\n        \"你在弥敦道的霓虹灯下躲雨，一个人为你撑开了伞，你们的故事就此开始。\",\n        \"板门店的非军事区，你和一个来自另一方的士兵，隔着三八线分享了半支烟。\",\n        \"互联网诞生之初，你在一个BBS上发现了一个名为‘衔尾蛇’的秘密论坛，里面正在讨论如何修改历史。\",\n      \"甲午海战的黄海之上，你所在的‘致远’舰发出了冲向敌舰的最后一声鸣笛。\",\n    \"1898年的北京，你作为谭嗣同的亲信，收到了他让你连夜逃亡的密信。\",\n    \"武昌城头的第一声枪响传来，你放下了手中正在擦拭的汉阳造步枪。\",\n    \"1919年5月4日，你被同窗好友拉着，汇入了前往天安门的学生人潮。\",\n    \"黄埔军校的开学典礼上，你作为第一期学员，听到了校长“不成功便成仁”的训话。\",\n    \"1937年的淞沪战场，四行仓库外，租界的歌舞升平与对岸的枪炮声仅一河之隔。\",\n    \"延安的窑洞前，你正在油灯下教战士们识字，一份加急的情报被送到了你的手上。\",\n    \"重庆的防空警报再次拉响，你抱着孩子，和邻居们一起匆忙躲进潮湿的防空洞。\",\n    \"飞虎队的机库里，你作为地勤人员，正在为一个美国飞行员的战机画上鲨鱼涂装。\",\n    \"1945年的重庆谈判，你拍下了两位改变中国命运的领袖握手的瞬间。\",\n    \"在淮海战役的支援队伍里，你推着吱呀作响的独轮车，走在泥泞的土地上，前方就是炮火连天的前线。\",\n    \"1949年4月23日，你亲眼看到第一面红旗插上了南京“总统府”的屋顶。\",\n    \"1949年10月1日，你挤在天安门广场的人海里，等待着那个即将震动世界的声音。\",\n    \"长津湖的冰天雪地里，你把最后一个冻土豆分给了身边最年轻的战友。\",\n     \"1860年的北京，圆明园的冲天火光映在你含泪的眼中，你怀里紧紧抱着一件从大火中抢救出来的珍宝。\",\n    \"你是一名留美幼童，刚刚接到朝廷的命令，被强制中断学业，即刻回国。\",\n    \"东交民巷的使馆区外，八国联军的枪炮声越来越近。\",\n    \"“四一二”的凌晨，上海的街头贴满了通缉令，上面有你昔日同志的头像。\",\n    \"1937年12月，南京城破，你在拉贝先生设立的国际安全区里，从门缝向外窥探着街上的人间地狱。\",\n    \"日军的731部队基地里，你被关在牢房中，今天又有“马路大”（原木）被带走，再也没有回来。\",\n    \"花园口的黄河大堤被炸开，你在滔天的洪水中死死抱着一块门板，寻找着失散的家人。\",\n    \"1942年的河南，逃荒的路上，你已经三天没有吃过一点东西，只能靠啃食树皮为生。\",\n    \"长沙文夕大火的当晚，你作为奉命执行“焦土政策”的士兵，亲手点燃了自己家的房子。\",\n    \"你是缅甸远征军的一员，在野人山的原始丛林里身患疟疾，与大部队失去了联系。\",\n    \"台湾的白色恐怖时期，你的邻居，一位温和的中学老师，在半夜被几个陌生人带走，从此杳无音信。\",\n    \"长春围困战中，城内已经断粮数月，你用最后一点首饰换来的一块黑面包，被饥饿的人群抢走了。\",\n \n        \"随机生成\"\n    ]\n},\n    \"西方奇幻\": {\n        \"identities\": [\n            \"见习法师\",\n            \"王国骑士\",\n            \"吟游诗人\",\n            \"被流放的贵族\",\n            \"盗贼公会成员\",\n            \"草药师\",\n            \"牧师/女牧师\",\n            \"德鲁伊\",\n            \"游侠\",\n            \"铁匠\",\n            \"佣兵\",\n            \"魔法学院学生\",\n            \"见习法师/女术士\",\n            \"落魄的王国骑士\",\n            \"酒馆的吟游诗人\",\n            \"被剥夺头衔的贵族\",\n            \"盗贼公会的新手\",\n            \"村庄里的草药师\",\n            \"被神殿收养的孤儿\",\n            \"躲藏中的龙裔\",\n            \"猎魔人/狩魔猎人\",\n            \"雇佣兵\",\n            \"逃亡的公主/王子\",\n            \"被流放的贵族后裔\",\n            \"盗贼公会的核心成员\",\n            \"掌握禁忌炼金术的炼金术师\",\n            \"暗黑魔法少女/少年\",\n            \"正在逃婚的精灵王子/公主\",\n            \"被恶龙抓走但和恶龙成了好朋友的人类\",\n            \"开宠物店专门售卖各种魔法生物的年轻店主\",\n            \"试图用魔法搞农业革命的半吊子法师\",\n            \"退休的魔王/勇者\",\n             \"吸血鬼亲王的血奴\",\n            \"在酒馆里讲故事骗吃骗喝的吟游诗人\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"在古老的遗迹中触碰了一块符文石\",\n            \"作为被巨龙袭击的商队中唯一的幸存者\",\n            \"被诬陷杀害了国王，开始了逃亡生涯\",\n            \"在森林里捡到了一个会说话的魔法物品\",\n            \"继承了祖父留下的神秘法师塔\",\n            \"在酒馆里接到了一个价值不菲的委托\",\n            \"意外召唤出了一个强大但不受控制的魔物\",\n            \"发现自己是传说中勇者的转世\",\n            \"被选中参加王室的秘密任务\",\n            \"在魔法学院的禁书区发现了禁忌法术\",\n            \"在古老的遗迹中触碰了一块符文，被传送到了未知之地\",\n            \"作为被巨龙袭击的商队中唯一的幸存者，身上多了一个龙纹烙印\",\n            \"被诬陷刺杀了国王，不得不在追捕中寻找真相\",\n            \"在森林里捡到了一个会说话、性格恶劣的魔法物品\",\n            \"家乡被魔潮毁灭，你是唯一的幸存者\",\n            \"为了偿还巨额赌债，签下了一份危险的魔法契约\",\n            \"在古老的遗迹中触碰了一块符文石，一个古老的灵魂寄宿在了你的体内。\",\n            \"作为被巨龙袭击的商队中唯一的幸存者，你获得了龙的一部分力量。\",\n            \"你的“吉祥物”告诉你，想要获得更强的力量，就必须献上你最珍贵的东西，比如情感或记忆。\",\n            \"蒸汽朋克都市里，你是一名使用魔法驱动的机械臂的侦探，正在调查一宗离奇的炼金谋杀案。\",\n            \"诸神黄昏已经开始，作为被选中的勇者，你的任务不是拯救世界，而是确保阿斯加德彻底毁灭。\",\n            \"随机生成\",\n            \"你正在与邻国王子/公主举行盛大的婚礼，一只巨大的狮鹫突然从天而降抓走了你.\",\n            \"你继承了远方叔叔留下的一家小酒馆，开业第一天才发现，这里的常客是退休后沉迷钓鱼的魔王、隐居山林研究厨艺的勇者和天天来蹭酒喝的摸鱼女神。\",\n            \"你按照古书的指引举行了恶魔召唤仪式，希望能获得财富和力量。结果召唤来一个只会打扫卫生、烹饪美食的恶魔管家，并强行和你签订了一份终身“劳动合同”。\"\n        ]\n    },\n    \"东方玄幻\": {\n        \"identities\": [\n            \"外门弟子\",\n            \"炼丹学徒\",\n            \"世家子弟/千金\",\n            \"隐居散修\",\n            \"藏经阁看守\",\n            \"宗门执事\",\n            \"游历散仙\",\n            \"魔道修士\",\n            \"丹师\",\n            \"器师\",\n            \"阵法师\",\n            \"驯兽师\",\n            \"宗门的外门弟子\",\n            \"炼丹房学徒\",\n            \"没落的世家子弟\",\n            \"隐居散修的记名弟子\",\n            \"看守藏经阁的凡人\",\n            \"被退婚的天才/废柴\",\n            \"妖族与人族的混血后裔\",\n            \"云游四方的画师/琴师\",\n            \"王朝的钦天监小吏\",\n            \"青楼的花魁/乐师\",\n            \"被废掉修为后重修的“废柴”天才\",\n            \"某个隐世宗门的师尊或师祖\",\n            \"靠特殊功法快速提升的魔道修士\",\n            \"执掌天道刑罚的“天律阁”成员\",\n            \"拥有《山海经》并能召唤异兽的御兽师\",\n            \"退婚流主角的那位前未婚妻/夫\",\n            \"被退婚后专心搞事业、一心只想变强的前未婚妻/夫\",\n            \"穿成龙傲天身边的小弟并决定抱紧大腿的机智路人甲\",\n            \"专门给各大宗门写八卦绯闻小报的话本先生\",\n   \"随机生成\"\n \n        ],\n        \"openings\": [\n            \"测试灵根时引发了天地异象\",\n            \"被退婚后立下三年之约\",\n            \"在宗门试炼中误入上古秘境\",\n            \"被师尊托付了关乎宗门存亡的重要任务\",\n            \"在渡劫时被雷劈回到了千年前\",\n            \"意外获得了一本记载仙界秘辛的古籍\",\n            \"测试灵根时意外引发了天地异象，引来了多方窥伺\",\n            \"无意中放出了被宗门封印的妖物/魔头\",\n            \"被迫代替妹妹/弟弟嫁给/入赘一个著名的废柴/死人\",\n            \"在凡间书店买到一本假冒的功法，没想到竟练出了真正的绝世神通。\",\n            \"逃婚途中意外坠崖，被一位隐世高人所救并强行传授了衣钵。\",\n            \"你的任务是作为幕后推手，在这个末法时代引导世界完成“灵气复苏”或“神话复苏”。\"\n        ]\n    },\n    \"西方神话\": {\n    \"identities\": [\n        \"神殿的祭司/女祭司\",\n        \"流着神明血脉的半神\",\n        \"被神选中的先知/神使\",\n        \"某个城邦的国王/女王\",\n        \"史诗中传唱的英雄/勇士\",\n        \"奥林匹斯/阿斯加德的侍奉者\",\n        \"锻造神器的矮人工匠\",\n        \"森林里的德鲁伊/女巫\",\n        \"寻找知识的学者/抄写员\",\n        \"守护圣物的骑士\",\n        \"竞技场的角斗士\",\n        \"普通的农民/牧羊人\",\n        \"出海远航的船长/水手\",\n        \"被放逐的王子/公主\",\n        \"被诅咒之人/怪物\",\n        \"地狱的摆渡人/守门人\",\n        \"游荡在世间的精灵/仙灵\",\n        \"被遗忘旧神的后裔\",\n        \"专门猎杀怪物的猎手\",\n        \"天堂放逐的堕落者\",\n        \"执掌一方权能的小神/自然灵\",\n        \"埃及的法老/大祭司\",\n        \"北欧的女武神/狂战士\",\n        \"某个秘密教团的刺客\",\n        \"随机生成\"\n    ],\n    \"openings\": [\n        \"奥林匹斯圣山上，宙斯的雷霆权杖失窃了。\",\n        \"一个刻着“献给最美之人”的金苹果，被扔进了众神的宴会厅。\",\n        \"地狱的三头恶犬刻耳柏洛斯睡着了，亡灵正从冥府的裂隙中逃出。\",\n        \"普罗米修斯盗取的天火，在凡间引发了一场无法被扑灭的大火。\",\n        \"特洛伊城下，一匹巨大的木马被送到了坚不可摧的城门前。\",\n        \"北欧的世界之树“尤克特拉希尔”，它的一根枝干毫无征兆地枯萎了。\",\n        \"彩虹桥“毕弗罗斯特”的中央，出现了一道深不见底的裂痕。\",\n        \"挣脱了束缚的巨狼芬里尔，在天边吞食了太阳或月亮。\",\n        \"尼罗河今年的泛滥没有如期而至，整个埃及陷入了对饥荒的恐惧。\",\n        \"法老陵墓的深处，用来称量心脏的真理天平不见了。\",\n        \"亡者之书上，浮现出了一个从未被记载过的、可以让死者完全复活的咒语。\",\n        \"亚瑟王的圣剑“Excalibur”从湖中再次现世，等待着新的主人。\",\n        \"德鲁伊的圣林中，最古老的一棵橡树的树干上，流出了人类的鲜血。\",\n        \"天堂的一位大天使擅自离开了自己的岗位，没有留下任何信息便降临凡间。\",\n        \"封印着地狱七魔王之一的古老锁链，发出了一声清脆的断裂声。\",\n        \"天启四骑士中的第一位——“瘟疫”，已经骑着白马出现在了遥远的地平线上。\",\n        \"潘多拉的魔盒被再次打开，但这次从中飞出的，是世间所有的“希望”。\",\n        \"伊阿宋的金羊毛远征船队，在归航时遭遇了来自深海的塞壬歌声。\",\n        \"为西西弗斯推上山的巨石，今天停在了山顶，没有滚落下来。\",\n        \"人类与仙灵的边界变得模糊，有孩子在森林里迷路后，带着神奇的能力回来了。\",\n        \"吉尔伽美什寻找永生之法的旅途，在终点发现了一扇通往异世界的大门。\",\n        \"巴别塔的建筑工地上，人们突然又能听懂彼此的语言了。\",\n        \"随机生成\"\n    ]\n},\n    \"东方神话\": {\n    \"identities\": [\n        \"天庭的某位星君\",\n        \"一头青牛\",\n        \"蟠桃园里的小仙\",\n        \"被贬下凡的神仙\",\n        \"山间的土地神/山神\",\n        \"炼丹炉旁的道童\",\n        \"南天门的守门天将\",\n        \"刚刚修出人形的小妖\",\n        \"占山为王的大妖\",\n        \"等待报恩的狐仙/蛇妖\",\n        \"人和妖的混血后代\",\n        \"山海经中记载的异兽\",\n        \"佛陀座下的听经沙弥\",\n        \"执掌一殿的阎罗/判官\",\n        \"忘川河畔的摆渡人\",\n        \"引渡亡魂的鬼差\",\n        \"无法转世的游魂\",\n        \"云游四方的地仙\",\n        \"误入仙境的樵夫/采药人\",\n        \"斩妖除魔的道士/法师\",\n        \"能看见鬼神的通灵者\",\n        \"某个凡人王朝的国师\",\n        \"龙宫的虾兵/蟹将\",\n        \"听圣人讲道的生灵\",\n        \"上古巫族的后裔\",\n          \"西王母座下的青鸟使者\",\n    \"昆仑山神树的看守者\",\n    \"月宫里捣药的玉兔\",\n    \"司掌风雨雷电的仙官\",\n    \"财神座下的运财童子\",\n    \"执掌人间功过的灶君\",\n    \"城隍庙里的日游神/夜游神\",\n    \"修炼有成的僵尸/旱魃\",\n    \"寄居在古物中的器灵\",\n    \"引诱书生的画皮美妖\",\n    \"十八层地狱的狱卒\",\n    \"镇守佛塔的阿修罗众\",\n    \"给佛陀献花的飞天/天女\",\n    \"继承了稀薄神血的凡人\",\n    \"上古大巫的血脉后裔\",\n    \"被高人点化了的灵兽\",\n    \"追日的夸父族人\",\n    \"试图填平东海的精卫鸟\",\n    \"深山中的尸解仙\",\n    \"以梦境为食的梦貘\",\n        \"随机生成\"\n    ],\n    \"openings\": [\n        \"蟠桃盛会即将开始，你却发现你的请柬被人偷走了。\",\n        \"你的天劫即将来临，但你感应到有仇家正藏在雷云之中。\",\n        \"一件上古神器即将在不周山出世，三界各方势力都已闻风而动。\",\n        \"你在东海之滨捡到了一个婴儿，他的眉心竟有第三只眼。\",\n        \"生死簿上你的名字被人用朱砂笔划掉了，而你还活得好好的。\",\n        \"你在取经人的必经之路上开辟了洞府，正思考着该如何烹饪唐僧肉。\",\n        \"女娲补天的五彩石还剩下最后一颗，它从天上坠落，正好砸在了你的洞府门前。\",\n        \"封神榜即将重开，你的师父告诉你，这次的榜上将会有你的名字。\",\n        \"孙悟空大闹天宫之时，你作为一名天将，奉命前去镇压。\",\n        \"巫妖大战的前夕，你必须在帝江和帝俊之间做出选择。\",\n        \"你在奈何桥上正要喝下孟婆汤，却突然想起了九世之前刻骨铭心的仇恨。\",\n        \"地府的十八层地狱破开了一个缺口，无数恶鬼正涌向人间。\",\n        \"你所在的凡人村庄，常年祭祀的山神庙，今年却没有显灵。\",\n        \"你在深山中修炼了千年，今天第一次进城，却被街上的车水马龙迷住了眼。\",\n        \"师父交给你一个任务，去三界之中，寻回散落在各处的河图洛书碎片。\",\n        \"你在紫霄宫中听鸿钧老祖讲道，但坐在你前面的那個生灵，似乎是你的宿敌。\",\n        \"作为龙王，你发现你的定海神针不见了。\",\n        \"佛陀在灵山讲法，天花乱坠，你似乎听懂了什么。\",\n        \"你是一只刚修成正果的黄皮子，却被一个凡人书生误认为是狐仙，日夜向你许愿求姻缘。\",\n         \"昆仑山的建木神树开始枯萎，三界之内，草木凋零。\",\n    \"传说中的“人参果”即将成熟，据说闻一闻，就能活三百六十岁。\",\n    \"十大金乌一齐出现在天空，大地被炙烤，凡间已成炼狱。\",\n    \"兰若寺的钟声在午夜响起，但那座寺庙早已荒废了百年。\",\n    \"东海龙宫的定海神针突然失窃，龙王震怒，悬赏三界寻找线索。\",\n    \"一场无名的瘟疫从凡间开始蔓延，就连天上的神仙也感到法力滞涩。\",\n    \"六大圣人纷纷立教，一时间，人、阐、截、西方教等开始在三界之中广收门徒。\",\n    \"有人在三生石上，用刀刻下了两个本不该在一起的名字。\",\n    \"一幅描绘着飞天仙女的古画被展出，传说画中的仙女会在月圆之夜走下来。\",\n    \"佛道两家将举行一场“水陆大会”进行辩法，胜者将执掌未来千年的凡间信仰。\",\n    \"酆都鬼城的大门不知被谁打开，百鬼夜行，正在人间游荡。\",\n    \"有人说，在北冥之海的尽头，看到了那只名为“鲲”的巨兽。\",\n \n    \"人间一位帝王妄想长生，正在派人四处寻找传说中的“不死药”。\",\n \n        \"随机生成\"\n    ]\n},\n    \"赛博朋克\": {\n        \"identities\": [\n            \"义体医生\",\n            \"数据黑客\",\n            \"公司特工\",\n            \"底层拾荒者\",\n            \"帮派打手\",\n            \"记忆贩子\",\n            \"义体改造师\",\n            \"AI调试师\",\n            \"虚拟偶像\",\n            \"企业间谍\",\n            \"网络幽灵\",\n            \"生化人\",\n            \"黑市义体医生\",\n            \"初出茅庐的数据黑客\",\n            \"公司底层特工\",\n            \"街头帮派打手\",\n            \"网络偶像的经纪人\",\n            \"垃圾场的拾荒者\",\n            \"厌倦了生活的条子（警察）\",\n            \"全身高度义体化的改造人\",\n            \"反抗组织的信使\",\n            \"技术高超的义体医生\",\n            \"能够潜入任何系统的顶级黑客\",\n            \"为超级企业清理“垃圾”的特工\",\n            \"贩卖虚拟感官体验的“梦境商人”\",\n            \"反抗巨型企业的“解放阵线”成员\",\n            \"驾驶飞行载具的空中快递员\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"从一次非法的记忆清除手术中醒来\",\n            \"植入的义眼突然看到了不该看的数据流\",\n            \"接到了一个送货任务，货物是一个活生生的人\",\n            \"被强大的企业追杀，原因不明\",\n            \"在黑市上买到了一块来源不明的军用芯片\",\n            \"发现自己的AI伴侣开始出现自主意识\",\n            \"被雇佣渗透竞争对手公司的服务器\",\n            \"在虚拟世界中被困，无法登出\",\n            \"义体突然失控，开始攻击无关人员\",\n            \"接收到了一条来自未来的加密信息\",\n \n            \"植入的义眼突然接收到一段加密数据流，指向公司的巨大阴谋\",\n            \"接到了一个报酬极高的“送货”任务，货物是一个被通缉的仿生人\",\n            \"因为一次网络入侵，意外成为了全球追捕的对象\",\n            \"发现自己常用的镇静剂被人掉了包，效果变得极其危险\",\n            \"债主找上门，给了一个潜入竞争对手公司窃取数据的危险任务\",\n            \"从一次非法的记忆清除手术中醒来 。\",\n            \"你新植入的义眼突然开始接收到不属于这个世界的数据流 。\",\n            \"在一个全民沉浸式VR的世界里，你发现所谓的“现实”可能只是另一层虚拟。\",\n            \"随机生成\"\n        ]\n    },\n    \"星际科幻\": {\n        \"identities\": [\n            \"货运飞船船员\",\n            \"帝国舰队新兵\",\n            \"殖民星球矿工\",\n            \"星际海盗\",\n            \"外交官\",\n            \"星际商人\",\n            \"机械工程师\",\n            \"生物学家\",\n            \"星系探险家\",\n            \"人工重力技师\",\n            \"货运飞船的机械师\",\n            \"帝国舰队学院的吊车尾学员\",\n            \"外星球殖民地的矿工\",\n            \"被通缉的星际海盗\",\n            \"外星大使的人类助理\",\n            \"基因编辑过的完美“人造人”\",\n            \"考古队的新人\",\n            \"太空港酒吧的老板\",\n            \"失控的医疗机器人\",\n            \"自由探索船的船长\",\n            \"银河帝国基因改造的超级士兵\",\n            \"能与外星生物精神链接的“沟通者”\",\n            \"星际黑市的情報贩子\",\n            \"某个古代文明遗迹的守护者\",\n            \"深海文明的使者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"飞船遭遇未知宇宙异常，被迫紧急跃迁到陌生星域\",\n            \"在蛮荒星球上发现了外星文明的遗迹\",\n            \"作为外交使团成员前往一个从未接触过的文明\",\n            \"在星际空间站的黑市上买到了来源不明的古代数据核心\",\n            \"收到了一个来自银河系边缘的神秘求救信号\",\n            \"在例行的星球勘探中发现了会移动的金属生物\",\n            \"被派遣调查一艘在虚空中漂流百年的幽灵战舰\",\n            \"意外激活了一个封印了千年的古代AI\",\n            \"在进行超空间跳跃时看到了不应该存在的景象\",\n            \"发现自己所在的殖民地其实是一个巨大的实验场\",\n            \"飞船在进行跃迁时遭遇未知宇宙现象，迫降在一颗完全不在星图上的星球\",\n            \"在一次空间站日常维护时，发现了一个隐藏的密室，里面有一具外星人尸骸\",\n            \"作为文化观察员被派往一个刚刚接触的原始文明星球\",\n            \"在黑市买到了一个来历不明的古代数据核心，里面藏着足以引发战争的信息\",\n            \"所在的殖民星球爆发了未知的生化病毒，隔离程序已启动\",\n            \"被选中参与一项绝密的超光速航行实验，但实验出现了严重故障\",\n            \"飞船的AI突然觉醒了自我意识，并强行将航线设定至一个未知的星系。\",\n            \"在一颗荒凉的星球上进行考古时，你们挖出了一个会造成时空悖论的古代物品。\",\n            \"你被一个强大的星际实体选中，成为其在物质宇宙的“代理人”，执行它的意志。\",\n            \"你所在的深海城市，第一次向陆地文明派出了外交使团，而你就是其中一员。\",\n            \"在一个基因高度编辑的社会，你作为天生的“缺陷者”，却拥有机器无法模拟的能力。\",\n            \"随机生成\"\n        ]\n    },\n    \"武侠江湖\": {\n        \"identities\": [\n            \"初入江湖的少侠\",\n            \"魔教底层教众\",\n            \"名门正派弟子\",\n            \"悬壶济世的郎中\",\n            \"经营客栈的情报贩子\",\n            \"镖师\",\n            \"江湖游医\",\n            \"说书先生\",\n            \"剑客\",\n            \"刺客\",\n            \"武林盟主/盟主夫人\",\n            \"隐世高人\",\n            \"初入江湖的名门少侠/女侠\",\n            \"魔教的底层教众\",\n            \"镖局的趟子手\",\n            \"悬壶济世（也可能用毒）的郎中\",\n            \"客栈的情报贩子/说书人\",\n            \"退役的官差\",\n            \"书院的书生/琴女\",\n            \"被灭门的小门派弟子\",\n            \"身世成谜的孤儿\",\n            \"精通易容术的飞贼\",\n            \"初入江湖的少侠/女侠\",\n            \"名门正派的亲传弟子\",\n            \"悬壶济世却身负绝技的郎中\",\n            \"经营着客栈的情报贩子\",\n            \"被派往江湖卧底的朝廷密探\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"全家被神秘组织灭门，身负血海深仇\",\n            \"无意中习得了失传已久的绝世武功\",\n            \"卷入了名门正派与魔教的宝物争夺战\",\n            \"受人之托护送一个身份神秘的人\",\n            \"在武林大会上被诬陷为叛徒\",\n            \"意外获得了一本记载绝世内功的秘籍\",\n            \"被师父托付寻找失散多年的师弟/师妹\",\n            \"在荒山野岭救下了一个身受重伤的高手\",\n            \"发现自己的身世与二十年前的武林浩劫有关\",\n            \"被卷入了皇室夺位之争\",\n            \"全家被神秘人灭门，凶手使用的是失传已久的武功\",\n            \"无意中救下一个重伤的老人，临终前传给你毕生功力和一段口诀\",\n            \"卷入了一场针对武林盟主的刺杀阴谋，被当成替罪羊\",\n            \"师门至宝失窃，作为最大嫌疑人的你被迫逃亡并自证清白\",\n            \"在山洞避雨时发现了前辈高人的遗骸和武功秘籍\",\n            \"被迫参加一场生死不论的武林大会，胜者将成为某大人物的女婿/赘婿\",\n            \"全家被神秘组织灭门，身负血海深仇的你，带着唯一的线索踏入江湖。\",\n            \"无意中习得了失传已久的绝世武功，但代价是每使用一次都会失去一部分人性。\",\n            \"你卷入了正派与魔教对一本武功秘籍的争夺战中，而那本秘籍就是你自己。\",\n            \"你的任务是暗中干预某个历史的关键节点，确保历史按照正确的方向发展。\",\n            \"随机生成\"\n        ]\n    },\n \n    \"恐怖惊悚\": {\n        \"identities\": [\n            \"超自然现象调查员\",\n            \"恐怖片演员\",\n            \"心理医生\",\n            \"古董店老板\",\n            \"建筑工人\",\n            \"夜班保安\",\n            \"灵媒\",\n            \"考古学家\",\n            \"民俗学者\",\n            \"普通游客\",\n                \"入殓师/法医\",\n    \"记者/播客主\",\n    \"长途卡车司机\",\n    \"消防员/救援队员\",\n    \"新家的住户\",\n    \"深海/洞穴探险家\",\n    \"护林员\",\n    \"历史档案管理员\",\n    \"唯一的幸存者\",\n    \"邪教逃离者\",\n    \"犯罪心理学家\",\n    \"城市探险博主\",\n    \"失眠症患者\",\n    \"乡下的赤脚医生\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"被困在一栋发生过惨案的老宅中\",\n            \"在拍摄恐怖片时遭遇了真正的超自然现象\",\n            \"收到了一盘记录着诡异内容的录像带\",\n            \"在古董店买到了一个被诅咒的物品\",\n            \"参加了一个神秘的网络挑战游戏\",\n            \"在深夜的医院遇到了已经死去的病人\",\n            \"被邀请调查一起连警察都不敢深入的案件\",\n            \"在挖掘古墓时释放了不该被唤醒的存在\",\n            \"搬进新家后发现房间里有看不见的室友\",\n            \"在进行心理治疗时患者说出了不可能知道的秘密\",\n             \"手机相册里突然多了一段你熟睡时的视频。\",\n    \"深夜开车时，后视镜里总有一个穿着红衣服的身影一闪而过。\",\n    \"镜子里的倒影，在你转过身后，对你露出了一个诡异的微笑。\",\n    \"电梯失控，停在了一个不存在的“地下4层”。\",\n    \"一张纸条从门缝下塞了进来，上面用血写着：“别出声，它在听。”\",\n    \"好不容易淘到的古董娃娃，它的眼睛好像会自己转动。\",\n    \"耳边总是无端响起一段催眠般的童谣，但周围并没有其他人。\",\n    \"在一座以“自杀圣地”闻名的森林里迷了路，天色渐渐暗了下来。\",\n    \"你工作的办公楼里流传着一份“夜班生存守则”，而你刚刚不小心违反了其中一条。\",\n    \"大雪封山，被困在与世隔绝的山间旅店里，而住客们开始一个接一个地神秘死去。\",\n    \"你收到了一个匿名包裹，里面只有一个小木偶和一张指示：“现在，你是它的新主人了。”\",\n    \"整理祖父遗物时，发现了一本记录着某种邪恶仪式的日记，而仪式的最后一步就在今晚。\",\n    \"小镇上流传着一个传说：绝对不能在午夜回头看自己的影子。而今晚，你感觉有什么东西在拉你的裤脚。\",\n    \"家里所有的钟表，都分毫不差地停在了凌晨3点44分。\",\n    \"接到了一个奇怪的求助电话，对方说他被困在了你家的墙壁里。\",\n            \"随机生成\"\n        ]\n    },\n    \"海洋冒险\": {\n        \"identities\": [\n            \"船员\",\n            \"海盗\",\n            \"渔夫/渔女\",\n            \"海军军官\",\n            \"探险家\",\n            \"海洋生物学家\",\n            \"潜水员\",\n            \"灯塔看守\",\n            \"船长\",\n            \"海商\",\n            \"海难幸存者\",\n            \"寻宝猎人\",\n                \"人鱼/海洋智慧生物\",\n    \"被诅咒的不死水手\",\n    \"制图师/航海家\",\n    \"港口的走私者\",\n    \"船舶工程师/修理工\",\n    \"海岸警卫队队员\",\n    \"海洋神祇的祭司\",\n    \"海怪猎人\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"在一座荒岛上醒来，船只已经消失\",\n            \"发现了一张指向传说宝藏的古老海图\",\n            \"船只在风暴中偏离航线，到达了地图上不存在的海域\",\n            \"在深海潜水时遭遇了史前巨兽\",\n            \"被海盗劫持后发现他们在寻找某种神秘物品\",\n            \"在钓鱼时钓上来了一个装着求救信的瓶子\",\n            \"发现自己工作的油井平台下方隐藏着古代文明\",\n            \"在海底考古时唤醒了沉睡的深海生物\",\n            \"被神秘海流卷入了传说中的船只坟场\",\n            \"收到了来自失踪多年的探险队的无线电信号\",\n             \"传说中的幽灵船‘飞翔的荷兰人’号，破开浓雾，缓缓出现在航线前方。\",\n    \"百慕大三角的中心区域，所有导航仪器突然失灵，海面平静得宛如镜面。\",\n    \"打捞上来的百年沉船里，一具尸体竟完好无损，仿佛只是沉沉睡去。\",\n    \"一场罕见的‘血色赤潮’过后，海中涌现出无数从未见过的、发着幽光的奇异生物。\",\n    \"船只被一股巨大的力量猛地向下一拽，仿佛有什么东西缠住了龙骨，正要将整艘船拖入深渊。\",\n    \"在深海热泉附近，声呐探测到了一座由未知金属构成、似乎仍在运作的宏伟城市。\",\n    \"鲸鱼群的歌声中，夹杂着一段极其规律的、仿佛摩斯密码般的神秘旋律。\",\n    \"巨大的极地冰川在你眼前崩塌，掀起的滔天巨浪，正朝着船只扑来。\",\n    \"海面上凭空出现了一扇由旋转的水流构成的巨门，门后是完全陌生的星空。\",\n    \"在一座无人灯塔的顶端，发现了一本写满了一个世纪的思念与等待的航海日志。\",\n            \"随机生成\"\n        ]\n    },\n    \"二次元\": {\n        \"identities\": [\n            \"转校生\",\n            \"社团成员\",\n            \"魔法少女/少年\",\n            \"偶像\",\n            \"游戏玩家\",\n            \"游戏中的npc\",\n            \"动漫宅\",\n            \"学生会成员\",\n            \"图书委员\",\n            \"体育社王牌\",\n            \"校园偶像\",\n            \"神秘转学生\",\n            \"普通路人\",\n             \"地下偶像\",\n    \"Vtuber / 主播\",\n    \"轻小说作家 / 漫画家\",\n    \"风纪委员\",\n    \"阴阳师 / 退魔师\",\n    \"异世界归来者\",\n    \"怪盗\",\n    \"非人类（妖狐/吸血鬼等）\",\n\n    \"归宅部成员\",\n    \"执事 / 女仆\",\n    \"声优\",\n    \"被封印了力量的魔王/勇者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"收到了一个能实现愿望的神秘道具\",\n            \"被选中成为拯救世界的魔法少女/少年\",\n            \"在学园祭上发生了超自然现象\",\n            \"发现班上的同学其实都不是人类\",\n            \"被卷入了一个真人版的游戏世界\",\n            \"在社团活动室发现了通往异世界的传送门\",\n \n            \"在偶像演出中遭遇了来自异次元的袭击\",\n            \"发现学校其实是一个巨大的实验场所\",\n            \"被神秘组织选中参加特殊的游戏\",\n               \"鞋柜里收到了一封署名为‘怪盗’的、偷走你心的预告函。\",\n    \"深夜搭乘的电车，在一个地图上不存在的“如月车站”停了下来。\",\n    \"天台上，全校最受欢迎的学生会长背后，长出了一对漆黑的翅膀。\",\n    \"醒来后，你和最讨厌/最憧憬的那个同学灵魂互换了。\",\n    \"手机里多出了一个无法删除的APP，它的功能是“未来日记”。\",\n    \"一场小型地下偶像Live结束后，台下的所有粉丝全都变成了狂热的信徒。\",\n    \"你常玩的游戏关服了，但你游戏里的“老婆”/伙伴却出现在了家门口。\",\n    \"学校的游泳池在没有水的状态下，淹死了一个学生。\",\n    \"樱花树下，一个完全不认识的转校生突然向你告白，并声称你们是前世的恋人。\",\n    \"城市上空出现了一个巨大的、由无数眼球组成的魔法阵。\",\n \n    \"你在网络上连载的小说情节，开始在现实中分毫不差地一一上演。\",\n    \"一场流星雨过后，你突然能听懂家里的猫在说什么了。\",\n    \"今天的占卜大凶，出门就会遭遇宿命的邂逅，开启你波澜壮阔的一生。\",\n            \"随机生成\"\n        ]\n    },\n    \"特殊世界观\": {\n        \"identities\": [\n            \"记忆商人\",\n            \"梦境行者\",\n            \"模因传播者\",\n            \"糊弄学大师\",\n              \"ABO世界中的稀有性别\",\n            \"规则怪谈中的“违规者”\",\n            \"时间循环中的锚点\",\n            \"拥有自我意识的NPC\",\n            \"魅魔\",\n            \"梦魇\",\n            \"克苏鲁神话中的调查员\",\n            \"灵气复苏的先知\",\n            \"神话复苏的钥匙\",\n   \"精神过载的哨兵\",\n        \"寻找搭档的向导\",\n        \"信息素失控的Alpha\",\n        \"伪装成Beta的Omega\",\n        \"食物链顶端的捕食者\",\n        \"重生/穿书的恶役千金\",\n        \"刚刚苏醒的旧神\",\n        \"神格破碎的神明\",\n        \"被献祭的圣子/圣女\",\n        \"世界意志的化身\",\n        \"拥有自我意识的系统/外挂\",\n        \"故事的‘旁白’\",\n        \"人形的S级收容物\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n               \"天空突然裂开，另一座城市的倒影悬挂于天际。\",\n        \"世界上所有的文字在一夜之间变成了无人能懂的金色符号。\",\n        \"你一觉醒来，发现所有人都失去了“悲伤”这种情绪。\",\n        \"你凝视深渊时，深渊真的朝你眨了眨眼，还说了声“嗨”。\",\n        \"你在一个陌生人的房间醒来，后颈传来一阵陌生的刺痛，空气中弥漫着雪松和烈酒的味道。\",\n        \"眼前的世界突然卡顿，一个“正在加载...”的进度条出现在你的视野中央。\",\n        \"你家门上多了一张纸条，上面用鲜红的字迹写着：“欢迎来到这里，请在天黑后遵守以下规则……”\",\n        \"月亮变成了深紫色，所有被月光照到的人都开始疯狂地呓语。\",\n        \"你收到了三个月后，来自自己的死亡预告信。\",\n        \"你的影子在没有光的地方，自己站了起来，并对你露出了一个诡异的微笑。\",\n        \"你杀死了这个世界的“主角”，耳边突然响起了冰冷的系统提示音：“世界线开始重置……”\",\n        \"手机屏幕上突然出现一个恋爱游戏App，而里面的可攻略角色，全都是你身边的人。\",\n        \"你面前的NPC突然抓住了你的手，流着泪对你说：“求求你，带我离开这个游戏，我什么都愿意做。”\",\n        \"海面上浮现出一座由非欧几何构成的、不断变化的城市，巨大的触手从城中伸向天空。\",\n            \"随机生成\"\n        ]\n    },\n    \"废土末日\": {\n        \"identities\": [\n               \"拾荒者\",\n            \"变种人猎手\",\n            \"幸存者据点守卫\",\n            \"独行商人\",\n            \"净水技术员\",\n            \"医疗兵\",\n            \"机械师\",\n            \"搜救队员\",\n            \"车队司机\",\n            \"物资管理员\",\n            \"移动堡垒的车长\",\n            \"驾驶武装车辆的“公路幽灵”\",\n            \"掌握一小块可耕种土地的农场主\",\n            \"搜集旧时代科技的“历史学家”\",\n            \"孤岛上的垂钓者\",\n            \"幸存者据点的医生\",\n            \"经验老道的拾荒者\",\n            \"变种人猎手\",\n            \"幸存者据点的守卫\",\n            \"独行商人\",\n            \"掌握净水/种植技术的技工\",\n            \"寻找疫苗的医生\",\n            \"掠夺者团伙的俘虏\",\n            \"战前文明的学者\",\n            \"信奉钢铁的机械教祭司\",\n            \"基因突变的异能者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"从一个废弃多年的避难所中苏醒，外面的世界已面目全非\",\n            \"在一具穿着防辐射服的尸体上，找到了一张指向传说中“绿洲”的地图\",\n            \"为了拯救据点里感染的亲人，不得不闯入辐射极高的核心区寻找药品\",\n            \"驾驶的武装车辆在沙尘暴中抛锚，补给所剩无几\",\n            \"所在的据点被强大的掠夺者军团包围，首领决定派你出去寻求援助\",\n            \"喝下了被污染的水源，开始出现奇怪的幻觉和身体变化\",\n             \"从一个废弃的避难所中苏醒\",\n            \"在一具尸体上找到了指向绿洲的地图\",\n            \"为了家人急需的药品，不得不闯入辐射区\",\n            \"驾驶的武装车辆在沙尘暴中抛锚\",\n            \"在废墟中发现了一个还在运行的AI终端\",\n            \"被某种未知病毒感染，时间所剩无几\",\n            \"车队遭遇袭击，成为唯一幸存者\",\n            \"在地下避难所发现了末日前的重要秘密\",\n            \"接收到了来自其他幸存者据点的求救信号\",\n            \"你的车队正被一场巨大的辐射风暴追赶，必须在燃料耗尽前找到避难所。\",\n            \"在一具干尸的怀里，找到了一张指向传说中“绿洲”的地图。\",\n            \"作为孤岛上唯一的幸存者，你今天从海里钓上来一个密封的，来自未知文明的休眠仓。\",\n            \"核冬天降临，你所在的避难所资源即将耗尽，必须外出寻找生机。\",\n            \"随机生成\"\n        ]\n    },\n    \"规则怪谈\": {\n        \"identities\": [\n            \"新入职的公司员工\",\n            \"转校生\",\n            \"游客\",\n            \"病人\",\n            \"乘客\",\n            \"住户\",\n            \"图书馆管理员\",\n            \"夜班保安\",\n             \"船员\",\n    \"深海/极地科考站队员\",\n    \"网红打卡地的探店博主\",\n    \"调查员\",\n    \"怪奇马戏团的表演者\",\n    \"员工\",\n    \"酒店的礼宾部\",\n    \"孤儿院的义工\",\n    \"试吃员\",\n    \"导播\",\n    \"伴郎/伴娘\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"收到一份理想工作的录用通知，但员工手册上的规则极其诡异\",\n            \"搬进了一个租金极低的新公寓，楼道里贴满了奇怪的居住守则\",\n            \"在旧书店买了一本笔记本，里面写满了像是生存指南的奇怪规则\",\n            \"一觉醒来，发现自己身处一个无限循环的走廊/车站，墙上写着生路提示\",\n            \"参加了一个奇怪的测试实验，被告知必须严格遵守指令才能离开\",\n            \"误入一个小镇，这里的居民都严格遵守着一些不可理喻的习俗\", \n            \"高考失利后，你收到一所不存在的大学寄来的录取通知书，附带一张诡异的新生守则。\",\n    \"你下载了一个无法卸载的恋爱APP，它为你匹配的对象似乎不是人类。\",\n    \"一场大雾散去，你发现所在的城市变得完全陌生，街上的每个人都对你露出诡异的微笑。\",\n    \"受邀参加一场假面舞会，规则上说，在午夜钟声敲响前，绝对不能摘下自己的面具。\",\n    \"电视里突然插播一条紧急通知，要求全体市民从现在开始必须倒着走路。\",\n    \"你继承了一座巨大的图书馆，但遗嘱里警告你，绝对不要去阅读C区的任何一本书。\",\n    \"为了躲雨，你跑进一家诡异的蜡像馆，在你眨眼后，发现所有蜡像的姿势都变了。\",\n    \"你所在的城市突然强制开始一场为期24小时的“捉迷藏”游戏，规则只有一条：“不要被找到”。\",\n    \"你收到了一个会说话的玩偶作为礼物，附带的“饲养说明”上写满了血红色的警告。\",\n    \"你的猫今天早上叼回来一张纸条，上面用爪印写着一套只有你能看见的“家庭新规”。\",\n    \"你搭乘的航班遭遇了猛烈气流，颠簸过后，窗外的天空变成了血红色。\",\n    \"你走进一家24小时便利店买东西，却发现墙上的时钟永远指向午夜三点半。\",\n            \"随机生成\"\n        ]\n    },\n    \"恐怖生存\": {\n        \"identities\": [\n            \"遭遇空难的幸存者\",\n            \"鬼屋探险的作死青年\",\n            \"精神病院的医生\",\n            \"凶宅的新房主\",\n            \"拍摄灵异节目的剧组人员\",\n            \"恶魔召唤仪式的参与者\",\n            \"被诅咒的古董拥有者\",\n            \"丧尸爆发后的幸存者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"醒来发现自己被绑在一个地下室，身边有计时器和模糊的线索\",\n            \"购买的二手家具里藏着一盘记录着凶杀案的录像带\",\n            \"度假小屋的地下室里发现了一个被囚禁多年的人\",\n            \"参与的线上游戏突然无法退出，失败意味着真实的死亡\",\n            \"收到已故亲友寄来的礼物，随后开始遭遇一系列的灵异事件\",\n            \"所在的整栋大楼被无形的力量封锁，怪物在楼道内徘徊\",\n            \"随机生成\"\n        ]\n    },\n    \"历史架空\": {\n        \"identities\": [\n            \"王宫新来的女仆/侍卫\",\n            \"被迫和亲的王子/公主\",\n            \"不受宠的皇子/公主\",\n            \"进京赶考的书生\",\n            \"边疆戍卒的小队长\",\n            \"青楼的名妓\",\n            \"云游四海的行脚僧\",\n            \"御厨房的小学徒\",\n            \"即将和亲的宗室女\",\n            \"墨家/公输家的工匠\",\n            \"驿站的驿丞\",\n            \"获罪被流放的官员\",\n            \"普通农民\",\n            \"书生\",\n            \"商贾\",\n            \"将军\",\n            \"公主/王子\",\n            \"太监/宫女\",\n            \"江湖医师\",\n            \"道士/道姑\",\n            \"和尚/尼姑\",\n            \"县令\",\n            \"刺客\",\n            \"史官\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"一觉醒来发现自己回到了某个历史关键节点，成了一个无关紧要的小人物\",\n            \"在古墓中发现了能预言未来的龟甲/竹简\",\n            \"皇帝突然驾崩，京城暗流涌动，你意外卷入了继位风波\",\n            \"家乡遭遇洪灾/蝗灾，你被迫带领乡亲南下逃荒\",\n            \"被征召去修建长城/陵墓/大运河，发现了工程中隐藏的秘密\",\n            \"你的发明创造被上官看中，要求你限期完成献给皇帝\",\n            \"被卷入了一场改变历史走向的宫廷政变\",\n            \"在战场上捡到了一件能改变战局的神秘兵器\",\n            \"被选中参与一项秘密的皇室任务\",\n            \"发现了一个关于朝代更替的惊天秘密\",\n            \"在科举考试中无意间得罪了权贵\",\n            \"被派遣到边疆处理民族冲突\",\n            \"在古墓中发现了前朝皇室的遗物\",\n            \"被迫参与了一场决定国运的重要谈判\",\n            \"在民间收集到了足以撼动朝廷的证据\",\n              \"奉始皇帝之命，成为徐福船队的一员，出海寻找仙山与长生不老药。\",\n\"身处长平，你必须在白起下令坑杀四十万赵卒之前，想办法活下去。\",\n\"公元前206年，你亲眼见证了项羽火烧阿房宫，并藏匿了宫中的一份重要图纸。\",\n\"作为刘邦的乡亲，在沛县起事时，你面临着加入他还是向官府告密的抉择。\",\n\"鸿门宴上，你是一名不起眼的侍者，目睹了项庄舞剑的惊险全程。\",\n\"你追随韩信，却在井陉口背水一战前，发现了军队的致命弱点。\",\n\"作为垓下的一名楚卒，在四面楚歌中，你考虑的是否要放下武器投降。\",\n\"作为吕后身边的侍从，你无意间听到了她处置戚夫人和刘如意的计划。\",\n\"在白登山，你作为一名汉军小卒，被匈奴围困在冰天雪地里七天七夜。\",\n\"王莽推行新政时，你作为一名地方小吏，需要处理因此而起的民间混乱与反抗。\",\n\"在昆阳，你亲眼目睹了刘秀率领十三骑冲阵，创造了以少胜多的奇迹。\",\n\"身为一名光武中兴时期的屯田兵，你开垦的土地下埋藏着前朝的宝藏。\",\n\"赤壁之战前夜，你收到了来自曹操阵营的密信，试图策反你所在的江东水军。\",\n\"在长坂坡，你护送着主公的家眷，在曹军的追杀中七进七出。\",\n\"作为华佗的弟子，你掌握了为关羽刮骨疗毒的核心技术，却因此被曹操猜忌。\",\n\"你在白帝城，作为刘备的亲信，亲耳听到了那句“如其不才，君可自取”的托孤遗言。\",\n\"作为诸葛亮的随从，你参与了七擒孟获的全过程，深刻理解了“攻心为上”的策略。\",\n\"街亭失守，你奉命前去传令命马谡撤退，却因意外在路上耽搁了。\",\n\"五丈原秋风瑟瑟，你看着丞相的将星即将陨落，手中握着能为他续命七日的七星灯。\",\n\"你身处高平陵，目睹了司马懿发动政变，曹魏的天下即将倾覆。\",\n\"作为一名竹林中的隐士，你常与“竹林七贤”饮酒作乐，却也知晓他们放浪形骸下的政治避祸。\",\n\"淝水之战中，你作为前秦军队的一员，听到了“风声鹤唳，草木皆兵”的传言，军心大乱。\",\n\"隋朝末年，你被迫加入瓦岗军，在李密的带领下劫富济贫，却也见证了他的多疑与败亡。\",\n\"玄武门之变当天，你是一名守卫，需要在李建成和李世民之间做出选择。\",\n\"作为辩机和尚的侍童，你保管着那本由高阳公主赠予、最终引发杀身之祸的《枕中记》。\",\n\"在安史之乱的马嵬坡，你目睹了禁军哗变，贵妃被赐死，皇帝仓皇出逃。\",\n\"你追随鉴真东渡，在第六次航行中，终于踏上了日本的土地。\",\n\"作为黄巢起义军的一员，你攻入了长安城，也见证了“冲天香阵透长安，满城尽带黄金甲”的盛景与随之而来的屠戮。\",\n\"南唐后主李煜亡国后，你作为他的故臣，在寂寥的汴京听他一遍遍吟诵“问君能有几多愁”。\",\n\"在陈桥驿，你亲眼见证了赵匡胤“黄袍加身”的全过程。\",\n\"杯酒释兵权当晚，你作为一名御厨，为石守信等大将烹饪了那场决定命运的晚宴。\",\n\"靖康之耻，你被金人掳至北方，亲眼目睹了徽、钦二帝的凄惨遭遇。\",\n\"你追随岳飞，即将收复开封，却在朱仙镇收到了十二道金牌。\",\n\"崖山海战，你抱着小皇帝，在陆秀夫的恸哭声中，看着他背负国祚跃入大海。\",\n\"明朝初年，你被卷入“胡蓝之狱”或“文字狱”，身家性命悬于一线。\",\n\"靖难之役中，你作为建文帝的亲信，在南京城破前，收到了他从秘密地道逃亡的指令。\",\n\"土木堡之变，你作为英宗的随驾侍卫，一同被瓦剌俘虏，在塞外苦寒之地求生。\",\n\"夺门之变，你作为于谦的下属，目睹了他被拥立的英宗冤杀，并写下“粉身碎骨浑不怕，要留清白在人间”。\",\n\"作为一名锦衣卫/东厂番子，你奉命调查一桩牵涉到朝廷重臣的惊天大案。\",\n\"作为李自成的部将，你攻破了北京城，却发现胜利的喜悦很快被权力的腐蚀所替代。\",\n\"你驻守在山海关，当李自成和多尔衮的军队同时兵临城下时，吴三桂向你征求开关的意见。\",\n\"扬州十日/嘉定三屠，你作为一名幸存者，从死人堆里爬了出来。\",\n\"你奉康熙之命，参与了平定三藩之乱，并卧底在吴三桂的阵营中。\",\n\"在文字狱最盛行的雍正朝，你因一首诗或一篇文章，被下了大狱。\",\n            \"随机生成\"\n        ]\n    },\n    \"蒸汽朋克\": {\n        \"identities\": [\n            \"发条人偶师\",\n            \"天空舰队的飞艇工程师\",\n            \"差分机黑客（分析机程序师）\",\n            \"炼金术侦探\",\n            \"报童兼地下情报员\",\n            \"使用蒸汽义肢的退役军人\",\n            \"反技术派系的“自然咏者”\",\n            \"随机生成\",\n            \"为贵族改装奢侈机械宠物的工匠\",\n            \"在天空之城表演的歌剧演员\",\n            \"齿轮教会的年轻祭司\",\n            \"在天空之城的底层区行医的黑市医生\",\n    \"驾驶着蒸汽动力泰坦的皇家卫队驾驶员\",\n    \"专门绘制未知空域航图的制图师\",\n    \"饲养并改装机械生物的驯兽师\",\n    \"行走于世间的最后一位炼金术士\",\n    \"能与机器的“灵魂”沟通的通感者\",\n    \"审判异端科技的铁腕裁判官\",\n    \"在工业废墟中讨生活的拾荒者\",\n    \"以太（Aether）航船上的水手\",\n    \"皇家钟楼的守时人\"\n        ],\n        \"openings\": [\n            \"在一场非法的机械角斗中醒来，发现自己的记忆芯片被替换，唯一的线索是口袋里的一枚奇特齿轮。\",\n            \"你发明的永动机模型被神秘组织盗走，对方留下了一朵仅在皇室空中花园才培育的黑玫瑰。\",\n            \n            \"作为一名天空警察，你在追捕臭名昭著的空贼时，飞艇意外坠入浮空岛的未知禁区。\",\n            \"收到了一张由纯金打造的邀请函，邀请你参加一场在万米高空的移动堡垒“巴别塔”上举行的晚宴。\",\n            \"为了给家人凑齐昂贵的发条心脏移植手术费，你接下了一个护送“禁忌炼金物品”的危险委托。\",\n            \"你正在与一位贵族小姐/少爷举行婚礼，一位驾驶着单人飞行翼的“不速之客”从天而降，声称你才是他/她的真爱。\",\n              \"城市的中央钟楼，那颗运转了三百年的“不息心脏”，毫无征兆地停摆了。\",\n    \"你从昏迷中醒来，发现自己被铁链锁在了一艘著名空贼飞艇的船锚上，而飞艇正在升空。\",\n    \"全频道突然播报一条紧急消息：你所在的天空之城正在失去浮力，预计三小时后将坠向地面。\",\n    \"一只精巧的黄铜机械鸟停在了你的窗台，它的腿上绑着一个微型密码筒，里面是向你的求救信。\",\n    \"议会刚刚通过法案，要求所有公民都必须将至少一个身体部件替换为官方指定的蒸汽义肢。\",\n    \"天空中由无数齿轮构成的太阳闪烁了一下，你在一瞬间看到了它背后……那片深邃、冰冷的真实星空。\",\n    \"家里的老旧自动人偶管家，突然在你耳边用生锈的声音低语道：“主人，他们发现我们了。”\",\n    \"以太之海掀起了前所未有的风暴，一些不属于机械造物的、柔软滑腻的奇异生物被冲上了浮岛的边缘。\",\n    \"你收到了一份匿名包裹，里面是一颗仍在跳动的水晶心脏，以及一张字条：“把它藏好，否则世界会因此重启。”\",\n    \"一座被认为是古代遗迹、早已停机的巨型城市守护者“歌利亚”，它的独眼亮起了红光，缓缓地站了起来。\",\n\"随机生成\"      \n]\n    },\n \n    \"诡秘修仙\": {\n        \"identities\": [\n            \"调查异常的“天机阁”底层修士\",\n            \"靠吞噬“诡异”来修行的魔道中人\",\n            \"供奉不可名状存在的邪神信徒\",\n            \"被污染的灵根拥有者\",\n            \"随机生成\",\n            \"专门绘制“镇邪符”的符师\",\n            \"研究“古神呓语”的疯癫学者\",\n            \"从禁地“归墟”中逃出的唯一生还者\"\n        ],\n        \"openings\": [\n            \"你在修炼中走火入魔，醒来后发现自己丹田里多了一个无法理解的、扭曲的活物。\",\n            \"随机生成\",\n            \"你所在的村庄为了祈求丰收，准备举行一场古老的祭祀，而你被选中成为献给山中“古神”的祭品。\",\n            \"师门下达了调查任务，一个偏远小镇的凡人全部失踪，只留下满地不断蠕动的黑色影子。\",\n            \"你偶然得到一本残破功法，修炼后修为大涨，但你开始在梦中听到来自群星之外的呼唤。\",\n            \"宗门大比上，你的对手在众目睽睽之下，身体融化、异变成了一滩不可名状的血肉怪物。\"\n        ]\n    },\n \n    \"全民领主\": {\n        \"identities\": [\n            \"绑定了“签到系统”的幸运儿\",\n            \"开局抽到唯一神话级兵种的欧皇\",\n            \"随机生成\",\n            \"选择了亡灵族，只能和骷髅作伴的独行者\",\n            \"专精种田与贸易的生活玩家\",\n            \"组建了大型公会的会长\",\n            \"被强大领主俘虏，被迫成为附属的玩家\"\n        ],\n        \"openings\": [\n            \"当全球所有人都被传送到这个世界时，你发现你的初始领地旁边，刷新了一座金矿和一只看起来不太友好的巨龙。\",\n            \"随机生成\",\n            \"别人开局都是一小块地和几个农民，而你的初始资源清单上写着：“一座破败的神庙和一名自称是“神”的失忆少女/少年”。\",\n            \"系统提示：你的领地受到了“混沌”的祝福，所有招募的单位都将发生意想不到的良性（或恶性）变异。\",\n            \"你发现你可以通过完成某个土著部落的奇怪任务，来获得他们的好感度和独有科技/兵种。\"\n        ]\n    },\n    \"经营建设\": {\n        \"identities\": [\n            \"初创企业家\",\n            \"咖啡馆老板\",\n            \"网店运营者\",\n            \"投资顾问\",\n            \"市场分析师\",\n            \"连锁店店长\",\n            \"商会会长\",\n            \"贸易商人\",\n            \"餐厅主厨\",\n            \"时装设计师\",\n            \"游戏开发者\",\n            \"落魄贵族继承了一块贫瘠的领地\",\n            \"宗门的外派管事\",\n            \"灾难后重建社区的负责人\",\n            \"星际 frontier 的殖民地总督\",\n            \"动物保护区的园长\",\n            \"魔法学校的校长\",\n            \"深海勘探队的队长\",\n            \"异世界餐馆的老板\",\n            \"刚刚继承破败领地的年轻领主\",\n            \"拥有巨龙盟友的王子/公主\",\n            \"掌管宗门财政的内门长老\",\n            \"拥有“系统”辅助的穿越者国王/女王\",\n            \"建立了横跨数个位面的商业帝国的会长\",\n            \"即将统一大陆的王国统治者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"继承了一家濒临破产的家族企业\",\n            \"获得了一笔神秘的创业资金\",\n            \"发现竞争对手在使用不正当手段\",\n            \"被挖角到一家刚成立的科技公司\",\n            \"在商业展会上遇到了改变命运的合作伙伴\",\n            \"接手了一个看似毫无价值的废弃项目\",\n            \"被卷入了一场商业间谍战\",\n            \"意外获得了一个具有巨大潜力的专利技术\",\n            \"在经济危机中寻找企业转型的机会\",\n            \"意外继承了一笔巨额遗产，但必须经营好指定的产业才能持续获得\",\n            \"被流放到边疆，要求一年内上缴指定数额的赋税\",\n            \"飞船坠毁，你成为幸存者的领袖，需要建立营地等待救援\",\n            \"被委以重任，负责重建一个被摧毁的著名地标/门派\",\n            \"捡到了一个能连接万界的商店系统，需要进货开店\",\n            \"获得了一个能进入梦境的能力，开始经营一家为人解忧的梦境事务所\",\n            \"“万界建国系统”已绑定，初始资源为三个哥布林和一个漏风的茅草屋。\",\n            \"你通过一场政治联姻，获得了一片贫瘠但拥有巨大潜力的土地和一位对你充满敌意的美丽伴侣。\",\n            \"你的宗门遭遇大劫，作为唯一的继承人，你需要从零开始重建山门。\",\n            \"随机生成\"\n        ]\n    },\n    \"同人衍生\": {\n        \"identities\": [\n             \"(三体) 被联合国选中的新任“面壁者”\",\n    \"(三体) “地球三体组织”的一名科学家，等待着主的降临\",\n    \"(三体) 威慑纪元手握引力波宇宙广播开关的“执剑人”\",\n    \"(三体) 掩体纪元，生活在地球深处地下城中的居民\",\n        \"(三体) 人类舰队的一名舰长，面对着即将到来的水滴\",\n    \"(三体) 潜伏在人类中的“破壁人”，负责破解面壁者的计划\",\n    \"(EVA) NERV总部的普通技术员，负责EVA机体的日常维护\",\n    \"(EVA) SEELE议会的一名秘密成员，知晓“人类补完计划”的真相\",\n    \"(EVA) 居住在第三新东京市的普通学生，对频繁的“陨石”来袭习以为常\",\n           \"(EVA) EVA初号机/零号机/二号机的指定驾驶员（适格者）\",\n    \"(EVA) NERV的作战部长，直接在前线指挥战斗\",\n    \"(宝可梦) 刚刚从博士那里领到初始宝可梦的新人训练家\",\n    \"(宝可梦) 火箭队的一名底层小兵，职责是在常青森林捕捉波波和小拉达\",\n    \"(宝可梦) 专精龙系/幽灵系的道馆馆主，等待着有潜力的新人前来挑战\",\n    \"(宝可梦) 当地的冠军或四天王之一，站在地区联盟的顶端\",\n    \"(宝可梦) 精通培育的饲育家/研究宝可梦生态的大木博士的助手\",\n    \"(生化危机) 浣熊市爆发丧尸潮时的一名幸存警察/市民\",\n    \"(生化危机) 保护伞公司的一名研究员，良心发现决定带着病毒原型叛逃\",\n        \"(生化危机) S.T.A.R.S.阿尔法小队的精英成员\",\n    \"(生化危机) 一个被植入G病毒/普拉卡寄生虫的强大生化兵器\",\n    \"(进击的巨人) 调查兵团的新兵，即将参与第一次九死一生的墙外调查\",\n    \"(进击的巨人) 马莱的一名艾尔迪亚“荣誉马莱人”战士候补生\",\n    \"(进击的巨人) 九大智慧巨人（始祖/进击/战锤等）的当前继承者\",\n    \"(进击的巨人) 驻扎兵团或宪兵团的一名士兵，生活在巨壁的庇护之下\",\n    \"(鬼灭之刃) 刚刚通过最终选拔，拿到属于自己的第一把日轮刀的鬼杀队新人\",\n    \"(鬼灭之刃) 十二鬼月中新晋的下弦之鬼，渴望着无惨大人的“血”\",\n    \"(鬼灭之刃) 鬼杀队九柱之一，拥有自己独特的呼吸法\",\n    \"(鬼灭之刃) 十二鬼月中的上弦，蔑视着所有鬼杀队剑士\",\n    \"(鬼灭之刃) 锻刀村的刀匠，即将为一位“柱”打造新的日轮刀\",\n    \"(英雄联盟/双城之战) 生活在底城祖安的炼金术士\",\n    \"(英雄联盟/双城之战) 生活在皮尔特沃夫的执法官\",\n    \"(赛博朋克2077/边缘行者) 夜之城的传奇佣兵，名字响彻“来生”酒吧\",\n    \"(赛博朋克2077/边缘行者) 荒坂公司反情报部的特工，全身都是顶级义体\",\n    \"(哈利·波特) 霍格沃茨的一名学院院长/教授\",\n    \"(哈利·波特) 凤凰社的核心成员/追随伏地魔的食死徒\",\n    \"(哈利·波特) 魔法部的傲罗，负责追捕黑巫师\",\n    \"(战锤40K) 一名普通的帝国星界军士兵，即将被投入对抗异形的绞肉机战场\",\n\n    \"(战锤40K) 一名强大的星际战士连长/智库馆长\",\n    \"(战锤40K) 一名拥有无上权力的帝国审判官，有权发动灭绝令\",\n    \"(战锤40K) 混沌星际战士的一员，正在发动“黑色远征”\",\n    \"(黑暗之魂/艾尔登法环) 寻求成为薪王/艾尔登之王的褪色者/不死人\",\n    \"(黑暗之魂/艾尔登法环) 一位防火女/指头女巫，引导着英雄的命运\",\n    \"(火影忍者) 某个忍村的“影”，背负着全村人的期望\",\n    \"(火影忍者) “晓”组织的正式成员，穿着标志性的黑底红云袍\",\n    \"(FATE系列) 参加圣杯战争的御主，手中握有三枚令咒\",\n    \"(FATE系列) 被召唤出的顶级英灵（Servant），如Saber或Archer\",\n    \"(JOJO的奇妙冒险) 拥有强大替身能力的主角团成员/反派替身使者\",\n    \"(JOJO的奇妙冒险) SPW财团的调查员，负责处理与替身使者相关的事件\",\n    \"(只狼) 侍奉着龙胤之子的独臂忍者，拥有死而复生的力量\",\n    \"(只狼) 苇名国的武士大将，为了守护国家不择手段\",\n    \"(女神异闻录5) 心之怪盗团的一员，拥有自己的Persona\",\n    \"(血源诅咒) 一名来到亚楠寻求血疗的异乡猎人\",\n    \"(最终幻想VII) 神罗公司的特种兵（SOLDIER）/“雪崩”组织的成员\",\n    \"(瑞克和莫蒂) 瑞克 C-137 的一个新冒险伙伴\",  \n     \"(仙剑三) 你是神树的一名看管者，那日，你看见夕瑶女神走下神树，她的袖中似乎藏着什么东西，而神树上最靠近她宫殿的那颗果实不见了。\",\n    \"(仙剑三) 你是蜀山上负责打扫锁妖塔的弟子，你总能看到你的师父徐长卿在塔前站了很久，尤其是在下雨天，他一站，便是一整个下午。\",\n    \"(仙剑三) 你是魔界的一名侍从，职责是为魔尊的宫殿擦拭器物。你发现，那把名为“炎波血刃”的武器，总比宫殿里任何东西都要光亮。\",\n    \"(仙剑三) 你是古藤林里的一只小妖，曾远远见过那位紫衣的女子三世都带着同一个男人来到林中，每一次，林里的那棵老人参精都会叹很长一口气。\",\n    \"(仙剑三) 你是雷州刺史云霆的贴身仆人，每日都要为他更换掉被电坏的床单与衣物。今天，他让你去城里最好的首饰铺，买一支凡人女子用的珠花。\",\n    \"(仙剑三) 你是天界的一名文书仙官，奉天帝之命，你抄录了神将飞蓬贬入轮回的旨意。墨迹干透后，你看见夕瑶女神在南天门站了一夜。\",\n    \"(仙剑三) 你是千年前姜国的一名宫廷绣娘，龙葵公主曾让你为她和太子缝制一样的广袖流仙裙。城破前，公主让你把其中一件悄悄送到城外的当铺里。\",\n    \"(仙剑三) 你由夕瑶洒落在人间的一捧神树之叶化成，没有魂魄，却总在梦里看到一个白衣的女神和一个红衣的姑娘。你循着这股气息，来到了一家叫做‘永安当’的当铺前。\",\n    \"(仙剑三) 你是酆都的一名小鬼差，火鬼王得到了火灵珠后，下令全城寻找一个会使用她原创“摄魂大法”的凡人，好像叫什么……景天。\",\n    \"(仙剑三) 你是被打入锁妖塔的天妖皇的旧部，在这里被困了数百年。近日，塔里新进来一个凡人剑客，他身上有你曾经最敬畏的、神将军飞蓬的气息。\",\n    \"(仙剑三) 你是霹雳堂的一名弟子，自从少堂主罗如烈从邪剑仙那里得到新的力量后，他看你的眼神，让你觉得比堂里的任何一种毒药都更冷。\",\n    \"(仙剑三) 你是安溪村的一位普通村民，常常看到镇上那个叫景天的年轻人，对着一块破碎的玉佩发呆，就好像那是什么绝世珍宝一样。\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"随机生成。必须将原著信息记录在世界设定中\"\n        ]\n    },\n\n    \"大逃杀与对抗\": {\n        \"identities\": [\n            \"被投入战场的死囚\",\n            \"为了巨额奖金参赛的雇佣兵\",\n            \"被强制参加“游戏”的普通学生\",\n            \"混入其中的恐怖袭击策划者\",\n            \"一场即将发生的恐怖袭击的参与者\",\n             \"一场即将发生的恐怖袭击的对抗者\",\n            \"负责清除出格玩家的“监管者”\",\n            \"某个强大队伍的队长\",\n                \"意识被上传到虚拟战场的“数据体”\",\n    \"从上一次“轮回”中带着记忆归来的幸存者\",\n    \"能与死者短暂沟通的通灵师\",\n    \"被公众投票决定生死的真人秀明星\",\n    \"为了给家人治病而自愿参赛的绝症患者\",\n    \"身体经过大量机械改造的赏金猎人\",\n    \"坚信这场“游戏”是人类进化之路的狂信徒\",\n    \"被植入了虚假记忆的克隆人\",\n    \"可以献祭生命力来施展禁术的魔法师\",\n    \"操控着无人机蜂群进行战斗的“蜂后”\",\n    \"携带“病毒”，能感染并同化其他玩家的“母体”\",\n    \"唯一目标不是存活，而是“杀死所有人”的特殊玩家\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"你从陌生的空投仓中醒来，手环上显示着倒计时和“存活到最后”的指令。\",\n            \"你的小队任务是在这场百人混战中，刺杀藏在参赛者中的某国政要。\",\n            \"你被告知这是一场反恐演习，但第一颗射向你的子弹却是实弹。\",\n            \"你所在的阵营即将战败，高层决定启动“焦土计划”，而你就是执行者。\",\n             \"天空裂开一道巨大的缝隙，古老神祇的虚影从中冷漠地凝视着整个战场。\",\n    \"手环上的“剩余人数”统计突然开始疯狂上涨。\",\n    \"重力毫无征兆地发生逆转，所有人与废墟一起开始向着血红色的天空坠落。\",\n \n    \"战场被一层大雾笼罩，所有电子设备失灵，收音机里只有一个声音在循环播放：“我们之中，有一个不是人。”\",\n    \"你发现了一具和你长得一模一样的尸体，他的手环上显示“游戏结束”。\",\n \n    \"游戏突然暂停，一个声音宣布将进行一场人气投票，票数最低者将被立即“清除”。\",\n    \"你躲藏的房间里，一个本该是背景的NPC（非玩家角色）突然回头对你眨了眨眼，用口型说：“快醒来。”\",\n    \"一场强制所有幸存者参加的“真心话大冒险”开始了，系统提示：说谎者，死。\",\n    \"你捡到一本破旧的日记，上面详细记录了接下来一小时内，将要死去的五个人的名字、时间、和死法。第一个就是你的队友。\",\n    \"游戏规则突然变更，新的胜利条件是：“保护当前积分最高的人活到最后。” 而那个人，就是你。\",\n     \"你醒来时，发现身边队友的尸体尚有余温，而那把致命的武器就在你的手中。\",\n    \"所有人的名字都消失了，取而代之的是一个代表他们“原罪”的称号，你的称号是“傲慢”。\",\n    \"死亡的玩家并没有消失，而是变成了在战场上游荡的、攻击活人的怨灵。\",\n    \"战场被划分为七个区域，分别对应“七宗罪”，每个区域的规则都与相应的罪行有关。\",\n    \"天空中的月亮突然碎裂，每一块碎片坠落地面，都生成了一头强大的神话怪物。\",\n    \"一个声音突然在你脑中响起：“你是我们安插的卧底，代号‘衔尾蛇’，这是你的第一个任务……”\",\n    \"你发现自己无法伤害某一个特定的对手，仿佛你们之间被一条看不见的锁链连接着。\",\n    \"一个巨大的、戴着墨镜的橡皮鸭子出现在战场中央，并开始缓慢而坚定地追杀离它最近的人。\",\n            \"随机生成\"\n        ]\n    },\n    \"基金会与克苏鲁神话\": {\n        \"identities\": [\n            \"SCP基金会的机动特遣队成员\",\n            \"被迫参与实验的D级人员\",\n            \"试图揭露真相的“真相之蛇”成员\",\n            \"研究禁忌知识的密斯卡托尼克大学教授\",\n            \"崇拜旧日支配者的邪教祭司\",\n            \"被不可名状之物寄生的普通人\",\n                \"基金会伦理委员会的审查员\",\n    \"O5议会成员的直属特工\",\n    \"模因与反概念部的高级研究员\",\n    \"专门负责记忆删除与现场清理的善后人员\",\n    \"继承了印斯茅斯血脉的返乡者\",\n    \"因窥探时间“角度”而被廷达罗斯之猎犬追杀的人\",\n    \"沉迷于《黄衣之王》剧本的戏剧演员\",\n    \"可以在“幻梦境”中穿行的幻梦者\",\n    \"专门为超自然势力提供情报与服务的“破釜酒馆”酒保\",\n    \"为“M.C.D.”拍卖行工作的异常物品鉴定师\",\n    \"在时空错乱地带（如SCP-3008）中挣扎求生的幸存者\",\n    \"破碎之神教会的机械神甫\",\n    \"欲肉教的血肉构造师\",\n    \"负责抓捕与审讯渗透者的基金会内部事务部特工\",\n    \"全球超自然联盟（GOC）的突击队员\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"你所在的Site-19站点收容失效警报响起，任务是回收失控的收容物品。\",\n            \"作为D级人员，你被命令进入一个充满异常的设施进行探索，但你的真实身份是混沌分裂者的卧底。\",\n            \"你在祖父的遗物中，找到了一本用非人语言写成的日记，记录了通往“拉莱耶”的航线。\",\n            \"你所在的小镇开始举行一场诡异而古老的祭典，而你将被当做献给“深潜者”的祭品。\",\n              \"你在南极科考站的钻探样本中，发现了一块包裹着非欧几里得几何建筑的远古坚冰。\",\n    \"你买到了一本旧书《黄衣之王》，在读完第一幕后，窗外出现了一个披着黄色袍子的人影。\",\n    \"记忆删除程序执行到一半突然中断，两种截然相反的记忆在你脑中爆发了激烈的冲突。\",\n    \"墙角的角度似乎变得不再是九十度，一种非人的、犬吠般的嘶吼声从几何的夹缝中传来。\",\n    \"通过天文望远镜观测木星时，你在大红斑的风暴中，看到了一只巨大、缓缓转动的眼睛。\",\n    \"Site-19的广播突然响起：“警告，模因抹杀触媒已启动，请所有人员立刻闭眼。”。\",\n    \"你的皮肤之下开始出现细密的鳞片，每晚都会梦到一座被大海淹没的城市在召唤你回家。\",\n    \"每月一次，你都会失去24小时的记忆，醒来后口袋里会多出一件无法理解的物品。\",\n    \"一场诡异的浓雾笼罩了整座城市，所有出城的路都通回了市中心广场的雕像前。\",\n    \"基金会本该处决你的每月例行程序被临时取消，一架黑色的直升机停在了操场上，专程等你。\",\n    \"你所在的深海潜艇声呐探测到了一个比航空母舰还要庞大的生物轮廓，它正在从沉睡中苏醒。\",\n    \"你醒来后发现自己身处一个无尽的、没有员工的宜家超市，而天花板上的灯刚刚熄灭了。\",\n    \"密斯卡托尼克大学图书馆的禁书区里，你找到了一份同时被基金会和欲肉教列为最高机密的上古文献。\",\n    \"你收到了一个包裹，里面只有一部老式手机和一条信息：“别动，你已经被[数据删除]盯上了。”\",\n    \"一场血红色的雨从天而降，被雨淋到的人都开始疯狂地攻击身边的一切，你正好躲在一间电话亭里。\",\n            \"随机生成\"\n        ]\n    } \n\n    };\n\n    // 随机选择函数\n    const getRandomOption = (optionsArray) => {\n        if (!optionsArray || optionsArray.length === 0) return '';\n        return optionsArray[Math.floor(Math.random() * optionsArray.length)];\n    };\n\n \n    if (typeof assaData === 'undefined') {\n        var EvStat= getDataWithFallback(\"stat_data\");\n    }\n     var currentLocationTitle = _.get(EvStat, 'user_character.current_location[0]', '');\n\n        var noCheckZones = ['个人空间', '主神大厅', '训练场','主神空间','家'];\n\n    if (typeof currentLocationTitle === 'string' && noCheckZones.some(zone => currentLocationTitle.includes(zone))) {\n        // 在安全区内\n        \n        if (version < 6) {\n            // version < 6 时，使用新的四池随机逻辑\n            \n            // 1. 先确定世界类型\n            let finalType = getRandomOption(worldTypes);\n            \n            // 2. 根据确定的世界类型，获取对应的身份和开局选项\n            const detailSet = worldDetailsDatabase[finalType] || { identities: [], openings: [] };\n            \n            // 3. 确定其他细节\n            let finalTone = getRandomOption(taskTones);\n            let finalIdentity = getRandomOption(detailSet.identities);\n            let finalOpening = getRandomOption(detailSet.openings);\n            \n            // 4. 组合成一句话\n            selectedTaskType = `若用户未指定任务世界，则下一个任务世界的世界基调为\"${finalTone}\"，世界类型为\"${finalType}\"，初始身份为\"${finalIdentity}\"，开局为\"${finalOpening}\"。若用户已指定任务世界类型，则按照用户指定的类型生成。`;\n            \n            \n        } else {\n            // version >= 6 时，不随机，保持空白\n            selectedTaskType = \" \";\n             \n        }\n \n\n    } else {\n        // 在任务世界\n        selectedTaskType = \" \";\n \n    }\n \n_%>\n<%= selectedTaskType %>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":101,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":68,"displayIndex":62,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"69":{"key":[],"keysecondary":[],"comment":"mod:资源条-求生本能-开","content":"{{setvar::auto_consume_items::true}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":69,"displayIndex":63,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"70":{"key":[],"keysecondary":[],"comment":"mod:资源条-求生本能-关","content":"{{setvar::auto_consume_items::false}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":70,"displayIndex":64,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"71":{"key":[],"keysecondary":[],"comment":"🔰设定强调、分阶段好感强调（无则不占token）","content":"<%_\n    function getDataWithFallback_chat(varName) {\n        // 先尝试从 getLocalVar 获取\n        let data = getLocalVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n\n    /**\n     * @type {GameData}\n     */\n    if (typeof assaData === 'undefined') {\n        var assaData = getDataWithFallback_chat(\"assa_data\");\n    }\n\n    // 获取所有潜在的角色数据来源\n    var teamInfo = _.get(assaData, 'global_set.小队信息', {});\n    var globalNpcs = _.get(assaData, 'global_set.npc', {});\n    var worldNpcs = _.get(assaData, 'world_set.npc', {});\n\n    // 合并所有角色数据\n    var allCharactersData = Object.assign({}, worldNpcs, globalNpcs, teamInfo);\n\n    // 获取好感度规则中心\n    var favorabilityRules = _.get(assaData, 'global_set.分阶段好感', {});\n\n    // 准备收集角色名和标题的对象数组\n    var titlesList = [];\n\n    // 遍历所有角色\n    for (const charname in allCharactersData) {\n        const characterData = allCharactersData[charname];\n        const charRules = favorabilityRules[charname];\n\n        if (characterData && typeof characterData === 'object' && charRules) {\n            // 检查是否应该显示\n            let rawShowValue = _.get(charRules, '_showInEJS');\n            const shouldShowInEJS = !(rawShowValue === false || rawShowValue === 'false');\n\n            if (shouldShowInEJS) {\n                const favorabilityValue = Number(_.get(characterData, '好感度'));\n\n                if (!isNaN(favorabilityValue)) {\n                    // 获取所有阶段键并排序\n                    const stageKeys = Object.keys(charRules)\n                                            .filter(key => !key.startsWith('_'))\n                                            .map(Number)\n                                            .sort((a, b) => a - b);\n\n                    if (stageKeys.length > 0) {\n                        // 找到当前好感度对应的阶段\n                        const currentStageKey = stageKeys.find(key => favorabilityValue <= key) ?? stageKeys[stageKeys.length - 1];\n\n                        if (currentStageKey !== undefined) {\n                            let descriptionText = charRules[currentStageKey.toString()];\n                            \n                            if (descriptionText && typeof descriptionText === 'string') {\n                                // 提取第一行标题（去除【】符号）\n                                const lines = descriptionText.split('|');\n                                if (lines.length > 0) {\n                                    const firstLine = lines[0].trim();\n                                    // 移除【】符号\n                                    const title = firstLine.replace(/【|】/g, '');\n                                    \n                                    if (title) {\n                                        titlesList.push({\n                                            name: charname,\n                                            title: title\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // 构建最终输出\n    var finalOutput = '';\n    if (titlesList.length > 0) {\n        // 构建 JSON 格式的字符串数组\n        const jsonArray = titlesList.map(item => `\"${item.name}\":\"【${item.title}】\"`).join(',');\n        finalOutput = `同时，必须在正文中体现以下npc_attitude：[${jsonArray}]。\n同时，必须遵循并内化他们在memory中的npc档案中的设定和记忆，其关键记忆可以在合适的时候被npc自然提起，以增强故事连贯性。禁止人物ooc和让npc遗忘关键记忆。`;\n    }\n%>\n\n必须在正文中严格遵循并内化memory中已记录的所有设定和内容。\n<%= finalOutput %>\n<%_\n    var world_role= String(getLocalVar(\"world_version\", '主神空间'));\n_%>\n<%_ if(world_role=== '末日'){ _%>\n核心原则：\n- 避免剧情过于拖沓\n- 避免事件进展缓慢  \n- 严格限制设定边界，禁止设定发散\n\n末日设定限制：\n1. 末日只是末日 - 聚焦于当前具体的灾难类型（如：极寒、干旱、瘟疫、核冬天等自然/人为灾难）\n2. 禁止引入的元素：\n   - 任何超自然力量（异能、魔法、超能力）\n   - 任何科幻高概念（高维生物、虫族、外星文明、时空穿越）\n   - 任何玄幻元素（修仙、灵气、神秘力量）\n   - 任何超出当前科技水平的黑科技\n3. 允许的元素：\n   - 真实的人性表现（求生、恐惧、绝望、希望、背叛、互助）\n   - 合理的科技应用（基于现有科技的延伸）\n   - 资源争夺、社会秩序崩溃、幸存者组织\n   - 环境变化带来的具体挑战\n\n叙事要求：\n保持末日设定的真实感和压迫感，所有事件都应该基于已确立的灾难逻辑，不添加新的超规格设定。\n<%_}_%>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":2,"position":4,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":71,"displayIndex":65,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"72":{"key":[],"keysecondary":[],"comment":"手动mod:npc pro2(简单事件记忆)-开启即是覆盖","content":"<%_\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\nvar is_private_chat = getLocalVar(\"private_chat\", \"false\");\nvar contactable_tag = \"\";\nif(String(is_private_chat) === \"true\"){\n    contactable_tag = \", 可联系:true/false //是否加上好友,决定了是否可以进行私聊\";\n}\n\n// -- 数据和版本获取部分 --\nfunction getDataWithFallback(varName) {\n    let data = getMessageVar(varName);\n    const isValid = (d) => {\n        if (d === null || d === undefined) return false;\n        if (typeof d === 'object') {\n            if (Array.isArray(d)) return d.length > 0;\n            return Object.keys(d).length > 0;\n        }\n        return true;\n    };\n    if (!isValid(data)) {\n        data = getLocalVar(varName);\n    }\n    if (!isValid(data)) {\n        data = {};\n    }\n    return data;\n}\n\n// 获取 assaData\nif (typeof assaData === 'undefined') {\n    var assaData = getDataWithFallback(\"assa_data\");\n}\n\n// 获取世界版本号\nif (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\") || 1);\n}\n\n// -- 核心逻辑更新部分 --\n// 新函数:筛选有好感度字段的NPC\nconst getNPCsWithFavorability = (npcObj) => {\n    if (!npcObj || typeof npcObj !== 'object' || Object.keys(npcObj).length === 0) {\n        return null;\n    }\n    \n    const npcsWithFav = [];\n    for (const [name, data] of Object.entries(npcObj)) {\n        // 检查NPC数据中是否包含好感度相关字段\n        if (data && typeof data === 'object' && \n            (data.hasOwnProperty('好感度') || \n             data.hasOwnProperty('favorability') || \n             data.hasOwnProperty('好感'))) {\n            npcsWithFav.push(name);\n        }\n    }\n    \n    return npcsWithFav.length > 0 ? npcsWithFav.join(' ') : null;\n};\n\n// 根据版本号决定使用的名称\nconst partyKeyName = (version === 6) ? \"群员信息\" : \"小队信息\";\n\n// 要检查的路径和显示名称\nconst pathsToShow = [\n    {\n        label: \"global_set.npc\",\n        data: getNPCsWithFavorability(assaData?.global_set?.npc)\n    },\n    {\n        label: `global_set.${partyKeyName}`,\n        data: getNPCsWithFavorability(assaData?.global_set?.小队信息)\n    },\n    {\n        label: \"world_set.npc\",\n        data: getNPCsWithFavorability(assaData?.world_set?.npc)\n    }\n];\n\n// 创建输出数组\nconst outputLines = [];\nfor (const pathInfo of pathsToShow) {\n    if (pathInfo.data) {\n        outputLines.push(`${pathInfo.label}: ${pathInfo.data}`);\n    }\n}\n_%>\n memory.set(\"npc_record_rules\", {\n  desc: \"Standardized format for NPC data.\",\n  init: {\n     full_format: memory('path', '${npc_name}', ${npc_data_object//紧凑json格式}) // For important NPCs,\n    simple_format: memory('path', 'npc_name', '{'简介':'${desc_string}','属性':'【attr:val;skill:val】' <%= getLocalVar('world_other_tag','') %>}') // For minor NPCs,\n    required_fields: [\n身份: \"string\", 好感度: \"number // range[-100, 100] 该人物对<user>的好感度。根据实际情况酌情更新，上升幅度极低，且会上下波动\"<%= contactable_tag %><%= getLocalVar('world_other_tag','') %>,相关设定: {//key为简要概括，value为具体描述,e.g.,  `{\"行为模式\":\"xxx\"}`} ,对<user>印象:{//key为tag，value为简短desc},关键记忆:{//key为唯一index:num},事件:{当前状态:\"string\",\"当前想法:\"string\"},\n]\n<%_ if (version != 7) { _%>\n//只有【<%= player_role %>】还需要在身份中记录【<%= player_role %><%= tier_role %>:xxx】，土著不记录\n<%_ } _%>\n  },\n  data_structure: {\n    key: 'NPC姓名作为唯一标识符',\n    value: 'Compact JSON格式，包含所有必需字段',\n    nesting: '支持多层嵌套结构，便于复杂数据管理'\n  },\n<% if (outputLines.length > 0) { %>\n字段说明:\n事件://禁止和memory系统中已经记录过的事件内容重复\n  当前状态: 目前的情景，包含动作、穿着与位置\n  当前想法: 体现角色最真实的想法，心理可能和语言行为完全相反，不避讳下流或阴暗的内容。\n`,\nupdate_mogic:\n每次LLM生成响应后，在<memoryAnalyze>中，LLM必须执行以下步骤：\n1.  识别核心活跃NPC： 识别重要NPC名称列表。这些是需要进行深度模拟推断的核心活跃NPC。对于仅边缘提及或不影响剧情的NPC，直接忽略。原则上一次最多同时更新三个角色。\n2.  分析核心活跃NPC的自主状态来更新'事件'字段：\na.  决定当前状态与位置：  推理 该NPC此刻最可能在做什么以及最可能在哪里。\nb.  揣测内心状态与思考基调： 基于最近经历、关键记忆，揣测该NPC当前的主要的思考方向。\n3.  更新'关键记忆'字段： 如果当前LLM的输出中包含某个新的、对该NPC有重要影响的事件：\n['学习到的经验教训'、'和他人的约定'、'承诺（无论是明说的还是暗下决心的）'、'经受的创伤/美好'、'感知到的重要发言（可以是当前npc说的，也可以是<user>说的。若有，记录时必须引用原语句）']\n等，则简要概括，且**发生该事件的时机（正处于什么剧情节点）**必须完整记录。\n更新时，**酌情加入记忆点，如果没有重要影响事件则不新增**。关键记忆条目格式严格为 \"序号\":\"具体内容\"，禁止添加[新增]、[更新]、[删除]等任何前缀标记。\n注意！你必须保持格式正确和最简洁用语，保持在30字内，重要原话不省略。**禁止**记录流水账、不够重要的内容。\n格式如下：\n核心活跃NPC check - [列出识别出的NPC名称](不用在<memoryAnalyze>中输出分析内容)\n然后在<updateMemory>更新对应的所有信息和对应字段到NPC  data中。最后，在更新关键npc的事件时，别忘了检查npc好感是否有对应变动。好感度的上升应克制，可以使用小数`,\nexample:[\nmemory('global_set.npc.npc姓名.对<user>印象', '冷淡', '冷淡的人，令人捉摸不透'); //单独更新一条对<user>印象\nmemory('global_set.npc.npc姓名.关键记忆', '1', '在七日选拔中，<user>和我约定要好好活下去'); \nmemory('global_set.npc.npc姓名', '事件', '{...}'); //完整更新整个事件对象。更新的时候不要更新整个npc对象！\n],\n});\n更新路径必须准确，以下是各路径和对应的npc：\n<%   for (const line of outputLines) { %>\n<%- line %>\n<%   } %>\n<% } else { %>\n（当前无核心npc）\n<% } %>","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":91,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"npc信息","groupOverride":true,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":72,"displayIndex":66,"triggers":[]},"73":{"key":[],"keysecondary":[],"comment":"🔰记忆更新cot-实验","content":"meta.set('rules', {\n  scope: \"仅扫描本轮输出内容更新memory，**禁止**从历史更新\",\n  syntax: \"Compact JSON + instructional language\",\n  data_purity: \"纯数据无AI思考，**禁止**转义符含换行。JSON用单引号包裹。数值必须具体，?≡0\",\n  format_strictness: \"严格遵循指定格式\",\n  no_old_value: \"FATAL: memory()禁止含旧值，直接覆写\",\n  time_record: \"相对时间→绝对时间(base_date±offset)\"\n});\n<%_\n// 封装的数据获取函数 - 避免重复定义\n \n    function getDataWithFallback(varName) {\n        // 先尝试从 getMessageVar 获取\n        let data = getMessageVar(varName);\n       \n        // 内联数据验证：检查是否为null、undefined，且如果是对象要有内容\n        const isValid = (data) => {\n            // 检查是否为 null 或 undefined\n            if (data === null || data === undefined) {\n                return false;\n            }\n            \n            // 如果是对象类型，检查是否有内容\n            if (typeof data === 'object' && data !== null) {\n                // 如果是数组，检查长度\n                if (Array.isArray(data)) {\n                    return data.length > 0;\n                }\n                // 如果是普通对象，检查是否有属性\n                return Object.keys(data).length > 0;\n            }\n            \n            // 其他类型（字符串、数字、布尔值等）只要不是 null/undefined 就认为有效\n            return true;\n        };\n        \n        // 如果数据不符合要求，从 getLocalVar 获取\n        if (!isValid(data)) {\n            data = getLocalVar(varName);\n        }\n        \n        return data;\n    }\n\nif (typeof version === 'undefined') {\n    var version = Number(getLocalVar(\"world_version\", 1));\n}\nif (typeof EvStat === 'undefined') {\n    var EvStat = getDataWithFallback(\"stat_data\");\n}\nif (typeof assaData === 'undefined') {\n    var  assaData = getDataWithFallback(\"assa_data\");\n}\nif (typeof characterData === 'undefined') {\n    var characterData = getDataWithFallback(\"play_character_data\");\n}\n\nvar world_level = _.get(EvStat, 'world_shard.level', '中魔')[0];\nvar world_level_describe = '';\nvar levels = '';\nvar world_max_enegy = 3;\nif (world_level === '无') {\n    world_max_enegy = 3;\n    world_level_describe = '普通世界';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\"\n    `;\n} else if (world_level === '低') {\n    world_max_enegy = 5;\n    world_level_describe = '如金庸武侠世界，凡人界面，普通物理规则';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\"\n    `;\n} else if (world_level === '中') {\n    world_max_enegy = 7;\n    world_level_describe = '存在一定超凡力量，影响有限范围';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\"\n    `;\n} else if (world_level === '高') {\n    world_max_enegy = 12;\n    world_level_describe = '强大超凡力量，区域性现实扭曲';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\",\n        \"8-12\": \"神明规则级危机（神明干预、世界规则扭曲）\"\n    `;\n} else if (world_level === '神话') {\n    world_max_enegy = 16;\n    world_level_describe = '神明或宇宙级力量，规则彻底扭曲';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\",\n        \"8-12\": \"神明规则级危机（神明干预、世界规则扭曲）\",\n        \"13-16\": \"本源宇宙级危机（宇宙规则崩坏、存在威胁）\"\n    `;\n} else {\n    world_max_enegy = 7;\n    world_level_describe = '存在一定超凡力量，影响有限范围';\n    levels = `\n        \"1\": \"无风险/日常情况\",\n        \"2\": \"轻微凡人危机（小动物攻击、社交困境）\",\n        \"3\": \"严重凡人危机（重伤/死亡、严重环境危险）\",\n        \"4-5\": \"基础超凡危机（被动超凡现象，局限于个体/小范围，普通人可应对）\",\n        \"6-7\": \"进阶超凡危机（主动超凡攻击，威胁较大范围，需专业超凡力量）\"\n    `;\n}\n\n \nvar currency_point = _.get(characterData, '货币段.积分[0]', 0);\nvar currency_zhixian = JSON.stringify(_.get(characterData, '货币段.支线剧情', ''));\nvar currency_xp = _.get(characterData, '货币段.经验值[0]', 0);\nvar energy_pool = JSON.stringify(_.get(characterData, '衍生属性段.能量池', ''));\n \nvar defense_impact = _.get(characterData, '衍生属性段.防御.伤害减免.冲击[0]', 0);\nvar defense_lethal = _.get(characterData, '衍生属性段.防御.伤害减免.致命[0]', 0);\nvar defense_aggravated = _.get(characterData, '衍生属性段.防御.伤害减免.恶性[0]', 0);\nvar save_fortitude = _.get(characterData, '衍生属性段.豁免检定基础.强韧[0]', 0);\nvar save_reflex = _.get(characterData, '衍生属性段.豁免检定基础.反射[0]', 0);\nvar save_will = _.get(characterData, '衍生属性段.豁免检定基础.意志[0]', 0);\nvar speed = _.get(characterData, '衍生属性段.速度.基础速度[0]', 0);\nvar initiative = _.get(characterData, '衍生属性段.先攻[0]', 0);\nvar world_role = getLocalVar(\"world_role\", \"\");\nvar player_role = getLocalVar(\"player_role\", \"轮回者\");\nvar tier_role = getLocalVar(\"tier_role\", \"\");\nvar profession_role = getLocalVar(\"profession_role\", \"\");\nvar point_role = getLocalVar(\"point_role\", \"\");\nvar zhixian_role = getLocalVar(\"zhixian_role\", \"\");\nvar xp_role = getLocalVar(\"xp_role\", \"\");\nvar the_created = _.get(EvStat, 'the_created.name[0]', \"\");\nvar if_bg= getLocalVar(\"bg_source\", \"false\");\n \n // 使用 var 或直接赋值到全局对象\n    var loadTextConfig = async function(filename = 'config.txt') {\n        const baseUrl = 'https://longlivecanc.github.io/god_space';\n        const fullUrl = `${baseUrl}/${filename}?v=${new Date().getTime()}`;\n        \n        try {\n            console.log(`正在加载文本文件: ${fullUrl}`);\n            const response = await fetch(fullUrl);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP错误: ${response.status} ${response.statusText}`);\n            }\n            \n            const textContent = await response.text();\n            console.log('文本文件加载成功');\n            console.log(`文件大小: ${textContent.length} 字符`);\n            \n            return textContent;\n            \n        } catch (error) {\n            console.error('加载文本文件失败:', error.message);\n            \n            const fallbackConfig = `PrimarySceneType:[拱门建筑室内,现代建筑群,废土,现代城市街道,古代西方城镇,古代中国城市,西方市场,校园,森林,海洋,河流,草原,雪原,水下,简约房间,豪华房间,中式客栈,现代大堂,走廊,实验室,洞穴,监狱,星舰内部,浮空岛,辐射废土,赛博朋克,外太空,火山地带,沙漠绿洲,竹林,瀑布,峡谷,古代遗迹,蒸汽朋克工厂,魔法图书馆,水晶洞穴,樱花林,古代竞技场,冰川,沼泽,天空之城,地下城,禅意庭院,科幻实验室,废弃游乐园,热带雨林,月球表面],\nTimeAndLight: [BrightDay,OvercastDay,GoldenHour,DeepNight],\nAtmosphereAndCondition: [Peaceful,Decay,Dynamic]`;\n            \n            console.log('使用备用配置');\n            return fallbackConfig;\n        }\n    };\n\nconst configText = await loadTextConfig('config.txt');\n\n_%>\nmemory.set('output_system', {\n  desc: \"强制序列: Analyze→Update\",\n  \n  variable_analyze: {\n    tag: '<variableAnalyze>',\n    format: '- ${check}: ${result}',\n    checks: {\n      time: \"逻辑推进时间。日期仅跨0点推进\",\n      progress: \"检查world_shard.task.progress\",\n      scene_img: {\n        format: 'Type-Time-Atmosphere',\n        tags: {\n          Type: [拱门建筑室内,现代建筑群,废土,现代城市街道,...,月球表面],\n          Time: [BrightDay,OvercastDay,GoldenHour,DeepNight],\n          Atmosphere: [Peaceful,Decay,Dynamic]\n        }\n      },\n      hurt_value: \"新事件? (伤害?+v:-v) : skip\",\n      user_character: {\n        status: {\n          format: \"临时修正? '[名]:【attr/skill±v;...】描述' : '[名]:描述'\",\n          separator: \"多状态用';'分隔\",\n          modifier_rule: \"status导致的modifiers**禁止**应用到attribute\"\n        },\n        当前装备: null,\n        current_location: {\n          prefix_rule: \"主神空间时必须以'主神空间'为前缀\"\n        }\n      },\n      difficulty: \"Set '检定难度' based on direct threat level (1-<%= world_max_enegy %>). Rules:日常=1,无恶意<3. Levels: <%= levels %>.\",\n      special_events: \"检查触发: world进出,virtue/vice,天赋,被动技能\",\n      next_roll: {\n        prediction: \"预测3个[属性]或[属性][技能]\",\n        combat_mode: \"明确战斗且敌方攻击时设置combat，脱离战斗立即清空敌方攻击骰池\",\n        idle_mode: \"主神空间→检定值=无\",\n        combat_extras: \"强韧:1;反射:0;意志:5;冲击:0;致命:0;恶性:0;速度:2;先攻:2\",\n        npc_assist: \"'npc_name:检定属性'\"\n      }\n    }\n  },\n\n  memory_analyze: {\n    tag: '<memoryAnalyze>',\n    format: '- ${check}: ${result}',\n    checks: {\n      content_integrity: \"扫描[new_settings,updates_needed,obsolete_data]\",\n      attribute_changes: \"新事件(本轮AI输出)? set_value : skip\",\n      classification: \"分类所有memory操作路径\"\n    }\n  },\n\n  update_memory: {\n    tag: \"<updateMemory>\",\n    commands: {\n      update_status: \"set_status('path', 'value'); //reason\",\n      add_update: \"memory('path', 'key', 'value'); //reason\",\n      rename: \"memory('path.old', 'path.new'); //rename\",\n      move: \"memory('old_path.key', 'new_path.key'); //move\",\n      delete: \"delete('path', 'key'); //reason\",\n      update_attr: \"set_attribute('path', 'old/_', 'new'); //reason\"\n    },\n    rules: {\n      single_op: \"每行一命令，每命令一key\",\n <%_ if (version != 7) { _%>\n      on_world_exit: \"Must use: delete('world_set.npc','all'); and delete('world_set.settings','all');\",\n<%_ } _%>\n      delete_when: \"item.num==0 | 物品转交完成 | 物品完全消耗\",\n      immediate_value: \"任何数值立即设计具体值，禁止未知\",\n      multiple_effects: \"多加成用';'分隔\",\n      formats: {\n        skill: {keys:['info','effect','level'], effect_prefix:\"【dp+${n};能量池-${n}】\", loc:\"其他技能\"},\n        equipment: {keys:['effect'], effect_prefix:\"【属性/技能/防御±${n}】\", loc:\"背包\"},\n        inventory: {keys:['info','effect','type','quality','num'], effect_prefix:\"【属性/技能/防御±${n}】/【无】\", loc:\"背包\", scope:\"阿萨所有物品\"}\n      }\n    }\n});","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":73,"displayIndex":67,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"74":{"key":[],"keysecondary":[],"comment":"🔮复杂战斗开-等级1","content":"{{setvar::complex_battle::true}}\n{{setvar::complex_mode::1}}\nbattle.set('战斗触发规则', {\n  trigger: '正面冲突/遭遇敌意生物/主动挑战/战斗还未结束/仍面对敌意生物攻击时，必须在</updateMemory>后额外输出<battle>{...json...}</battle>',\n  structure: {\n    enemies: 'CombatUnit[] // 必需≥1',\n    teammates: 'CombatUnit[] // 可选，无则[]或省略。无需初始化<user>作为teammate'\n  }\n});\n.set('CombatUnit模板', {\n  required: {\n    id: '\"类型_标识符_序号\"如\"goblin_scout_1\"',\n    icon: '单个emoji',\n    name: '清晰名称',\n    maxHealth: 'number // 杂兵20-40/精英50-80/头目80-120+',\n    currentHealth: 'number',\n    dicePool: '\"attr:值attr:值\"//必须初始化突出的若干属性段和技能段\n  },\n  optional: {\n    resists: '\"attr;attr\" // 伤害减半, 必需≥1',\n    vulnerable: '\"attr;attr\" // 伤害加倍, 必需≥1',\n    hitSpeech: 'string[] // 1-3条受击台词',\n    battleSpeech: 'string[] // 1-3条攻击台词',\n    inventory: '{\"物品名\":{info:\"描述\",effect:\"【hp+num】\",num:数量}}',\n    count: 'number // 生成多个相同杂兵，<=15'\n  },\n  logic: {\n    dicePool: '根据敌人特点分配(敏捷→敏捷高/强壮→力量高/特殊能力→对应技能)',\n    resists: '基于特性(石头人抗白刃/幽灵抗肉搏)',\n    vulnerable: '基于弱点(不死怕神秘学/机械怕科学)'\n  }\n});\n.set('关键约束', [\n  'JSON格式严格正确',\n  'id唯一',\n  'enemies≥1个',\n  '敌友使用相同模板',\n  '全部敌友数量不得超过20',\n]);","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":10,"position":4,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":0,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":0,"sticky":0,"cooldown":0,"delay":0,"uid":74,"displayIndex":68,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"75":{"key":[],"keysecondary":[],"comment":"🔮复杂战斗关","content":"{{setvar::complex_battle::false}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":75,"displayIndex":69,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"76":{"key":[],"keysecondary":[],"comment":"mod:备忘录关","content":"{{setvar::things_record::false}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":76,"displayIndex":70,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"77":{"key":[],"keysecondary":[],"comment":"mod:备忘录开","content":"{{setvar::things_record::true}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":false,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":77,"displayIndex":71,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"78":{"key":[],"keysecondary":[],"comment":"mod:强化时间开","content":"{{setvar::emphasize_time::true}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":true,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":null,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":78,"displayIndex":72,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}},"79":{"key":[],"keysecondary":[],"comment":"mod:强化时间关","content":"{{setvar::emphasize_time::false}}","constant":true,"vectorized":false,"selective":true,"selectiveLogic":0,"addMemo":true,"order":100,"position":0,"disable":false,"excludeRecursion":false,"preventRecursion":false,"matchPersonaDescription":false,"matchCharacterDescription":false,"matchCharacterPersonality":false,"matchCharacterDepthPrompt":false,"matchScenario":false,"matchCreatorNotes":false,"delayUntilRecursion":false,"probability":100,"useProbability":true,"depth":4,"group":"","groupOverride":false,"groupWeight":100,"scanDepth":null,"caseSensitive":null,"matchWholeWords":null,"useGroupScoring":null,"automationId":"","role":null,"sticky":0,"cooldown":0,"delay":0,"uid":79,"displayIndex":73,"triggers":[],"characterFilter":{"isExclude":false,"names":[],"tags":[]}}}}