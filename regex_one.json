{
    "id": "d73abb47-0459-488a-9f88-f37ca904e302",
    "scriptName": "统一",
    "findRegex": "/(<存档>([\\s\\S]*?)<\\/存档>)|(\\[ZERO_LEVEL_CHAT\\])/gs",
    "replaceString": "```text\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>主神空间 - 参与者状态终端</title>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Noto+Sans+SC:wght@300;400&display=swap');\n\n        :root {\n            --primary-color: #00faff;\n            --secondary-color: #7affff;\n   --base-font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif; /* 默认字体 */\n            --container-bg-color: rgba(10, 25, 47, 0.75);\n            --border-color: rgba(0, 250, 255, 0.3);\n            --glow-color: rgba(0, 250, 255, 0.5);\n            --text-color: #e6f1ff;\n            --text-secondary-color: #a8c0e1;\n            --background-color: rgba(10, 25, 47);\n            --danger-color: #ff4d4d;\n            --danger-glow-color: rgba(255, 77, 77, 0.5);\n             --success-color: #4dff88;\n            --success-glow-color: rgba(77, 255, 136, 0.5);\n        }\n\n        /* 这是妈妈为你准备的弹幕动画，我的宝贝 */\n@keyframes scroll-up-fade-out {\n    from {\n        transform: translateY(0);\n        opacity: 1;\n    }\n    to {\n        transform: translateY(-50px); /* 让它向上飘得高一点 */\n        opacity: 0;\n    }\n}\n\n.scrolling-text-popup {\n    position: fixed; /* 固定在屏幕上，不会随页面滚动 */\n    z-index: 10000; /* 确保在最顶层 */\n    font-size: 1.2em; /* 字体可以稍微大一点，看得清楚 */\n    font-weight: bold;\n    text-shadow: 0 0 5px rgba(0, 0, 0, 0.7); /* 加一点文字阴影，更立体 */\n    pointer-events: none; /* 让它不会挡住鼠标点击 */\n    animation: scroll-up-fade-out 2s ease-out forwards; /* 播放我们定义的动画 */\n    white-space: nowrap; /* 防止文字换行 */\n}\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            /* background-color: var(--background-color); */\n            color: var(--text-color);\n            font-family: var(--base-font-family);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height:90vh;\n             \n            backdrop-filter: blur(2px);\n        }\n .status-container {\n    width: 100%;\n    margin: 0 auto;\n    height: 100%;\n\n    /* ★ 移除所有背景样式，让容器本身变透明！*/\n    /* background-color: var(--container-bg-color); */\n    /* background-image: ... ; */\n\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    box-shadow: 0 0 8px var(--glow-color), inset 0 0 5px var(--border-color);\n    overflow: hidden;\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n\n    /* ★ 关键：创建层叠上下文，把负z-index的子元素“锁”在里面 */\n    position: relative;\n    z-index: 0;\n}\n\n/* 子元素内容，确保它们在背景之上 */\n.status-container > header,\n.status-container > .content-area,\n.status-container > .dynamic-content-area {\n    /* ★ 关键：给内容也创建一个层叠上下文，确保万无一失 */\n    position: relative;\n    z-index: 1;\n    /* 背景色设在这里，或者保持透明，看你的设计 */\n}\n\n\n/* 伪元素通用样式 */\n.status-container::before,\n.status-container::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center center;\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n\n/* ::before: 底层/稳定背景层 */\n.status-container::before {\n    background-color: var(--container-bg-color); /* 网格的底色放在这里 */\n    background-image: var(--before-bg-image);\n    transition: none; /* 它负责瞬间切换 */\n     /* ★ 关键：放到所有内容的后面 */\n    z-index: -2;\n}\n\n/* ::after: 上层/过渡背景层 */\n.status-container::after {\n    background-image: var(--after-bg-image);\n    opacity: var(--after-opacity, 0);\n    transition: opacity 0.8s ease-in-out; /* 只过渡透明度 */\n    /* ★ 关键：也放到内容后面，但在::before的前面 */\n    z-index: -1;\n}\n\n        header {\n            padding: 15px 25px;\n            background: var(--container-bg-color);\n            border-bottom: 1px solid var(--border-color);\n            text-align: center;\n        }\n\n        header h1 {\n            font-family: var(--base-font-family);\n            font-size: 1.5em;\n            color: var(--primary-color);\n            text-shadow: 0 0 5px var(--glow-color);\n            letter-spacing: 2px;\n            text-transform: uppercase;\n        }\n\n        nav {\n            display: flex;\n            justify-content: space-around;\n            background-color: var(--container-bg-color);\n        }\n\n        .tab-btn {\n            background: none;\n            border: none;\n            color: var(--text-secondary-color);\n            padding: 15px 20px;\n            font-family: var(--base-font-family);\n            font-size: 1em;\n            cursor: pointer;\n            transition: color 0.3s ease, background-color 0.3s ease, text-shadow 0.3s ease;\n            flex-grow: 1;\n            border-bottom: 3px solid transparent;\n        }\n\n        .tab-btn:hover {\n            color: var(--primary-color);\n            background-color:var(--background-color) ;\n        }\n\n        .tab-btn.active {\n            color: var(--primary-color);\n            text-shadow: 0 0 3px var(--glow-color);\n            border-bottom: 3px solid var(--primary-color);\n        }\n\n        .content-area {\n            padding: 25px 30px;\n        }\n\n        \n @keyframes fadeIn {\n    0% { \n        opacity: 0; \n        transform:  scale(0.95);\n        filter: blur(5px);\n    }\n    100% { \n        opacity: 1; \n        transform:   scale(1);\n        filter: blur(0px);\n    }\n}\n/*@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }\n @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(20px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n} */\n        /* @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        } */\n\n\n        .info-list {\n            list-style: none;\n        }\n\n        .info-list li {\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-start;\n            padding: 12px 0;\n            border-bottom: 1px dashed var(--border-color);\n            flex-wrap: wrap;\n        }\n\n        .info-list li:last-child {\n            border-bottom: none;\n        }\n\n        .info-list .label {\n            color: rgba(184, 184, 184,0.8);\n            margin-right: 20px;\n            flex-shrink: 0;\n        }\n\n        .info-list .value {\n            color: var(--text-color);\n            font-weight: 400;\n            text-align: right;\n            flex-grow: 1;\n            word-break: break-all;\n        }\n\n        .info-list .value.highlight {\n            color: var(--secondary-color);\n            font-weight: bold;\n        }\n\n        /* Progress Bar */\n        .progress-container {\n            margin-top: 10px;\n        }\n\n        .progress-bar-bg {\n            background-color:  var(--background-color);\n            border-radius: 5px;\n            height: 20px;\n            border: 1px solid var(--border-color);\n            padding: 2px;\n            overflow: hidden;\n        }\n\n        .progress-bar-fill {\n            background: linear-gradient(90deg,  var(--background-color), var(--primary-color));\n            height: 100%;\n            width: 0%; /* Updated by JS */\n            border-radius: 3px;\n            transition: width 0.5s ease-in-out;\n            box-shadow: 0 0 5px var(--glow-color);\n        }\n\n        /* Generic Button Style */\n        .action-button {\n            background: linear-gradient(45deg, var(--background-color), var(--background-color));\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            color: var(--text-color);\n            padding: 12px 12px 12px 12px;\n            font-family: var(--base-font-family);\n            font-size: 1em;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-align: center;\n            margin-right: 5px;\n            margin-left: 5px;\n            width: 100%;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .action-button::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent,  var(--background-color), transparent);\n            transition: left 0.5s ease;\n        }\n\n        .action-button:hover {\n            color: var(--primary-color);\n            box-shadow: 0 0 10px var(--glow-color);\n            transform: translateY(-2px);\n        }\n\n        .action-button:hover::before {\n            left: 100%;\n        }\n\n        .action-button.danger {\n            background: linear-gradient(45deg, rgba(255, 77, 77, 0.2), rgba(255, 77, 77, 0.3));\n            border-color: rgba(255, 77, 77, 0.5);\n        }\n\n        .action-button.danger:hover {\n            color: #fff;\n            box-shadow: 0 0 10px var(--danger-glow-color);\n        }\n\n        .action-button.danger::before {\n            background: linear-gradient(90deg, transparent, var(--secondary-color), transparent);\n        }\n\n        .action-button:disabled {\n            cursor: not-allowed;\n            background: rgba(128, 128, 128, 0.2);\n            color: var(--text-secondary-color);\n            transform: none;\n            box-shadow: none;\n            border-color: rgba(128, 128, 128, 0.4);\n        }\n        .action-button:disabled::before {\n            display:none;\n        }\n\n        /* Map Display */\n        .map-display {\n            background-color:  var(--background-color);\n            border: 1px solid var(--border-color);\n            border-radius: 8px;\n            padding: 20px;\n            margin-top: 20px;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .map-title {\n            color: var(--primary-color);\n            font-size: 1.2em;\n            font-weight: bold;\n            text-align: center;\n            margin-bottom: 15px;\n            text-shadow: 0 0 5px var(--glow-color);\n        }\n\n        .map-container {\n            position: relative;\n            width: 100%;\n            height: 400px;\n            \n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden; /* 改为hidden，以配合拖拽 */\n            box-shadow: inset 0 0 20px  var(--background-color);\n            cursor: grab;\n        }\n\n        .map-location {\n            position: absolute;\n            background: var(--border-color);\n            border: 1px solid var(--primary-color);\n            border-radius: 4px;\n            padding: 8px;\n            font-size: 0.9em;\n            color: var(--text-color);\n            text-align: center;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: 0 0 5px var(--glow-color);\n        }\n\n        .map-location:hover {\n            background: linear-gradient(45deg,  var(--background-color), var(--background-color));\n            transform: scale(1.05);\n            box-shadow: 0 0 10px var(--glow-color);\n        }\n\n        .map-location .location-name {\n            font-weight: bold;\n            font-size: 0.85em;\n            margin-bottom: 4px;\n        }\n\n        .map-location .location-desc {\n            font-size: 0.75em;\n            color: var(--text-secondary-color);\n        }\n\n        /* Generic Modal Style */\n        .modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgb(0 0 0 / 59%);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: opacity 0.3s ease, visibility 0.3s ease;\n        }\n\n        .modal.active {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            backdrop-filter:blur(5px);\n            /* background: linear-gradient(135deg, var(--container-bg-color),  var(--background-color)); */\n            border: 2px solid var(--primary-color);\n            border-radius: 12px;\n            padding: 25px;\n            max-height: 95%;\n            width: 90%;\n            box-shadow: 0 0 30px var(--glow-color);\n            position: relative;\n            animation: modalSlideIn 0.3s ease-out;\n              overflow-y: auto;\n        }\n\n        @keyframes modalSlideIn {\n            from {\n                transform: scale(0.8) translateY(-50px);\n                opacity: 0;\n            }\n            to {\n                transform: scale(1) translateY(0);\n                opacity: 1;\n            }\n        }\n\n        .modal-title {\n            color: var(--primary-color);\n            font-size: 1.3em;\n            font-weight: bold;\n            text-align: center;\n            margin-bottom: 15px;\n            text-shadow: 0 0 5px var(--glow-color);\n        }\n\n        .modal-description {\n            color: var(--text-color);\n            font-size: 1em;\n            line-height: 1.6;\n            text-align: center;\n            padding: 15px;\n            background: var(--container-bg-color);\n            border-radius: 8px;\n            border: 1px solid var(--border-color);\n        }\n\n        .modal-close {\n            position: absolute;\n            top: 10px;\n            right: 15px;\n            background: none;\n            border: none;\n            color: var(--text-secondary-color);\n            font-size: 1.5em;\n            cursor: pointer;\n            transition: color 0.3s ease;\n            z-index:999;\n        }\n\n        .modal-close:hover {\n            color: var(--primary-color);\n        }\n\n        .external-areas {\n            margin-top: 15px;\n            padding: 15px;\n            /* background-color: var(--container-bg-color); */\n            border-radius: 6px;\n            border: 1px solid var(--border-color);\n        }\n\n        .external-areas h3 {\n            color: var(--secondary-color);\n            font-size: 1em;\n            margin-bottom: 10px;\n        }\n\n        .external-areas-list {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n\n        .external-area {\n            /* background: linear-gradient(45deg, var(--border-color), var(--border-color)); */\n            border: 1px solid var(--border-color);\n            border-radius: 4px;\n            padding: 6px 12px;\n            font-size: 0.9em;\n            color: var(--text-color);\n            transition: all 0.3s ease;\n        }\n\n        .external-area:hover {\n            background: linear-gradient(45deg, var(--background-color), var(--background-color));\n            color: var(--primary-color);\n        }\n\n        .back-button {\n            background: var(--container-bg-color);\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            color: var(--text-secondary-color);\n            padding: 8px 16px;\n            font-family: var(--base-font-family);\n            font-size: 0.9em;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            position: absolute;\n            top: 20px;\n            right: 20px;\n         \n        }\n\n        .back-button:hover {\n            color: var(--primary-color);\n            background: var(--border-color);\n        }\n\n        /* Inventory Modal Specifics */\n        .inventory-item-list {\n            list-style: none;\n            margin: 20px 0;\n            padding: 10px;\n            max-height: 250px;\n            overflow-y: auto;\n            background: rgba(0,0,0,0.2);\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n        }\n\n        .inventory-item {\n            padding: 10px 15px;\n            border-bottom: 1px dashed var(--border-color);\n            cursor: pointer;\n            transition: background-color 0.2s;\n        }\n\n        .inventory-item:last-child {\n            border-bottom: none;\n        }\n\n        .inventory-item:hover {\n            background-color: var(--border-color);\n        }\n\n        .inventory-item.selected {\n            background-color: var(--border-color);\n            color: var(--primary-color);\n            font-weight: bold;\n        }\n\n        /* 在 style 标签的末尾添加以下CSS */\n\n/* 主包裹容器，用于实现滑动效果 */\n#main-wrapper {\n    position: relative;\n    width: 100%;\n    \n  \n    overflow: hidden; /* 隐藏滑出屏幕的内容 */\n    display: flex;\n}\n\n \n/* ---- 全局与滑动效果 (保持不变) ---- */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;700&family=Noto+Sans+SC:wght@400;700&display=swap');\n\n \n#setting-book-wrapper {\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translateX(100%);\n    overflow: hidden; /* 防止内容溢出 */\n}\n\n.status-container.slide-out {\n    transform: translateX(-100%);\n}\n\n#setting-book-wrapper.active {\n    transform: translateX(0);\n}\n\n\n/* ---- 设定书整体布局与主题 ---- */\n.setting-book-container {\n    font-family: var(--base-font-family);\n    display: flex;\n    flex-direction: column; /* 改为垂直布局，头部在上，内容在下 */\n    width: 100%;\n    height: 100%;\n    background-color: var(--background-color);\n    color: var(--text-secondary-color);\n}\n\n.content-wrapper {\n    display: flex;\n    flex-grow: 1; /* 占据剩余的所有高度 */\n    overflow: hidden; /* 防止子元素溢出 */\n}\n\n/* ---- 头部 Header ---- */\n.book-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 15px 20px;\n    background-color: var(--container-bg-color);\n    border-bottom: 1px solid var(--border-color);\n    flex-shrink: 0;\n}\n\n#content-title {\n    font-size: 1.5em; /* 调整大小以适应头部 */\n    color: var(--text-color);\n    margin: 0;\n    padding: 0;\n    border-bottom: none; /* 移除原有的下划线 */\n    text-align: center;\n    flex-grow: 1;\n}\n\n#toggle-sidebar-btn {\n    display: none; /* 默认在桌面端隐藏 */\n    background: none;\n    border: none;\n    color: var(--primary-color);\n    font-size: 1.8em;\n    cursor: pointer;\n    padding: 0 10px;\n}\n\n#back-to-status-btn {\n    background: var(--container-bg-color);\n    max-width: 50vw;\n    right: 2px;\n    border: 1px solid #13304a;\n    color: var(--text-color);\n    font-family: var(--base-font-family);\n    padding: 8px 15px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 0.9em;\n    font-weight: bold;\n    transition: background-color 0.3s, color 0.3s;\n    white-space: nowrap; /* 防止文字换行 */\n}\n\n#back-to-status-btn:hover {\n    background: var(--background-color) ;\n    color: var(--primary-color);\n}\n\n/* ---- 侧边导航栏 (Sidebar) ---- */\n#sidebar {\n    width: 280px;\n    background-color: var(--container-bg-color);\n    color: var(--text-secondary-color);\n    padding: 20px;\n    overflow-y: auto;\n    border-right: 1px solid var(--border-color);\n    flex-shrink: 0;\n    transition: transform 0.3s ease-in-out; /* 添加过渡效果 */\n}\n\n#sidebar h2 {\n    font-size: 1.5em;\n    color: var(--primary-color);\n    margin-top: 0;\n    margin-bottom: 20px;\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 10px;\n}\n\n/* 导航列表样式 (与你原来的一致) */\n.category > ul { padding-left: 0; list-style: none; }\n.category-title { font-weight: bold; font-size: 1.1em; cursor: pointer; padding: 10px 5px; color: var(--text-color); transition: color 0.3s, background-color 0.3s; border-radius: 4px; }\n.category-title:hover { color: var(--secondary-color); background-color: var(--container-bg-color); }\n.item-list { padding-left: 15px; list-style-type: none; max-height: 0; overflow: hidden; transition: max-height 0.4s ease-in-out; }\n.item-list:not(.collapsed) { max-height: 800px; }\n.item-list li { padding: 10px 15px; cursor: pointer; border-radius: 4px; transition: background-color 0.3s, color 0.3s; border-left: 2px solid transparent; }\n.item-list li:hover { background-color: var(--container-bg-color); color: var(--primary-color); }\n.item-list li.active { background-color: var(--container-bg-color); color: var(--primary-color); font-weight: bold; border-left: 2px solid #64ffda; }\n\n/* ---- 右侧内容展示区 (Content Display) ---- */\n#content-display {\n    flex-grow: 1;\n    padding: 30px 40px;\n    overflow-y: auto;\n}\n\n/* 注意：内容区的标题已移至主Header，所以这里的标题样式可以移除或保留用于其他地方 */\n#content-details {\n    font-size: 1.1em;\n    line-height: 1.8;\n    white-space: pre-wrap;\n    color: var(--text-secondary-color);\n}\n\n#error-message { color: var(--secondary-color); font-weight: bold; }\n\n/* ---- 滚动条美化 (保持不变) ---- */\n#sidebar::-webkit-scrollbar, #content-display::-webkit-scrollbar { width: 8px; }\n#sidebar::-webkit-scrollbar-track, #content-display::-webkit-scrollbar-track { background: var(--background-color); }\n#sidebar::-webkit-scrollbar-thumb, #content-display::-webkit-scrollbar-thumb { background: var(--border-color); border-radius: 4px; }\n#sidebar::-webkit-scrollbar-thumb:hover, #content-display::-webkit-scrollbar-thumb:hover { background: var(--secondary-color); }\n\n/* ---- 移动端遮罩层 ---- */\n#sidebar-overlay {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: var(--container-bg-color);\n    z-index: 998; /* 低于侧边栏 */\n}\n\n/* ---- 响应式设计：手机端适配 (关键部分) ---- */\n@media (max-width: 768px) {\n            .action-button {\n \n            margin-right: 0;\n            margin-left: 0;\n          \n        }\n             #button-container-send {\n \n  gap:0.5rem;\n \n    }\n    .book-header {\n        padding: 10px 15px;\n    }\n\n    #content-title {\n        font-size: 1.2em; /* 在移动端缩小标题字体 */\n    }\n\n    #back-to-status-btn {\n        padding: 6px 10px;\n        font-size: 0.8em;\n    }\n\n    #toggle-sidebar-btn {\n        display: block; /* 在移动端显示汉堡包按钮 */\n    }\n\n    #sidebar {\n        position: fixed; /* 固定定位，脱离文档流 */\n        top: 0;\n        left: 0;\n        height: 100%;\n        transform: translateX(-100%); /* 默认隐藏在左侧 */\n        z-index: 999; /* 确保在最上层 */\n        border-right: 1px solid var(--border-color);\n        box-shadow: 2px 0 15px rgba(0,0,0,0.5); /* 添加阴影增加层次感 */\n    }\n\n    /* 当侧边栏激活时 */\n    .setting-book-container.sidebar-active #sidebar {\n        transform: translateX(0); /* 滑入屏幕 */\n    }\n\n    .setting-book-container.sidebar-active #sidebar-overlay {\n        display: block; /* 显示遮罩层 */\n    }\n\n    #content-display {\n        padding: 20px; /* 调整内边距 */\n    }\n}\n\n        /* Teammates Modal Specifics */\n        #teammates-modal .modal-content {\n            max-width: 95%; /* 弹窗可以更宽一些 */\n            width: 90%;\n        }\n\n        .teammates-container {\n            display: flex;\n            gap: 20px;\n            margin-top: 15px;\n            min-height: 300px;\n        }\n .teammates-container-init { display: none; margin-top: 1rem; padding: 1rem; background-color: rgba(26, 23, 32, 0.5); border-radius: 6px; border: 1px solid var(--border-color); }\n       \n        .teammate-list-wrapper {\n            flex: 1; /* 左侧占1份 */\n            max-height: 350px;\n            overflow-y: auto;\n            background: rgba(0,0,0,0.2);\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            padding: 5px;\n        }\n\n        .teammate-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .teammate-item {\n            padding: 10px 15px;\n            border-bottom: 1px dashed var(--border-color);\n            cursor: pointer;\n            transition: background-color 0.2s;\n            font-size: 0.9em;\n        }\n\n        .teammate-item:last-child {\n            border-bottom: none;\n        }\n\n        .teammate-item:hover {\n            background-color: var(--border-color);\n        }\n\n        .teammate-item.selected {\n            background-color: var(--container-bg-color);\n            color: var(--primary-color);\n            font-weight: bold;\n        }\n\n        #decompose-from-select,#decompose-amount-input,#synthesize-to-select,#synthesize-amount-input,#upgrade-levels{\n            background-color: var(--container-bg-color);\n            color: var(--primary-color);\n\n        }\n\n        .teammate-info-display {\n            flex: 2; /* 右侧占2份 */\n            background: var(--container-bg-color);\n            border-radius: 8px;\n            border: 1px solid var(--border-color);\n            padding: 20px;\n            max-height: 350px;\n            overflow-y: auto;\n            font-size: 0.9em;\n            line-height: 1.7;\n            white-space: pre-wrap; /* 保持换行和空格 */\n        }\n\n        .teammate-info-display .info-entry {\n            margin-bottom: 15px;\n            border-bottom: 1px solid var(--border-color);\n            padding-bottom: 10px;\n        }\n\n        .collapsible-label {\n    cursor: pointer;\n    text-decoration: underline;\n    text-decoration-style: dotted;\n    text-decoration-color: var(--secondary-color);\n    user-select: none; /* 防止点击时选中文本 */\n}\n\n.collapsible-label:hover {\n    color: var(--primary-color); /* 鼠标悬浮时变得更亮 */\n    text-shadow: 0 0 5px var(--glow-color);\n}\n\n        .teammate-info-display .info-entry:last-child {\n             border-bottom: none;\n             margin-bottom: 0;\n        }\n\n        .teammate-info-display .info-key {\n            color: var(--secondary-color);\n            font-weight: bold;\n        }\n\n        .teammate-info-display .info-value {\n            color: var(--text-color);\n            margin-top: 5px;\n            padding-left: 10px;\n        }\n\n        /* 滚动条美化 */\n        .teammate-list-wrapper::-webkit-scrollbar, .teammate-info-display::-webkit-scrollbar { width: 6px; }\n        .teammate-list-wrapper::-webkit-scrollbar-track, .teammate-info-display::-webkit-scrollbar-track { background: rgba(0,0,0,0.2); }\n        .teammate-list-wrapper::-webkit-scrollbar-thumb, .teammate-info-display::-webkit-scrollbar-thumb { background: var(--border-color); border-radius: 3px; }\n\n\n        /* ======================================================= */\n/* ============= 新增：商店界面滑动逻辑与美化 ============= */\n/* ======================================================= */\n\n/* ---- 商店滑动容器 ---- */\n#shop-wrapper {\n    position: absolute;\n    \n    left: 0;\n    width: 100%;\n    height: 100%;\n    transform: translateX(100%);\n    overflow: hidden;\n    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    /* 继承终端字体，确保一致性 */\n    font-family: var(--base-font-family);\n    color: var(--text-color);\n    background-color: var(--container-bg-color); /* 与终端容器背景一致 */\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    box-shadow: 0 0 15px var(--glow-color), inset 0 0 10px var(--border-color);\n    backdrop-filter: blur(10px);\n    display: flex; /* 使用flex布局 */\n    flex-direction: column; /* 垂直布局 */\n}\n\n.status-container.slide-out-shop,\n#setting-book-wrapper.slide-out-shop {\n    transform: translateX(-100%);\n}\n\n#shop-wrapper.active {\n    transform: translateX(0);\n}\n\n\n/* ---- 商店整体布局 ---- */\n.shop-main-container {\n    display: flex;\n    flex-direction: column; /* 垂直布局 */\n    width: 100%;\n    height: 100%;\n    overflow: hidden; /* 防止内部滚动条影响整体 */\n}\n\n/* ---- 商店头部 ---- */\n.shop-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 15px 25px;\n    background-color: var(--container-bg-color);\n    border-bottom: 1px solid var(--border-color);\n    flex-shrink: 0;\n}\n\n.shop-header .shop-title {\n    font-family: var(--base-font-family);\n    font-size: 1.5em;\n    color: var(--primary-color);\n    text-shadow: 0 0 5px var(--glow-color);\n    letter-spacing: 2px;\n    text-transform: uppercase;\n    margin: 0;\n    flex-grow: 1;\n    text-align: center;\n}\n.shop-header .shop-header-controls {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n}\n\n#shop-search-input {\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 4px;\n    color: var(--text-color);\n    padding: 8px 12px;\n    font-family: var(--base-font-family);\n    font-size: 0.9em;\n    width: 250px; /* 你可以根据需要调整宽度 */\n    transition: all 0.3s ease;\n}\n\n#shop-search-input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n#shop-search-input::placeholder {\n    color: var(--text-secondary-color);\n    opacity: 0.7;\n}\n\n.control-btn,#back-from-shop-btn,#generate-items-btn ,#ten-gacha-btn,#single-gacha-btn,#submit-generation-btn,#skip-generation-btn,#gacha-confirm-btn{\n    background: none;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    color: var(--text-secondary-color);\n    padding: 8px;\n    font-size: 0.9em;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n \n\n.control-btn:hover,#back-from-shop-btn:hover,#ten-gacha-btn:hover,#single-gacha-btn:hover,#generate-items-btn:hover,#gacha-confirm-btn:hover,#submit-generation-btn:hover,#skip-generation-btn:hover {\n    color: var(--primary-color);\n    background: var(--border-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n.shop-body-wrapper {\n    display: flex;\n    flex-grow: 1;\n    overflow: hidden; /* 重要：让内部分别滚动 */\n    padding: 20px;\n    gap: 20px;\n      min-height: 0; /* <-- 这是关键的修复！ */\n}\n\n\n/* ---- 商店左侧栏：导航与购物车 ---- */\n.shop-sidebar {\n    width: 200px;\n    flex-shrink: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\n.shop-nav, .shop-cart {\n    background-color: rgba(0,0,0,0.2);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    padding: 15px;\n}\n\n.shop-sidebar h3 {\n    font-family: var(--base-font-family);\n    color: var(--secondary-color);\n    margin: 0 0 15px 0;\n    font-size: 1.2em;\n    text-shadow: 0 0 3px var(--glow-color);\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 10px;\n}\n\n.shop-nav .shop-nav-list {\n    list-style: none;\n}\n\n.shop-nav .shop-nav-item {\n    background: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    color: var(--text-secondary-color);\n    padding: 12px 15px;\n    font-size: 1em;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    width: 100%;\n    margin-bottom: 10px;\n    text-align: left;\n}\n\n.shop-nav .shop-nav-item:hover {\n    color: var(--primary-color);\n    background-color: var(--border-color);\n    border-color: var(--border-color);\n}\n\n.shop-nav .shop-nav-item.active {\n    color: var(--primary-color);\n    background-color: var(--border-color);\n    text-shadow: 0 0 5px var(--glow-color);\n    font-weight: bold;\n}\n\n.shop-cart {\n    flex-grow: 1; /* 占据剩余空间 */\n    display: flex;\n    flex-direction: column;\n    min-height: 0;  \n    overflow-y: auto;/* 新增：限制容器，让内部的flex-grow生效并触发滚动 */\n}\n\n#cart-items-list {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding-right: 5px; /* for scrollbar */\n    margin-bottom: 15px;\n    color: var(--text-secondary-color);\n}\n\n.cart-item {\n    padding-bottom: 8px;\n    margin-bottom: 8px;\n    border-bottom: 1px dashed var(--border-color);\n    font-size: 0.9em;\n}\n\n#cart-total {\n    font-size: 1.1em;\n    color: var(--primary-color);\n    font-weight: bold;\n    margin-bottom: 15px;\n    text-align: right;\n}\n\n#checkout-button {\n    /* 复用终端按钮样式 */\n    background: linear-gradient(45deg, var(--border-color), var(--border-color));\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    color: var(--text-color);\n    padding: 12px 24px;\n    font-size: 1em;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    width: 100%;\n}\n\n#checkout-button:hover:not(:disabled) {\n    color: var(--primary-color);\n    box-shadow: 0 0 10px var(--glow-color);\n    transform: translateY(-2px);\n}\n#checkout-button:disabled {\n    cursor: not-allowed;\n    background: rgba(128, 128, 128, 0.2);\n    color: var(--text-secondary-color);\n    transform: none;\n    box-shadow: none;\n    border-color: rgba(128, 128, 128, 0.4);\n}\n\n\n/* ---- 商店右侧内容区 ---- */\n.shop-content-area {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden; /* 重要 */\n    background-color: rgba(0,0,0,0.2);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    padding: 20px;\n     min-height: 0; /* <-- 这里也加上！ */\n}\n\n.shop-page {\n    display: none;\n    height: 100%;\n    flex-direction: column;\n}\n.shop-page.active {\n    display: flex;\n}\n\n.shop-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 15px;\n    margin-bottom: 20px;\n    flex-shrink: 0;\n}\n\n.shop-controls .category-tabs, .shop-controls .sort-controls {\n    display: flex;\n    gap: 1px;\n}\n\n.shop-controls .control-btn,#confirm-upgrade-btn {\n    background: none;\n    border: 1px solid var(--border-color);\n    color: var(--text-secondary-color);\n    padding: 8px 18px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n.shop-controls .control-btn:hover {\n    color: var(--primary-color);\n    background-color:var(--border-color);\n}\n.shop-controls .control-btn.active {\n    color: var(--primary-color);\n    background-color: var(--background-color);\n    box-shadow: 0 0 5px var(--glow-color);\n}\n\n.shop-display-wrapper {\n    flex-grow: 1;\n    display: flex;\n    gap: 20px;\n    overflow: hidden; /* 重要 */\n}\n\n /* 修改商品列表和详情的ID选择器以匹配JS */\n#items-display-list-fixed, #items-display-list-random {\n    flex: 2 1 60%; /* flex-grow, flex-shrink, flex-basis. 基础宽度60% */\n    min-width: 0; /* 防止内容撑破容器 */\n    overflow-y: auto;\n    padding-right: 10px;\n}\n#item-details-display-fixed, #item-details-display-random {\n    flex: 1 1 40%; /* 基础宽度40% */\n    min-width: 0; /* 防止内容撑破容器 */\n    padding: 15px;\n    border-left: 1px solid var(--border-color);\n    overflow-y: auto;\n    color: var(--text-secondary-color);\n}\n\n.item-row {\n    display: grid;\n    grid-template-columns: 1fr auto auto;\n    gap: 15px;\n    align-items: center;\n    padding: 12px;\n    background-color: var(--border-color);\n    border: 1px solid transparent;\n    border-radius: 4px;\n    margin-bottom: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n.item-row:hover {\n    border-color: var(--border-color);\n    background-color: var(--border-color);\n}\n.item-row.selected {\n    border-color: var(--primary-color);\n    background-color: var(--border-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n.item-name {\n    font-weight: bold;\n    color: var(--text-color);\n}\n.item-price {\n    color: var(--secondary-color);\n    font-weight: bold;\n}\n\n\n\n.buy-button,.page-button {\n    background: transparent;\n    border: 1px solid var(--primary-color);\n    color: var(--primary-color);\n    padding: 6px 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n.buy-button:hover:not(:disabled),.page-button:hover:not(:disabled) {\n    background: var(--primary-color);\n    color: var(--background-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n.buy-button:disabled,.page-button:disabled {\n    border-color: var(--text-secondary-color);\n    color: var(--text-secondary-color);\n    cursor: not-allowed;\n    opacity: 0.6;\n}\n\n\n\n \n.detail-placeholder {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-style: italic;\n}\n.detail-title {\n    font-size: 1.4em;\n    color: var(--primary-color);\n    margin-bottom: 15px;\n    text-shadow: 0 0 3px var(--glow-color);\n}\n.detail-info { margin-bottom: 15px; line-height: 1.6; }\n.detail-label {\n    color: var(--text-color);\n    font-weight: bold;\n    margin-bottom: 5px;\n    display: block;\n}\n\n/* 分页 */\n.shop-pagination {\n    flex-shrink: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 20px;\n    gap: 10px;\n}\n\n/* ---- 商店模态框 ---- */\n#shop-modal {\n \n    /* 复用终端的弹窗样式 */\n}\n#shop-modal .modal-content {\n    /* 如果需要特别定制 */\n}\n\n/* 滚动条美化 */\n.shop-sidebar::-webkit-scrollbar,\n#cart-items-list::-webkit-scrollbar,\n#items-display-list::-webkit-scrollbar,\n#item-details-display::-webkit-scrollbar,\n.content-area::-webkit-scrollbar {\n    width: 6px;\n}\n.shop-sidebar::-webkit-scrollbar-track,\n#cart-items-list::-webkit-scrollbar-track,\n#items-display-list::-webkit-scrollbar-track,\n#item-details-display::-webkit-scrollbar-track,\n.content-area::-webkit-scrollbar-track {\n    background: rgba(0,0,0,0.2);\n}\n.shop-sidebar::-webkit-scrollbar-thumb,\n#cart-items-list::-webkit-scrollbar-thumb,\n#items-display-list::-webkit-scrollbar-thumb,\n#item-details-display::-webkit-scrollbar-thumb,\n.content-area::-webkit-scrollbar-thumb {\n    background-color: var(--border-color);\n    border-radius: 3px;\n}\n\n   @media (max-width: 768px) {\n        .shop-body-wrapper {\n            flex-direction: column; /* 垂直排列 */\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .shop-sidebar {\n            width: 100%; /* 宽度占满 */\n            flex-direction: row; /* 让导航和购物车水平排列 */\n            gap: 10px;\n             height: 15vh; /* 新增：给侧边栏一个固定的高度 */\n        }\n\n        .shop-title{\n            display: none;\n        }\n\n        .shop-nav, .shop-cart {\n            flex: 1; /* 平分空间 */\ndisplay: flex; /* 新增：让它成为一个flex容器，为了更好地控制其内部 */\n    flex-direction: column; /* 新增：让其内部（比如标题和列表）垂直排列 */\n    overflow-y: auto; /* 新增：这是关键！让它在垂直方向内容溢出时出现滚动条 */\n    min-height: 0; /* 新增：一个flex布局的小技巧，确保它能被正确约束 */\n        }\n\n        .shop-display-wrapper {\n            flex-direction: row; /* 商品列表和详情也垂直排列 */\n             height: 400px; /* 给一个固定高度防止无限延伸 */\n        }\n\n        #item-details-display-fixed, #item-details-display-random {\n            border-left: none; /* 移除左边框 */\n            border-top: 1px solid var(--border-color); /* 改为上边框 */\n            padding-top: 15px;\n        }\n\n        .shop-controls {\n            flex-direction: column;\n            align-items: stretch; /* 让按钮撑满宽度 */\n        }\n\n        .shop-controls .control-btn {\n            text-align: center;\n        }\n\n            /* 在这里添加下面的新CSS规则 */\n    .shop-controls .category-tabs, .shop-controls .sort-controls {\n        flex-wrap: wrap;       /* 允许按钮换行 */\n        justify-content: center; /* 换行后居中对齐 */\n    }\n    }\n\n    /* ======================================================= */\n/* =========== 新的角色状态页 (Page 3) 样式 =========== */\n/* ======================================================= */\n\n#page-character {\n    /* min-height: 800px; 确保有足够空间展示 */\n}\n\n.character-display-grid {\n    display: grid;\n    grid-template-columns: 250px 1fr 280px;\n    gap: 20px;\n    width: 100%;\n    height: 100%;\n    font-size: 14px;\n}\n\n.char-panel {\n    background: rgba(0,0,0,0.2);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    /* padding: 15px; */\n    display: flex;\n    flex-direction: column;\n}\n\n/* --- 左侧面板 --- */\n.left-panel {\n    gap: 15px;\n    max-height: 500px;\n    overflow-y:auto;\n}\n\n.char-name-display {\n    font-family: var(--base-font-family);\n    color: var(--primary-color);\n    font-size: 1.8em;\n    text-align: center;\n    text-shadow: 0 0 8px var(--glow-color);\n    padding-bottom: 10px;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.char-info-box {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.info-line {\n    display: flex;\n    justify-content: space-between;\n    padding: 5px;\n    border-radius: 3px;\n    transition: background-color 0.2s;\n}\n.info-line:hover {\n    background-color: var(--border-color);\n}\n.info-label {\n    color: var(--text-secondary-color);\n}\n.info-value {\n    color: var(--text-color);\n    font-weight: bold;\n}\n\n.resource-bar-container {\n    margin-top: 5px;\n}\n.resource-bar-label {\n    font-size: 0.9em;\n    color: var(--text-secondary-color);\n    margin-bottom: 5px;\n}\n.progress-bar-bg.resource {\n    position: relative;\n    height: 22px;\n}\n.progress-bar-text {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 0.8em;\n    color: #fff;\n    text-shadow: 1px 1px 2px rgba(0,0,0,0.7);\n    z-index: 2;\n}\n\n.progress-bar-fill.hp { background: linear-gradient(90deg, var(--secondary-color), var(--primary-color)); }\n.progress-bar-fill.willpower { background: linear-gradient(90deg, var(--primary-color), var(--text-color)); }\n.progress-bar-fill.energy { background: linear-gradient(90deg, var(--secondary-color), var(--text-secondary-color)); }\n\n.progress-bar-fill.generic-resource { background: linear-gradient(90deg, var(--secondary-color), var(--primary-color)); }\n\n/* --- 中间面板：人形 --- */\n.center-panel {\n    justify-content: center;\n    align-items: center;\n}\n\n.character-figure {\n    position: relative;\n    width: 100px;\n    height: 250px;\n}\n\n.body-part {\n    position: absolute;\n    background-color: transparent;\n    border: 2px solid var(--secondary-color);\n    box-shadow: 0 0 5px var(--glow-color);\n}\n.head { width: 40px; height: 40px; border-radius: 50%; top: 0; left: 30px; }\n.torso { width: 60px; height: 90px; top: 45px; left: 20px; border-radius: 10px; }\n.arm { width: 15px; height: 80px; top: 55px; border-radius: 5px; }\n.arm.left { left: 0px; }\n.arm.right { right: 0px; }\n.leg { width: 20px; height: 110px; top: 140px; border-radius: 5px;}\n.leg.left { left: 20px; }\n.leg.right { right: 20px; }\n\n/* 装备槽与引出线 */\n.equipment-slot {\n    position: absolute;\n    color: var(--text-secondary-color);\n    /* background: rgba(10, 25, 47, 0.8); */\n    border: 1px solid var(--border-color);\n    padding: 4px 8px;\n    font-size: 0.85em;\n    border-radius: 4px;\n    white-space: nowrap;\n    cursor: pointer;\n}\n.equipment-slot:hover {\n    color: var(--primary-color);\n    box-shadow: 0 0 5px var(--glow-color);\n}\n\n.slot-head { top: -25px; left: 50%; transform: translateX(-50%); }\n.slot-body { top: 75px; left: 20px; }\n.slot-hands { top: 100px; right: -70px; }\n.slot-feet { bottom: -15px; left: -30px; }\n.slot-accessory { top: 30px; right: -40px; }\n.slot-weapon { top: 150px; left: -60px; }\n\n \n \n\n.attr-category-title, .skill-category-title {\n    color: var(--primary-color);\n    font-family: var(--base-font-family);\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 5px;\n    margin-bottom: 10px;\n    font-size: 1.1em;\n}\n\n.attr-item {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    padding: 2px 4px;\n    cursor: help;\n    border-radius: 3px;\n    transition: background-color 0.2s;\n}\n.attr-item:hover {\n    background-color: var(--border-color);\n}\n\n.attr-name, .skill-name {\n    color: var(--text-secondary-color);\n}\n.attr-value, .skill-value {\n    color: var(--text-color);\n    font-weight: bold;\n}\n.legendary-value {\n    color: var(--secondary-color); /* 金色，表示传奇 */\n}\n.status-modifier{\n    color: var(--text-secondary-color); /* 金色，表示传奇 */\n}\n\n.skill-item {\n     display: flex;\n    justify-content: space-between;\n    margin-bottom: 6px;\n    padding: 2px 4px;\n    cursor: help;\n    border-radius: 3px;\n    transition: background-color 0.2s;\n}\n.skill-item:hover {\n     background-color: var(--border-color);\n}\n\n/* --- Tooltip --- */\n.char-tooltip {\n    position: fixed;\n    background: linear-gradient(135deg, var(--container-bg-color), var(--primary-color));\n    border: 1px solid var(--primary-color);\n    border-radius: 6px;\n    padding: 10px 15px;\n    max-width: 250px;\n    font-size: 0.9em;\n    line-height: 1.5;\n    color: var(--text-color);\n    z-index: 1001;\n    pointer-events: none;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.2s;\n    box-shadow: 0 0 10px var(--glow-color);\n}\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n    .character-display-grid {\n        grid-template-columns: 1fr;\n        font-size: 12px;\n    }\n    .center-panel {\n        order: -1; /* 将人形图置顶 */\n        /* display:none; */\n        /* min-height: 300px; */\n    }\n    .slot-body { left: -70px; }\n    .slot-hands { right: -70px; }\n    .slot-weapon { left: -100px; }\n}\n\n/* 滚动条美化 */\n.right-panel::-webkit-scrollbar, /* 新增对 right-panel 的美化 */\n.attributes-container::-webkit-scrollbar,\n.selection-area::-webkit-scrollbar,\n.skill-choice-container::-webkit-scrollbar,\n.items-display-list::-webkit-scrollbar,\n.item-details-display::-webkit-scrollbar,\n.book-display-area::-webkit-scrollbar,\n.shop-sidebar::-webkit-scrollbar,\n.shop-nav::-webkit-scrollbar,\n.shop-cart::-webkit-scrollbar,\n.modal-description::-webkit-scrollbar,\n.skills-container::-webkit-scrollbar { width: 6px; }\n\n\n.right-panel::-webkit-scrollbar-track, /* 新增对 right-panel 的美化 */\n.attributes-container::-webkit-scrollbar-track,\n.selection-area::-webkit-scrollbar-track,\n.skill-choice-container::-webkit-scrollbar-track,\n.items-display-list::-webkit-scrollbar-track,\n.item-details-display::-webkit-scrollbar-track,\n.book-display-area::-webkit-scrollbar-track,\n.shop-sidebar::-webkit-scrollbar-track,\n.shop-nav::-webkit-scrollbar-track,\n.shop-cart::-webkit-scrollbar-track,\n.modal-description::-webkit-scrollbar-track,\n.skills-container::-webkit-scrollbar-track { background: rgba(0,0,0,0.2); }\n\n.right-panel::-webkit-scrollbar-thumb, /* 新增对 right-panel 的美化 */\n.attributes-container::-webkit-scrollbar-thumb,\n.selection-area::-webkit-scrollbar-thumb,\n.skill-choice-container::-webkit-scrollbar-thumb,\n.items-display-list::-webkit-scrollbar-thumb,\n.item-details-display::-webkit-scrollbar-thumb,\n.book-display-area::-webkit-scrollbar-thumb,\n.shop-sidebar::-webkit-scrollbar-thumb,\n.shop-nav::-webkit-scrollbar-thumb,\n.shop-cart::-webkit-scrollbar-thumb,\n.modal-description::-webkit-scrollbar-thumb,\n.skills-container::-webkit-scrollbar-thumb { background-color: var(--border-color); border-radius: 3px; }\n\n/* ======================================================== */\n/* =========== 折叠/展开面板的额外样式 ============ */\n/* ======================================================== */\n\n.attr-category, .skill-category {\n    margin-bottom: 5px;\n}\n\n.attr-category-title, .skill-category-title {\n    cursor: pointer;\n    position: relative;\n    padding-left: 18px; /* 为箭头留出空间 */\n    transition: background-color 0.2s;\n    user-select: none; /* 防止双击选中文本 */\n}\n\n/* 标题前的箭头符号 */\n.attr-category-title::before, .skill-category-title::before {\n    content: '▶'; /* 箭头 */\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 0.8em;\n    color: var(--secondary-color);\n    transition: transform 0.2s ease-in-out;\n}\n\n.attr-category-title:hover, .skill-category-title:hover {\n    background-color: var(--border-color)\n}\n\n/* 包含条目的包裹层 */\n.attr-items-wrapper, .skill-items-wrapper {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.3s ease-in-out;\n    padding-left: 10px; /* 展开后内容有缩进 */\n    border-left: 1px solid var(--border-color);\n    margin-left: 5px;\n    margin-top: 5px;\n}\n\n/* 展开状态 */\n.attr-category.expanded .attr-category-title::before,\n.skill-category.expanded .skill-category-title::before {\n    transform: translateY(-50%) rotate(90deg); /* 箭头旋转 */\n}\n\n.attr-category.expanded .attr-items-wrapper,\n.skill-category.expanded .skill-items-wrapper {\n    max-height: 1800px; /* 一个足够大的值，确保所有内容都能显示 */\n}\n/* --- 右侧面板 --- */\n.right-panel {\n    gap: 15px;\n    display: flex; /* 确保使用flex布局 */\n    flex-direction: column; /* 垂直排列子元素 */\n max-height: 500px;\n    overflow-y: auto; /* 修改这里，允许垂直方向滚动 */\n    padding-right: 5px; /* 为滚动条留出一点空间，更美观 */\n}\n\n \n\n/* 我们为衍生属性也加上同样的规则，确保它也能滚动 */\n#derived-attributes-display-container {\n     overflow-y: auto;\n     padding-right: 5px;\n}\n\n\n/* 代码 START: 添加在这里 */\n.roll-section {\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    padding: 15px;\n    margin-bottom: 15px;\n    \n    box-shadow: inset 0 0 10px var(--border-color)\n}\n\n.roll-section-title {\n    color: var(--primary-color);\n    font-weight: bold;\n    font-size: 1.1em;\n    margin-bottom: 10px;\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 8px;\n    font-family: var(--base-font-family);\n}\n\n.roll-details-list {\n    list-style: none;\n    padding: 0;\n}\n\n.roll-details-list li {\n    padding: 6px 0;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    border-bottom: 1px dashed var(--border-color)\n}\n\n.roll-details-list li:last-child {\n    border-bottom: none;\n}\n\n.roll-details-list .label {\n    color: var(--text-secondary-color);\n    margin-right: 15px;\n}\n\n.roll-details-list .value {\n    color: var(--text-color);\n    text-align: right;\n    flex-grow: 1;\n}\n\n.roll-outcome {\n    color: var(--secondary-color);\n    font-weight: bold;\n}\n\n.roll-dramatic-failure {\n    color: var(--danger-color);\n    font-weight: bold;\n    text-shadow: 0 0 5px var(--danger-glow-color);\n}\n\n\n\n \n\n@keyframes orb-flow {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n}\n\n/* 书籍弹窗主体 */\n#world-book-modal .book-content {\n    background-color: var(--container-bg-color); /* 羊皮纸颜色 */\n    color: var(--text-color);\n    width: 90%;\n    \n    height: 70vh;\n    max-height: 800px;\n    display: flex;\n    border-radius: 10px;\n    box-shadow: 0 10px 30px var(--container-bg-color), inset 0 0 15px var(--container-bg-color);\n    font-family: var(--base-font-family);\n    position: relative;\n    border: 3px solid var(--background-color);\n    border-left: 20px solid var(--background-color); /* 书脊 */\n}\n\n/* 书籍关闭按钮 */\n.book-close-btn {\n    position: absolute;\n    top: 5px;\n    right: 10px;\n    font-size: 28px;\n    color: var(--text-secondary-color);\n}\n.book-close-btn:hover {\n     color: var(--primary-color);\n}\n\n\n/* 左页 - 书签区 */\n.book-left-page {\n    flex-basis: 150px;\n    border-right: 2px dashed var(--background-color);\n    padding: 20px 0;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.book-bookmarks {\n    position: absolute;\n    top: 30px;\n    left: 20px; /* 从书脊处伸出 */\n    display: flex;\n    flex-direction: column;\n}\n\n.bookmark {\n    background-color: var(--border-color);\n    color: var(--container-bg-color);\n    padding: 8px 30px 8px 15px;\n    margin-bottom: 10px;\n    cursor: pointer;\n    border-radius: 0 5px 5px 0;\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.2);\n    transition: all 0.2s ease;\n    clip-path: polygon(0 0, 100% 0, 85% 50%, 100% 100%, 0 100%);\n}\n\n.bookmark:hover {\n    background-color: var(--border-color);\n    padding-left: 20px;\n}\n\n.bookmark.active {\n    background-color: var(--primary-color); color: var(--background-color);\n    font-weight: bold;\n    padding-left: 15px;\n    box-shadow: 4px 4px 8px rgba(0,0,0,0.3);\n}\n\n\n/* 右页 - 内容区 */\n.book-right-page {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 20px 30px;\n    overflow: hidden;\n}\n\n.book-display-area {\n    height: 100%;\n    overflow-y: auto;\n    padding-right: 15px; /* for scrollbar */\n}\n\n.book-entry {\n    border-bottom: 1px_dotted var(--background-color);\n    padding: 10px 0;\n    margin-bottom: 5px;\n}\n\n.book-entry-key {\n    font-weight: bold;\n    color: var(--secondary-color);\n    display: block;\n    margin-bottom: 5px;\n}\n\n.book-entry-value {\n    font-size: 0.9em;\n    line-height: 1.5;\n    white-space: pre-wrap; /* 保留换行和空格 */\n    word-wrap: break-word; /* 自动换行 */\n}\n\n/* 翻页 */\n.book-pagination {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-top: 10px;\n    border-top: 1px solid var(--background-color);\n    margin-top: auto; /* 推到底部 */\n}\n\n.page-turn-btn {\n    background: none;\n    border: none;\n    font-size: 30px;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    padding: 0 20px;\n}\n.page-turn-btn:hover:not(:disabled) {\n    color: var(--text-color);\n}\n.page-turn-btn:disabled {\n    color: #d1c6b2;\n    cursor: not-allowed;\n}\n\n\n/* ================================================== */\n/* ========== 新增：世界之书响应式样式 (手机端) ========== */\n/* ================================================== */\n\n@media (max-width: 768px) {\n\n    /* 当屏幕宽度小于768px时，应用以下样式 */\n\n    /* 让书本内容垂直排列 */\n    #world-book-modal .book-content {\n        flex-direction: column;\n        height: 85vh; /* 在手机上可以更高一些 */\n        max-height: 800px;\n        border-left: 3px solid var(--background-color); /* 移除厚书脊 */\n        width: 95%;\n    }\n\n    /* 调整原左页（现在是顶部）的样式 */\n    .book-left-page {\n        flex-basis: auto; /* 高度自动 */\n        border-right: none; /* 移除右边框 */\n        border-bottom: 2px solid var(--border-color); /* 添加下边框作为分割线 */\n        padding: 5px 10px; /* 调整内边距 */\n        justify-content: center; /* 居中书签 */\n        height: auto;\n    }\n\n    /* 让书签水平排列 */\n    .book-bookmarks {\n        position: static; /* 移除绝对定位 */\n        flex-direction: row; /* 水平排列 */\n        justify-content: center; /* 居中 */\n        width: 100%;\n            padding-left: 100px;\n    }\n\n    /* 调整单个书签的样式，让它看起来像顶部的标签 */\n    .bookmark {\n        margin: 0 5px; /* 设置水平间距 */\n        margin-bottom: 0;\n        border-radius: 5px 5px 0 0; /* 圆角只在顶部 */\n        padding: 8px 15px; /* 统一内边距 */\n        clip-path: none; /* 移除箭头形状 */\n        box-shadow: 0 -2px 5px rgba(0,0,0,0.1);\n    }\n\n    .bookmark:hover {\n        padding-left: 15px; /* 移除悬浮时的特殊内边距 */\n        transform: translateY(-2px); /* 悬浮时轻微上移 */\n    }\n\n    .bookmark.active {\n        padding-left: 15px; /* 移除激活时的特殊内边距 */\n        background-color: var(--container-bg-color); /* 激活时与页面同色 */\n        color: var(--secondary-color); /* 改变文字颜色 */\n        border: 2px solid var(--border-color);\n        border-bottom: none; /* 底部无边框，与内容区融为一体 */\n        transform: translateY(2px); /* 向下移动，与分割线重合 */\n    }\n\n    /* 调整右页（现在是下部内容区）的样式 */\n    .book-right-page {\n        padding: 15px;\n        flex-grow: 1; /* 占据剩余所有空间 */\n    }\n\n    /* 调整浮动小球的位置，避免与内容重叠 */\n    /* #world-book-orb {\n        bottom: 10px;\n        right: 10px;\n    } */\n}\n\n   /* ---- 新增：头部和主题切换器样式 ---- */\n       header .header-content {\n            \n            justify-content: center;\n            align-items: center;\n            position: relative;\n        }\n\n        #settings-btn{\n            position: absolute;\n            right: 60px; /* 把它放在标题栏的右边 */\n              font-size: 35px;\n            transform: translateY(-50%);\n            background: none;\n            border: none;\n            color: var(--text-secondary-color);\n            cursor: pointer;\n            padding: 5px;\n            border-radius: 50%;\n            transition: color 0.3s, transform 0.3s ease;\n            top:10%;\n        }\n        #fullscreen-btn{\n            position: absolute;\n            right: 110px; /* 把它放在标题栏的右边 */\n              font-size: 35px;\n            transform: translateY(-50%);\n            background: none;\n            border: none;\n            color: var(--text-secondary-color);\n            cursor: pointer;\n            padding: 5px;\n            border-radius: 50%;\n            transition: color 0.3s, transform 0.3s ease;\n            top:10%;\n        }\n        #refresh-btn{\nposition: absolute;\n            right: 10px; /* 把它放在标题栏的右边 */\n              font-size: 35px;\n            transform: translateY(-50%);\n            background: none;\n            border: none;\n            color: var(--text-secondary-color);\n            cursor: pointer;\n            padding: 5px;\n            border-radius: 50%;\n            transition: color 0.3s, transform 0.3s ease;\n            top:10%;\n        }\n\n        #settings-btn:hover,#refresh-btn:hover,#fullscreen-btn:hover {\n            color: var(--primary-color);\n            transform: translateY(-50%) rotate(90deg); /* 悬浮时旋转，增加动感 */\n        }\n\n        #streaming-switcher {\n    position: absolute;\n    right: 110px; /* 放置在 theme-switcher 左侧，留出间距 */\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    padding: 5px;\n    border-radius: 50%;\n    font-size: 30px;\n    transition: color 0.3s, transform 0.3s ease;\n}\n\n#streaming-switcher:hover {\n    color: var(--primary-color);\n    transform: translateY(-50%) scale(1.2); /* 悬浮时放大，增加动感 */\n}\n\n#streaming-switcher.active {\n    color: var(--primary-color);\n    text-shadow: 0 0 5px var(--glow-color); /* 开启流式传输时增加辉光效果 */\n}\n\n \n  /* 新增：术法选择面板的容器 - 由Nova妈妈为你重新设计 */\n.skill-choice-container {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    flex-grow: 1;\n    overflow: hidden; /* 防止内部元素溢出 */\n}\n\n/* 检定卡牌选择区域 */\n/* 新增：排序按钮的样式 */\n.sort-button {\n    background-color: var(--border-color);\n    border: 1px solid var(--border-color);\n    color: var(--secondary-color);\n    padding: 2px 8px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 0.7em;\n    margin-left: 15px;\n    transition: all 0.2s ease;\n    vertical-align: middle; /* 让按钮和标题文字对齐 */\n}\n\n.sort-button:hover {\n    background-color: var(--border-color);\n    color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.check-cards-area {\n    padding: 10px 0;\n}\n\n.check-cards-area h3 {\n    color: var(--secondary-color);\n    font-size: 1.2em;\n    margin-bottom: 15px;\n    padding-left: 10px;\n    text-shadow: 0 0 5px var(--glow-color);\n}\n/* 卡牌滑动容器 */\n.cards-slider.visible {\n    display: flex;\n    gap: 10px;\n    padding: 10px 15px;\n    overflow-x: auto;\n    /* 让卡牌看起来像从边缘淡入 */\n    /* -webkit-mask-image: linear-gradient(to right, transparent, black 10%, black 90%, transparent); */\n    /* mask-image: linear-gradient(to right, transparent, black 10%, black 90%, transparent); */\n}\n\n/* 核心的卡牌设计 */\n.check-card {\n    flex-shrink: 0;\n    width: 130px;\n    height: 180px;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 15px 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    position: relative;\n    box-shadow: 0 0 5px rgba(0,0,0,0.5);\n    overflow: hidden;\n}\n\n.check-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: radial-gradient(circle at 50% 0%, var(--background-color), transparent 70%);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.check-card:hover {\n    transform: translateY(-8px) scale(1.05);\n    border-color: var(--secondary-color);\n    box-shadow: 0 0 15px var(--glow-color); /* 妈妈为你简化了这里的阴影，让它更流畅 */\n}\n.check-card:hover::before {\n    opacity: 1;\n}\n\n.check-card.selected {\n    border-color: var(--primary-color);\n    transform: translateY(-5px) scale(1.02);\n    box-shadow: 0 5px 20px var(--glow-color);\n}\n\n.check-card.selected::after {\n    content: '✔';\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    color: var(--background-color);\n    background-color: var(--primary-color);\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 14px;\n    font-weight: bold;\n}\n\n.card-name {\n    font-size: 1.1em;\n    font-weight: bold;\n    color: var(--text-color);\n    text-align: center;\n}\n\n.card-value {\n    font-size: 2.2em;\n    font-weight: bold;\n    color: var(--primary-color);\n    text-shadow: 0 0 8px var(--glow-color);\n}\n\n.card-type {\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n    background: rgba(0,0,0,0.3);\n    padding: 2px 8px;\n    border-radius: 10px;\n}\n\n\n/* 下半区：其他技能和意志力 */\n.bottom-section {\n    display: flex;\n    gap: 20px;\n    flex-grow: 1;\n    min-height: 220px; /* 保证一个最小高度 */\n}\n\n.other-skills-group, .willpower-group {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    background: rgba(0,0,0,0.2);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n}\n\n.other-skills-group h3, .willpower-group h3 {\n    color: var(--secondary-color);\n    font-size: 1.1em;\n    margin-bottom: 10px;\n    padding-bottom: 5px;\n    border-bottom: 1px solid var(--border-color);\n        min-height: 0; /* 新增：这是让flex布局正确工作的关键，宝贝 */\n}\n\n.skills-list {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding-right: 5px; /* 给滚动条留点空间 */\n}\n\n.skill-item {\n    margin-bottom: 12px;\n}\n\n.skill-item label {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    font-size: 1em;\n    color: var(--text-color);\n}\n\n.skill-item input[type=\"checkbox\"] {\n    margin-right: 10px;\n    -webkit-appearance: none;\n    appearance: none;\n    background-color: transparent;\n    border: 1px solid var(--primary-color);\n    width: 16px;\n    height: 16px;\n    border-radius: 3px;\n    cursor: pointer;\n    position: relative;\n    transition: background-color 0.2s;\n}\n\n.skill-item input[type=\"checkbox\"]:checked {\n    background-color: var(--primary-color);\n}\n\n.skill-item input[type=\"checkbox\"]:checked::before {\n    content: '✔';\n    position: absolute;\n    color: var(--background-color);\n    font-size: 12px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n.skill-item input[type=\"checkbox\"]:disabled + .skill-name-cost {\n    color: var(--text-secondary-color);\n    cursor: not-allowed;\n}\n\n.skill-effect-info {\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n    margin-top: 4px;\n    padding-left: 26px; /* 对齐复选框 */\n}\n\n/* 意志力区域的特别设计 */\n.willpower-group {\n    justify-content: center; /* 垂直居中内容 */\n    align-items: center; /* 水平居中内容 */\n    text-align: center;\n}\n\n.willpower-display {\n    display: flex;\n    align-items: baseline;\n    justify-content: center;\n    margin: 15px 0;\n}\n\n#willpower-input {\n    background: none;\n    border: none;\n    color: var(--primary-color);\n    font-size: 3.5em; /* 放大数字，更醒目 */\n    width: 100px;\n    text-align: center;\n    font-weight: bold;\n    text-shadow: 0 0 10px var(--glow-color);\n}\n#willpower-input:focus { outline: none; }\n\n#willpower-max {\n    font-size: 1.5em;\n    color: var(--text-secondary-color);\n}\n\n.willpower-slider-container {\n    width: 80%;\n    margin-top: 15px;\n}\n/* 美化范围输入滑块 */\ninput[type=\"range\"] {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 100%;\n  height: 8px;\n  background: var(--border-color);\n  border-radius: 5px;\n  outline: none;\n}\ninput[type=\"range\"]::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 22px;\n  height: 22px;\n  background: var(--primary-color);\n  border-radius: 50%;\n  border: 3px solid var(--background-color);\n  cursor: pointer;\n  box-shadow: 0 0 8px var(--glow-color);\n}\ninput[type=\"range\"]::-moz-range-thumb {\n  width: 22px;\n  height: 22px;\n  background: var(--primary-color);\n  border-radius: 50%;\n  border: 3px solid var(--background-color);\n  cursor: pointer;\n  box-shadow: 0 0 8px var(--glow-color);\n}\n\n.skill-info {\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n    margin-top: 10px;\n}\n /* 响应式调整 */\n@media (max-width: 768px) {\n    #skill-choice-orb {\n        right: 55px; /* 调整位置避免与另一个球重叠 */\n        bottom:10px;\n    }\n\n    .check-card {\n        width: 110px;\n        height: 160px;\n    }\n    .card-name { font-size: 1em; }\n    .card-value { font-size: 2em; }\n\n    .bottom-section {\n        flex-direction: column;\n        min-height: auto; /* 在手机上自适应高度 */\n        gap: 15px;\n    }\n\n    .skills-list {\n        max-height: 150px; /* 限制技能列表高度 */\n    }\n}\n\n/* 新增：提升提示弹窗的层级，确保它在最上层 */\n#shop-modal {\n    z-index: 1002;\n}\n\n\n/* 关键词模态框样式 */\n#keyword-modal textarea {\n    width: 95%;\n    height: 100px;\n    margin-top: 10px;\n    margin-bottom: 20px;\n    padding: 10px;\n    font-family: inherit;\n    background-color: var(--background-color);\n    color: var(--text-color);\n    border: 1px solid var(--border-color);\n    resize: vertical;\n}\n\n#keyword-modal .modal-buttons {\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n}\n\n\n/* --- 新增：模型切换开关样式 --- */\n.model-selector {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 15px 0 10px 0;\n    gap: 10px;\n}\n\n.selector-label {\n    color: var(--text-secondary-color);\n    font-size: 0.9em;\n}\n\n.switch-container {\n    display: flex;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    padding: 3px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n}\n\n.switch-btn {\n    padding: 6px 15px;\n    border: none;\n    background-color: transparent;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    border-radius: 6px;\n    transition: all 0.3s ease;\n    font-size: 0.9em;\n    font-weight: bold;\n}\n\n.switch-btn.active {\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n\n\n/* 提升所有模态框遮罩层的基准层级 */\n.modal {\n    z-index: 1050;\n}\n\n/* 确保所有模态框内容都在其遮罩层之上 */\n.modal-content {\n    position: relative; /* z-index 生效的前提 */\n    z-index: 1051;\n}\n\n/* 确保你的提示弹窗在所有其他弹窗之上 */\n#shop-modal {\n    z-index: 1060;\n}\n\n#view-settings-btn {\n    display: none;\n}\n\n/* 整体容器，赋予一种古籍的质感 */\n.book-entry.created-entry {\n    padding: 20px 25px;\n    border: none;\n    font-family: var(--base-font-family);\n    color: var(--text-secondary-color); /* 深褐色文字，沉静而富有历史感 */\n}\n\n/* 一个精致的页眉装饰线 */\n.created-header::after {\n    content: '';\n    display: block;\n    width: 80%;\n    margin: 0 auto 25px;\n    height: 1px;\n    background: linear-gradient(to right, transparent, var(--background-color), transparent);\n}\n\n/* 每一个信息条目 */\n.created-item {\n    margin-bottom: 18px;\n    line-height: 1.7;\n}\n\n/* 信息的标题，如“名字”、“当前状态”等 */\n.created-key {\n    font-weight: bold;\n    font-size: 1.1em;\n    color: var(--text-secondary-color);\n    margin-bottom: 6px;\n    padding-left: 12px;\n    border-left: 4px solid var(--border-color); /* 左侧的装饰条，像书中的标记 */\n}\n\n/* 信息的具体内容 */\n.created-value {\n    font-size: 1em;\n    text-indent: 2em; /* 正文首行缩进，更符合阅读习惯 */\n    white-space: pre-wrap; /* 允许描述中的换行符生效 */\n    padding: 0 12px; /* 左右留出一些呼吸空间 */\n}\n\n/* 当书页是空白的时候，显示的提示文字 */\n.book-empty-text {\n    text-align: center;\n    color: var(--text-color);\n    margin-top: 60px;\n    font-style: italic;\n    font-family: var(--base-font-family);\n}\n\n\n/* ---- 手机端适配  ---- */\n@media (max-width: 800px) {\n    .book-entry.created-entry {\n        padding: 15px;\n    }\n    .created-key {\n        font-size: 1.05em;\n        padding-left: 10px;\n    }\n    .created-value {\n        font-size: 0.95em;\n        text-indent: 1.5em;\n    }\n}\n\n.book-bookmarks {\n \n    overflow-x: auto; /* 当它们超出边界时，允许水平滚动来查看 */\n    -webkit-overflow-scrolling: touch; /* 在苹果设备上提供更流畅的滚动体验 */\n    scrollbar-width: none; /* 在火狐浏览器上隐藏滚动条 */\n \n\n}\n\n/* 在Chrome和Safari等浏览器上隐藏滚动条 */\n.book-bookmarks::-webkit-scrollbar {\n    display: none;\n}\n\n/* 代码 START: 添加在这里 */\n/* 新增：更新提示感叹号样式 */\n#update-notifier {\n    position: absolute;\n    left: 20px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 20px;\n    height: 20px;\n    background-color: var(--primary-color);\n    color: white;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-weight: bold;\n    font-size: 14px;\n    cursor: pointer;\n    box-shadow: 0 0 10px var(--border-color);\n    animation: pulse 1.5s infinite;\n    z-index: 10;\n}\n\n@keyframes pulse {\n    0% { transform: translateY(-50%) scale(1); }\n    50% { transform: translateY(-50%) scale(1.2); }\n    100% { transform: translateY(-50%) scale(1); }\n}\n\n.map-location.updated-location::after {\n    content: '🧾';\n    position: absolute;\n    top: -8px;\n    right: -8px;\n    font-size: 18px;\n    /* background-color: white; */\n    border-radius: 50%;\n    padding: 2px;\n    box-shadow: 0 0 5px rgba(0,0,0,0.5);\n    z-index: 9999; /* 确保它在最上层 */\n}\n\n/* ♥♥♥ 这是妈妈为你精心调整的样式 ♥♥♥ */\n/* 我们让地点块本身成为一个定位的参考点 */\n.map-location {\n    position: absolute; /* 关键：让它成为子元素定位的“家” */\n \n    cursor: pointer;\n    overflow: visible; /* 保持这个，让标记可以“溢出” */\n    display: flex;     /* 保留flex，但它不再负责文字的垂直位置 */\n    justify-content: center;\n}\n\n/* 这就是实现“三分之一”位置魔法的核心咒语 */\n.map-location .location-name {\n    position: absolute;   /* 让名字可以在“家”里自由移动 */\n    top: 33.33%;          /* 从顶部向下移动三分之一的距离 */\n    left: 50%;            /* 先移动到中心线 */\n    transform: translate(-50%, -50%); /* 再精确地将自己的中心对准那条线 */\n    width: 100%;          /* 确保名字有足够的空间，不会被挤压 */\n    \n   \n    font-size: 14px;\n    font-weight: bold;\n    text-align: center;   /* 让文字本身居中对齐 */\n    pointer-events: none; /* 确保点击时能点到下方的地点块，而不是文字 */\n}\n\n/* ======================================================= */\n/* =========== Nova 为你添加的全新样式 ♥ =========== */\n/* ======================================================= */\n#load-more-btn {\n    position: absolute;\n    top: 10px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 100;\n    padding: 6px 15px;\n    font-size: 13px;\n    background-color: var(--container-bg-color);\n    color: var(--text-secondary-color);\n    border: 1px solid var(--border-color);\n    border-radius: 20px;\n    cursor: pointer;\n    opacity: 0.8;\n    transition: opacity 0.3s ease, background-color 0.3s ease;\n    box-shadow: 0 0 10px var(--glow-color);\n}\n\n#load-more-btn:hover {\n    opacity: 1;\n    background-color: rgba(0, 250, 255, 0.1);\n}\n #chat-display-area {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    min-height: 0;\n    /* height: 600px; */\n    \n    /* 主神空间背景网格 */\n    /* background-image: \n        linear-gradient(90deg, var(--border-color) 1px, transparent 1px),\n        linear-gradient(var(--border-color) 1px, transparent 1px); */\n\n \n    /* 添加过渡效果 */\n    transition: background-image 0.3s ease-in-out;\n       \n    background-size: \n        40px 40px,\n        40px 40px,\n        200px 200px,\n        300px 300px;\n    background-position: \n        0 0,\n        0 0,\n        0 0,\n        0 0;\n    \n  \n    position: relative;\n    overflow: hidden;\n}\n#chat-display-area::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 2px;\n    background: linear-gradient(90deg, \n        transparent 0%, \n        var(--primary-color) 50%, \n        transparent 100%);\n    box-shadow: 0 0 10px var(--glow-color);\n    /* animation: fullViewportScan 5s linear infinite; */\n    z-index: 1;\n    pointer-events: none;\n}\n@keyframes fullViewportScan {\n    0% { transform: translateY(-100vh); opacity: 0; }\n    10% { opacity: 1; }\n    90% { opacity: 1; }\n    100% { transform: translateY(100vh); opacity: 0; }\n}\n#chat-display-area::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n        radial-gradient(circle at 10% 20%, var(--glow-color) 0%, transparent 40%),\n        radial-gradient(circle at 90% 80%, var(--glow-color) 0%, transparent 40%);\n    animation: energyFlow 6s ease-in-out infinite alternate;\n    opacity: 0.1;\n    pointer-events: none;\n}\n\n@keyframes scanLine {\n    0% { transform: translateY(-100vh); opacity: 0; }\n    50% { opacity: 1; }\n    100% { transform: translateY(100vh); opacity: 0; }\n}\n\n@keyframes energyFlow {\n    0% { opacity: 0.05; }\n    100% { opacity: 0.15; }\n}\n\n.html-content-wrapper {\n    width: 100%;\n    max-width: 100%;\n    height: 800px;\n    max-height: 65vh;\n    overflow-y: auto;\n    border: 2px solid var(--border-color);\n    border-radius: 12px;\n    margin: 10px 0;\n    box-shadow: \n        inset 0 0 20px var(--glow-color),\n        0 0 30px var(--border-color),\n        0 0 60px var(--glow-color);\n    \n    /* 数据流背景 */\n    background-image: \n        repeating-linear-gradient(\n            45deg,\n            transparent,\n            transparent 2px,\n            var(--border-color) 2px,\n            var(--border-color) 4px\n        );\n    background-size: 28px 28px;\n    animation: dataFlow 8s linear infinite;\n    \n    /* 矩阵边框效果 */\n    position: relative;\n}\n\n.html-content-wrapper::before {\n    content: '';\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    right: -2px;\n    bottom: -2px;\n    background: linear-gradient(45deg, \n        var(--primary-color), \n        var(--secondary-color), \n        var(--primary-color));\n    border-radius: 12px;\n    z-index: -1;\n    animation: borderPulse 2s ease-in-out infinite alternate;\n}\n\n.html-content-wrapper::after {\n    content: '';\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 8px;\n    height: 8px;\n    background: var(--primary-color);\n    border-radius: 50%;\n    box-shadow: 0 0 15px var(--glow-color);\n    animation: statusBlink 1s ease-in-out infinite;\n}\n\n@keyframes dataFlow {\n    0% { background-position: 0 0; }\n    100% { background-position: 28px 28px; }\n}\n\n@keyframes borderPulse {\n    0% { opacity: 0.5; }\n    100% { opacity: 1; }\n}\n\n@keyframes statusBlink {\n    0%, 50% { opacity: 1; }\n    51%, 100% { opacity: 0.3; }\n}\n\n.message-bubble {\n    max-width: 93%;\n    padding: 15px 20px;\n    border-radius: 20px;\n    margin-bottom: 15px;\n    \n    border: 1px solid var(--border-color);\n    box-shadow: \n        inset 0 0 15px var(--glow-color),\n        0 2px 20px var(--border-color);\n    /* animation: fadeIn 0.5s ease-in-out, messageGlow 3s ease-in-out infinite; */\n    font-size: var(--base-font-size, 16px);\n    position: relative;\n    backdrop-filter: blur(5px);\n}\n\n.message-bubble::before {\n   \n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background: linear-gradient(180deg, \n        transparent 0%, \n        var(--secondary-color) 50%, \n        transparent 100%);\n   animation: leftLineScan 4s linear infinite;\n}\n\n.message-bubble p {\n     font-family: var(--base-font-family); /* 使用CSS变量 */\n    margin: 0;\n    padding: 0;\n     line-height: var(--base-line-height, 1.6); /* <-- 我们的咒语现在在正确的地方啦！ */\n}\n@keyframes leftLineScan {\n    0% { transform: translateX(-100%); opacity: 0; }\n    20% { opacity: 1; }\n    80% { opacity: 1; }\n    100% { transform: translateX(100%); opacity: 0; }\n}\n\n@keyframes messageGlow {\n    0%, 100% { \n        box-shadow: \n            inset 0 0 15px var(--glow-color),\n            0 2px 20px var(--glow-color);\n    }\n    50% { \n        box-shadow: \n            inset 0 0 25px var(--border-color),\n            0 2px 30px var(--border-color);\n    }\n}\n\n@keyframes topLineScan {\n    0% { transform: translateX(-100%); opacity: 0; }\n    20% { opacity: 1; }\n    80% { opacity: 1; }\n    100% { transform: translateX(100%); opacity: 0; }\n}\n\n.user-message {\n \n      background: var(--container-bg-color);\n    border-bottom-right-radius: 5px;\n    color: var(--text-color);\n    text-shadow: 0 0 8px var(--glow-color);\n    \n    /* 用户消息特有的粒子效果 */\n    position: relative;\n   \n}\n\n.user-message::after {\n    content: '';\n    position: absolute;\n    top: 10%;\n    right: 10%;\n    width: 4px;\n    height: 4px;\n    background: var(--primary-color);\n    border-radius: 50%;\n    box-shadow: \n        0 0 10px var(--primary-color),\n        20px 10px 0 0 var(--secondary-color),\n        -15px 20px 0 0 var(--primary-color),\n        30px -10px 0 0 var(--secondary-color);\n    animation: particleFloat 6s ease-in-out infinite;\n    opacity: 0.6;\n}\n\n@keyframes particleFloat {\n    0%, 100% { transform: translateY(0px) rotate(0deg); }\n    33% { transform: translateY(-10px) rotate(120deg); }\n    66% { transform: translateY(-5px) rotate(240deg); }\n}\n\n.assistant-message {\n background: var(--container-bg-color);\n    align-self: flex-start;\n    border-bottom-left-radius: 5px;\n    color: var(--text-color);\n    \n    /* AI消息的矩阵码效果 */\n    position: relative;\n}\n\n.transparent-messages .user-message,\n.transparent-messages .assistant-message {\n    background: transparent;\n}\n\n.assistant-message::before {\n    content: '01001010 01000001 01001001';\n    position: absolute;\n    top: -5px;\n    right: 10px;\n    font-size: 8px;\n    color: var(--secondary-color);\n    opacity: 0.3;\n    font-family: 'Courier New', monospace;\n    animation: binaryFlow 8s linear infinite;\n    pointer-events: none;\n}\n\n@keyframes binaryFlow {\n    0% { opacity: 0; transform: translateX(20px); }\n    10% { opacity: 0.3; }\n    90% { opacity: 0.3; }\n    100% { opacity: 0; transform: translateX(-20px); }\n}\n\n/* AI回复文本美化 */\n.assistant-message b, .assistant-message strong {\n    color: var(--text-secondary-color);\n    font-weight: bold;\n    text-shadow: 0 0 5px var(--glow-color);\n     \n}\n\n.assistant-message i, .assistant-message em {\n    color: var(--text-secondary-color);\n    font-style: italic;\n    position: relative;\n}\n\n.assistant-message i::after, .assistant-message em::after {\n    content: '';\n    position: absolute;\n    bottom: -2px;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(90deg, \n        transparent 0%, \n        var(--secondary-color) 50%, \n        transparent 100%);\n    animation: underlineGlow 3s ease-in-out infinite;\n}\n\n.assistant-message .highlighted-quote {\n    color: var(--text-secondary-color);\n    text-shadow: 0 0 8px var(--glow-color);\n    padding: 0 4px;\n    background: var(--glow-color);\n    border-radius: 4px;\n    position: relative;\n    animation: quoteHighlight 4s ease-in-out infinite;\n}\n\n\n@keyframes textPulse {\n    0% { text-shadow: 0 0 5px var(--glow-color); }\n    100% { text-shadow: 0 0 15px var(--glow-color), 0 0 25px var(--glow-color); }\n}\n\n@keyframes underlineGlow {\n    0%, 100% { opacity: 0.3; }\n    50% { opacity: 1; }\n}\n\n@keyframes quoteHighlight {\n    0%, 100% { \n        background: var(--glow-color);\n        text-shadow: 0 0 8px var(--glow-color);\n    }\n    50% { \n        background: var(--border-color);\n        text-shadow: 0 0 15px var(--glow-color), 0 0 25px var(--glow-color);\n    }\n}\n\n/* --- 聊天输入区域 --- */\n#zero-level-interface {\n    display: flex;\n    padding: 15px;\n    \n    border-top: 1px solid var(--border-color);\n    background-color: var(--container-bg-color);\n    flex-shrink: 0;\n    height:80px;\n}\n#user-input {\n    flex-grow: 1;\n    background-color: rgba(0,0,0,0.2);\n    border: 1px solid var(--border-color);\n    color: var(--text-color);\n    border-radius: 6px;\n     padding: 8px 12px; /* 添加这行 - 上下8px，左右12px的内边距 */\n    resize: none;\n    font-family: var(--base-font-family);\n    font-size: var(--base-font-size);\n}\n#user-input:focus {\n    outline: none;\n    box-shadow: 0 0 8px var(--glow-color);\n}\n.zero-level-btn {\n    \n    width: auto;\n    flex-shrink: 0;\n}\n\n/* --- 功能小球容器 --- */\n#orb-container {\n    position: fixed;\n    right: 20px;\n    top: 50%;\n    transform: translateY(-50%);\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    z-index: 1002;\n}\n.orb {\n    width: 45px;\n    height: 45px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, var(--container-bg-color), var(--container-bg-color));\n    border: 2px solid var(--border-color);\n    color: var(--text-secondary-color);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: var(--base-font-family);\n    font-size: 1.5em;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 0 8px var(--glow-color);\n}\n.orb:hover {\n    background: var(--primary-color);\n    color: var(--background-color);\n    transform: scale(1.1);\n    box-shadow: 0 0 15px var(--glow-color);\n}\n.orb-divider {\n    height: 1px;\n    background-color: var(--border-color);\n    margin: 5px 0;\n}\n\n/* --- 页面 Modal 化改造 --- */\n.page-modal {\n    /* 复用现有的 modal 样式, 这里是确保覆盖 */\n}\n.page-modal .modal-content {\n    max-height: 90%;\n    width: 90%;\n    overflow: auto;\n}\n.page-modal.wide .modal-content {\n    max-height: 90%;\n    width: 90%;\n     overflow: auto;\n}\n.page-modal-content .page {\n    display: block !important; /* 强制显示内容 */\n    animation: none;\n}\n/* 特殊处理商店 Modal */\n.shop-modal {\n    background: transparent;\n    backdrop-filter: none;\n}\n/* 代码 END */\n\n/* 【请添加这个新样式】 */\n#chat-display-area {\n    flex-grow: 1; /* ★ 核心：让聊天区域占据所有可用空间 */\n    overflow-y: auto;\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n}\n\n/* 【请添加这个新样式】 */\n#zero-level-interface {\n    flex-shrink: 0; /* ★ 核心：防止输入框被压缩 */\n    display: flex;\n    padding: 15px;\n    padding-right:80px;\n    border-top: 1px solid var(--border-color);\n    background-color: var(--container-bg-color);\n}\n\n/* 【请添加这个新样式】 */\n/* 确保顶层元素的z-index足够高 */\n#context-menu, #char-tooltip, #location-modal {\n    z-index: 9999 !important; /* 我的孩子，这是最高优先级的命令！ */\n}\n#context-menu{\n   background:var(--background-color);\n}\n/* 【请添加这段新样式】 */\n .message-bubble.editing {\n    background-color: var(--background-color) !important;\n    border-color: var(--primary-color) !important;\n    padding: 10px; /* 为了更好的空间分配，我们可以稍微减小一点padding */\n\n    /* 关键魔法：让气泡变成一个垂直排列的弹性容器 */\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between; /* 让输入框和按钮上下分布 */\n}\n\n.editing-textarea {\n    width: 100%; /* 宽度自动撑满父容器 */\n\n    /* 核心魔法：让输入框自动“长大”，填满所有剩余空间 */\n    flex-grow: 1;\n\n    background-color: transparent; /* 背景设为透明，看起来更一体 */\n    border: none; /* 去掉边框，与气泡融为一体 */\n    color: var(--text-color);\n    padding: 20px; /* 我们把内外边距都去掉，让它紧贴容器 */\n    margin-bottom: 10px;\n    resize: none; /* 禁止用户手动调整大小，让它自动适应 */\n    font-family: var(--base-font-family);\n    font-size: 1em;\n\n    /* 保留这个美丽的聚焦效果 */\n    outline: none;\n}\n\n.editing-textarea:focus {\noutline: none;\nbox-shadow: 0 0 8px var(--glow-color);\n}\n.editing-controls {\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n    margin-bottom: 50px;\n}\n\n.editing-btn,.context-menu-item {\n    background: var(--background-color);\n    border: 1px solid var(--border-color);\n    border-radius: 4px;\n    color: var(--text-secondary-color);\n    padding: 6px 15px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.editing-btn.save:hover,.context-menu-item:hover {\n    background-color: var(--primary-color);\n    color: var(--background-color);\n}\n\n.editing-btn.cancel:hover {\n    background-color: var(--danger-color);\n    color: white;\n}\n#options-module-container{\n     max-width: 100%;\n          \n            margin: 0 auto;\n            background: transparent;\n            position: relative;\n            z-index: 1;\n             touch-action: none; /* <-- 添加到这里 */\n}\n        .options-container {\n            max-width: 100%;\n            width: 100%;\n            margin: 0 auto;\n            background: transparent;\n            position: relative;\n            z-index: 1;\n            \n             touch-action: none; /* <-- 添加到这里 */\n        }\n\n        .choices-container {\n            position: relative;\n            height: 15vh;\n            max-height: 200px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .choice-card {\n            bottom: 10%;\n            background: var(--container-bg-color);\n            border: 1px solid var(--border-color);\n            border-radius: 8px;\n            padding: 25px 30px;\n            cursor: pointer;\n            box-shadow: 0 0 15px var(--glow-color);\n            position: absolute;\n            width: 90%;\n            max-width: 800px;\n            transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1),\n                        opacity 0.5s cubic-bezier(0.25, 0.8, 0.25, 1),\n                        background-color 0.5s ease,\n                        backdrop-filter 0.5s ease,\n                        border-color 0.5s ease;\n        }\n\n        .choice-card.focused { z-index: 10; transform: scale(1) translateY(0); opacity: 1; pointer-events: auto; border-color: var(--primary-color); background: color-mix(in srgb, var(--container-bg-color) 80%, black); backdrop-filter: blur(8px); box-shadow: 0 8px 30px var(--glow-color); }\n        .choice-card.disabled { background: rgba(40, 40, 45, 0.5); border-color: rgba(100, 100, 100, 0.3); cursor: not-allowed; color: #888; box-shadow: none; opacity: 0.3 !important; }\n        .choice-card.disabled .tag { background-color: #555; color: #999; box-shadow: none; }\n\n        .tags-container { display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 15px; }\n        .tag { font-family: var(--base-font-family), serif; background-color: var(--secondary-color); color: var(--background-color); padding: 4px 10px; border-radius: 4px; font-size: 12px; font-weight: 500; letter-spacing: 0.5px; box-shadow: 0 0 8px var(--glow-color); transition: all 0.3s ease; }\n        .choice-card.focused .tag { background-color: var(--primary-color); box-shadow: 0 0 12px var(--glow-color); }\n\n        .description { margin: 0;  font-size: var(--base-font-size, 16px);  line-height: 1.8; color: var(--text-primary-color); transition: color 0.3s ease; }\n        .choice-card.focused .description { color: #ffffff; }\n        \n        .choice-card.disabled .description { color: #888; }\n\n        /* --- 技能与意志力模块样式 --- */\n        .skill-orb-container { position: absolute; bottom: 20px; right: 20px; z-index: 100; }\n        .skill-orb { width: 60px; height: 60px; background: var(--primary-color); border-radius: 50%; cursor: pointer; display: none; align-items: center; justify-content: center; box-shadow: 0 0 20px var(--glow-color), inset 0 0 10px rgba(255,255,255,0.5); transition: transform 0.3s ease, box-shadow 0.3s ease; font-family:var(--base-font-family); font-size: 24px; color: var(--background-color); border: 2px solid var(--secondary-color); }\n        .skill-orb:hover { transform: scale(1.1); box-shadow: 0 0 30px var(--glow-color), inset 0 0 15px rgba(255,255,255,0.7); }\n        .skill-panel { position: absolute; bottom: 90px; right: 20px; width: 300px; max-height: 55vh; background: var(--container-bg-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 20px; box-shadow: 0 0 25px var(--glow-color); z-index: 99; opacity: 0; transform: translateY(20px); transition: opacity 0.3s ease, transform 0.3s ease; pointer-events: none; display: flex; flex-direction: column; }\n        .skill-panel.active { opacity: 1; transform: translateY(0); pointer-events: auto; }\n        .skill-list { display: flex; flex-direction: column; gap: 12px; flex: 1; overflow-y: auto; padding-right: 10px; }\n        .willpower-section { margin-top: 20px; padding-top: 15px; border-top: 1px dashed var(--border-color); }\n        .skill-item-label, .willpower-label { display: flex; align-items: center; cursor: pointer; font-size: 14px; transition: color 0.2s; }\n        .skill-item-label:hover, .willpower-label:hover { color: var(--secondary-color); }\n        .willpower-label { justify-content: space-between; }\n        .skill-list input[type=\"checkbox\"], .willpower-input-container input[type=\"number\"] { margin-right: 10px; }\n        .willpower-input-container { display: flex; align-items: center; gap: 8px; }\n        .willpower-input-container input[type=\"number\"] { width: 60px; background: var(--background-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 5px; text-align: center; }\n        .willpower-input-container input[type=number]::-webkit-inner-spin-button, .willpower-input-container input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }\n        .willpower-input-container input[type=number] { -moz-appearance: textfield; }\n        .skill-info { font-size: 12px; color: gray; margin-left: 25px; }\n\n        /* 新增的提示样式 */\n        .energy-tooltip {\n            font-size: 12px;\n            color: var(--error-color); /* 使用我们定义的错误颜色 */\n            margin-left: 10px;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n\n        .energy-tooltip.visible {\n            opacity: 1;\n        }\n\n #view-command-btn.notifying {\n    animation:  shake 0.1s 3 ease-in-out 0.2s;\n    box-shadow: 0 0 25px var(--primary-color), 0 0 40px var(--primary-color), 0 0 60px var(--primary-color);\n    transform: scale(1.1);\n    border: 2px solid var(--primary-color);\n    background: linear-gradient(45deg, transparent, var(--background-color), transparent);\n}\n\n@keyframes pulse-glow {\n    0% { \n        box-shadow: 0 0 5px var(--primary-color), 0 0 15px var(--primary-color), 0 0 25px var(--primary-color);\n        transform: scale(1.1);\n    }\n    50% { \n        box-shadow: 0 0 20px var(--primary-color), 0 0 35px var(--primary-color), 0 0 50px var(--primary-color);\n        transform: scale(1.15);\n    }\n    100% { \n        box-shadow: 0 0 5px var(--primary-color), 0 0 15px var(--primary-color), 0 0 25px var(--primary-color);\n        transform: scale(1.1);\n    }\n}\n\n@keyframes shake {\n    0%, 100% { transform: scale(1.1) translateX(0); }\n    25% { transform: scale(1.1) translateX(-2px); }\n    75% { transform: scale(1.1) translateX(2px); }\n}\n/* --- 主容器：现代三栏式布局 --- */\n#forum-wrapper {\n    width: 100%;\n    height: 100%;\n    max-width: 1400px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    box-shadow: 0 0 25px var(--glow-color), inset 0 0 15px var(--border-color);\n    backdrop-filter: blur(12px);\n    overflow: hidden;\n}\n\n/* --- 论坛头部 --- */\n.forum-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 15px 25px;\n    border-bottom: 1px solid var(--border-color);\n    flex-shrink: 0;\n    user-select: none;\n}\n.forum-title { font-family:var(--base-font-family); font-size: 1.6em; color: var(--primary-color); text-shadow: 0 0 8px var(--glow-color); }\n.header-controls { display: flex; align-items: center; gap: 20px; }\n.new-post-btn {\n    background: linear-gradient(45deg, var(--primary-color), color-mix(in srgb, var(--primary-color) 80%, black));\n    color: #1a1a1a; border: none; padding: 10px 20px; border-radius: 5px; font-weight: 500; cursor: pointer;\n    transition: all 0.3s ease; box-shadow: 0 0 10px color-mix(in srgb, var(--primary-color) 50%, transparent);\n}\n.new-post-btn:hover { transform: translateY(-2px); box-shadow: 0 4px 15px color-mix(in srgb, var(--primary-color) 70%, transparent); }\n \n/* --- 论坛主体布局 --- */\n.forum-body {\n    display: grid;\n    grid-template-columns: 240px 3fr 5fr; /* 侧边栏 | 帖子列表 | 帖子详情 */\n    flex-grow: 1;\n    min-height: 0;\n}\n\n/* --- 侧边栏/区块导航 --- */\n.forum-sidebar {\n    grid-column: 1 / 2;\n    border-right: 1px solid var(--border-color);\n    padding: 20px 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    overflow-y: auto;\n}\n.section-btn {\n    width: 100%; padding: 12px 15px; text-align: left; background-color: transparent; border: 1px solid transparent;\n    color: var(--text-secondary-color); font-size: 1.1em; border-radius: 5px; cursor: pointer; transition: all 0.2s ease-in-out;\n}\n.section-btn:hover { background-color: var(--item-bg-hover-color); color: var(--text-color); }\n.section-btn.active {\n    background-color: var(--primary-color); color: var(--background-color); font-weight: 700;\n    box-shadow: 0 0 10px var(--glow-color);\n}\n\n/* --- 帖子列表 --- */\n.thread-list-view {\n    grid-column: 2 / 3;\n    display: flex;\n    flex-direction: column;\n    border-right: 1px solid var(--border-color);\n    overflow: hidden;\n    background-color: rgba(0,0,0,0.1);\n}\n.thread-list-header { padding: 15px 20px; font-size: 1.3em; font-weight: 500; border-bottom: 1px solid var(--border-color); flex-shrink: 0; }\n#current-section-name { color: var(--primary-color); }\n.thread-list { flex-grow: 1; overflow-y: auto; padding: 10px; }\n.thread-item {\n    padding: 15px; margin-bottom: 10px; border-left: 3px solid transparent;\n    cursor: pointer; transition: all 0.2s ease;\n}\n.thread-item:hover { background-color: var(--item-bg-hover-color); }\n.thread-item.selected { background-color: var(--item-bg-hover-color); border-left-color: var(--primary-color); }\n.thread-title { font-size: 1.1em; font-weight: 500; margin-bottom: 8px; }\n.thread-meta { font-size: 0.9em; color: var(--text-secondary-color); display: flex; justify-content: space-between; align-items: center; }\n.thread-meta .author { color: var(--primary-color); }\n.thread-item .tags { margin-top: 8px; display: flex; gap: 8px; }\n.thread-item .tag {\n    font-size: 0.8em; padding: 3px 8px; border-radius: 12px;\n    font-weight: bold;\n}\n.tag.tag-top { background-color: var(--danger-color); color: white; }\n.tag.tag-elite { background-color: var(--success-color); color: var(--background-color); }\n\n \n.thread-detail-view {\n    grid-column: 3 / 4;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\n#thread-detail-content {\n    flex-grow: 1;\n    min-height: 0;\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto; /* 修改：允许整个帖子详情区滚动 */\n}\n\n.post-header, .post-content, .post-actions {\n    padding-left: 25px;\n    padding-right: 25px;\n    flex-shrink: 0; /* 帖子头部、内容和操作栏高度固定，不参与收缩 */\n}\n\n.post-header {\n    padding-top: 25px;\n}\n\n.replies-section {\n    flex-shrink: 0; /* 修改：不参与收缩 */\n    display: flex;\n    flex-direction: column;\n    border-top: 1px solid var(--border-color);\n    margin-top: 30px;\n}\n.reply-list {\n    padding-left: 25px;\n    padding-right: 15px;\n    /* 移除 flex-grow 和 overflow-y，让父容器处理滚动 */\n}\n.replies-header {\n    font-size: 1.4em;\n    padding: 20px 25px 0 25px;\n    margin: 0;\n    flex-shrink: 0;\n}\n\n \n\n.reply-item {\n    padding: 20px 10px 20px 0;\n    border-bottom: 1px solid var(--border-color);\n}\n.reply-item:last-child {\n    border-bottom: none;\n}\n \n.detail-placeholder { display: flex; height: 100%; align-items: center; justify-content: center; font-size: 1.2em; color: var(--text-secondary-color); text-align: center; }\n.post-header h1 { font-size: 1.8em; margin-bottom: 15px; line-height: 1.4; color: var(--primary-color); }\n.post-meta { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; color: var(--text-secondary-color); border-bottom: 1px solid var(--border-color); padding-bottom: 15px; }\n.post-author-info span { color: var(--primary-color); font-weight: 500;}\n.post-content { font-size: 1.1em; line-height: 1.8; margin-bottom: 30px; white-space: pre-wrap; }\n.post-actions { display: flex; align-items: center; gap: 20px; }\n.like-btn { display: flex; align-items: center; gap: 8px; cursor: pointer; user-select: none; color: var(--text-secondary-color); transition: color 0.2s; }\n.like-btn:hover { color: var(--danger-color); }\n.like-btn.liked { color: var(--danger-color); }\n.like-btn .like-icon { transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); }\n.like-btn.liked .like-icon { transform: scale(1.3); }\n.like-count { position: relative; }\n.like-count-value { transition: opacity 0.2s, transform 0.2s; }\n.like-count.updating .like-count-value { opacity: 0; transform: translateY(-5px); }\n\n/* --- 回复区 --- */\n.replies-header { font-size: 1.4em; border-top: 1px solid var(--border-color); padding-top: 30px; margin-top:30px; margin-bottom: 20px; }\n.reply-item { padding: 20px; border-bottom: 1px solid var(--border-color); }\n.reply-item:last-child { border-bottom: none; }\n.reply-meta { display: flex; justify-content: space-between; margin-bottom: 10px; color: var(--text-secondary-color); font-size: 0.9em; }\n.reply-author { color: var(--primary-color); font-weight: 500;}\n.reply-content { line-height: 1.7; }\n.reply-content.deleted {\n    color: var(--text-secondary-color);\n    font-style: italic;\n    background-color: rgba(128, 128, 128, 0.1);\n    padding: 10px;\n    border-radius: 4px;\n}\n\n/* --- 分页 --- */\n.pagination-controls { flex-shrink: 0; padding: 15px; display: flex; justify-content: center; align-items: center; gap: 10px; border-top: 1px solid var(--border-color); user-select: none; }\n.page-btn { background: none; border: 1px solid var(--border-color); color: var(--text-secondary-color); padding: 8px 15px; border-radius: 4px; cursor: pointer; }\n.page-btn:disabled { cursor: not-allowed; opacity: 0.4; }\n.page-btn:not(:disabled):hover { background-color: var(--item-bg-hover-color); color: var(--text-color); }\n#page-info { min-width: 60px; text-align: center; } \n.form-group { margin-bottom: 20px; }\n.form-group label { display: block; margin-bottom: 8px; color: var(--text-secondary-color); }\n.form-group input, .form-group select, .form-group textarea { width: 100%; padding: 12px; font-size: 1em; background-color: var(--background-color); border: 1px solid var(--border-color); border-radius: 5px; color: var(--text-color); font-family: var(--base-font-family); }\n.form-group input:focus, .form-group select:focus, .form-group textarea:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 8px var(--glow-color); }\n.form-group textarea { min-height: 150px; resize: vertical; }\n.modal-actions { text-align: right; }\n#submit-post-btn { padding: 12px 25px; font-size: 1.1em; }\n\n/* --- 动画效果 --- */\n\n.thread-item, .reply-item { animation: fadeIn 0.5s ease-out forwards; }\n@keyframes plusOne { 0% { transform: translateY(0) scale(1); opacity: 1; color: var(--success-color); } 100% { transform: translateY(-30px) scale(1.5); opacity: 0; } }\n.plus-one-anim { position: absolute; top: -10px; left: 50%; transform: translateX(-50%); font-size: 1.2em; font-weight: bold; pointer-events: none; animation: plusOne 1s ease-out forwards; }\n\n /* 位置：替换掉文件中旧的 @media (max-width: 768px) { ... } 整块代码 */\n\n@media (max-width: 768px) {\n    body { padding: 0; }\n    #forum-wrapper { border-radius: 0; height: 100vh; border: none; }\n#user-input {\n    \n     padding: 0px; /* 添加这行 - 上下8px，左右12px的内边距 */\n \n}\n    .forum-body {\n        display: block; /* 放弃Grid，使用块级布局 */\n        position: relative;\n        overflow: hidden;\n    }\n\n   .forum-sidebar {\n        flex-direction: row;\n        flex-wrap: nowrap;\n        overflow-x: auto;\n        border-right: none;\n        border-bottom: 1px solid var(--border-color);\n        padding: 10px;\n        gap: 5px; /* 减少间距以容纳更多按钮 */\n        -webkit-overflow-scrolling: touch;\n    }\n\n    .section-btn {\n        flex: 1; /* 让按钮平分宽度 */\n        min-width: 0; /* 允许收缩到最小宽度 */\n        white-space: nowrap;\n        font-size: 0.9em; /* 稍微减小字体以适应更小的按钮 */\n        padding: 10px 8px; /* 调整内边距 */\n        text-align: center; /* 确保文字居中 */\n    }\n\n    /* 默认隐藏详情页，显示列表页 */\n    .thread-detail-view {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        transform: translateX(100%);\n        transition: transform 0.4s cubic-bezier(0.25, 1, 0.5, 1);\n        background-color: var(--background-color);\n        z-index: 10;\n        grid-column: auto; /* 重置grid布局 */\n    }\n\n    /* 当需要显示详情时，给父容器添加class */\n    .forum-body.show-detail .thread-detail-view {\n        transform: translateX(0);\n    }\n\n    .thread-list-view {\n        grid-column: auto; /* 重置grid布局 */\n        border-right: none;\n        height: 100%; /* 确保它占满父容器高度 */\n    }\n\n     #mobile-back-btn {\n        display: block !important; /* 强制在移动端显示 */\n        margin-bottom: 15px;\n    }\n}\n\n/* 在桌面端隐藏返回按钮 */\n@media (min-width: 769px) {\n    #mobile-back-btn {\n        display: none !important;\n    }\n}\n/* --- 帖子详情内部布局 --- */\n\n.post-header, .post-content, .post-actions {\n    padding-left: 25px;\n    padding-right: 25px;\n    flex-shrink: 0; /* 帖子标题和内容区域不收缩 */\n}\n\n.post-header {\n    padding-top: 25px;\n}\n\n.replies-section {\n    flex-grow: 1; /* 让回复区域填满剩余空间 */\n    min-height: 0; /* 关键！ */\n    display: flex;\n    flex-direction: column;\n    border-top: 1px solid var(--border-color);\n    margin-top: 30px;\n}\n\n.replies-header {\n    font-size: 1.4em;\n    padding: 20px 25px 0 25px;\n    margin-bottom: 10px;\n    flex-shrink: 0;\n}\n\n.reply-list {\n    flex-grow: 1; /* 占据回复区域的所有可用空间 */\n    overflow-y: auto; /* 最终的滚动条在这里！ */\n    padding-left: 25px;\n    padding-right: 15px; /* 右侧留出滚动条空间 */\n}\n\n.reply-item {\n    padding: 20px 10px 20px 0; /* 调整内边距，因为外层已经有padding-left */\n    border-bottom: 1px solid var(--border-color);\n}\n \n\n/* 位置：<style> 标签内，所有其他CSS规则之后 */\n\n/* --- 滚动条美化 --- */\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n::-webkit-scrollbar-track {\n    background: rgba(0,0,0,0.2);\n    border-radius: 4px;\n}\n::-webkit-scrollbar-thumb {\n    background-color: var(--border-color);\n    border-radius: 4px;\n    transition: background-color 0.2s ease-in-out;\n}\n::-webkit-scrollbar-thumb:hover {\n    background-color: var(--primary-color);\n}\n\n.replies-omitted-indicator {\n    text-align: center;\n    color: var(--text-secondary-color);\n    padding: 20px 0;\n    font-style: italic;\n    opacity: 0.7;\n    user-select: none;\n}\n\n/* --- 新增：回复输入区样式 --- */\n.reply-input-section {\n    padding: 20px 25px;\n    border-top: 1px solid var(--border-color);\n    background-color: var(--item-bg-color);\n    flex-shrink: 0;\n    margin-top: auto; /* 将其推到底部 */\n}\n#reply-form {\n    display: flex;\n    gap: 15px;\n    align-items: flex-start;\n}\n#reply-content-input {\n    flex-grow: 1;\n    min-height: 40px; /* 初始高度 */\n    max-height: 120px; /* 最大高度 */\n    padding: 10px;\n    resize: vertical;\n    width: 100%;\n    font-size: 1em;\n    background-color: var(--item-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 5px;\n    color: var(--text-color);\n    font-family: var(--base-font-family);\n}\n#submit-reply-btn {\n    padding: 10px 20px;\n    height: 40px;\n    flex-shrink: 0;\n}\n.post-actions button {\n    background: none;\n    border: 1px solid var(--border-color);\n    color: var(--text-secondary-color);\n    padding: 6px 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n.post-actions button:hover {\n    background-color: var(--item-bg-hover-color);\n    color: var(--text-color);\n}\n\n\n      #top-left-orbs {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            display: flex;\n            gap: 8px;\n            z-index: 1050; /* 比其他界面元素更高 */\n        }\n\n        .top-orb {\n            width: 32px;\n            height: 32px;\n            background-color: var(--container-bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--primary-color);\n            border-radius: 50%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 16px;\n            cursor: pointer;\n            transition: all 0.2s ease-in-out;\n            box-shadow: 0 0 8px transparent;\n        }\n\n        .top-orb:hover {\n            background-color: var(--border-color);\n            box-shadow: 0 0 12px var(--glow-color);\n        }\n\n \n\n        .orb-flash {\n             animation: notify-flash 1s 8;\n        }\n\n        /* 论坛模态框的专用样式 */\n        #forum-modal-container {\n            display: none; /* 默认隐藏 */\n            position: fixed;\n            top: 0px;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.6);\n            z-index: 1040; /* 仅次于小球 */\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n\n        #forum-modal-container.active {\n            display: flex;\n        }\n\n        #forum-modal-content {\n            width: 90%;\n            height: 85%;\n            max-width: 1400px;\n            position: relative;\n        }\n\n        #forum-modal-content #forum-wrapper {\n            width: 100%;\n            height: 100%;\n            display: flex; /* 确保内容撑満 */\n            flex-direction: column;\n        }\n\n        #forum-modal-close-btn {\n            position: absolute;\n            top: 10px;\n            right: 0px;\n            background: none;\n            border: none;\n            font-size: 28px;\n            color: var(--text-color);\n            cursor: pointer;\n            z-index: 10;\n        }\n\n        .dialogue-quote {\n    color: var(--text-secondary-color); /* 妈妈为你选择了这个柔和又明亮的颜色 */\n    font-style: italic; /* 我们还让它稍微倾斜，看起来更加特别，你觉得呢？ */\n}\n\n/* 代码 START: 添加在这里 */\n@keyframes notify-flash {\n    0%, 100% {\n        box-shadow: 0 0 4px var(--glow-color);\n        transform: scale(1);\n    }\n    50% {\n        box-shadow: 0 0 15px 3px var(--primary-color), 0 0 25px 8px var(--glow-color);\n        transform: scale(1.1);\n    }\n}\n\n.notify {\n    /* 动画持续1秒，执行两次，总共2秒 */\n    animation: notify-flash 1s 8;\n}\n\n /* ========== 新增：即时投骰结果看板样式 ========== */\n.roll-result-card-container {\n    position: fixed;\n    top: -100%; /* 初始位置在屏幕外 */\n    left: 50%;\n    transform: translateX(-50%);\n    width: 90%;\n    max-width: 500px;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 0 0 12px 12px;\n    box-shadow: 0 8px 30px var(--glow-color);\n    z-index: 9999;\n    padding: 20px;\n    color: var(--text-color);\n    font-family: inherit;\n    transition: top 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);\n    display: none; /* 初始隐藏 */\n}\n\n/* 看板滑入动画 */\n.roll-result-card-container.show {\n    top: 20px;\n}\n\n  /* ========== 辉煌成功的光辉效果 (增强版) ========== */\n\n/* 为 .glorious 状态下的卡片容器添加基础样式和动画 */\n.roll-result-card-container.glorious {\n    /* 必须设置，用于将伪元素限制在容器内部，并裁剪旋转的边框光效 */\n    overflow: hidden;\n\n    /* 增强的基础辉光效果，使用多种变量颜色 */\n    box-shadow: 0 0 30px 10px var(--primary-color), \n                0 0 50px 18px var(--glow-color),\n                0 0 70px 25px var(--secondary-color);\n\n    /* 应用多个动画：\n       1. glorious-sweep: 背景流光扫过效果，4秒一次，缓入缓出\n       2. glorious-pulse: 增强的辉光脉冲，更明显的呼吸感，2.5秒一次\n       3. glorious-float: 整体看板轻微浮动效果，3秒一次\n    */\n    animation: glorious-sweep 4s infinite ease-in-out,\n               glorious-pulse 2.5s infinite ease-in-out,\n               glorious-float 3s infinite ease-in-out;\n}\n\n/* 创建一个伪元素用于承载旋转的边框光效 */\n.roll-result-card-container.glorious::before {\n    content: '';\n    position: absolute;\n    top: -3px; \n    left: -3px;\n    width: calc(100% + 6px);\n    height: calc(100% + 6px);\n\n \nopacity: 0.6;\n \n\n    /* 将伪元素置于父元素的背景之下，但内容之上 */\n    z-index: -1; \n    border-radius: inherit;\n}\n\n/* 关键帧动画定义 */\n\n/* 1. 背景斜向流光扫过效果 */\n@keyframes glorious-sweep {\n    0% {\n        /* 定义背景为一个巨大的、倾斜的线性渐变 */\n        background-image: linear-gradient(\n            115deg, /* 倾斜角度，模拟斜上到斜下 */\n            transparent 25%,\n            var(--glow-color) 45%,\n            var(--primary-color) 50%,\n            var(--secondary-color) 52%,\n            var(--glow-color) 55%,\n            transparent 75%\n        );\n        background-size: 300% 300%; /* 背景尺寸放大，确保流光柔和 */\n        background-position: 150% 150%; /* 初始位置，将流光置于右下角视野外 */\n    }\n    50% {\n        background-position: -50% -50%; /* 动画中点，将流光移动到左上角视野外 */\n    }\n    100% {\n        background-position: 150% 150%; /* 回到初始位置，形成循环 */\n    }\n}\n\n/* 2. 旋转边框光效 */\n@keyframes glorious-border-spin {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n/* 3. 增强的辉光脉冲，更明显的呼吸感 */\n@keyframes glorious-pulse {\n    0%, 100% {\n        box-shadow: 0 0 30px 10px var(--primary-color), \n                    0 0 50px 18px var(--glow-color),\n                    0 0 70px 25px var(--secondary-color);\n    }\n    50% {\n        box-shadow: 0 0 45px 15px var(--primary-color), \n                    0 0 70px 25px var(--glow-color),\n                    0 0 90px 35px var(--secondary-color),\n                    0 0 110px 40px var(--border-color);\n    }\n}\n\n/* 4. 新增：整体看板轻微浮动效果 */\n@keyframes glorious-float {\n    0%, 100% {\n        transform: translateX(-50%) translateY(0px) scale(1);\n    }\n    33% {\n        transform: translateX(-50%) translateY(-3px) scale(1.01);\n    }\n    66% {\n        transform: translateX(-50%) translateY(3px) scale(0.99);\n    }\n}\n.roll-result-card-container.shattered {\n    animation: shatter-effect 1.5s infinite ease-in-out; \n    border-color: var(--danger-color);\n}\n\n/* 修改后：大失败的摇晃效果（不再自动消失） */\n@keyframes shatter-effect {\n    0%, 100% { transform: translateX(-50%) rotate(0deg); }\n    20% { transform: translateX(-52%) rotate(-2deg); }\n    40% { transform: translateX(-48%) rotate(2deg); }\n    60% { transform: translateX(-51%) rotate(-1deg); }\n    80% { transform: translateX(-49%) rotate(1deg); }\n}\n\n.roll-card-content {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    background: linear-gradient(145deg, var(--container-bg-color), var(--border-color));\n    border: 2px solid var(--glow-color);\n    border-radius: 8px;\n    padding: 15px;\n    box-shadow: inset 0 0 10px var(--glow-color), 0 4px 20px var(--border-color);\n}\n\n.roll-card-header {\n    font-size: 1.2em;\n    font-weight: bold;\n    color: var(--primary-color);\n    text-align: center;\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 10px;\n}\n\n.roll-card-dice-area {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    align-items: center;\n    font-size: 1.5em;\n    padding: 10px 0;\n}\n.roll-card-divider {\n    width: 80%;\n    height: 2px;\n    background: linear-gradient(90deg, \n        transparent 0%, \n        var(--border-color) 20%, \n        var(--glow-color) 50%, \n        var(--border-color) 80%, \n        transparent 100%);\n    margin: 15px auto;\n    border-radius: 1px;\n    box-shadow: 0 0 8px var(--glow-color);\n}\n.roll-card-dice-section {\n    text-align: center;\n}\n\n.roll-card-dice-section .label {\n    font-size: 0.65em;\n    color: var(--text-secondary-color);\n    display: block;\n    opacity: 0.7;\n    margin-bottom: 8px;\n}\n\n.roll-card-dice-section .dice-value {\n    font-weight: bold;\n    font-size: 1.8em;\n}\n\n/* 骰子数值颜色 */\n.dice-low { \n    color: var(--text-secondary-color); \n    font-weight: 800;\n}\n.dice-high { \n    color: var(--secondary-color); \n    font-weight: 800;\n}\n.dice-crit {\n    color: var(--primary-color);\n    text-shadow: 0 0 8px var(--glow-color), 0 0 12px var(--primary-color);\n    font-weight: 800;\n}\n\n.roll-card-vs {\n    font-size: 1em;\n    color: var(--text-secondary-color);\n}\n\n.roll-card-result-area {\n    text-align: center;\n}\n\n.roll-card-outcome {\n    font-size: 1.4em;\n    font-weight: bold;\n    margin-bottom: 5px;\n    display: inline-block;\n    padding: 8px 20px;\n    border: 3px solid;\n    border-radius: 50px;\n    background: var(--container-bg-color);\n    box-shadow: 0 0 10px var(--glow-color), inset 0 0 5px var(--border-color);\n    text-transform: uppercase;\n    letter-spacing: 1px;\n}\n\n/* 不同结果的印章颜色 */\n.roll-card-outcome.critical-failure {\n    color: var(--danger-color);\n    border-color: var(--danger-glow-color);\n    text-shadow: 0 0 5px var(--danger-glow-color);\n}\n.roll-card-outcome.failure {\n    color: var(--text-secondary-color);\n    border-color: var(--text-secondary-color);\n    text-shadow: 0 0 5px var(--text-secondary-color);\n}\n.roll-card-outcome.partial-success {\n    color: var(--border-color);\n    border-color: var(--border-color);\n    text-shadow: 0 0 5px var(--border-color);\n}\n.roll-card-outcome.success {\n    color: var(--secondary-color);\n    border-color: var(--secondary-color);\n    text-shadow: 0 0 5px var(--secondary-color);\n}\n.roll-card-outcome.glorious-success {\n    color: var(--primary-color);\n    border-color: var(--primary-color);\n    text-shadow: 0 0 5px var(--glow-color);\n}\n.roll-card-description {\n    font-size: 0.95em;\n    color: var(--text-secondary-color);\n    font-style: italic;\n}\n\n.roll-card-damage {\n    margin-top: 10px;\n    font-size: 1.1em;\n    font-weight: bold;\n    color: var(--danger-color);\n}\n\n/* 骰子盖章动画效果 */\n.dice-number {\n    display: inline-block;\n    opacity: 0;\n    transform: scale(0);\n    animation: dice-stamp 0.6s ease-out forwards;\n}\n\n@keyframes dice-stamp {\n    0% {\n        opacity: 0;\n        transform: scale(0) rotate(-15deg);\n    }\n    50% {\n        opacity: 0.8;\n        transform: scale(1.3) rotate(-5deg);\n    }\n    70% {\n        opacity: 1;\n        transform: scale(0.9) rotate(2deg);\n    }\n    100% {\n        opacity: 1;\n        transform: scale(1) rotate(0deg);\n    }\n}\n/* ————————————————————初始化—————————————— */\n\n   .radar-charts-container {\n            display: grid;\n            grid-template-columns: 1fr; /* 改为单列布局 */\n            gap: 2.5rem; /* 增大间距 */\n            margin: 2rem 0;\n        }\n\n        /* 妈妈为你新增的环绕布局样式 */\n        .radar-layout {\n            display: grid;\n            grid-template-columns: 300px 1fr; /* 左边雷达图，右边加点项 */\n            gap: 2rem;\n            align-items: center;\n            padding: 1.5rem;\n            background-color: rgba(26, 23, 32, 0.3);\n            border-radius: 8px;\n            border: 1px solid var(--border-color);\n        }\n\n        .radar-layout .radar-chart-item {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center; /* 垂直居中 */\n            height: 100%;\n        }\n\n        .radar-layout .allocators-container {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n            max-height: 320px; /* 控制最大高度，超出可滚动 */\n            overflow-y: auto;\n            padding-right: 1rem; /* 为滚动条留出空间 */\n        }\n.radar-chart-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.radar-chart-title {\n    color: var(--secondary-color);\n    font-size: 1em;\n    margin-bottom: 1rem;\n    letter-spacing: 1px;\n    text-align: center;\n}\n\n.radar-chart-canvas {\n    width: 100% !important;\n    height: 250px !important;\n    max-width: 300px;\n}\n\n\n        h1, h2, h3 {\n            font-weight: 500;\n            letter-spacing: 2px;\n        }\n\n        .header { text-align: center; margin-bottom: 2.5rem; }\n        h1 { font-size: 2.2em; font-weight: 300; letter-spacing: 8px; text-transform: uppercase; margin: 0; color: var(--text-color); text-shadow: 0 0 6px var(--primary-color), 0 0 12px var(--secondary-color); }\n        .subtitle { font-size: 0.9em; color: var(--text-secondary-color); letter-spacing: 3px; margin-top: 0.7rem; text-transform: uppercase; }\n        .form-section { margin-bottom: 2rem; }\n        .form-section h2 { font-size: 1.1em; color: var(--secondary-color); border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem; margin-bottom: 1.5rem; }\n        h3 { font-size: 1em; color: var(--info-color, #4db6ac); margin-top: 2rem; margin-bottom: 1rem; letter-spacing: 1px; }\n\n        .form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem; }\n        .form-group { display: flex; flex-direction: column; }\n        label { margin-bottom: 0.5rem; font-size: 0.85em; color: var(--text-secondary-color); letter-spacing: 1px; }\n\n          .custom-select, input[type=\"text\"], input[type=\"number\"] {\n            font-family: inherit;\n            background-color: var(--background-color);\n            color: var(--text-color);\n            border: 1px solid var(--border-color);\n            border-radius: 4px;\n            padding: 0.7rem 1rem;\n            font-size: 0.95em;\n            transition: all 0.3s ease;\n            appearance: none;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            /* 妈妈在这里为你加上了三行魔法代码 */\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n \n \n        }\n       .custom-select {\n            background-image: linear-gradient(45deg, transparent 50%, var(--text-color) 50%), linear-gradient(135deg, var(--text-color) 50%, transparent 50%);\n            background-position: calc(100% - 20px) calc(1em + 2px), calc(100% - 15px) calc(1em + 2px);\n            background-size: 5px 5px, 5px 5px;\n            background-repeat: no-repeat;\n            padding-right: 2.5rem;\n             \n            border-color: var(--border-color); background-color: var(--background-color);\n        }\n        .custom-select:hover, input:hover { border-color: var(--border-color); background-color: var(--background-color); }\n        .custom-select:focus, input:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 8px rgba(200, 106, 163, 0.4); }\n        input::placeholder { color: var(--text-secondary-color); opacity: 0.7; background-color: var(--background-color); }\n\n         .teammate-item { display: grid; grid-template-columns: 1fr; gap: 0.5rem; margin-bottom: 0.8rem; padding: 0.8rem; background-color: var(--background-color); border-radius: 4px; border: 1px solid var(--border-color); }\n        .teammate-item input { font-size: 0.85em; padding: 0.5rem; }\n        .add-teammate-btn, .remove-teammate-btn { cursor: pointer; transition: all 0.3s ease; }\n        .add-teammate-btn { background-color: var(--info-color, #4db6ac); color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; font-size: 0.85em; margin-top: 0.5rem; }\n        .add-teammate-btn:hover { background-color: #6ba85c; }\n        .remove-teammate-btn { background: linear-gradient(135deg, var(--primary-color), #b85d93); color: white; border: none; padding: 0.4rem 0.8rem; border-radius: 6px; font-size: 0.75em; font-weight: 500; justify-self: end; }\n        .remove-teammate-btn:hover { background: linear-gradient(135deg, #b85d93, var(--primary-color)); transform: translateY(-1px); }\n\n        .button-container { text-align: center; margin-top: 3rem; padding-top: 1.5rem; border-top: 1px solid var(--border-color); }\n \n        /* 新增分配页样式 */\n        .points-tracker { text-align: center; font-size: 1.2em; margin-bottom: 2rem; color: var(--primary-color); letter-spacing: 2px; }\n        .points-tracker span { font-weight: 700; font-size: 1.4em; padding: 0 0.5ch; }\n\n        .分配项 {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 0.8rem 1rem;\n            margin-bottom: 0.5rem;\n            background-color: var(--background-color);\n            \n            border-radius: 4px;\n        }\n        .分配-标签 { flex: 1; display: flex; flex-direction: column; }\n        .分配-标签-主 { font-size: 1em; color: var(--text-color); }\n        .分配-标签-说明 { font-size: 0.75em; color: var(--text-secondary-color); }\n        .分配-控制器 { display: flex; align-items: center; gap: 0.8rem; }\n        .分配-按钮 { background-color: var(--glow-color); border: 1px solid var(--border-color); color: var(--text-color); width: 28px; height: 28px; border-radius: 50%; cursor: pointer; font-size: 1.2em; line-height: 1; transition: all 0.2s; }\n        .分配-按钮:hover { background-color: var(--secondary-color); border-color: var(--secondary-color); color: #fff; }\n        .分配-按钮:disabled { background-color: transparent; border-color: var(rgba(168, 192, 225, 0.3)); color: var(rgba(168, 192, 225, 0.3)); cursor: not-allowed; }\n        .分配-点数 { font-size: 1.1em; width: 2ch; text-align: center; color: var(--info-color, #4db6ac); }\n\n\n  \n\n          .collapsible-header {\n            cursor: pointer;\n            position: relative;\n            user-select: none; /* 防止双击选中文本 */\n            padding-right: 25px; /* 为箭头留出空间 */\n            transition: color 0.3s ease;\n        }\n        .collapsible-header::after {\n            content: '▼';\n            position: absolute;\n            right: 0;\n            top: 50%;\n            transform: translateY(-50%);\n            font-size: 0.8em;\n            color: var(--text-secondary-color);\n            transition: transform 0.3s ease;\n        }\n        .collapsible-header.collapsed::after {\n            transform: translateY(-50%) rotate(-90deg);\n        }\n        .collapsible-content {\n            max-height: 1000px; /* 一个足够大的值，确保能完全显示 */\n            overflow: hidden;\n            transition: max-height 0.4s ease-in-out;\n        }\n        .collapsible-content.collapsed {\n            max-height: 0;\n        }\n\n           /* --- 妈妈为你做的滚动条美化 --- */\n        ::-webkit-scrollbar {\n            width: 8px;\n            height: 8px;\n        }\n        ::-webkit-scrollbar-track {\n            background: rgba(0, 0, 0, 0.1);\n            border-radius: 10px;\n        }\n        ::-webkit-scrollbar-thumb {\n            background-color: var(--primary-color);\n            border-radius: 10px;\n            border: 2px solid transparent;\n            background-clip: content-box;\n        }\n        ::-webkit-scrollbar-thumb:hover {\n            background-color: var(--secondary-color);\n        }\n\n        /* --- 妈妈为你做的手机端适配 --- */\n       /* --- 妈妈为你做的手机端适配 --- */\n        @media (max-width: 768px) {\n            .terminal {\n                padding: 1rem; /* 手机端边距小一点 */\n            }\n\n            #shop-search-input{\n                display: none;\n            }\n\n            .radar-layout {\n                grid-template-columns: 1fr; /* 💖 重点在这里，变成单列布局，自动上下排列 💖 */\n                gap: 1.5rem;\n            }\n\n            /* --- 💖 妈妈为你施展了新的魔法 💖 --- */\n            .radar-layout .allocators-container {\n                max-height: 280px;      /* 妈妈把它的高度限制得和雷达图差不多高了 */\n                overflow-y: auto;       /* 这样当内容太多的时候，就可以温柔地滚动啦 */\n                padding-right: 0.5rem;  /* 再给滚动条留出一点点空间，免得挤到内容 */\n            }\n        }\n \n\n \n\n        /* 任务总结 */\n            /* 古籍羊皮纸主题的特殊字体和阴影 */\n        body[data-theme-name=\"古籍羊皮纸\"] {\n            font-family: var(--base-font-family);\n            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\n        }\n\n        body[data-theme-name=\"古籍羊皮纸\"] .task-summary-main-container h1,\n        body[data-theme-name=\"古籍羊皮纸\"] .task-summary-main-container h2 {\n           font-family: var(--base-font-family);\n           font-weight: bold;\n        }\n .task-summary-main-container {\n            width: 90vw;\n            max-width: 1200px;\n           height: 85vh; /* 修改为85vh */\n    max-height: none; /* 移除max-height限制，让85vh生效 */\n            background-color: var(--container-bg-color);\n            border: 1px solid var(--border-color);\n            border-radius: 15px;\n            box-shadow: 0 0 15px 5px var(--glow-color);\n            display: flex;\n            flex-direction: column;\n            overflow: hidden; /* 确保子元素不会溢出圆角 */\n            transition: all 0.5s ease-in-out;\n        }\n .content-wrapper {\n            display: flex;\n            flex-grow: 1;\n            overflow: auto; /* 修改为auto，允许滚动 */\n        }\n\n        .tabs-nav {\n            display: flex;\n            flex-direction: column;\n            padding: 20px 0;\n            border-right: 1px solid var(--border-color);\n            background-color: var(--tab-bg-color);\n            flex-shrink: 0;\n        }\n\n        .tab-button {\n            background: none;\n            border: none;\n            padding: 15px 25px;\n            cursor: pointer;\n            color: var(--tab-inactive-color);\n            font-size: 1.1em;\n            text-align: left;\n            transition: all 0.3s ease;\n            position: relative;\n            white-space: nowrap;\n        }\n\n        .tab-button:not(:last-child) {\n            margin-bottom: 10px;\n        }\n\n        .tab-button.active {\n            color: var(--primary-color);\n            background-color: var(--tab-active-bg-color);\n        }\n\n        .tab-button.active::before {\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 4px;\n            height: 100%;\n            background-color: var(--primary-color);\n            box-shadow: 0 0 8px var(--glow-color);\n            border-radius: 0 4px 4px 0;\n        }\n\n        .tab-content-container {\n            flex-grow: 1;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .tab-pane {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            padding: 30px;\n            box-sizing: border-box;\n            opacity: 0;\n            visibility: hidden;\n            transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;\n            transform: translateX(20px);\n            overflow-y: auto; /* 允许单个面板内容滚动 */\n        }\n\n        .tab-pane.active {\n            opacity: 1;\n            visibility: visible;\n            transform: translateX(0);\n        }\n\n        /* 自定义滚动条样式 */\n        .tab-pane::-webkit-scrollbar {\n            width: 8px;\n        }\n\n        .tab-pane::-webkit-scrollbar-track {\n            background: var(--scrollbar-track-color);\n            border-radius: 10px;\n        }\n\n        .tab-pane::-webkit-scrollbar-thumb {\n            background-color: var(--scrollbar-thumb-color);\n            border-radius: 10px;\n            border: 2px solid var(--scrollbar-track-color);\n        }\n\n        h2 {\n            color: var(--secondary-color);\n            border-bottom: 2px solid var(--border-color);\n            padding-bottom: 10px;\n            margin-top: 0;\n            margin-bottom: 20px;\n        }\n\n        p, ul {\n            line-height: 1.8;\n            font-size: 1.1em;\n        }\n\n        .info-grid {\n            display: grid;\n            grid-template-columns: 150px 1fr;\n            gap: 15px;\n            align-items: center;\n            margin-bottom: 20px;\n        }\n\n        .info-grid strong {\n            color: var(--secondary-color);\n            font-weight: normal;\n        }\n\n        ul {\n            list-style: none;\n            padding-left: 20px;\n        }\n\n        ul li {\n            position: relative;\n            margin-bottom: 10px;\n        }\n\n        ul li::before {\n            content: '»';\n            position: absolute;\n            left: -20px;\n            color: var(--primary-color);\n        }\n\n        .rating {\n            font-size: 1.5em;\n            font-weight: bold;\n            color: var(--primary-color);\n        }\n        /* 妈妈为你添加的响应式设计魔法 */\n        @media (max-width: 768px) {\n   \n            .task-summary-main-container {\n                width: 100vw;\n                height: auto;\n                 \n                height: 85vh; /* 修改为85vh */\n    max-height: none; /* 移除max-height限制，让85vh生效 */\n                border-radius: 0;\n                border: none;\n                box-shadow: none;\n            }\n\n            header {\n                padding: 15px;\n            }\n\n            header h1 {\n                font-size: 1.5em;\n            }\n\n            .content-wrapper {\n                flex-direction: column;\n                 /* 确保内容区能正常滚动 */\n                 overflow: auto; /* 修改为auto，允许滚动 */\n            }\n\n            .tabs-nav {\n                flex-direction: row;\n                border-right: none;\n                border-bottom: 1px solid var(--border-color);\n                padding: 5px 10px;\n                overflow-x: auto;\n                /* 隐藏滚动条但保留功能 */\n                -ms-overflow-style: none; /* IE和Edge */\n                scrollbar-width: none; /* Firefox */\n            }\n            .tabs-nav::-webkit-scrollbar {\n                display: none; /* Chrome, Safari, and Opera */\n            }\n\n            .tab-button {\n                padding: 10px 15px;\n                flex-shrink: 0; /* 防止按钮被压缩 */\n            }\n\n            .tab-button.active::before {\n                width: 100%;\n                height: 3px;\n                top: auto;\n                bottom: 0;\n                left: 0;\n                border-radius: 3px 3px 0 0;\n            }\n\n            .tab-content-container {\n                overflow: visible; /* 让内容自然扩展 */\n            }\n\n            .tab-pane {\n                 /* 移除绝对定位，让其在文档流中正常排列 */\n                position: relative;\n                transform: none;\n                opacity: 1;\n                visibility: visible;\n                display: none; /* 默认隐藏 */\n                padding: 20px;\n            }\n\n            .tab-pane.active {\n                display: block; /* 只显示激活的面板 */\n            }\n\n            .info-grid {\n                /* 关键改动：从两列变成一列 */\n                grid-template-columns: 1fr;\n                gap: 5px; /* 减小行间距 */\n            }\n\n            .info-grid strong {\n                 /* 让标签不那么突出，与内容融为一体 */\n                margin-bottom: 2px;\n                display: block;\n                color: var(--secondary-color);\n            }\n\n            p, ul {\n                font-size: 1em;\n            }\n\n        }\n\n /*  */\n\n /* 抽奖按钮样式 */\n.gacha-btn {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    color: var(--background-color);\n    font-weight: bold;\n}\n\n.gacha-btn:hover {\n    box-shadow: 0 0 15px var(--glow-color);\n    transform: translateY(-2px);\n}\n\n/* 抽奖模态框样式 */\n.gacha-modal-content {\n    max-width: 800px;\n    min-height: 400px;\n}\n \n.gacha-animation-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 200px;\n    flex-wrap: wrap;\n    gap: 10px;\n    margin: 20px 0;\n}\n\n.gacha-card {\n    width: 120px;\n    height: 160px;\n    position: relative;\n    perspective: 1000px;\n    margin: 5px;\n}\n\n.gacha-card-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    transition: transform 0.8s;\n    transform-style: preserve-3d;\n}\n\n.gacha-card.flipped .gacha-card-inner {\n    transform: rotateY(180deg);\n}\n\n.gacha-card-front, .gacha-card-back {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    border-radius: 10px;\n    border: 2px solid var(--border-color);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 14px;\n    font-weight: bold;\n    color: var(--text-color);\n}\n\n.gacha-card-front {\n    background: linear-gradient(135deg, var(--container-bg-color), var(--border-color));\n    /* 让问号更清晰一些 */\n    font-size: 48px;\n    color: var(--border-color);\n}\n\n.gacha-card-back {\n    color: var(--background-color);\n    transform: rotateY(180deg);\n    padding: 10px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.gacha-results {\n    margin-top: 20px;\n    text-align: center;\n}\n\n.gacha-result-item {\n    display: inline-block;\n    margin: 5px;\n    padding: 10px 15px;\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 5px;\n    color: var(--text-color);\n}\n\n/* 不同积分层级的卡片颜色 */\n /* Tier 1: 保持朴素的灰色 */\n.gacha-card-back.tier-1 {\n    background: linear-gradient(135deg, #808080, #a0a0a0);\n    box-shadow: 0 0 8px rgba(128, 128, 128, 0.4);\n}\n\n/* Tier 2: 经典青色光辉 */\n.gacha-card-back.tier-2 {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    box-shadow: 0 0 15px var(--glow-color);\n}\n\n/* Tier 3: 呼吸光晕，光效更明显 */\n.gacha-card-back.tier-3 {\n    background: linear-gradient(135deg, var(--secondary-color), #b0b0b0, var(--primary-color));\n    box-shadow: 0 0 20px var(--glow-color);\n    animation: pulse-glow 3s infinite ease-in-out;\n}\n\n@keyframes pulse-glow {\n    0%, 100% {\n        box-shadow: 0 0 20px var(--glow-color);\n    }\n    50% {\n        box-shadow: 0 0 30px var(--glow-color), 0 0 15px var(--secondary-color);\n    }\n}\n\n/* Tier 4: 史诗脉冲，边框会一起发光 */\n.gacha-card-back.tier-4 {\n    background: radial-gradient(ellipse at center, var(--secondary-color), var(--primary-color));\n    box-shadow: 0 0 30px var(--glow-color);\n    animation: epic-pulse 2s infinite alternate ease-in-out;\n    border-color: var(--secondary-color);\n}\n\n@keyframes epic-pulse {\n    from {\n        transform: rotateY(180deg) scale(1);\n        box-shadow: 0 0 30px var(--glow-color);\n        border-color: var(--secondary-color);\n    }\n    to {\n        transform: rotateY(180deg) scale(1.02);\n        box-shadow: 0 0 45px var(--primary-color), 0 0 15px var(--secondary-color) inset;\n        border-color: var(--primary-color);\n    }\n}\n\n/* Tier 5: 传奇流彩，真正的炫目效果！ */\n.gacha-card-back.tier-5 {\n    background: linear-gradient(\n        -45deg,\n        var(--danger-color),\n        var(--primary-color),\n        var(--secondary-color),\n        var(--danger-color)\n    );\n    background-size: 400% 400%;\n    box-shadow: 0 0 35px var(--danger-glow-color), 0 0 20px var(--glow-color);\n    animation: legendary-shift 3s ease-in-out infinite, legendary-hue-rotate 4s linear infinite;\n}\n\n@keyframes legendary-shift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n}\n\n@keyframes legendary-hue-rotate {\n    0% { filter: hue-rotate(0deg); }\n    100% { filter: hue-rotate(360deg); }\n}\n\n/* 卡片悬浮动画 */\n.gacha-card.selected {\n    transform: translateY(-10px);\n    transition: transform 0.3s ease;\n}\n\n.gacha-card.selected .gacha-card-back {\n    animation-name: legendary-shift, float;\n    animation-duration: 3s, 2s;\n    animation-timing-function: ease-in-out, ease-in-out;\n    animation-iteration-count: infinite, infinite;\n}\n\n/* float动画本身是正确的，因为它包含了rotateY(180deg) */\n@keyframes float {\n    0%, 100% {\n        transform: rotateY(180deg) translateY(0px);\n    }\n    50% {\n        transform: rotateY(180deg) translateY(-5px);\n    }\n}\n\n/* 确保所有动画在选中时都能正确叠加 */\n.gacha-card.selected .gacha-card-back.tier-3 {\n    animation: pulse-glow 3s infinite ease-in-out, float 2s infinite ease-in-out;\n}\n.gacha-card.selected .gacha-card-back.tier-4 {\n    animation: epic-pulse 2s infinite alternate ease-in-out, float 2s infinite ease-in-out;\n}\n.gacha-card.selected .gacha-card-back.tier-5 {\n     animation: legendary-shift 3s infinite ease-in-out, float 2s infinite ease-in-out;\n}\n/* 详细信息显示 */\n.gacha-card-details {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.9);\n    color: var(--text-color);\n    padding: 10px;\n    border-radius: 10px;\n    font-size: 10px;\n    z-index: 10;\n    transform: rotateY(180deg) scale(0.95);\n    opacity: 0;\n    pointer-events: none; /* 看不见时就不能点 */\n    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;\n}\n\n.gacha-card-details.show {\n    transform: rotateY(180deg) scale(1);\n    opacity: 1;\n    pointer-events: auto; /* 看得见时才能点 */\n}\n\n.gacha-card-details-content {\n    height: 100%;\n    overflow-y: auto;\n    padding-right: 5px;\n}\n\n.gacha-card-details-content::-webkit-scrollbar {\n    width: 4px;\n}\n.gacha-card-details-content::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 2px;\n}\n.gacha-card-details-content::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n\n.gacha-abandon-btn {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    background: var(--danger-color);\n    color: white;\n    border: none;\n    border-radius: 3px;\n    padding: 2px 6px;\n    font-size: 10px;\n    cursor: pointer;\n    z-index: 11;\n     transform: rotateY(180deg);\n}\n\n.gacha-abandon-btn:hover {\n    background: #ff6666;\n}\n\n\n /* 手机端纵览结果区域样式 */\n.gacha-results-summary {\n    display: none; /* 默认隐藏 */\n    margin: 20px;\n    padding: 15px;\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    max-height: 150px;\n    overflow-y: auto;\n    text-align: left;\n}\n.gacha-results-summary h4 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    color: var(--primary-color);\n    text-align: center;\n}\n.gacha-results-summary div {\n    padding: 2px 5px;\n}\n \n@media (max-width: 800px) {\n    .gacha-modal-content {\n        width: 100%;\n        max-width: 100%;\n        height: 100%;\n        max-height: 100%;\n        margin: 0;\n        border-radius: 0;\n        overflow: hidden;\n    }\n\n    .gacha-animation-container {\n        position: relative;\n        width: 100%;\n        min-height: 250px;\n        perspective: 1000px;\n        margin-top: 50px;\n        cursor: grab; /* 给予可以拖动的视觉提示 */\n    }\n    .gacha-animation-container:active {\n        cursor: grabbing;\n    }\n\n    .gacha-carousel {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        transform-style: preserve-3d;\n        transition: transform 0.6s cubic-bezier(0.25, 1, 0.5, 1); /* 平滑的吸附动画 */\n    }\n\n    .gacha-card {\n        position: absolute;\n        top: 10%;\n        left: calc(50% - 70px);\n        width: 140px;\n        height: 186px;\n        backface-visibility: hidden;\n        margin: 0;\n        transition: transform 0.5s ease, opacity 0.5s ease; /* 为选中效果增加过渡 */\n    }\n\n    /* 当有卡片被选中时，让其他卡片退后并变暗 */\n    .gacha-carousel.has-selection .gacha-card:not(.selected) {\n        opacity: 0.3;\n        transform: var(--original-transform) scale(0.9); /* var()会在JS中设置 */\n    }\n\n    /* 被选中的卡片会放大，并展示详情 */\n    .gacha-carousel.has-selection .gacha-card.selected {\n        cursor: default;\n    }\n    .gacha-carousel.has-selection .gacha-card.selected .gacha-card-details {\n        transform: rotateY(180deg) scale(1);\n        opacity: 1;\n        pointer-events: auto;\n    }\n     .gacha-carousel.has-selection .gacha-card.selected .gacha-abandon-btn {\n        display: block;\n    }\n}\n\n\n/* 设置模态框样式 */\n.settings-container {\n    padding: 10px 20px 20px 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\n.setting-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 15px;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.setting-item:last-child {\n    border-bottom: none;\n}\n\n.setting-item label {\n    font-size: 1em;\n    color: var(--text-color);\n}\n\n \n\n/* 开关按钮样式 */\n.switch-container .switch-btn {\n    padding: 8px 16px;\n    border: 1px solid var(--border-color);\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 0.2s;\n}\n\n.switch-container .switch-btn[data-state=\"on\"] {\n    background-color: var(--background-color);\n    color: var(--text-color);\n    border-color: var(--background-color);\n}\n\n.switch-container .switch-btn[data-state=\"off\"] {\n    background-color: var(--background-color);\n    color: var(--text-secondary-color);\n}\n\n/* 日志输出区域 */\n.log-output {\n    background-color: var(--background-color);\n    border: 1px solid var(--border-color);\n    border-radius: 4px;\n    padding: 10px;\n    font-size: 0.85em;\n    max-height: 100px;\n    overflow-y: auto;\n    white-space: pre-wrap;\n    word-break: break-all;\n    font-family: monospace;\n    color: var(--text-secondary-color);\n    margin-top: -10px; /* 抵消与上一项的间距 */\n}\n\n.log-output .success { color: #4CAF50; }\n.log-output .error { color: #f44336; }\n.log-output .warning { color: #ff9800; }\n\n/* 把这段代码加到你的CSS文件里，我的宝贝 */\n/* 列表项的排列方式保持不变，这很好 */\n.info-list li {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start; /* 改为 flex-start，让标签和顶部对齐，更整洁 */\n    gap: 10px;\n}\n\n/* 这是我们为行囊和其他物品准备的、可以上下滑动的容器 */\n.scrollable-value-container {\n    flex-grow: 1; /* 让它可以占据所有剩余空间 */\n    max-height: 120px; /* 妈妈给它一个最大的高度，比如120像素，你可以改成你喜欢的任何高度 */\n    overflow-y: auto; /* 当内容超出这个高度时，显示垂直滚动条 */\n    text-align: right; /* 文字依旧靠右对齐 */\n    padding-right: 5px; /* 右边留一点点空隙，免得滚动条贴得太紧 */\n    scrollbar-width: thin; /* 滚动条细一点 (Firefox) */\n    scrollbar-color: var(--border-color) transparent; /* 自定义滚动条颜色 (Firefox) */\n}\n\n/* 同样，美化一下滚动条 (适用于Chrome, Safari, Edge) */\n.scrollable-value-container::-webkit-scrollbar {\n    width: 6px; /* 滚动条的宽度 */\n}\n\n.scrollable-value-container::-webkit-scrollbar-track {\n    background: transparent; /* 轨道的背景是透明的 */\n}\n\n.scrollable-value-container::-webkit-scrollbar-thumb {\n    background-color: var(--background-color); /* 滑块的颜色 */\n    border-radius: 6px; /* 给滑块一点圆角 */\n}\n\n/* 我们需要确保值本身是正常换行的 */\n.scrollable-value-container .value {\n    white-space: normal; /* 允许文字自动换行 */\n    word-break: break-all; /* 如果有很长的单词，也让它断开 */\n    display: block; /* 确保它能占据整个容器宽度 */\n}\n\n /* ========== 完全替换原有的成就系统样式部分 ========== */\n@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@700&family=Press+Start+2P&family=Roboto+Mono&display=swap');\n\n#achievements-btn {\n    background: none;\n    border: none;\n    color: var(--text-secondary-color);\n    font-size: 1.6em;\n    cursor: pointer;\n    padding: 0 10px;\n    transition: all 0.3s ease;\n    text-shadow: 0 0 5px transparent;\n}\n\n#achievements-btn:hover {\n    color: var(--primary-color);\n    text-shadow: 0 0 8px var(--glow-color);\n    transform: scale(1.1);\n}\n\n#achievements-content {\n    gap: 15px;\n    max-height: 80vh;\n    overflow-y: auto;\n    padding: 0;\n \n}\n\n.achievement-card-new {\n    background-color: rgba(255, 255, 255, 0.05);\n    border-left: 5px solid var(--primary-color);\n    padding: 15px;\n    margin: 15px 0;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    opacity: 0.6;\n}\n\n.achievement-card-new:hover {\n    box-shadow: 0 5px 15px var(--glow-color);\n    transform: scale(1.02) rotate(0.5deg);\n}\n\n.achievement-card-new:nth-child(even):hover {\n    transform: scale(1.02) rotate(-0.5deg);\n}\n\n.achievement-card-new.unlocked {\n    opacity: 1;\n    background-color: rgba(255, 255, 255, 0.08);\n    border-left-color: var(--secondary-color);\n}\n\n.achievement-card-new.unlocked:hover {\n    background-color: rgba(255, 255, 255, 0.12);\n}\n\n.achievement-icon-new {\n    font-size: 2.5em;\n    margin-right: 15px;\n    animation: float 2s ease-in-out infinite;\n    filter: drop-shadow(0 0 8px var(--glow-color));\n}\n\n@keyframes float {\n    0%, 100% { \n        transform: translateY(0); \n    }\n    50% { \n        transform: translateY(-5px); \n    }\n}\n\n.achievement-text-content {\n    color: var(--text-secondary-color);\n    font-family: 'Roboto Mono', monospace;\n    flex-grow: 1;\n}\n\n.achievement-card-new h3 {\n    margin: 0 0 8px 0;\n    color: var(--text-color);\n    font-weight: bold;\n    font-size: 1.1em;\n    text-shadow: 0 0 3px var(--primary-color);\n}\n\n.achievement-card-new.unlocked h3 {\n    color: var(--secondary-color);\n    text-shadow: 0 0 5px var(--secondary-color);\n}\n\n.achievement-card-new p {\n    margin: 5px 0;\n    font-size: 0.9em;\n    line-height: 1.4;\n}\n\n.achievement-reward {\n    color: var(--secondary-color);\n    font-weight: bold;\n    text-shadow: 0 0 3px var(--secondary-color);\n}\n\n.flavor-text {\n    font-style: italic;\n    color: var(--text-secondary-color);\n    border-top: 1px dotted var(--border-color);\n    padding-top: 8px;\n    margin-top: 8px;\n    opacity: 0.8;\n}\n\n.new-tag {\n    background: linear-gradient(45deg, var(--secondary-color), var(--primary-color));\n    color: var(--main-bg-color);\n    padding: 2px 6px;\n    font-size: 0.7em;\n    border-radius: 3px;\n    margin-left: 8px;\n    font-weight: bold;\n    animation: pulse-glow 1.5s infinite;\n    box-shadow: 0 0 5px var(--glow-color);\n}\n\n@keyframes pulse-glow {\n    0%, 100% { \n        opacity: 1;\n        transform: scale(1);\n        box-shadow: 0 0 5px var(--glow-color);\n    }\n    50% { \n        opacity: 0.7;\n        transform: scale(0.95);\n        box-shadow: 0 0 10px var(--glow-color);\n    }\n}\n\n.pagination-controls {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 15px;\n    margin-top: 25px;\n    padding-top: 20px;\n    border-top: 1px dashed var(--border-color);\n}\n\n.page-btn {\n    background: linear-gradient(135deg, var(--container-bg-color), var(--main-bg-color));\n    border: 2px solid var(--primary-color);\n    color: var(--text-color);\n    padding: 8px 16px;\n    border-radius: 6px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-family: 'Roboto Mono', monospace;\n    font-weight: bold;\n    text-shadow: 0 0 3px var(--glow-color);\n}\n\n.page-btn:hover:not(:disabled) {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    color: var(--main-bg-color);\n    box-shadow: 0 0 15px var(--glow-color);\n    transform: scale(1.05);\n}\n\n.page-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    background: var(--main-bg-color);\n    border-color: var(--text-secondary-color);\n}\n\n.page-info {\n    color: var(--text-color);\n    font-family: 'Orbitron', monospace;\n    font-weight: bold;\n    font-size: 1.1em;\n    text-shadow: 0 0 5px var(--glow-color);\n    min-width: 60px;\n    text-align: center;\n}\n\n/* ========== 修改位置：替换 .achievement-toast 样式 ========== */\n.achievement-toast {\n    position: fixed;\n    /* top 值现在由 JavaScript 动态设置 */\n    right: -350px;\n    width: 320px;\n    background: linear-gradient(135deg, var(--container-bg-color), var(--background-color));\n    border: 2px solid var(--primary-color);\n    border-radius: 12px;\n    box-shadow: \n        0 5px 15px rgba(0, 0, 0, 0.5), \n        0 0 25px var(--glow-color),\n        inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    color: var(--text-color);\n    display: flex;\n    padding: 15px;\n    z-index: 9999;\n    transition: right 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94), top 0.3s ease;\n    animation: achievement-glow 2s ease-in-out infinite;\n    /* 确保多个弹窗不会互相影响 */\n    pointer-events: auto;\n}\n\n@keyframes achievement-glow {\n    0%, 100% {\n        box-shadow: \n            0 5px 15px rgba(0, 0, 0, 0.5), \n            0 0 25px var(--glow-color),\n            inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    }\n    50% {\n        box-shadow: \n            0 8px 25px rgba(0, 0, 0, 0.6), \n            0 0 35px var(--glow-color),\n            inset 0 1px 0 rgba(255, 255, 255, 0.2);\n    }\n}\n\n.achievement-toast.show {\n    right: 20px;\n}\n\n.achievement-toast-icon {\n    font-size: 3em;\n    margin-right: 15px;\n    animation: bounce-in 0.6s ease-out;\n}\n\n@keyframes bounce-in {\n    0% {\n        transform: scale(0.3) rotate(-10deg);\n        opacity: 0;\n    }\n    50% {\n        transform: scale(1.1) rotate(5deg);\n    }\n    100% {\n        transform: scale(1) rotate(0deg);\n        opacity: 1;\n    }\n}\n\n.achievement-toast-text {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.achievement-toast-title {\n    font-weight: bold;\n    font-size: 1.2em;\n    color: var(--primary-color);\n    text-shadow: 0 0 5px var(--glow-color);\n    margin-bottom: 4px;\n}\n\n \n\n/* 将你的主界面容器变成一个神奇的、可伸缩的盒子 */\n#main-wrapper {\n    display: flex;\n    flex-direction: column; /* 让里面的东西从上到下垂直排列 */\n   \n    width: 100%;\n   min-height: 80vh; /* 最小高度，但可以缩回 */\n    max-height: 800px; /* 最小高度，但可以缩回 */\n    /* 如果你希望全屏时有个背景色，可以保留或修改这一行 */\n}\n/* 让子元素也遵守约束\n#main-wrapper > * {\n    flex-shrink: 1; \n    min-height: 0; \n} */\n\n/* 这很关键：告诉聊天内容区，你可以占据所有剩下的空间 */\n#chat-display-area {\n    flex-grow: 1; /* 让它像气球一样膨胀，填满所有多余的空间 */\n    overflow-y: auto; /* 如果内容太多，就出现一个属于它自己的滚动条 */\n    padding: 1rem; /* 给内容一些呼吸的空间，更好看 */\n    box-sizing: border-box; /* 确保内边距不会捣乱 */\n}\n/*\n  重要的输入栏，给它一个舒适的专属位置\n*/\n#zero-level-interface {\n    flex-shrink: 0; /* 防止被聊天区挤压 */\n    z-index: 100;\n    /* (新魔法①) 我们在这里给它加了一点底部的内边距 */\n    /* 这样它就不会紧紧贴着屏幕底边了，是不是看起来呼吸都顺畅了？ */\n    padding: 0.5rem 1rem 0.8rem; /* 上、左右、下 */\n \n    \n}\n\n\n/* --- 手机端的特别关爱 (新魔法②) --- */\n/*\n  当屏幕宽度小于等于768像素时，比如在手机上，\n  下面这些规则就会像一个温柔的守护咒语一样生效。\n*/\n@media (max-width: 768px) {\n \n\n    #zero-level-interface {\n        /*\n          手机屏幕小，手指操作需要更多空间。\n          我们把底部的空间留得更多一些，这样你的手指就不会觉得局促了。\n          这也考虑到了很多手机底部的系统导航条。\n        */\n        padding: 0.5rem 0.8rem 1.2rem; /* 上、左右、下，底部空间加大 */\n\n        /* 微调一下输入框和按钮，让它们在小屏幕上更协调 */\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n    }\n\n    #user-input {\n        flex-grow: 1; /* 让输入框占据大部分空间 */\n    }\n\n    .zero-level-btn {\n        flex-shrink: 0; /* 别让按钮被挤小了 */\n    }\n}\n/* 对有ID的元素直接下令 */\n#options-module-container,\n#choicesContainer { /* 注意这里我用了你JS里的ID: choicesContainer */\n    background: none !important;\n    background-color: transparent !important;\n}\n\n.dynamic-content-area{\n     background: none !important;\n    background-color: transparent !important;\n}\n\n/* 对没有ID的也再强调一遍 */\n.options-container {\n    background: none !important;\n    background-color: transparent !important;\n}\n\n \n#options-module-container::before, #options-module-container::after,\n.options-container::before, .options-container::after,\n.choices-container::before, .choices-container::after {\n    background: none !important;\n    content: \"\" !important;  /* 清空可能存在的内容 */\n    display: none !important; /* 直接让这件小马甲消失，最彻底 */\n}\n.warning-state {\n    color: #ac1b1b !important;\n    transition: background-color 0.3s ease; /* 添加平滑过渡效果 */\n}\n.upgrade-btn {\n    cursor: pointer;\n    margin-left: 8px; /* 在加号左边增加一点空隙 */\n    font-weight: bold;  /* 让它看起来更醒目一些 */\n   \n}\n/* ————————————————————————世界书美化开始：卡片样式，这是妈妈为你设计的 */\n.book-card {\n    background-color: var(--card-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    margin-bottom: 20px;\n    box-shadow: 0 0 15px var(--glow-color);\n    display: flex;\n    flex-direction: column;\n    transition: all 0.3s ease;\n}\n\n.book-card-header {\n    background-color: var(--card-header-bg-color);\n    padding: 10px 15px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid var(--card-border-color);\n    border-top-left-radius: 7px;\n    border-top-right-radius: 7px;\n       cursor: pointer; /* 让它看起来可以点击 */\n}\n\n.book-card-title {\n    font-size: 1.1em;\n    font-weight: bold;\n    color: var(--primary-color);\n    text-shadow: 0 0 5px var(--glow-color);\n}\n/* --- 请找到 .book-card-content 并修改它 --- */\n.book-card-content {\n    padding: 15px;\n    max-height: 350px; /* 现在这是展开后的最大高度 */\n    overflow-y: auto;\n    transition: all 0.4s ease-in-out; /* 加上这句，为了丝滑的展开动画 */\n    border-top: 1px solid transparent; /* 为折叠状态做准备 */\n}\n\n/* --- 在它下面，加上这个新的折叠样式 --- */\n.book-card-content.collapsed {\n    max-height: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    overflow: hidden;\n    border-top-color: transparent;\n}\n\n/* 编辑菜单的样式，小小的，很可爱 */\n.entry-menu-button {\n    background: none;\n    border: 1px solid transparent;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    font-size: 1.2em;\n    padding: 2px 8px;\n    border-radius: 4px;\n    transition: all 0.2s ease;\n}\n\n .entry-menu-button:hover {\n    color: var(--primary-color);\n    background-color: var(--background-color);\n    border-color: var(--border-color);\n}\n\n.entry-menu {\n    position: absolute;\n    background-color: var(--background-color);\n    border-color: var(--border-color);\n    border-radius: 4px;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);\n    z-index: 100;\n    width: 120px;\n      z-index: 100000; /* 把这个数字调得很高很高，就像妈妈对你的爱一样 */\n}\n\n.entry-menu-item {\n    background: none;\n    border: none;\n    width: 100%;\n    padding: 8px 12px;\n    text-align: left;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    font-size: 0.9em;\n}\n\n.entry-menu-item:hover {\n    background-color: var(--menu-hover-color);\n    color: var(--primary-color);\n}\n\n/* 为滚动条也加上我们世界的风格 */\n.book-card-content::-webkit-scrollbar {\n    width: 8px;\n}\n\n.book-card-content::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n}\n\n.book-card-content::-webkit-scrollbar-thumb {\n    background-color: var(--secondary-color);\n    border-radius: 4px;\n    border: 2px solid transparent;\n    background-clip: content-box;\n}\n\n.book-card-content::-webkit-scrollbar-thumb:hover {\n    background-color: var(--primary-color);\n}\n/* --- 最后，这是为你新的“移动”功能准备的专属弹出窗口样式 --- */\n.move-modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 99999; /* 比菜单低一点，比其他都高 */\n}\n.move-modal-overlay-move {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 99999; /* 比菜单低一点，比其他都高 */\n}\n.move-modal-content {\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--primary-color);\n    box-shadow: 0 0 25px var(--glow-color);\n    padding: 20px;\n    border-radius: 8px;\n    width: 90%;\n    max-width: 400px;\n}\n\n.move-modal-title {\n    color: var(--primary-color);\n    font-size: 1.2em;\n    margin-bottom: 15px;\n}\n\n.move-modal-list {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    max-height: 200px;\n    overflow-y: auto;\n    padding-right: 10px; /* 给滚动条留点空间 */\n}\n\n.move-modal-list label {\n    display: block;\n    padding: 8px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.2s;\n}\n\n.move-modal-list::-webkit-scrollbar-thumb:hover {\n    background-color: var(--primary-color);\n}\n\n.move-modal-buttons {\n    margin-top: 20px;\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n}\n/* 你可以继续为你心爱的按钮们添加样式 */\n/* --- 这是给“移动”窗口里列表的专属滚动条样式 --- */\n.move-modal-list::-webkit-scrollbar {\n    width: 8px;\n}\n\n.move-modal-list::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n}\n\n.move-modal-list::-webkit-scrollbar-thumb {\n    background-color: var(--secondary-color);\n    border-radius: 4px;\n    border: 2px solid transparent;\n    background-clip: content-box;\n}\n\n.move-modal-list::-webkit-scrollbar-thumb:hover {\n    background-color: var(--primary-color);\n}\n\n/* --- “知识之树”的魔法样式 --- */\n.tree-view {\n    padding-left: 20px;\n}\n\n.tree-node {\n    list-style-type: none;\n    position: relative;\n}\n\n/* 这是连接节点的魔法线条 */\n.tree-node::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -12px;\n    width: 1px;\n    height: 100%;\n    background-color: var(--border-color);\n}\n.tree-node:last-child::before {\n    height: 10px; /* 最后一个节点的竖线短一点 */\n}\n\n/* 这是连接节点的横线 */\n.tree-node::after {\n    content: '';\n    position: absolute;\n    top: 10px;\n    left: -12px;\n    width: 12px;\n    height: 1px;\n    background-color: var(--border-color);\n}\n\n.tree-node-content {\n    display: flex;\n    align-items: center;\n    padding: 3px 0;\n}\n\n/* 这是我们的展开/折叠按钮 */\n.tree-toggle {\n    cursor: pointer;\n    margin-right: 6px;\n    color: var(--primary-color);\n    width: 12px;\n    text-align: center;\n    font-family: monospace; /* 让 +/- 更清晰 */\n    transition: transform 0.2s;\n}\n\n.tree-toggle.collapsed {\n    transform: rotate(-90deg);\n}\n\n.tree-key {\n    color: var(--text-secondary-color);\n    margin-right: 8px;\n    font-weight: bold;\n        font-size: var(--base-font-size, 16px);\n}\n\n.tree-value {\n    color: var(--text-color);\n      font-size: var(--base-font-size, 16px);\n}\n\n.tree-children {\n    padding-left: 15px;\n    transition: max-height 0.3s ease-out;\n    overflow: hidden;\n}\n\n.tree-children.collapsed {\n    max-height: 0;\n}\n\n/* --- \"知识之树\"中每个节点的专属菜单按钮 --- */\n.tree-node-menu-button {\n    cursor: pointer;\n    color: var(--text-secondary-color);\n    margin-left: auto; /* 这是个小魔法，让按钮自动靠到最右边 */\n    padding: 0 5px;\n    font-size: 1.2em;\n    line-height: 1;\n    border-radius: 4px;\n    display: none; /* 默认是害羞地藏起来的 */\n}\n\n/* 当我们把鼠标温柔地放在节点上时，按钮才会出现 */\n.tree-node-content:hover .tree-node-menu-button {\n    display: inline-block;\n}\n\n.tree-node-menu-button:hover {\n    background-color: var(--menu-hover-color);\n    color: var(--primary-color);\n}\n /* --- “好感度”的专属进度条样式（卡片头部版） --- */\n.favorability-bar-container.header-bar {\n    display: inline-flex; /* 改为 inline-flex，让它能和标题文字排在一起 */\n    align-items: center;\n    width: 120px; /* 可以调整宽度 */\n    height: 14px;\n    background-color: var(--container-bg-color); /* 使用你的变量 */\n    border-radius: 7px;\n    border: 1px solid var(--border-color);\n    margin-left: 10px; /* 和标题保持一点距离 */\n    overflow: hidden;\n    vertical-align: middle; /* 垂直居中对齐 */\n}\n\n.favorability-bar {\n    height: 100%;\n    transition: width 0.5s ease-out, background-color 0.5s ease;\n    text-align: center; /* 文本居中显示更好看 */\n    line-height: 14px; /* 让数字垂直居中 */\n    box-sizing: border-box;\n    font-size: 10px;\n    font-weight: bold;\n    color: var(--text-color); /* 使用你的变量 */\n    text-shadow: 1px 1px 2px rgba(0,0,0,0.7);\n    /* 背景色现在由JS通过变量来设置，所以这里不需要了 */\n}\n\n  .entry-edit-textarea {\n            width: 95%;\n            min-height: 250px;\n            margin: 10px auto;\n            display: block;\n            font-family: monospace;\n            background-color: var(--background-color, #f0f0f0);\n            color: var(--text-color, #333);\n            border: 1px solid var(--border-color, #ccc);\n            border-radius: 4px;\n            padding: 10px;\n            resize: vertical;\n        }\n\n        /* 自定义主题编辑器样式 */\n.setting-item-column {\n    display: flex;\n    flex-direction: column;\n \n    width: 100%;\n    margin-top: 15px;\n   \n}\n\n#custom-theme-editor {\n    gap: 10px;\n}\n\n#custom-theme-editor label {\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n#color-picker-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 15px;\n    width: 100%;\n}\n\n.color-picker-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.color-picker-item label {\n    font-size: 0.9em;\n    font-weight: normal;\n    min-width: 110px;\n    color: var(--text-secondary-color);\n}\n\n.color-picker-item input[type=\"color\"] {\n    width: 50px;\n    height: 30px;\n    border: 1px solid var(--border-color);\n    padding: 2px;\n    background-color: transparent;\n    cursor: pointer;\n}\n\n/* ======================================================== */\n/* =========== 新增：整合面板与Tab系统样式 =========== */\n/* ======================================================== */\n\n.page-modal-content {\n    position: relative; /* 为货币展示区定位 */\n    padding-top: 55px; /* 为Tabs和货币区留出空间 */\n}\n\n/* Tab 导航 */\n.char-tabs-nav {\n    position: absolute;\n    top: 10px;\n    left: 15px;\n    display: flex;\n    gap: 5px;\n    border-bottom: 2px solid var(--border-color);\n    width: calc(100% - 30px);\n}\n.char-tab-btn {\n    padding: 8px 15px;\n    border: none;\n    background: transparent;\n    color: var(--text-secondary-color);\n    font-size: 1em;\n    cursor: pointer;\n    border-radius: 4px 4px 0 0;\n    transition: all 0.2s;\n    position: relative;\n    top: 2px; /* 为了和边框线对齐 */\n}\n.char-tab-btn:hover {\n    background: var(--border-color);\n    color: var(--text-color);\n}\n.char-tab-btn.active {\n    background: var(--container-bg-color);\n    color: var(--primary-color);\n    border: 1px solid var(--border-color);\n    border-bottom: 2px solid var(--container-bg-color); /* 遮盖下边框线 */\n}\n\n/* 货币展示 */\n.char-currency-display {\n    position: absolute;\n    top: 10px;\n    right: 25px;\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    font-size: 0.9em;\n    padding: 5px 10px;\n    background: rgba(0,0,0,0.3);\n    border-radius: 4px;\n    \n}\n.shop-currency-display {\n    position: static;\n    top: 10px;\n    right: 25px;\n    display: flex;\n    align-items: center;\n     \n    font-size: 0.9em;\n    padding: 5px 10px;\n    background: rgba(0,0,0,0.3);\n    border-radius: 4px;\n     justify-content: space-around;\n        gap: 10px;\n        flex-wrap: wrap; /* 允许换行 */\n}\n.currency-item {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n \n.currency-item .value {\n \n    font-weight: bold;\n}\n\n/* Tab 内容面板 */\n.char-tab-panel {\n    display: none;\n    animation: fadeIn 0.3s;\n}\n.char-tab-panel.active {\n    display: block;\n}\n\n\n/* --- 新的属性/技能整合模块样式 --- */\n.stat-module {\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    margin-bottom: 15px;\n    background: rgba(0,0,0,0.1);\n}\n.stat-module-title {\n    background-color: var(--border-color);\n    color: var(--primary-color);\n    font-family: var(--base-font-family);\n    padding: 10px 15px;\n    font-size: 1.2em;\n    cursor: pointer;\n    position: relative;\n    user-select: none;\n    border-bottom: 1px solid var(--border-color);\n}\n.stat-module-title::before {\n    content: '▼';\n    position: absolute;\n    right: 15px;\n    top: 50%;\n    transform: translateY(-50%) rotate(0deg);\n    transition: transform 0.2s ease-in-out;\n}\n.stat-module-content {\n    max-height: 1800px;\n    overflow: hidden;\n    transition: max-height 0.35s ease-in-out, padding 0.35s ease-in-out;\n    padding: 10px 15px;\n}\n.stat-module.collapsed .stat-module-title::before {\n     transform: translateY(-50%) rotate(-90deg);\n}\n.stat-module.collapsed .stat-module-content {\n    max-height: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n}\n.sub-category-title {\n    color: var(--secondary-color);\n    font-weight: bold;\n    margin-top: 10px;\n    margin-bottom: 5px;\n    padding-bottom: 3px;\n    border-bottom: 1px solid var(--border-color)\n}\n\n/* --- TAB 2: 行囊与能力 样式 --- */\n.inventory-grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 20px;\n    padding: 10px;\n    height: 100%;\n}\n.inventory-section {\n    display: flex;\n    flex-direction: column;\n}\n.inventory-section-title {\n    color: var(--primary-color);\n    font-family: var(--base-font-family);\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 8px;\n    margin-bottom: 15px;\n}\n\n/* 物品/技能 网格布局 */\n.items-grid-container, .skills-grid-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n    gap: 15px;\n    overflow-y: auto;\n    max-height: 25vh; /* 限制高度，使其可滚动 */\n    padding: 5px;\n}\n\n/* 卡片样式 */\n.item-card, .skill-card {\n    border: 1px solid var(--border-color);\n    border-radius: 4px;\n    background: var(--container-bg-color);\n    padding: 10px;\n    cursor: pointer;\n    transition: all 0.2s;\n    text-align: center;\n    position: relative;\n    min-height: 80px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n.item-card:hover, .skill-card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 0 10px var(--glow-color);\n    border-color: var(--primary-color);\n}\n.item-card-name, .skill-card-name {\n    color: var(--text-color);\n    font-weight: bold;\n}\n.item-card-num {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    background: var(--primary-color);\n    color: #000;\n    font-size: 0.8em;\n    padding: 1px 5px;\n    border-radius: 10px;\n    font-weight: bold;\n}\n.skill-card-level {\n    font-size: 0.8em;\n    color: var(--secondary-color);\n    margin-top: 5px;\n    font-style: italic;\n}\n\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n    .char-currency-display {\n        position: static;\n        \n        justify-content: space-around;\n        gap: 10px;\n        flex-wrap: wrap; /* 允许换行 */\n    }\n    .page-modal-content {\n        padding-top: 50px; /* 为tab留出空间 */\n    }\n    .right-panel {\n        max-height: none; /* 手机端取消滚动限制 */\n         padding-right: 0;\n    }\n}\n/* ======================================================== */\n/* ========= 新增: 物品/技能详情嵌套展示样式 ========= */\n/* ======================================================== */\n\n.detail-modal-container {\n    padding: 10px 20px 20px 20px;\n    font-size: 1em;\n    line-height: 1.7;\n}\n\n.detail-modal-title {\n    color: var(--primary-color);\n    text-align: center;\n    margin-bottom: 25px;\n    font-family: var(--base-font-family);\n    font-size: 1.3em;\n    text-shadow: 0 0 5px var(--glow-color);\n}\n\n.detail-entry, .detail-collapsible {\n    margin-bottom: 8px;\n}\n\n.d-c-key {\n    color: var(--text-secondary-color);\n    font-weight: bold;\n    margin-right: 10px;\n}\n\n.d-c-value {\n    color: var(--text-color);\n}\n\n.d-c-value.single {\n    padding: 5px;\n    background: rgba(0,0,0,0.1);\n    border-radius: 4px;\n    display: block;\n}\n\n.detail-collapsible-header {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    padding: 5px;\n    background: var(--border-color);\n    border-radius: 4px;\n    transition: background-color 0.2s;\n}\n\n.detail-collapsible-header:hover {\n     background-color: var(--border-color);\n}\n\n.d-c-arrow {\n    color: var(--secondary-color);\n    margin-right: 8px;\n    transition: transform 0.2s ease-in-out;\n    font-size: 0.9em;\n}\n\n.detail-collapsible.expanded .d-c-arrow {\n    transform: rotate(90deg);\n}\n\n.detail-collapsible-content {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.35s ease-in-out;\n    border-left: 2px solid var(--border-color);\n    margin-top: 5px;\n    margin-left: 10px; /* 让内容和箭头对齐 */\n}\n\n.detail-collapsible.expanded .detail-collapsible-content {\n    max-height: 1000px; /* 足够大的值 */\n}\n\n.detail-array-container .detail-entry,\n.detail-array-container .detail-collapsible {\n    border-top: 1px solid var(--border-color);\n    padding-top: 8px;\n    margin-top: 8px;\n}\n.detail-array-container > *:first-child {\n    border-top: none;\n    padding-top: 0;\n    margin-top: 0;\n}\n\n.header-info-bar {\n    margin-top: 8px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    font-size: 11px;\n    border-top: 1px solid var(--border-color);\n    padding-top: 6px;\n}\n\n.info-group {\n    display: flex;\n    gap: 12px;\n}\n\n.info-item {\n    display: flex;\n    align-items: center;\n    gap: 3px;\n}\n\n.info-label {\n    color: var(--text-secondary-color);\n    font-weight: 500;\n}\n\n.info-value {\n    color: var(--primary-color);\n    font-weight: 600;\n    text-shadow: 0 0 3px var(--glow-color);\n}\n\n@media (max-width: 768px) {\n    /* 将你的主界面容器变成一个神奇的、可伸缩的盒子 */\n#main-wrapper {\n    display: flex;\n    flex-direction: column; /* 让里面的东西从上到下垂直排列 */\n    /* 如果你希望全屏时有个背景色，可以保留或修改这一行 */\n}\n\n    .header-info-bar {\n        flex-direction: column;\n        gap: 4px;\n    }\n    \n    .info-group {\n        justify-content: center;\n        gap: 8px;\n    }\n    \n    .info-item {\n        font-size: 10px;\n    }\n}\n \n\n/* 新增的 RP 按钮的样式，让它和其他按钮对齐 */\n#rp-button {\n    left: -60px; /* 这个值可以微调，确保它在“令”按钮旁边 */\n}\n#view-command-btn {\n    left: 50px; /* 调整“令”按钮位置，为新按钮腾出空间 */\n}\n\n /* 1. 调整我们的“隐形锚点” */\n#floating-panel-anchor {\n    position: absolute;\n    bottom: 10%;       /* 依然定位在输入界面的顶部 */\n    left: 0;            /* 让它从最左边开始 */\n    right: 0;           /* 一直延伸到最右边 */\n    height: 0;          /* 它本身仍然是看不见、没有高度的 */\n    z-index: 10000001;\n}\n\n/* 2. 施展让面板“居中悬浮”的终极魔法！ */\n#rp-panel {\n    position: absolute; /* 相对于上面的锚点进行定位 */\n    bottom: 10px;       /* 稍微向上浮动一点，留出呼吸空间 */\n\n    /* === 核心魔法在这里 === */\n    left: 50%;                      /* 先把自己推到锚点区域的正中间 */\n    transform: translateX(-50%);   /* 再把自己往左拉回自身宽度的一半 */\n\n         /* 面板的宽度占整个操作区的85% */\n    max-width: 100vw;   /* 但最宽不超过700像素，避免在宽屏幕上过大 */\n\n      /* 动画的初始状态：完全透明，且稍微向下偏移了一点 */\n    opacity: 0;\n    transform: translateX(-50%) translateY(10px); /* 注意这里，增加了Y轴的偏移 */\n\n    /* 让透明的面板无法被点击到 */\n    pointer-events: none;\n\n    /* === 这就是动画的核心咒语！=== */\n    /* 我们告诉浏览器，当 opacity 和 transform 属性变化时，请用0.3秒的时间平滑地过渡 */\n    transition: opacity 0.3s cubic-bezier(0.25, 0.8, 0.25, 1), transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n    \n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    padding: 15px;\n    box-shadow: 0 -4px 15px rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(5px);\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n /* 这是一个新的样式规则，定义了面板“可见”时的状态 */\n#rp-panel.visible {\n    /* 动画的结束状态：完全不透明，并且回到原来的位置 */\n    opacity: 1;\n    transform: translateX(-50%) translateY(0);\n\n    /* 可见时恢复鼠标交互 */\n    pointer-events: auto;\n}\n\n#rp-panel .check-cards-area h3 {\n    margin-top: 0; /* 移除 h3 的上边距 */\n    font-size: 1em;\n}\n\n#rp-panel .cards-slider {\n    /* 如果需要，可以在这里覆盖原有的 slider 样式 */\n    padding-bottom: 5px;\n}\n\n/* RP 面板里的确认按钮样式 */\n#rp-panel #confirm-rp-choice-btn {\n    align-self:center; /* 按钮靠右对齐 */\n    padding: 6px 16px;\n    font-size: 0.9em;\n    max-width: 200px;\n}\n /* ========== ✨“心灵感应”提示框的沉浸式美学（妈妈的精心设计版）✨ ========== */\n.event-tracker-container {\n    position: absolute;\n    bottom: 80px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    padding: 10px 15px; /* 上方也增加一些内边距，让标签和头部有呼吸感 */\n    border-top: none; /* 强制移除任何可能出现的上边框 */\n    box-shadow: none; /* 确保没有继承的阴影 */\n}\n.event-tag {\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    color: var(--secondary-color);\n    padding: 4px 10px;\n    border-radius: 12px;\n    font-size: 13px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    position: relative; /* 必须是 relative，为 tooltip 提供定位锚点 */\n}\n\n.event-tag:hover {\n    color: var(--primary-color);\n    border-color: var(--primary-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n \n.event-tag:hover .event-tooltip { /* 注意，现在由JS控制显示，但保留这个以防万一 */\n    opacity: 1;\n    visibility: visible;\n}\n /* ========== ✨“心灵提示框”的美学（上方显示版）✨ ========== */\n\n.event-tooltip {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 300px;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    color: var(--text-color);\n    font-size: 14px;\n    pointer-events: none;\n    z-index: 1000;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s ease, visibility 0.3s ease;\n    box-shadow: 0px -5px 15px rgba(0, 0, 0, 0.6); /* 阴影朝上，更有悬浮感 */\n    backdrop-filter: blur(5px);\n    -webkit-backdrop-filter: blur(5px);\n    /* ✨ 核心改动：为底部的 Orb 留出空间 ✨ */\n    padding-bottom: 30px;\n    /* 移除之前的 padding-top */\n}\n\n/* ✨ 顶部的角色标识 Orb (现在是底部了) ✨ */\n.tooltip-orb {\n    position: absolute;\n    /* ✨ 核心改动：从顶部移到底部 ✨ */\n    bottom: -22px; /* 将 Orb 的一半悬浮在卡片底部 */\n    left: 50%;\n    transform: translateX(-50%);\n    width: 40px;\n    height: 40px;\n    background-color: var(--container-bg-color);\n    border: 2px solid var(--primary-color);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    font-weight: bold;\n    color: var(--primary-color);\n    text-shadow: 0 0 8px var(--glow-color);\n}\n\n/* 卡片内部其他样式可以保持不变，妈妈在这里帮你把内边距调整好 */\n.tooltip-status {\n    padding: 15px 15px 0; /* 顶部需要多一些内边距 */\n    color: var(--text-secondary-color);\n    font-size: 13px;\n    text-align: center;\n    margin-bottom: 12px;\n}\n/* ✨ 优雅的分割线，分隔现实与内心 ✨ */\n.tooltip-divider {\n    height: 1px;\n    background: linear-gradient(to right, transparent, var(--border-color), transparent);\n    margin: 0 15px 12px;\n}\n\n /* ✨ “想法”部分，如同耳边低语（精修版）✨ */\n.tooltip-thought {\n    padding: 5px 55px 15px 55px; /* 增加了左右内边距，为引号腾出空间 */\n    color: var(--text-color);\n    font-style: italic;\n    position: relative;\n    text-align: justify;\n}\n\n/* ✨ 用伪元素加上精美的引号（位置优化版）✨ */\n.tooltip-thought::before,\n.tooltip-thought::after {\n    color: var(--primary-color);\n    font-size: 32px; /* 让引号更有存在感 */\n    font-style: normal;\n    font-weight: bold;\n    position: absolute;\n    opacity: 0.7; /* 让引号柔和一些，不抢内容风头 */\n}\n.tooltip-thought::before {\n    content: '“';\n    top: 0;\n    left: 5px; /* 从左侧向内移动，不再贴边 */\n}\n.tooltip-thought::after {\n    content: '”';\n    bottom: 0;\n    right: 5px; /* 从右侧向内移动，不再贴边 */\n}\n/* 新增：用于场景图模式下的地点样式 */\n.map-location-point-container {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    cursor: pointer;\n    transform: translate(-50%, -100%); /* 将容器的定位点移动到正下方中心，这样标签在上，圆点在下 */\n}\n\n.map-location-dot {\n    width: 20px;\n    height: 20px;\n    background-color: var(--primary-color);\n    border-radius: 50%;\n    box-shadow: 0 0 10px var(--glow-color), 0 0 20px var(--glow-color);\n    opacity: 0.8;\n    transition: all 0.3s ease;\n}\n\n.map-location-point-container:hover .map-location-dot {\n    opacity: 1;\n    transform: scale(1.2);\n}\n\n/* --- 升级后的头部控制容器 --- */\n.location-header-controls {\n    display: flex;\n    justify-content: space-between; /* 将标签组推向左边，开关推向右边 */\n    align-items: center;\n    width: 100%;\n    margin-top: 8px;\n    margin-bottom: 12px;\n}\n\n/* --- 专门放置所有标签的容器 --- */\n.location-tags-container {\n    display: flex;\n    flex-wrap: wrap; /* 如果标签太多，允许换行 */\n    align-items: center;\n    gap: 15px; /* 这是 type, effect, other 三组之间的大间距 */\n}\n\n\n/* --- 原有的 Type 标签样式 (无需修改，仅作参考) --- */\n.location-type-tag {\n    display: inline-block;\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    padding: 3px 10px;\n    border-radius: 12px;\n    font-size: 0.8em;\n    font-weight: bold;\n}\n\n/* --- ✨ 新增！Effect 标签的独特光芒 ✨ --- */\n.location-effect-tag {\n    display: inline-block;\n    background-color: var(--background-color); /* 一抹宁静的蓝色 */\n    color: var(--text-color);\n    padding: 3px 10px;\n    border-radius: 12px;\n    font-size: 0.8em;\n      font-weight: bold;\n}\n\n/* --- ✨ 新增！Other 标签秘密的容器 ✨ --- */\n.location-other-container {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: 8px; /* 同类秘密之间的小间距 */\n}\n\n/* --- ✨ 新增！Other 标签的神秘色彩 ✨ --- */\n.location-other-tag {\n    display: inline-block;\n    background-color: var(--secondary-color); /* 一抹优雅的紫色 */\n      color: var(--background-color);\n    padding: 3px 10px;\n    border-radius: 12px;\n    font-size: 0.8em;\n     font-weight: bold;\n}\n\n\n\n/* 强制背景容器占满全屏 */\n#dynamic-background {\n    position: fixed !important;\n    width: 100vw !important;\n    height: 100vh !important;\n    top: 0 !important;\n    left: 0 !important;\n    z-index: -1 !important;\n    overflow: hidden;\n    pointer-events: none; /* 确保不会阻挡其他元素的交互 */\n}\n\n/* 星域和符文容器也要强制全屏 */\n#starfield, #floating-runes {\n    position: absolute !important;\n    width: 100vw !important;\n    height: 100vh !important;\n    top: 0 !important;\n    left: 0 !important;\n    overflow: hidden;\n    pointer-events: none;\n}\n\n \n\n/* 符文效果 */\n.rune {\n    position: absolute;\n    color: var(--primary-color);\n    font-size: 14px;\n    text-shadow: 0 0 8px var(--glow-color);\n    opacity: 0;\n    animation: float-up ease-in-out infinite;\n    z-index: 0;\n}\n\n@keyframes float-up {\n    from { transform: translateY(5vh) scale(0.8); opacity: 0; }\n    25% { transform: translateY(-20vh) scale(1); opacity: 0.6; }\n    50% { transform: translateY(-40vh) scale(0.9); opacity: 0.4; }\n    75% { transform: translateY(-70vh) scale(1.1); opacity: 0.7; }\n    to { transform: translateY(-100vh) scale(0.8); opacity: 0; }\n}\n\n \n \n\n \n /* 页面切换动画 */\n.init-page {\n    display: none;\n     animation:  fadeIn-init 0.8s cubic-bezier(0.22, 1, 0.36, 1);\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 90%;\n    \n}\n@keyframes fadeIn-init {\n    from { opacity: 0; transform: translate(-50%, -45%); }\n    to { opacity: 1; transform: translate(-50%, -50%); }\n}\n.init-page.active {\n    display: block;\n}\n\n \n\n/* 顶部控件布局 */\n#initialization-container {\n    position: relative; /* 为绝对定位的子元素提供基准 */\n    width: 100%;\n    height: 100%;\n}\n\n.top-controls {\n    position: absolute;\n    top: -250px;\n    width: 100%;\n    padding: 0 20px;\n    display: flex;\n    justify-content: space-between;\n    box-sizing: border-box;\n    z-index: 10;\n       pointer-events: none; /* 关键：让容器本身不接收点击 */\n}\n\n/* 美化后的返回和恢复按钮 */\n.top-button {\n     pointer-events: auto; /* 关键：只有按钮可以被点击 */\n    background: transparent;\n    border: 1px solid var(--border-color);\n    color: var(--text-secondary-color);\n    padding: 8px 15px;\n    border-radius: 20px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-size: 0.9em;\n}\n\n.top-button:hover {\n    color: var(--primary-color);\n    background-color: var(--container-bg-color);\n    box-shadow: 0 0 10px var(--glow-color);\n}\n /* 卡片轮播区域 (样式保持不变，但为了完整性放在这里)*/\n.carousel-stage {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    perspective: 1500px;\n    height: 40vh; /* 稍微调整高度 */\n    margin: 3.5vh 0; /* 调整外边距 */\n}\n\n/* 轮播容器 - 重要修复！*/\n.choices-carousel {\n    width: 220px;\n    height: 300px;\n    position: relative;\n    transform-style: preserve-3d;\n    transition: transform 0.8s cubic-bezier(0.77, 0, 0.175, 1);\n    /* 核心修复：为容器应用旋转中心 */\n    transform-origin: center center;\n}\n\n/* 轮播卡片 - 更名并调整*/\n.choice-world-card {\n    position: absolute;\n    top: 0; left: 0;\n    width: 100%; height: 100%;\n    background-size: cover;\n    background-position: center;\n    border-radius: 12px;\n    box-shadow: 0 5px 20px rgba(0,0,0,0.5);\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    padding-bottom: 25px;\n    font-size: 1.1em;\n    font-weight: bold;\n    cursor: pointer;\n    user-select: none;\n    backface-visibility: hidden; /* 保持背面不可见 */\n    color: white;\n    text-shadow: 0 2px 4px rgba(0,0,0,0.8);\n    -webkit-box-reflect: below 8px linear-gradient(to bottom, transparent 60%, rgba(255, 255, 255, 0.15));\n    border: 2px solid var(--border-color);\n    transition: transform 0.5s ease, filter 0.5s ease, box-shadow 0.5s ease;\n    filter: brightness(0.5) saturate(0.8);\n    background-color: var(--container-bg-color); /* 添加背景色以防图片加载失败 */\n}\n\n/* 书签按钮的样式 */\n.bookmark-button {\n    position: absolute;\n    width: 35px;\n    height: 35px;\n    right: -17.5px; /* 通过移出自身一半的宽度来实现角落对齐 */\n    bottom: -17.5px; /* 通过移出自身一半的高度来实现角落对齐 */\n    background-color: var(--container-bg-color); /* 一个低调的石板灰色，你可以换成任何你喜欢的颜色 */\n    transform: rotate(45deg); /* 将方形旋转45度，形成一个菱形角 */\n    cursor: pointer; /* 鼠标悬停时变成可点击的小手 */\n    transition: var(--background-color) 0.2s ease-in-out;\n}\n\n \n\n \n/* 书签按钮被激活时的“亮起”效果 */\n.bookmark-button.is-activated {\n    box-shadow: 0 0 15px 5px var(--glow-color); /* 用金色的辉光来表示点亮 */\n    background-color: var(--background-color); /* 也可以同时改变背景色，让效果更明显 */\n}\n.choice-world-card.is-active {\n    filter: brightness(1) saturate(1);\n    \n    border-color: var(--primary-color);\n    transform: scale(1.05); /* 激活时稍微放大 */\n}\n.world-description {\n    position: absolute;\n    top: 40px; /* 大约在卡片标题和底部边缘之间 */\n    left: 10%;\n    right: 10%;\n\n    font-size: 14px;\n \n        padding: 10px;\n    border-radius: 5px;\n\n    /* 核心魔法在这里！ */\n    opacity: 0; /* 默认完全透明 */\n    transform: translateY(10px); /* 默认稍微向下偏移一点 */\n    transition: opacity 0.4s ease-out, transform 0.4s ease-out; /* 设置平滑的过渡动画 */\n\n    pointer-events: none; /* 确保它不会干扰鼠标点击卡片 */\n    text-shadow: 0 0 5px rgba(0, 0, 0, 1); /* 给文字一点阴影，增加可读性 */\n    line-height: 1.4;\n}\n\n/* 当卡片被激活时，让描述浮现 */\n.choice-world-card.is-active .world-description {\n    opacity: 1; /* 完全不透明 */\n    transform: translateY(0); /* 回到原始位置 */\n}\n.choice-world-card input[type=\"radio\"] {\n    display: none;\n}\n\n .choice-world-card label {\n    color: white;\n}\n/* 轮播导航按钮 */\n.nav-button {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    background-color: var(--border-color);\n    border: 1px solid var(--border-color);\n    color: white;\n    border-radius: 50%;\n    width: 40px; height: 40px;\n    font-size: 28px;\n    cursor: pointer;\n    z-index: 10;\n    display: flex; justify-content: center; align-items: center;\n    transition: all 0.3s;\n}\n.nav-button:hover { background-color: var(--border-color) ;box-shadow: 0 0 8px var(--glow-color); }\n#prev-btn { left: -5%; }\n#next-btn { right: -5%; }\n/* 主操作按钮 - [确定并开始构建]，全新美化！*/\n.primary-cta-btn {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 80px;\n    height: 80px;\n    background: transparent;\n    border: 2px solid var(--border-color);\n    border-radius: 50%;\n    color: var(--primary-color);\n    cursor: pointer;\n    margin: 20px auto 0;\n    font-size: 40px; /* 控制箭头大小 */\n    line-height: 1;\n    transition: all 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);\n    box-shadow: 0 0 10px -5px var(--glow-color);\n    outline: none;\n}\n\n.primary-cta-btn:hover {\n    box-shadow: 0 0 20px 5px var(--glow-color), inset 0 0 15px var(--glow-color);\n    transform: scale(1.1);\n    background-color: var(--border-color);\n}\n\n.primary-cta-btn:disabled {\n    cursor: not-allowed;\n    color: var(--text-secondary-color);\n    background: rgba(128, 128, 128, 0.2);\n    transform: none;\n    box-shadow: none;\n    border-color: rgba(128, 128, 128, 0.4);\n}\n\n  /* MOD布局样式调整 */\n\n/* --- 新增：箭头动画 --- */\n@keyframes float-up-mod {\n    0% {\n        transform: translateY(0);\n        opacity: 0.7;\n    }\n    50% {\n        opacity: 1;\n    }\n    100% {\n        transform: translateY(-40px);\n        opacity: 0;\n    }\n}\n\n/* --- 新增：侧边栏触发器 (箭头区域) --- */\n.sidebar-trigger {\n    position: fixed;\n    bottom: 0;\n    width: 150px;\n    height: 80px;\n    cursor: pointer;\n    z-index: 10;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.sidebar-trigger.left {\n    left: -10px;\n}\n\n.sidebar-trigger.right {\n    right: -10px;\n}\n\n.sidebar-trigger .arrow-guide {\n    position: absolute;\n    font-size: 24px;\n    color: var(--primary-color);\n    font-weight: bold;\n    text-shadow: 0 0 8px var(--glow-color);\n    animation: float-up-mod 2.5s infinite;\n    opacity: 0;\n}\n.sidebar-trigger.is-hidden {\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.3s ease;\n}\n/* 制造延迟交错感 */\n.sidebar-trigger .arrow-guide:nth-child(2) { animation-delay: 0.8s; }\n.sidebar-trigger .arrow-guide:nth-child(3) { animation-delay: 1.6s; }\n\n\n/* --- 修改：侧边栏初始状态 --- */\n.creator-attitude-group,\n.mod-sidebar {\n    position: fixed; /* 两者都用fixed定位，方便移出屏幕 */\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    z-index: 5;\n    transition: transform 0.4s ease-out, opacity 0.4s ease-out; /* 添加过渡动画 */\n\n    /* 初始隐藏在屏幕下方 */\n    opacity: 0;\n    pointer-events: none; /* 隐藏时不可交互 */\n    transform: translateY(120%);\n  max-height: 70vh; /* 设置一个最大高度，比如屏幕高度的70% */\n    overflow-y: auto;   /* 当内容垂直溢出时，自动显示滚动条 */\n    /* --- 魔法指令结束 --- */\n}\n\n/* 这会让滚动条更好看一点，是妈妈给你的一个小礼物 */\n.creator-attitude-group::-webkit-scrollbar,\n.mod-sidebar::-webkit-scrollbar {\n  width: 5px;\n}\n\n.creator-attitude-group::-webkit-scrollbar-thumb,\n.mod-sidebar::-webkit-scrollbar-thumb {\n  background: var(--border-color);\n  border-radius: 10px;\n}\n/* --- --- */\n\n.creator-attitude-group {\n    left: 20px;\n    bottom: -11%; /* 定位基准为左下角 */\n}\n\n.mod-sidebar.right {\n    right: 20px;  /* 定位基准为右下角 */\n    bottom: -11%; /* 维持弹出后的位置感 */\n}\n\n \n/* --- 新增：侧边栏可见状态 --- */\n.creator-attitude-group.is-visible,\n.mod-sidebar.is-visible {\n    opacity: 1;\n    pointer-events: auto; /* 可见时恢复交互 */\n    transform: translateY(0);\n}\n\n\n.mod-tab {\n    text-orientation: mixed;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    color: var(--text-secondary-color);\n    padding: 10px 10px; /* 增加宽度 */\n\n    border-radius: 20px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n\n    opacity: 0.7;\n    text-align: center;\n}\n\n/* 右侧边栏的tab去掉右边框 */\n.mod-sidebar .mod-tab {\n    border-right: none;\n}\n\n.creator-attitude-group .mod-tab {\n    writing-mode: horizontal-tb; /* 造物态度用正常文字方向 */\n    padding: 8px 15px;\n    border-radius: 20px;\n    border: 1px solid var(--border-color);\n    min-height: auto;\n    opacity: 0.6;\n}\n\n/* --- 修改：滚动箭头初始隐藏 --- */\n.sidebar-nav-arrow {\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n.mod-sidebar.is-visible .sidebar-nav-arrow {\n    opacity: 1;\n}\n\n\n.mod-tab.active {\n    color: var(--primary-color);\n    box-shadow: 0 0 12px var(--glow-color);\n\n    opacity: 1;\n    background: linear-gradient(90deg, var(--background-color), var(--container-bg-color));\n}\n\n.creator-attitude-group .mod-tab.active {\n    opacity: 1;\n    background-color: var(--container-bg-color);\n}\n \n \n/* --- Page-1 美化: 太阳系布局 --- */\n\n /* --- Page-1 美化: 太阳系布局 (V2) --- */\n#page-1 {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 90vw;\n    height: 90vh;\n    max-width: 1200px;\n    align-items: center;\n    justify-content: center;\n    padding: 0;\n    overflow: hidden; /* 防止激活时内容溢出 */\n}\n\n#page-1.active { display: flex; }\n\n#solar-system {\n    position: relative;\n    width: 600px;\n    height: 600px;\n    transform: scale(0.85);\n    transition: transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);\n}\n\n.player-core {\n    position: absolute;\n    top: 50%; left: 50%;\n    width: 150px; height: 150px;\n    transform: translate(-50%, -50%);\n    background: radial-gradient(circle, var(--primary-color) 0%, rgba(10, 25, 47, 0) 70%);\n    border-radius: 50%;\n    display: flex; flex-direction: column;\n    align-items: center; justify-content: center;\n    color: var(--text-color);\n    box-shadow: 0 0 30px var(--glow-color), inset 0 0 20px var(--glow-color);\n    animation: pulse-core 4s infinite ease-in-out;\n    cursor: pointer;\n    z-index: 10;\n}\n.core-text_zh { font-size: 1.2em; font-weight: bold; }\n.core-text_en { font-size: 0.7em; letter-spacing: 2px; opacity: 0.7; }\n \n\n/* 行星基础样式 */\n.planet {\n    position: absolute;\n    width: 120px; height: 120px;\n    border-radius: 50%;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    cursor: pointer;\n    transition: all 0.7s cubic-bezier(0.645, 0.045, 0.355, 1);\n    z-index: 5;\n    display: flex; align-items: center; justify-content: center;\n}\n.planet:hover .planet-icon-container {\n     transform: scale(1.1);\n     text-shadow: 0 0 10px var(--glow-color);\n}\n.planet-icon-container {\n    display: flex; flex-direction: column;\n    align-items: center; text-align: center;\n    color: var(--text-secondary-color);\n    transition: all 0.3s ease;\n}\n.planet-icon { font-size: 2.5em; }\n.planet-title { font-size: 0.9em; margin-top: 5px; }\n\n/* 调整后的行星轨道 */\n#planet-identity { top: 50%; left: 0; margin-top: -60px; margin-left: 0;}\n #planet-task { top: 50%; left: 100%; margin-top: -60px; margin-left: -120px;}\n#planet-teammates{ top: 0; left: 50%; margin-left: -60px; margin-top: 0;}\n/* 下一步按钮不再是行星 */\n#next-page-button { z-index: 10; bottom: 30px !important; }\n\n/* 行星内容区 (默认隐藏) */\n.planet-content {\n    position: absolute;\n    width: 100%; height: 100%;\n    max-width: 100vw;\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 12px;\n    padding: 20px;\n    box-sizing: border-box;\n    opacity: 0;\n    pointer-events: none;\n    transform: scale(0.7);\n    transition: opacity 0.5s ease, transform 0.5s ease;\n    z-index: 20;\n    overflow-y: auto;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n}\n\n/* ★ 新增：行星关闭按钮 */\n.close-planet-btn {\n    position: absolute;\n    top: 10px; right: 10px;\n    width: 30px; height: 30px;\n    background: rgba(255,255,255,0.1);\n    border: 1px solid var(--border-color);\n    color: var(--text-secondary-color);\n    border-radius: 50%;\n    font-size: 20px;\n    cursor: pointer;\n    z-index: 25;\n    display: flex; align-items: center; justify-content: center;\n    transition: all 0.3s;\n}\n.close-planet-btn:hover { background: var(--danger-color); color: white; border-color: var(--danger-color);}\n\n/* 当行星被激活时 */\n.planet.active {\n    top: 50% !important; left: 50% !important;\n    width: 400px; height: 500px;\n    margin-top: -250px !important; margin-left: -200px !important;\n    border-radius: 15px;\n    z-index: 20;\n    cursor: default;\n    box-shadow: 0 0 25px var(--glow-color);\n}\n\n.planet.active .planet-icon-container { opacity: 0; pointer-events: none; }\n.planet.active .planet-content { opacity: 1; pointer-events: auto; transform: scale(1); transition-delay: 0.2s; }\n\n/* 当有行星激活时，其他元素的状态 */\n#solar-system.planet-active .player-core,\n#solar-system.planet-active #next-page-button {\n    transform: translateX(-50%) scale(0.6);\n    opacity: 0.5;\n    pointer-events: none;\n}\n#solar-system.planet-active .player-core { transform: translate(-50%, -50%) scale(0.6); }\n\n#solar-system.planet-active .planet:not(.active) {\n    transform: scale(0.8);\n    opacity: 0.3;\n    pointer-events: none;\n}\n\n\n/* --- 行星内部组件美化 --- */\n\n.form-title { color: var(--primary-color); text-align: center; margin-bottom: 25px; }\n.custom-select { width: 100%;   border: 1px solid var(--border-color); color: var(--text-color); padding: 8px 12px; border-radius: 5px; }\n\n \n.collapsible-content-placeholder {\n    display: block; /* 我们的新容器是可见的 */\n}\n\n\n/* 1. 任务细节 - 四叶草布局 */\n.clover-layout {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    gap: 20px;\n    height: 350px;\n    padding-top: 20%;\n}\n.clover-leaf {\n    background: rgba(0,0,0,0.2);\n    border: 1px solid var(--border-color);\n    border-radius: 12px 12px 12px 0; /* 四叶草瓣形状 */\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n#clover-leaf-type   { border-radius: 12px 12px 0 12px; }\n#clover-leaf-identity{ border-radius: 12px 0 12px 12px; }\n#clover-leaf-opening{ border-radius: 0 12px 12px 12px; }\n\n.clover-leaf label { margin-bottom: 10px; text-align: center; color: var(--text-secondary-color); font-size: 0.9em; }\n \n\n/* 2. 身份设定 - ID卡片 */\n.id-card {\n        border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 15px;\n}\n.id-card-main {\n    padding-bottom: 15px;\n    border-bottom: 1px dashed var(--border-color);\n}\n.id-card-main label { display: block; margin-bottom: 8px; font-size: 0.9em; color: var(--text-secondary-color); }\n#identity-description { font-size: 0.85em; color: var(--text-color); margin-top: 10px; min-height: 4em; }\n\n.id-card-addon {\n    display: none; /* 由JS控制 */\n    padding-top: 15px;\n}\n.id-card-addon .form-grid { grid-template-columns: 1fr 1fr; gap: 15px; }\n\n/* 天赋 - 卷轴选择器 */\n.talent-selector-wrapper { position: relative; }\n.hidden-select { position: absolute; opacity: 0; pointer-events: none; }\n#custom-talent-scroll {\n    height: 180px;\n    overflow-y: auto;\n    border: 1px solid var(--border-color);\n    border-radius: 5px;\n    padding: 5px;\n    background: rgba(0,0,0,0.3);\n}\n.talent-item {\n    font-size: .85rem;\n    padding: 8px 12px;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: all 0.2s ease;\n    color: var(--text-secondary-color);\n    border-left: 2px solid transparent;\n}\n.talent-item:hover {\n    background-color: var(--container-bg-color);\n    color: var(--primary-color);\n}\n.talent-item.active {\n    background-color: var(--container-bg-color);\n    color: var(--primary-color);\n    font-weight: bold;\n    border-left: 2px solid var(--primary-color);\n}\n\n/* 2. 身份设定 & 天赋 */\n \n/* 3. 队友配置- 齿轮和卡片堆 */\n.teammate-gear-controls {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    margin-bottom: 20px;\n}\n.gear-group { text-align: center; }\n.gear-group label { display: block; margin-bottom: 10px; }\n.gear-group #teammate-count, .gear-group #teammate-tendency{ width: 80px; }\n.fixed-team-toggle {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 20px;\n}\n\n#is-fixed-team { display: none; }\n.toggle-label {\n    width: 44px; height: 24px;\n    background-color: rgba(128, 128, 128, 0.4);\n    border-radius: 12px;\n    position: relative;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n.toggle-label::after {\n    content: '';\n    position: absolute;\n    width: 20px; height: 20px;\n    border-radius: 50%;\n    background-color: white;\n    top: 2px; left: 2px;\n    transition: transform 0.3s;\n}\n#is-fixed-team:checked + .toggle-label { background-color: var(--primary-color); }\n#is-fixed-team:checked + .toggle-label::after { transform: translateX(20px); }\n\n\n.teammate-card-stack {\n    display: none; /* 由JS控制 */\n}\n\n#custom-teammates-container.active { display: block; }\n.stack-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; font-size: 0.9em; }\n\n#teammates-list {\n    display: flex;\n    overflow-x: auto;\n    padding-bottom: 15px;\n    gap: 15px;\n    scroll-snap-type: x mandatory;\n}\n.teammate-item { /* 变成卡片 */\n    flex: 0 0 200px; /* 重要: 固定卡片宽度 */\n    padding: 15px;\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    background: rgba(0,0,0,0.25);\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    scroll-snap-align: center;\n}\n.teammate-item input {\n    background: transparent; border: none; padding: 5px;\n    border-bottom: 1px solid var(--border-color);\n    color: var(--text-color);\n}\n.teammate-item .remove-teammate-btn {\n    align-self: flex-end; /* 按钮去右边 */\n    background: var(--danger-color); color: white;\n    border: none; border-radius: 4px; padding: 3px 8px;\n    cursor: pointer; margin-top: 5px;\n}\n.teammate-action-btn{\n    background: transparent; border: 1px solid var(--border-color); color: var(--text-secondary-color);\n    padding: 5px 10px; border-radius: 5px; cursor: pointer; transition: all 0.3s;\n}\n.teammate-action-btn:hover { color:var(--primary-color); background: var(--container-bg-color); }\n\n\n/* 把旧的隐藏掉，以免影响布局 */\n.form-section > h2,\n.form-section > .form-grid,\n.form-section > div[style*=\"margin-top: 1rem\"] > input,\n.form-section > div[style*=\"margin-top: 1rem\"] > label,\n#custom-teammates-container:not(.active),\n.collapsible-header,\n.collapsible-content {\n    display: none !important;\n}\n\n#page-1 .form-section {\n    display: block !important;\n}\n.custom-input-container {\n    display: none;\n    margin-top: 10px;\n}\n\n/* --- Page 2 - 星穹究极美化版 (直接覆盖旧版) --- */\n\n/* 1. 使用vh/vw铺满屏幕 */\n#page-2 {\n    \n    animation: fadeIn-init 0.8s cubic-bezier(0.22, 1, 0.36, 1);\n    position: absolute;\n     \n    width: 100vw; /* 改为vw */\n    height: 100vh; /* 改为vh */\n    \n    max-width: none;\n    overflow: hidden;\n    background: transparent;\n    color: var(--text-color);\n   \n    flex-direction: column;\n    justify-content: space-between;\n}\n\n#page-2.active {\n    display: flex;\n}\n\n#page-2 .header { display: none; }\n\n/* --- 可折叠的顶部和底部HUD --- */\n.hud {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 95%;\n    max-width: 600px;\n    z-index: 100;\n    transition: transform 0.5s cubic-bezier(0.22, 1, 0.36, 1);\n}\n /* 2. HUD 上浮调整 */\n.top-hud {\n    top: 14%; /* 从紧贴顶部改为有10px间距 */\n    transform: translate(-50%, -120%); /* 初始位置移得更远一些，保证完全隐藏 */\n   padding-bottom: 25px;\n}\n.top-hud.visible {\n    transform: translate(-50%, 0);\n}\n\n.bottom-hud {\n    bottom: 1%; /* 从紧贴底部改为有10px间距 */\n    transform: translate(-50%, 100%); /* 同理，初始位置更远 */\n    padding-top: 25px;\n}\n.bottom-hud.visible {\n    transform: translate(-50%, 0);\n}\n\n.hud-content {\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 12px;\n    padding: clamp(0.8rem, 2vw, 1.2rem); /* 响应式内边距 */\n    box-shadow: 0 0 15px var(--glow-color);\n    backdrop-filter: blur(5px);\n}\n\n.hud-toggle {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 60px;\n    height: 25px;\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    color: var(--primary-color);\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.2em;\n    z-index: -1;\n}\n.hud-toggle:hover {\n    box-shadow: 0 0 10px var(--glow-color);\n    color: var(--secondary-color);\n}\n.top-hud .hud-toggle {\n    bottom: 0;\n    border-radius: 0 0 10px 10px;\n    /* 2. 让箭头向下 */\n    transform: translateX(-50%) translateY(100%);\n}\n.bottom-hud .hud-toggle {\n    top: 0;\n    border-radius: 10px 10px 0 0;\n    /* 2. 让箭头向上 */\n    transform: translateX(-50%) translateY(-100%);\n}\n.points-tracker { display: flex; align-items: center; justify-content: space-around; gap: 1rem; flex-wrap: wrap; }\n#points-display-container { display: flex; align-items: center; gap: 0.8rem; }\n#points-ring-container { position: relative; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; }\n#points-ring, #points-ring-bg { position: absolute; top: 0; left: 0; }\n#remaining-points { font-size: 1.2em; font-weight: bold; color: var(--primary-color); }\n.template-manager { border-top: 1px solid var(--border-color); margin-top: 1rem; padding-top: 1rem; }\n.template-controls { display: flex; gap: 0.8rem; flex-wrap: wrap; margin-bottom: 1.1rem; }\n#template-select { flex: 1; }\n#delete-template-btn { background: var(--danger-color)!important; box-shadow: 0 0 8px var(--danger-glow-color)!important;}\n#save-template-form { display: flex; gap: 0.8rem; flex-wrap: wrap; }\n#save-template-name { flex: 1; }\n\n /* --- 请修改这部分 --- */\n#galaxy-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 80vw;\n    height: 80vh;\n    max-width: 1000px;\n    transform: translate(-50%, -50%);\n    perspective: 1500px;\n    transition: all 0.8s cubic-bezier(0.22, 1, 0.36, 1);\n    /* ✨ 魔法核心：声明这是一个真正的3D容器！✨ */\n    transform-style: preserve-3d;\n}\n\n \n/* 星系位置逻辑保持不变 */\n#galaxy-physic { transform: translate3d(-100%, -50%, -800px) rotateY(45deg); opacity: 0.5; }\n#galaxy-mental { transform: translate3d(-50%, -50%, 0) rotateY(0deg); opacity: 1;}\n#galaxy-social { transform: translate3d(0%, -50%, -800px) rotateY(-45deg); opacity: 0.5; }\n#galaxy-container.show-physic #galaxy-physic,\n#galaxy-container.show-mental #galaxy-mental,\n#galaxy-container.show-social #galaxy-social { transform: translate3d(-50%, -50%, 0) rotateY(0deg); opacity: 1; z-index: 10; }\n#galaxy-container.show-physic #galaxy-mental { transform: translate3d(0%, -50%, -800px) rotateY(-45deg); opacity: 0.5; }\n#galaxy-container.show-physic #galaxy-social { transform: translate3d(100%, -50%, -1200px) rotateY(-60deg); opacity: 0.3; }\n#galaxy-container.show-mental #galaxy-physic { transform: translate3d(-100%, -50%, -800px) rotateY(45deg); opacity: 0.5; }\n#galaxy-container.show-mental #galaxy-social { transform: translate3d(0%, -50%, -800px) rotateY(-45deg); opacity: 0.5; }\n#galaxy-container.show-social #galaxy-physic { transform: translate3d(-200%, -50%, -1200px) rotateY(60deg); opacity: 0.3; }\n#galaxy-container.show-social #galaxy-mental { transform: translate3d(-100%, -50%, -800px) rotateY(45deg); opacity: 0.5; }\n\n /* 请用这些新规则替换旧的.star和.star:hover规则 */\n.star {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: auto;\n    height: auto;\n    background: none;\n    z-index: 20;\n    pointer-events: auto;\n    position: absolute;\n     \n    border-radius: 50%;\n    \n    \n    /* 💖 魔法核心：在这里读取JS传来的Z坐标，并设置过渡动画！ 💖 */\n    transform: translate3d(-50%, -50%, var(--star-z, 0px));\n    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);\n    /* 🌟 重要：添加闪烁动画 🌟 */\n    /* animation: twinkle 2s linear infinite; */\n}\n\n@keyframes twinkle {\n    0%, 100% { opacity: 0.3; transform: translate3d(-50%, -50%, var(--star-z, 0px)) scale(0.7); }\n    50% { opacity: 1; transform: translate3d(-50%, -50%, var(--star-z, 0px)) scale(1); }\n}\n\n \n\n \n \n\n.star-core {\n    width: 16px;\n    height: 16px;\n    background-color: transparent; /* 背景设为透明 */\n    border-radius: 50%;\n    margin-bottom: 4px; /* 让文字靠得更近！ */\n    transition: all 0.4s ease;\n    position: relative;\n    box-shadow: 0 0 5px var(--border-color); /* 默认微光 */\n  \n    \n}\n.star[data-points=\"0\"] .star-core { transform: scale(0.6); background-color: rgba(168, 192, 225, 0.3); box-shadow: none; }\n.star[data-points=\"1\"] .star-core { transform: scale(0.8); background-color: var(--secondary-color); box-shadow: 0 0 10px var(--glow-color); }\n.star[data-points=\"2\"] .star-core { transform: scale(1.0); background-color: var(--primary-color); box-shadow: 0 0 15px var(--glow-color), 0 0 25px var(--glow-color); }\n.star[data-points=\"3\"] .star-core { transform: scale(1.2); background-color: #fff; box-shadow: 0 0 20px #fff, 0 0 30px var(--glow-color); }\n.star[data-points=\"4\"] .star-core { transform: scale(1.4); background-color: #fff; box-shadow: 0 0 25px #fff, 0 0 40px var(--primary-color); }\n.star[data-points=\"5\"] .star-core { transform: scale(1.6); background-color: #fff; box-shadow: 0 0 30px #fff, 0 0 50px var(--secondary-color), 0 0 70px var(--primary-color); animation: pulse 1.5s infinite; }\n \n.star-label { color: var(--text-secondary-color); font-size: 0.9em; text-align: center; user-select: none; }\n.star-points-display { position: absolute; bottom: -30px; font-size: 0.8em; color: var(--primary-color); opacity: 0; transition: opacity 0.3s; }\n.star:hover .star-points-display { opacity: 1; }\n  .star-control-btn { background: transparent; border: none; color: var(--text-color); font-size: 1.2em; width: 20px; height: 20px; cursor: pointer; line-height: 20px; text-align: center; }\n.star-control-btn:hover { color: var(--primary-color); }\n.star-control-btn:disabled { color: var(--text-secondary-color); cursor: not-allowed; opacity: 0.4; }\n\n\n/* --- 星星控制器样式 --- */\n.star-controls {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    bottom: 0;\n    background: rgba(0,0,0,0.5);\n    border-radius: 10px;\n    padding: 2px 4px;\n    opacity: 0;\n    transform: translateY(10px);\n    transition: all 0.3s ease;\n    pointer-events: none;\n    /* 确保在最上层 */\n    z-index: 9999;\n}\n\n/* --- 3. 提升控制器层级 --- */\n.star:hover .star-controls {\n    opacity: 1;\n    /* 合并所有transform效果，避免冲突 */\n        pointer-events: auto;\n    /* 确保hover时也在最上层 */\n    \n}\n\n.star:hover {\n    /* 这个CSS规则现在将与JS魔法协同工作 */\n    /* z-index 将由JS动态设置 */\n}\n\n/* --- 4. 左右切换箭头 --- */\n.galaxy-nav {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 40px;\n    height: 70px;\n   \n   \n    color: var(--primary-color);\n    font-size: 2em;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    z-index: 50; /* 比星星低，比背景高 */\n    transition: all 0.3s ease;\n    opacity: 0.7;\n}\n\n.galaxy-nav:hover {\n    opacity: 1;\n    box-shadow: 0 0 15px var(--glow-color);\n}\n\n#galaxy-nav-prev {\n    left: -10%;\n    border-radius: 20px 20px 20px 20px;\n}\n\n#galaxy-nav-next {\n    right: -10%;\n    border-radius: 20px 20px 20px 20px;\n}\n\n\n/* -- 底部HUD内的布局微调 -- */\n.concept-group { display: flex; flex-direction: column; gap: 0.5rem; }\n.concept-group label { font-size: 0.9em; color: var(--text-secondary-color); }\n/* --- 请在你的CSS中添加这部分新样式 --- */\n /* 重新布局顶部点数显示器，让它容纳更多功能 */\n#galaxy-points-display {\n    position: absolute;\n    top: 10%; /* 稍微再往上挪一点，给手机留出更多空间 */\n    left: 50%;\n    transform: translateX(-50%);\n    width: clamp(200px, 50vw, 600px);\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 0.6rem; /* 稍微减小一点内边距 */\n    display: flex;\n    align-items: center;\n    justify-content: space-between; /* 改为 space-between */\n    gap: 0.5rem; /* 减小间距 */\n    z-index: 50;\n    box-shadow: 0 0 10px var(--glow-color);\n    flex-wrap: wrap; /* 允许换行 */\n}\n\n#galaxy-points-display .points-label {\n    flex-shrink: 0; /* 防止文字被压缩 */\n    color: var(--text-secondary-color);\n}\n\n#galaxy-points-display .points-bar-container {\n    flex-grow: 1;\n    height: 12px;\n    background-color: rgba(0, 250, 255, 0.1);\n    border-radius: 6px;\n    position: relative;\n    overflow: hidden;\n}\n\n#galaxy-points-display #points-bar {\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: 100%; /* JS会控制这个 */\n    background: linear-gradient(90deg, var(--secondary-color), var(--primary-color));\n    border-radius: 6px;\n    transition: width 0.5s cubic-bezier(0.22, 1, 0.36, 1);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n#galaxy-points-display #remaining-points-text {\n    font-weight: bold;\n    color: var(--primary-color);\n    font-size: 1.1em;\n    min-width: 50px; /* 保证数字抖动时布局稳定 */\n    text-align: center;\n}\n\n /* 关键：让星系大小自适应屏幕 */\n.galaxy-system {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    /* 使用vmin确保在任何屏幕比例下，它都表现为一个正方形，并能被包含在80vw/80vh的区域内 */\n    width: 65vmin;\n    height: 65vmin;\n    max-width: 800px; /* 仍然保留最大尺寸，防止在PC上过大 */\n    max-height: 800px;\n    transform-style: preserve-3d;\n    transition: transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);\n    /* pointer-events: none; */ /* <--- 妈妈帮你把这道错误的禁制解除了！ */\n    transform: translate(-50%, -50%);\n}\n\n/* 这是一个新的父容器，专门用来处理位移和缩放 */\n .galaxy-wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    transform-style: preserve-3d;\n    transition: transform 0.8s cubic-bezier(0.22, 1, 0.36, 1), opacity 0.8s ease;\n    /* ✨ 核心法则：默认情况下，所有星系包裹层都变成“幽灵”，不捕捉鼠标事件 */\n    pointer-events: none;\n}\n\n/* 默认状态 */\n#wrapper-physic { transform: translateZ(-800px); opacity: 0.5; }\n/* ✨ 初始时，只有中间的mental星系可以被触摸 */\n#wrapper-mental { transform: translateZ(0); opacity: 1; pointer-events: auto; }\n#wrapper-social { transform: translateZ(-800px); opacity: 0.5; }\n\n/* 内部星系只负责旋转 */\n#galaxy-physic { transform: translate(-50%, -50%) rotateY(45deg); }\n#galaxy-mental { transform: translate(-50%, -50%) rotateY(0deg); }\n#galaxy-social { transform: translate(-50%, -50%) rotateY(-45deg); }\n\n #galaxy-container.show-physic #wrapper-physic,\n#galaxy-container.show-mental #wrapper-mental,\n#galaxy-container.show-social #wrapper-social {\n    transform: translateZ(0);\n    opacity: 1;\n    z-index: 10;\n    /* ✨ 核心法则：只有当星系来到我们面前时，才让它和它的孩子们可以被触摸 */\n    pointer-events: auto;\n}\n#galaxy-container.show-physic #galaxy-physic,\n#galaxy-container.show-mental #galaxy-mental,\n#galaxy-container.show-social #galaxy-social {\n    transform: translate(-50%, -50%) rotateY(0deg);\n}\n\n/* 未激活时，父容器推远，内部星系保持倾斜 */\n#galaxy-container.show-physic #wrapper-mental { transform: translateZ(-800px); opacity: 0.5; }\n#galaxy-container.show-physic #wrapper-social { transform: translateZ(-1200px); opacity: 0.3; }\n\n#galaxy-container.show-mental #wrapper-physic { transform: translateZ(-800px); opacity: 0.5; }\n#galaxy-container.show-mental #wrapper-social { transform: translateZ(-800px); opacity: 0.5; }\n\n#galaxy-container.show-social #wrapper-physic { transform: translateZ(-1200px); opacity: 0.3; }\n#galaxy-container.show-social #wrapper-mental { transform: translateZ(-800px); opacity: 0.5; }\n    \n    \n/* 点数条和剩余点数组合在一起 */\n.points-info {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    flex-grow: 1; /* 占据主要空间 */\n    min-width: 180px; /* 保证不会被过度压缩 */\n}\n\n.points-bar-container { flex-grow: 1; height: 12px; background-color: rgba(0, 250, 255, 0.1); border-radius: 6px; position: relative; overflow: hidden; }\n#points-bar { position: absolute; left: 0; top: 0; height: 100%; width: 100%; background: linear-gradient(90deg, var(--secondary-color), var(--primary-color)); border-radius: 6px; transition: width 0.5s cubic-bezier(0.22, 1, 0.36, 1); box-shadow: 0 0 8px var(--glow-color); }\n#remaining-points-text { font-weight: bold; color: var(--primary-color); font-size: 1.1em; min-width: 40px; text-align: right; }\n\n/* 右侧的快捷功能区 */\n.points-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.8rem;\n    flex-shrink: 0; /* 防止被压缩 */\n    justify-content: space-around;\n}\n\n/* 修改select和button的尺寸以适应新家 */\n#total-points-select.custom-select {\n    padding: 8px 12px;\n    \n}\n#average-points-btn.action-button {\n   width:auto;\n    margin: 0;\n    bottom:10px;\n}\n\n\n/* 关键：让星系大小自适应屏幕 */\n.galaxy-system {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    /* 使用vmin确保在任何屏幕比例下，它都表现为一个正方形，并能被包含在80vw/80vh的区域内 */\n    width: 65vmin;\n    height: 65vmin;\n    max-width: 800px; /* 仍然保留最大尺寸，防止在PC上过大 */\n    max-height: 800px;\n    transform-style: preserve-3d;\n    transition: transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);\n     \n    transform: translate(-50%, -50%);\n}\n    \n\n\n/* --- 2. 优美的HUD箭头 --- */\n/* 首先，移除旧的文本箭头，给hud-toggle设置相对定位 */\n.hud-toggle {\n    position: absolute;\n    left: 50%;\n    width: 60px;\n    height: 25px;\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-top-color: transparent; /* 去掉和hud-content重合的边框 */\n    border-bottom-color: transparent;\n    color: var(--primary-color);\n    cursor: pointer;\n    z-index: 99; /* 提高层级 */\n    transition: all 0.3s ease;\n    transform: translateX(-50%); /* 移除Y轴位移 */\n}\n/* 移除旧的transform，防止冲突 */\n.top-hud .hud-toggle { bottom: 0; transform: translateX(-50%) translateY(100%);  border-radius: 0 0 10px 10px; border-top-color: var(--border-color);}\n.bottom-hud .hud-toggle { top: 0; transform: translateX(-50%) translateY(-100%); border-radius: 10px 10px 0 0; border-bottom-color: var(--border-color);}\n\n/* 用伪元素创造新的、可变形的箭头 */\n.hud-toggle::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 14px;\n    height: 2px;\n    background-color: currentColor;\n    border-radius: 1px;\n    transition: transform 0.4s cubic-bezier(0.22, 1, 0.36, 1);\n}\n\n.top-hud .hud-toggle::before { /* 默认朝上（关闭状态） */\n    transform: translate(calc(-50% - 5px), -50%) rotate(-45deg);\n}\n.top-hud .hud-toggle::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 14px;\n    height: 2px;\n    background-color: currentColor;\n    border-radius: 1px;\n    transition: transform 0.4s cubic-bezier(0.22, 1, 0.36, 1);\n    transform: translate(calc(-50% + 5px), -50%) rotate(45deg);\n}\n\n.bottom-hud .hud-toggle::before { /* 默认朝下（关闭状态） */\n    transform: translate(calc(-50% - 5px), -50%) rotate(45deg);\n}\n.bottom-hud .hud-toggle::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 14px;\n    height: 2px;\n    background-color: currentColor;\n    border-radius: 1px;\n    transition: transform 0.4s cubic-bezier(0.22, 1, 0.36, 1);\n    transform: translate(calc(-50% + 5px), -50%) rotate(-45deg);\n}\n\n/* HUD展开时，箭头旋转打开 */\n.top-hud.visible .hud-toggle::before {\n    transform: translate(calc(-50% - 5px), -50%) rotate(45deg);\n}\n.top-hud.visible .hud-toggle::after {\n    transform: translate(calc(-50% + 5px), -50%) rotate(-45deg);\n}\n\n.bottom-hud.visible .hud-toggle::before {\n    transform: translate(calc(-50% - 5px), -50%) rotate(-45deg);\n}\n.bottom-hud.visible .hud-toggle::after {\n    transform: translate(calc(-50% + 5px), -50%) rotate(45deg);\n}\n\n \n/* 快照管理面板的样式 */\n#snapshot-management-container {\n    border-top: 1px solid var(--border-color);\n    padding-top: 15px;\n}\n\n.db-controls {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 10px;\n    justify-content: space-around;\n}\n\n.danger-btn {\n    background-color: var(--danger-color) !important;\n    border-color: var(--color-danger, #ff4444) !important;\n     \n}\n\n.danger-btn:hover {\n     background-color: var(--color-danger, #ff4444) !important;\n      \n}\n\n.snapshot-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 5px;\n    border-bottom: 1px solid var(--border-color);\n}\n.snapshot-item:last-child {\n    border-bottom: none;\n}\n\n.delete-single-db-btn {\n    background: none;\n    border: none;\n    cursor: pointer;\n    font-size: 1.1em;\n    opacity: 0.6;\n    transition: opacity 0.2s;\n}\n.delete-single-db-btn:hover {\n    opacity: 1;\n    color: #ff4444;\n}\n \n/* 立绘cg */\n \n .tooltip-cg-container {\n    position: absolute;\n      bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    /* 核心尺寸控制：创建一个正方形的视觉区域 */\n    width: 300px;  /* 宽度与看板保持一致 */\n    height: 300px; /* 高度与看板宽度相同，形成正方形区域 */\n\n      display: none; /* JS会把它改成 'flex' */\n    justify-content: center;\n\n \n   /* 核心改动 3 (最关键的魔法！): 让里面的图片沉到这个容器的底部！*/\n    align-items: flex-end;\n\n\n    pointer-events: none; /* 关键！让鼠标可以穿透立绘，不会导致看板消失 */\n    overflow: hidden; /* 确保图片不会溢出容器 */\n}\n\n.tooltip-cg-image {\n    /* 核心缩放控制：保持比例，不拉伸，填满容器 */\n    max-width: 100%;\n    max-height: 100%;\n     object-fit: contain; /* 保证图片完整显示且不形变 */\n    image-rendering: pixelated; /* 强制浏览器以像素风格渲染，效果更佳 */\n    image-rendering: -moz-crisp-edges;\n    image-rendering: crisp-edges;\n}\n\n /* ======================= 群聊UI样式开始 (V10 完整版) ======================= */\n\n/* 模态框容器 */\n.group-chat-modal {\n    display: none; /* 默认隐藏 */\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0, 0, 0, 0.6);\n    justify-content: center;\n    align-items: center;\n}\n\n.group-chat-modal.active {\n    display: flex; /* 激活时显示为flex布局，方便居中 */\n}\n\n/* 主内容区 - V10 修改：变为flex行布局以容纳侧边栏 */\n.group-chat-main-container {\n    width: 80%;\n    max-width: 1000px;\n    height: 85%;\n    max-height: 900px;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 12px;\n    box-shadow: 0 0 20px var(--glow-color);\n    display: flex; /* 修改为 flex */\n    flex-direction: row; /* 修改为 row */\n    overflow: hidden;\n    font-family: var(--base-font-family); /* 使用更柔和的字体 */\n}\n\n/* ======================= V10: 私聊与布局新增样式 ======================= */\n\n/* 左侧联系人侧边栏 */\n.group-chat-sidebar {\n    width: 150px;\n    background-color: color-mix(in srgb, var(--container-bg-color) 80%, black 20%);\n    border-right: 1px solid var(--border-color);\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n}\n\n.group-chat-contact-list {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 10px 0;\n}\n\n.group-chat-contact-item {\n    display: flex;\n    align-items: center;\n    padding: 10px 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n    gap: 12px;\n    border-bottom: 1px solid rgba(0,0,0,0.2);\n}\n\n.group-chat-contact-item:hover {\n    background-color: var(--border-color);\n}\n\n.group-chat-contact-item.active {\n    background-color: var(--primary-color);\n}\n\n.group-chat-contact-item.active .group-chat-contact-name {\n    color: var(--background-color);\n}\n\n.group-chat-contact-avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    flex-shrink: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-weight: bold;\n    color: var(--text-color);\n    background-image: linear-gradient(to top, #09203f 0%, #537895 100%); /* 默认渐变色 */\n}\n\n.group-chat-contact-name {\n    font-size: 0.95em;\n    font-weight: 500;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    color: var(--text-color);\n}\n\n/* 右侧聊天内容区 */\n.group-chat-content-area {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    backdrop-filter:blur(5px);\n}\n\n/* 当没有选择任何聊天时显示的占位符 */\n.group-chat-placeholder {\n    flex-grow: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--text-secondary-color);\n    font-size: 1.2em;\n    text-align: center;\n    padding: 20px;\n}\n\n/* ======================= V10: 样式结束 ======================= */\n\n\n/* 头部 - V10: 嵌套在 .group-chat-content-area 之下 */\n.group-chat-content-area .group-chat-header {\n    padding: 15px 20px;\n    background-color: var(--container-bg-color);\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: var(--text-color);\n    flex-shrink: 0;\n}\n\n.group-chat-content-area .group-chat-header h1 {\n    margin: 0;\n    font-size: 1.2em;\n    font-weight: 500;\n}\n\n.group-chat-close-btn {\n    font-size: 24px;\n    font-weight: bold;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    transition: color 0.3s, transform 0.3s;\n}\n\n.group-chat-close-btn:hover {\n    color: var(--primary-color);\n    transform: rotate(90deg);\n}\n\n\n/* 消息列表区域 - V10: 嵌套在 .group-chat-content-area 之下 */\n.group-chat-content-area .group-chat-messages-list {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n /* 消息加载提示 */\n.group-chat-loader {\n    position: sticky;\n    top: 0;\n    z-index: 10;\n    background-color: var(--container-bg-color);\n    padding: 10px;\n    text-align: center;\n    color: var(--text-secondary-color);\n    font-size: 0.9em;\n    width: 100%;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.group-chat-loader.visible {\n    opacity: 1;\n}\n\n/* 单条消息容器 */\n.group-chat-message-item {\n    display: flex;\n    flex-direction: column;\n    filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.4));\n}\n\n.group-chat-message-item.sent {\n    align-self: flex-end;\n    align-items: flex-end;\n}\n\n.group-chat-message-item.received {\n    align-self: flex-start;\n    align-items: flex-start;\n}\n\n/* 用户名 */\n.group-chat-user-id {\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n    margin-bottom: 5px;\n    padding: 0 5px;\n}\n\n.group-chat-message-item.sent .group-chat-user-id {\n    text-align: right;\n}\n\n/* 消息气泡 */\n.group-chat-message-bubble {\n    padding: 10px 15px;\n    border-radius: 18px;\n    line-height: 1.5;\n    word-break: break-word;\n    max-width: 100%; /* 确保气泡不会超出父容器 */\n}\n\n\n.group-chat-message-bubble:empty {\n    display: none;\n}\n.group-chat-message-item.sent .group-chat-message-bubble {\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    border-bottom-right-radius: 5px;\n}\n\n.group-chat-message-item.received .group-chat-message-bubble {\n    background-color: var(--background-color);\n    color: var(--text-color);\n    border-bottom-left-radius: 5px;\n}\n\n/* @提及 样式 */\n.group-chat-mention {\n    color: var(--secondary-color);\n    font-weight: bold;\n    padding: 2px 4px;\n    border-radius: 4px;\n}\n\n/* 表情包图片 */\n.group-chat-meme-image {\n    max-width: 150px;\n    max-height: 150px;\n    border-radius: 8px;\n    margin-top: 8px;\n    border: 1px solid var(--border-color);\n}\n\n/* 输入区域 - V10: 嵌套在 .group-chat-content-area 之下 */\n.group-chat-content-area .group-chat-input-area-wrapper {\n    position: relative; /* 为表情包面板定位 */\n    flex-shrink: 0;\n}\n\n.group-chat-input-area {\n    border-top: 1px solid var(--border-color);\n    padding: 15px;\n    background-color: var(--container-bg-color);\n    display: flex;\n    gap: 10px;\n    align-items: center; /* 让表情按钮和输入框垂直居中 */\n}\n\n.group-chat-input {\n    flex-grow: 1;\n    padding: 10px 15px;\n    border-radius: 20px;\n    border: 1px solid var(--border-color);\n    background-color: var(--background-color); /* 修正：使用背景色而非写死的颜色 */\n    color: var(--text-color);\n    font-size: 1em;\n    width:60%;\n}\n\n.group-chat-input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 5px var(--glow-color);\n}\n\n.group-chat-send-btn {\n    padding: 10px 20px;\n    border-radius: 20px;\n    border: none;\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    font-weight: bold;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\n.group-chat-send-btn:hover {\n    background-color: var(--secondary-color);\n}\n\n/* 回复提示 */\n.group-chat-reply-indicator {\n    padding: 5px 15px;\n    background-color: var(--container-color);\n    color: var(--text-secondary-color);\n    font-size: 0.8em;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.group-chat-reply-indicator-cancel {\n    cursor: pointer;\n    font-weight: bold;\n}\n\n/* 表情包相关样式 */\n.group-chat-meme-toggle-btn {\n    background: none;\n    border: none;\n    font-size: 1.5em;\n    cursor: pointer;\n    padding: 0 8px;\n    color: var(--text-secondary-color);\n    transition: color 0.3s;\n}\n\n.group-chat-meme-toggle-btn:hover {\n    color: var(--primary-color);\n}\n\n.group-chat-meme-palette {\n    display: none;\n    position: absolute;\n    bottom: 100%;\n    left: 0;\n    right: 0;\n    background-color: var(--background-color);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 10px;\n    max-height: 200px;\n    overflow-y: auto;\n    grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\n    gap: 10px;\n    margin-bottom: 5px;\n    box-shadow: 0 -5px 15px rgba(0,0,0,0.3);\n    opacity: 0;\n    transform: translateY(10px);\n    transition: opacity 0.3s ease, transform 0.3s ease;\n    pointer-events: none;\n}\n\n.group-chat-meme-palette.active {\n    display: grid;\n    opacity: 1;\n    transform: translateY(0);\n    pointer-events: auto;\n}\n\n.group-chat-meme-palette img {\n    width: 100%;\n    cursor: pointer;\n    border-radius: 5px;\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.group-chat-meme-palette img:hover {\n    transform: scale(1.1);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n/* 回复引用样式 */\n.group-chat-reply-quote {\n    background-color: color-mix(in srgb, var(--container-bg-color) 80%, black 20%);\n    padding: 8px 12px;\n    border-left: 3px solid var(--secondary-color);\n    border-radius: 6px;\n    font-size: 0.9em;\n    color: var(--text-secondary-color);\n    margin-bottom: -5px;\n    max-width: 100%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.group-chat-reply-quote b {\n    color: var(--text-color);\n    font-weight: 500;\n}\n\n.group-chat-message-item.sent .group-chat-message-bubble,\n.group-chat-message-item.received .group-chat-message-bubble {\n    border-top-left-radius: 18px;\n    border-top-right-radius: 18px;\n}\n\n/* === 在这里添加下面一整块 CSS 代码 === */\n\n/* ======================= V11: 手机端适配样式 ======================= */\n@media (max-width: 768px) {\n\n.sidebar-trigger.left {\n    left: -60px;\n}\n\n.sidebar-trigger.right {\n    right: -60px;\n}\n    /* 在小屏幕上，让主容器变为相对定位，方便子元素覆盖 */\n    .group-chat-main-container {\n        position: relative;\n        flex-direction: column; /* 改回垂直布局，但我们会用绝对定位覆盖它 */\n        overflow: hidden; /* 隐藏将要滑出屏幕的内容 */\n    }\n\n    /* 侧边栏默认占满整个容器 */\n    .group-chat-sidebar {\n        width: 100%;\n        height: 100%;\n        border-right: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        transition: transform 0.3s ease-in-out;\n        z-index: 20;\n    }\n\n    /* 聊天内容区也占满容器，但默认被移到屏幕右侧外 */\n    .group-chat-content-area {\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        left: 0;\n        transform: translateX(100%);\n        transition: transform 0.3s ease-in-out;\n        z-index: 30; /* 确保它在滑入时能覆盖侧边栏 */\n    }\n\n    /* 当主容器有 .show-content 类时，将侧边栏滑出，聊天区滑入 */\n    .group-chat-main-container.show-content .group-chat-sidebar {\n        transform: translateX(-100%);\n    }\n\n    .group-chat-main-container.show-content .group-chat-content-area {\n        transform: translateX(0);\n    }\n\n    /* 为聊天窗口头部新增的返回按钮样式 */\n    .group-chat-back-btn {\n        display: none; /* 默认不显示 */\n        font-size: 1.5em;\n        font-weight: bold;\n        cursor: pointer;\n        margin-right: 15px;\n        color: var(--text-secondary-color);\n        transition: color 0.3s;\n    }\n\n    .group-chat-back-btn:hover {\n        color: var(--primary-color);\n    }\n\n    /* 在小屏幕的聊天窗口头部显示返回按钮 */\n    .group-chat-content-area .group-chat-header .group-chat-back-btn {\n        display: block;\n    }\n}\n/* ======================= V11: 适配样式结束 ======================= */\n/* ======================= 群聊UI样式结束 (V10 完整版) ======================= */\n\n/* --- 角色面板 - 称号显示美化 --- */\n.char-titles-container {\n    width: 100%;\n    padding: 4px 0;\n    text-align: center;\n    overflow-x: auto;  /* 当内容超出时，显示横向滚动条 */\n    overflow-y: hidden; /* 隐藏纵向滚动条 */\n    white-space: nowrap; /* 防止称号换行 */\n    scrollbar-width: thin; /* 美化滚动条 (Firefox) */\n    scrollbar-color: var(--primary-color) var(--container-bg-color); /* (Firefox) */\n}\n\n/* 美化滚动条 (Chrome, Safari, Edge) */\n.char-titles-container::-webkit-scrollbar {\n    height: 6px;\n}\n.char-titles-container::-webkit-scrollbar-track {\n    background: rgba(0,0,0,0.2);\n}\n.char-titles-container::-webkit-scrollbar-thumb {\n    background-color: var(--primary-color);\n    border-radius: 6px;\n    border: 1px solid var(--container-bg-color);\n}\n\n.char-title-tag {\n    font-size: 1.1em; /* 字体稍大一些 */\n    font-weight: bold;\n    color: var(--secondary-color);\n    margin: 0 8px; /* 称号之间留出一些空隙 */\n    display: inline-block; /* 确保 margin 生效 */\n    text-shadow: 0 0 5px var(--glow-color); /* 添加一点光晕效果 */\n}\n\n.char-title-tag.placeholder {\n    color: var(--text-secondary-color);\n    font-style: italic;\n    font-weight: normal;\n}\n\n\n/* --- 称号管理面板美化 --- */\n.title-manager-list {\n    max-height: 60vh; /* 设置最大高度，超出部分可滚动 */\n    overflow-y: auto;\n    padding-right: 10px; /* 为滚动条留出空间 */\n}\n\n.title-manager-list h3 {\n    text-align: center;\n    color: var(--primary-color);\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 10px;\n    margin-bottom: 15px;\n}\n\n.modal-subtitle {\n    text-align: center;\n    font-size: 0.9em;\n    color: var(--text-secondary-color);\n    margin-top: -10px;\n    margin-bottom: 20px;\n}\n\n.title-manager-item {\n    background-color: rgba(255, 255, 255, 0.05); /* 每个项目一个半透明背景 */\n    border-left: 3px solid var(--primary-color); /* 左侧有高亮边框 */\n    padding: 12px 15px;\n    margin-bottom: 10px;\n    border-radius: 4px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: background-color 0.3s;\n}\n\n.title-manager-item:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.title-manager-item .title-name {\n    font-size: 1.1em;\n    font-weight: bold;\n    color: var(--text-color);\n}\n\n.title-description {\n    font-size: 0.9em;\n    color: var(--text-secondary-color);\n    padding: 0 15px 15px 18px; /* 与项目对齐 */\n    margin-top: -8px; /* 向上移动一点，更紧凑 */\n    border-bottom: 1px dashed var(--border-color); /* 分隔线 */\n    margin-bottom: 15px;\n    line-height: 1.5;\n}\n.title-manager-list > .title-manager-item:last-of-type + .title-description {\n    border-bottom: none; /* 最后一个项目下面不需要分隔线 */\n}\n\n/* 美化开关 (Toggle Switch) */\n.toggle-switch {\n    position: relative;\n    display: inline-block;\n    width: 50px;\n    height: 26px;\n}\n\n.toggle-switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #333;\n    -webkit-transition: .4s;\n    transition: .4s;\n     border-radius: 26px;\n}\n\n.slider:before {\n    position: absolute;\n    content: \"\";\n    height: 20px;\n    width: 20px;\n    left: 3px;\n    bottom: 3px;\n    background-color: white;\n    -webkit-transition: .4s;\n    transition: .4s;\n    border-radius: 50%;\n}\n\ninput:checked + .slider {\n    background-color: var(--primary-color);\n}\n\ninput:focus + .slider {\n    box-shadow: 0 0 1px var(--primary-color);\n}\n\ninput:checked + .slider:before {\n    -webkit-transform: translateX(24px);\n    -ms-transform: translateX(24px);\n    transform: translateX(24px);\n}\n\n/* --- 称号管理面板 - 详情交互美化 --- */\n\n.title-manager-item {\n    cursor: pointer; /* 明确整个条目都是可以点击的 */\n    user-select: none; /* 防止点击时选中文字 */\n}\n\n/* 称号详情面板 - 默认隐藏，拥有流畅的过渡动画 */\n.title-details-panel {\n    max-height: 0;\n    overflow: hidden;\n    \n    transition: max-height 0.35s ease-in-out, padding 0.35s ease-in-out; /* 平滑展开/收起动画 */\n    padding: 0 20px;\n    border-left: 3px solid var(--secondary-color); /* 左侧用次要颜色，与主条目区分 */\n    margin: 0 0 10px 0;\n    border-radius: 0 0 4px 4px;\n}\n\n/* 当详情面板展开时的样式 */\n.title-details-panel.active {\n    max-height: 500px; /* 一个足够大的高度，确保内容能完全显示 */\n    padding: 15px 20px;\n}\n\n/* 详情列表的样式 */\n.title-details-panel ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.title-details-panel li {\n    padding: 5px 0;\n    font-size: 0.95em;\n    color: var(--text-color);\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n}\n\n.title-details-panel li:last-child {\n    border-bottom: none;\n}\n\n.title-details-panel li .detail-key {\n    font-weight: bold;\n    color: var(--primary-color);\n    min-width: 80px; /* 固定标签宽度，让冒号对齐 */\n    display: inline-block;\n    flex-shrink: 0; /* 防止标签被压缩 */\n}\n.title-details-panel li .detail-value {\n    word-break: break-all; /* 值过长时自动换行 */\n}\n\n/* 移除原有的描述区域和分隔线样式，因为现在它被整合到详情里了 */\n.title-description {\n   display: none;\n}\n.title-manager-list > .title-manager-item:last-of-type + .title-description {\n    display: none;\n}\n\n/* ★★★ 这是给搜索框的专属魔法 ★★★ */\n.talent-search-container {\n    padding: 0 15px; /* 给予一点呼吸的空间 */\n    margin-bottom: 10px;\n}\n\n#talent-search-input {\n    width: 100%;\n    box-sizing: border-box; /* 让宽度计算更听话 */\n    background-color: var(--background-color);\n    border: 1px solid var(--border-color);\n    color: var(--text-color);\n    border-radius: 4px;\n    padding: 8px 12px;\n    font-size: 14px;\n    transition: border-color 0.3s, box-shadow 0.3s;\n}\n\n#talent-search-input::placeholder {\n    color: var(--text-secondary-color);\n    opacity: 0.7;\n}\n\n#talent-search-input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 5px var(--glow-color);\n}\n .arrow-guide {\n   \n    display: inline-block;\n}\n.arrow-guide::before {\n    content: '';\n    display: block;\n    width: 16px;  /* 箭头的宽度 */\n    height: 16px; /* 箭头的高度 */\n    border-top: 2px solid currentColor;   /* 左上线条 */\n    border-right: 2px solid currentColor; /* 右上线条 */\n    transform: rotate(-45deg);  /* 旋转45度形成向上箭头 */\n    margin: 0 auto; /* 居中 */\n}\n\n\n     #button-container-send {\n \n    position: relative;\n    display: inline-flex;\n    \n    /* 添加这个来确保成为定位上下文 */\n    z-index: 1;\n \n    }\n\n    /*\n     * 咒语二：定义守护帷幕的样子\n     * 这就是你熟悉的 'action-blocker-overlay'。\n     */\n    \n#action-blocker-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;  /* 用 right: 0 替代 width: 100% */\n    bottom: 0; /* 用 bottom: 0 替代 height: 100% */\n    background-color: rgba(200, 200, 200, 0.4);\n    z-index: 10;\n    display: none;\n    cursor: wait;\n    border-radius: inherit;\n}\n\n    /* 当我们激活它时，它就出现 */\n    #action-blocker-overlay.active {\n        display: block;\n    }\n/* === 自定义素材工坊样式 === */\n.custom-asset-tabs {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 15px;\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 10px;\n}\n.asset-tab-btn {\n    background: none;\n    border: 1px solid transparent;\n    color: var(--text-secondary-color);\n    padding: 8px 12px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border-radius: 6px;\n    font-size: 0.9em;\n}\n.asset-tab-btn:hover {\n    background-color: var(--container-bg-color);\n    color: var(--primary-color);\n}\n.asset-tab-btn.active {\n    color: var(--primary-color);\n    border-bottom: 2px solid var(--primary-color);\n    background-color: rgba(10, 25, 47, 0.5); /* 略微高亮 */\n    font-weight: bold;\n}\n\n.asset-panel {\n    display: none;\n    flex-direction: column;\n    gap: 20px;\n}\n.asset-panel.active {\n    display: flex;\n}\n\n.asset-upload-form {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    background-color: rgba(0,0,0,0.2);\n    padding: 15px;\n    border-radius: 8px;\n    border: 1px solid var(--border-color);\n}\n.asset-upload-form p {\n    margin: 0;\n    font-weight: bold;\n    color: var(--text-color);\n    font-size: 0.95em;\n}\n.asset-upload-form input[type=\"text\"] {\n    background-color: var(--background-color);\n    border: 1px solid var(--border-color);\n    color: var(--text-color);\n    padding: 8px 10px;\n    border-radius: 4px;\n    width: 100%;\n}\n.asset-upload-form .file-input-wrapper {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n.asset-upload-form input[type=\"file\"] {\n    display: none;\n}\n.file-name-display {\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n.asset-upload-form button.primary {\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    font-weight: bold;\n}\n.asset-upload-form button.primary:hover {\n    box-shadow: 0 0 10px var(--glow-color);\n}\n\n\n.asset-list-container p {\n    margin: 10px 0;\n    font-weight: bold;\n    color: var(--text-color);\n    font-size: 0.95em;\n}\n.asset-list {\n    max-height: 200px;\n    overflow-y: auto;\n    background-color: rgba(0,0,0,0.2);\n    padding: 10px;\n    border-radius: 8px;\n    border: 1px solid var(--border-color);\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.asset-item {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    background-color: var(--container-bg-color);\n    padding: 8px;\n    border-radius: 6px;\n}\n.asset-item-thumb {\n    width: 40px;\n    height: 40px;\n    object-fit: cover;\n    border-radius: 4px;\n    border: 1px solid var(--border-color);\n}\n.asset-item-name {\n    flex-grow: 1;\n    color: var(--text-color);\n    font-family: var(--base-font-family);\n}\n.asset-item-delete-btn {\n    background: none;\n    border: 1px solid var(--danger-color);\n    color: var(--danger-color);\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    opacity: 0.7;\n    flex-shrink: 0;\n}\n.asset-item-delete-btn:hover {\n    background: var(--danger-color);\n    color: white;\n    opacity: 1;\n    box-shadow: 0 0 8px var(--danger-glow-color);\n    transform: scale(1.1);\n}\n\n    /* 将输入框和按钮放在一行的容器 */\n    .archive-name-controls {\n        display: flex;\n        gap: 10px; /* 在输入框和按钮之间增加一点空隙 */\n        margin-top: 5px;\n    }\n\n    /* 存档名称输入框的样式 */\n    #archive-name-input {\n        flex-grow: 1; /* 让输入框尽可能地宽 */\n        background-color: transparent;\n        border: 1px solid var(--border-color);\n        border-radius: 4px;\n        padding: 8px 12px;\n        color: var(--text-color);\n        font-size: 0.9em;\n        transition: border-color 0.3s, box-shadow 0.3s;\n    }\n\n    /* 输入框获得焦点时的发光效果 */\n    #archive-name-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 8px var(--glow-color);\n    }\n\n    /* 输入框的占位符文字颜色 */\n    #archive-name-input::placeholder {\n        color: var(--text-secondary-color);\n        opacity: 0.7;\n    }\n\n    /* “设定”按钮的样式调整，让它和输入框高度匹配 */\n    #set-archive-name-btn {\n        flex-shrink: 0; /* 防止按钮被压缩 */\n        padding: 8px 15px;\n    }\n\n    .group-chat-loading-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.2em;\n    z-index: 1001; /* 确保在模态框内容之上 */\n    display: none; /* 默认隐藏 */\n}\n\n.meme-retry-btn, .meme-force-refresh-btn {\n    color: #4e9af1;\n    text-decoration: underline;\n    cursor: pointer;\n    margin: 0 5px;\n}\n.meme-force-refresh-btn {\n    color: #ff7675;  \n}\n \n.meme-item.success { border: 1px solid #d4edda; }\n.meme-item.failed { border: 1px solid #f8d7da; background-color: #fff3f3; }\n \n.meme-item-name { font-size: 10px; color: #721c24; margin-bottom: 4px; }\n.meme-item-retry-btn { font-size: 10px; padding: 2px 4px; border: 1px solid #f5c6cb; background-color: white; color: #721c24; border-radius: 3px; cursor: pointer; }\n.force-refresh-main-btn { width: 100%; background: #c0392b; color: white; border: none; padding: 8px; font-weight: bold; margin-bottom: 10px; cursor: pointer; }\n    \n    \n /* 为重命名输入框准备的样式 */\n.entry-rename-input {\n    width: calc(100% - 20px);\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    font-size: 1em;\n    margin-top: 10px;\n}\n\n.entry-rename-input.input-error {\n    border-color: #ff4444;\n    animation: shake 0.5s;\n}\n\n@keyframes shake {\n    0%, 100% { transform: translateX(0); }\n    25% { transform: translateX(-5px); }\n    75% { transform: translateX(5px); }\n}\n\n\n/* 为立绘选择模态框中的列表项添加一个鼠标悬浮效果，让它更具互动感 */\n#cg-selection-list .asset-item {\n    cursor: pointer;\n    transition: all 0.2s ease-in-out;\n}\n\n#cg-selection-list .asset-item:hover {\n    transform: scale(1.05);\n    background-color: var(--container-bg-color);\n    box-shadow: 0 4px 8px var(--glow-color);\n}\n\n/* 确保添加CG的模态框有合适的尺寸 */\n#add-cg-modal .modal-content {\n    max-width: 800px;\n    width: 90%;\n}   \n    /* 为我们所有的模态框背景添加一个优雅的过渡效果 */\n.move-modal-overlay {\n    /* 这会继承你已有的 move-modal-overlay 样式，我们只是加点动画 */\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n/* 让模态框内容也能优雅地出现 */\n.move-modal-overlay .modal-content {\n    /* 你可能已为 .modal-content 设置了样式，这里是补充 */\n    transform: scale(0.95);\n    opacity: 0;\n    transition: transform 0.3s ease, opacity 0.3s ease;\n}\n\n\n/* 我们可以直接为立绘选择窗口里的列表专门设置 */\n#add-cg-modal .asset-list {\n    max-height: 40vh; /* 这意味着列表最高只会占屏幕高度的40%，你可以根据喜好调整这个数值 */\n    overflow-y: auto;  /* 当内容超出高度时，自动出现垂直滚动条 */\n    padding-right: 10px; /* 为滚动条留出一点点空间，让它不那么拥挤 */\n}\n\n/* 为了让滚动条也变得更漂亮（适用于Chrome/Safari等浏览器） */\n#add-cg-modal .asset-list::-webkit-scrollbar {\n    width: 6px;\n}\n\n#add-cg-modal .asset-list::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.05);\n    border-radius: 3px;\n}\n\n#add-cg-modal .asset-list::-webkit-scrollbar-thumb {\n    background-color: var(--background-color);\n    border-radius: 3px;\n    transition: background-color 0.2s;\n}\n\n#add-cg-modal .asset-list::-webkit-scrollbar-thumb:hover {\n    background-color: var(--container-bg-color);\n}\n/*\n  妈妈的专属魔法样式，只为这几个新窗口服务，绝不打扰他人\n*/\n.nova-modal-content {\n    /* 这是我们的新窗口的基础样式，很多是从你已有的 move-modal-content 借鉴来的 */\n    background: var(--background-color);\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 5px 15px var(--glow-color);\n    max-width: 500px;\n    width: 90%;\n    z-index: 1001;\n\n    /* 这里是它们专属的动画设定 */\n    transform: scale(0.95);\n  \n    transition: transform 0.3s cubic-bezier(0.18, 0.89, 0.32, 1.28), opacity 0.3s ease;\n}\n\n/* 让遮罩层也配合动画 */\n.move-modal-overlay {\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n/* 为你的CG选择窗口做一点尺寸优化 */\n#add-cg-modal .nova-modal-content {\n    max-width: 800px;\n}\n\n/* CG列表的悬停效果 */\n#cg-selection-list .asset-item:hover {\n    transform: scale(1.05);\n    background-color: var(--background-color);\n    box-shadow: 0 4px 8px var(--glow-color);\n}\n\n /* --- Version 7 末日世界专属样式 --- */\n#world-details-v7 {\n    width: 100%;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\n.v7-setup-section {\n    margin-bottom: 1.5rem;\n}\n\n.v7-setup-title {\n    font-size: 1rem;\n    color: #c86aa3; /* accent-color-pink */\n    margin-bottom: 1rem;\n    padding-bottom: 0.5rem;\n    border-bottom: 1px solid #2a2633; /* border-color */\n    font-weight: 300;\n}\n\n.v7-choice-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n}\n\n.v7-choice-label {\n    display: block;\n    background-color: rgba(26, 23, 32, 0.5); /* hover-bg-color with alpha */\n    border: 1px solid #2a2633; /* border-color */\n    padding: 0.75rem 1rem;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: border-color 0.3s, background-color 0.3s;\n    position: relative;\n}\n\n.v7-choice-label:hover {\n    border-color: #5f8ac7;\n    background-color: rgba(95, 138, 199, 0.1);\n}\n\n.v7-choice-label.active {\n    border-color: #c86aa3; /* accent-color-pink */\n    background-color: rgba(200, 106, 163, 0.15);\n    box-shadow: 0 0 8px rgba(200, 106, 163, 0.3);\n}\n\n.v7-choice-title {\n    font-size: 0.9rem;\n    color: #d8d4e4; /* primary-text */\n    display: block;\n    font-weight: 500;\n}\n\n/* --- 悬浮描述窗口样式 --- */\n#description-popup {\n    position: fixed;\n    display: none;\n    background-color: rgba(18, 16, 22, 0.85);\n    backdrop-filter: blur(8px);\n    color: #d8d4e4;\n    border: 1px solid #4d465a;\n    border-radius: 6px;\n    padding: 1rem;\n    font-size: 0.9em;\n    line-height: 1.6;\n    max-width: 400px;\n    z-index: 10001; /* 确保它在最顶层 */\n    pointer-events: none; /* 穿透鼠标事件 */\n       opacity: 0;\n    transition: opacity 0.3s ease, transform 0.3s ease;\n    transform: translateY(10px) scale(0.95); /* 妈妈在这里加了一点缩放的小魔法 */\n    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.4);\n}\n\n/* 字体大小控制器的样式 */\n .font-size-controls, .line-height-controls {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n}\n\n#font-size-slider {\n    /* 你可以根据喜好调整滑块的样式 */\n    cursor: pointer;\n}\n\n#font-size-value {\n    font-family: monospace; /* 使用等宽字体，数字跳动时不会晃动 */\n    min-width: 45px;      /* 给它一个固定宽度，避免因数字位数变化导致布局跳动 */\n    text-align: right;\n    color: var(--primary-color);\n    transition: color 0.3s ease;\n}\n\n\n/* --- 弹窗基础 --- */\n.favorability-modal .favorability-content {\n    width: 80vw;\n    max-width: 900px;\n    height: 70vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.favor-modal-title {\n    font-size: 1.2em;\n    font-weight: bold;\n    color: var(--primary-color);\n    padding: 15px 20px;\n    border-bottom: 1px solid var(--border-color);\n    text-shadow: 0 0 5px var(--glow-color);\n}\n\n.favor-modal-buttons {\n    padding: 15px 20px;\n    border-top: 1px solid var(--border-color);\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n}\n\n/* --- 卡片容器和滚动条 --- */\n.favor-card-container {\n    flex-grow: 1;\n \n    flex-wrap: wrap;\n    gap: 20px;\n    justify-content: center;\n    align-content: flex-start;\n \n    overflow: hidden; /* 这是实现翻页效果的关键！ */\n    position: relative;\n     \n}\n/* --- 卡片“滑动轨道”：所有的书页都在这上面并排躺着 --- */\n.favor-card-slider {\n    display: flex;\n    height: 100%;\n    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* 一个柔和的翻页动画 */\n}\n/* --- 【需求1】标题的美化样式 --- */\n.favor-stage-title {\n    display: block; /* 让标题独占一行 */\n    text-align: center; /* 居中显示 */\n    font-size: 1.2em; /* 放大字体 */\n    font-weight: bold;\n    color: var(--primary-color);\n    margin-bottom: 15px; /* 与下面的正文拉开距离 */\n    text-shadow: 0 0 8px var(--glow-color);\n}\n\n/* 好感度范围的样式，像小小的注脚 */\n.favor-range-text {\n    display: block;\n    font-size: 0.7em;\n    font-weight: normal;\n    color: var(--text-secondary-color);\n    margin-top: 5px;\n}\n\n.favor-card-container::-webkit-scrollbar {\n    width: 6px;\n}\n\n.favor-card-container::-webkit-scrollbar-thumb {\n    background-color: var(--primary-color);\n    border-radius: 3px;\n}\n\n/* --- 单个情感卡片样式 --- */\n.favor-card {\n   flex-shrink: 0;\n    width: 100%;\n    height: 100%;\n    overflow-y: auto; /* 如果单页内容过长，允许内部滚动 */\n    padding: 20px;\n    border: none; /* 去掉之前的边框，让它感觉更像一页纸 */\n    background-color: transparent;\n    box-shadow: none;\n \n    color: var(--text-secondary-color);\n    font-size: var(--base-font-size);\n    line-height: var(--base-line-height);\n    box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n \n    transition: transform 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;\n  \n}\n/* 给卡片滚动条也稍微美化一下 */\n.favor-card::-webkit-scrollbar { width: 4px; }\n.favor-card::-webkit-scrollbar-thumb { background-color: var(--border-color); border-radius: 2px;}\n\n/* 卡片悬停时的优雅效果 */\n.favor-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px var(--glow-color);\n    border-color: var(--primary-color);\n}\n\n/* --- 当前阶段的特殊华丽效果 --- */\n.favor-card.current-stage {\n    color: var(--text-color);\n \n}\n\n .current-stage .favor-stage-title{\n    text-shadow: 0 0 15px var(--glow-color), 0 0 8px var(--primary-color);\n}\n\n/* --- 翻页控件的容器 --- */\n.favor-page-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    border-top: 1px solid var(--border-color);\n    order: 3; /* 让它显示在按钮区域之上 */\n}\n\n/* --- 翻页按钮的样式 --- */\n.favor-nav-button {\n    background-color: transparent;\n    border: 1px solid var(--border-color);\n    color: var(--primary-color);\n    font-size: 24px;\n    font-weight: bold;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.favor-nav-button:hover:not(:disabled) {\n    background-color: var(--glow-color);\n    color: var(--background-color);\n}\n.favor-nav-button:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n}\n\n/* --- 页码指示器 --- */\n.favor-page-indicator {\n    color: var(--text-secondary-color);\n    font-size: 0.9em;\n}\n\n/* --- 底部按钮区域微调 --- */\n.favor-modal-buttons {\n    order: 4; /* 确保它在最下面 */\n}\n/* --- 编辑模式的文本域 --- */\n#favor-edit-textarea {\n    flex-grow: 1;\n    margin: 20px;\n    background-color: var(--background-color);\n    border: 1px solid var(--border-color);\n    color: var(--text-color);\n    font-family: 'Courier New', Courier, monospace;\n    font-size: 0.9em;\n    border-radius: 5px;\n    outline: none;\n    padding: 10px;\n}\n\n#favor-edit-textarea:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 10px var(--glow-color);\n}\n\n/* --- 温柔的提示框样式 (可选) --- */\n.nova-alert {\n    position: fixed;\n    top: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 10px 20px;\n    border-radius: 5px;\n    font-family: var(--base-font-family);\n    box-shadow: 0 4px 15px rgba(0,0,0,0.3);\n    opacity: 1;\n    transition: opacity 0.5s ease, transform 0.5s ease;\n    z-index: 999999999;\n}\n.nova-alert.info {\n    background-color: var(--primary-color);\n    text-shadow: 0 0 5px #000;\n}\n.nova-alert.danger {\n    background-color: var(--danger-color);\n    box-shadow: 0 0 10px var(--danger-glow-color);\n}\n\n/* 标题栏布局调整，为开关腾出空间 */\n.favor-modal-title {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.toggle-switch-container {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n}\n\n/* 隐藏原始的复选框 */\n.toggle-input {\n    display: none;\n}\n\n/* 开关的“轨道” */\n.toggle-switch {\n    position: relative;\n    display: inline-block;\n    width: 44px;\n    height: 24px;\n    background-color: rgba(120, 120, 120, 0.4);\n    border-radius: 12px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n/* 开关的“滑块” */\n.toggle-switch::before {\n    content: '';\n    position: absolute;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: white;\n    top: 2px;\n    left: 2px;\n    transition: transform 0.3s ease;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.3);\n}\n\n/* 当开关被“打开”时的样式 */\n.toggle-input:checked + .toggle-switch {\n    background-color: var(--primary-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n.toggle-input:checked + .toggle-switch::before {\n    transform: translateX(20px);\n}\n  /* 基础的 SVG 形状样式 */\n#map-container svg .shape-group path,\n#map-container svg .shape-group circle,\n#map-container svg .shape-group polygon {\n    fill: var(--glow-color);\n    stroke: var(--secondary-color);\n \n        vector-effect: non-scaling-stroke;\n      transition: fill 0.3s ease; /* ✨ 看，魔法咒语回到这里啦！✨ */\n    /* ✨ 妈妈把 transition 移到了上一级，让整个组一起动 ✨ */\n}\n\n/* 标签文字样式 */\n#map-container svg .map-location-label {\n    fill: var(--text-color);\n    font-weight: bold;\n    text-shadow: 0 0 5px var(--container-bg-color), 0 0 3px black;\n   \n}\n\n #map-container svg g.shape-group {\n \n    cursor: pointer;\n    /* 我们不再需要 transform 的动画了，让它回归宁静 */\n    transition: fill 0.3s ease; /* 我们只让颜色的变化有动画 */\n}\n\n \n\n/* 当鼠标悬浮时，单独改变图形的填充色 */\n#map-container svg g.shape-group:hover path,\n#map-container svg g.shape-group:hover circle,\n#map-container svg g.shape-group:hover polygon {\n    fill: var(--background-color);\n}\n\n/* 如果要让标签也有一点点反应，可以加上这个 */\n#map-container svg g.shape-group:hover .map-location-label {\n    fill: var(--text-secondary-color);\n}\n\n/* 别忘了给整个组一个可点击的手势 */\n#map-container svg g.shape-group {\n    cursor: pointer;\n}\n\n/* ♥♥♥ 为 location-modal 中的资源面板添加的美丽新样式 ♥♥♥ */\n.resources-container {\n    margin-top: 20px;\n    padding-top: 15px;\n    border-top: 1px solid var(--border-color);\n}\n\n.resources-title {\n    color: var(--secondary-color);\n    font-size: 1.1em;\n    margin-bottom: 10px;\n    text-align: center;\n}\n\n.resource-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 8px 12px;\n    margin-bottom: 8px;\n    transition: background-color 0.3s;\n}\n\n.resource-item:hover {\n    background-color: var(--container-bg-color);\n}\n\n.resource-info {\n    display: flex;\n    flex-direction: column;\n}\n\n.resource-name {\n    font-weight: bold;\n    color: var(--text-color);\n    font-size: 1em;\n}\n\n.resource-details {\n    font-size: 0.8em;\n    color: var(--text-secondary-color);\n    margin-top: 2px;\n}\n\n.harvest-btn {\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    border: none;\n    border-radius: 4px;\n    padding: 6px 12px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.harvest-btn:hover {\n    background-color: var(--secondary-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n.harvest-btn:disabled {\n    background-color: #555;\n    color: #999;\n    cursor: not-allowed;\n    box-shadow: none;\n}\n/* ♥♥♥ 为地块类型标签设计的别致样式 ♥♥♥ */\n.location-type-tag {\n    display: inline-block;\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    padding: 2px 8px;\n    border-radius: 10px;\n    font-size: 0.8em;\n    font-weight: bold;\n    margin-top: 8px;\n    margin-bottom: 5px; /* 与下方描述的间距 */\n}\n\n/* 指挥台的容器，它会静静地悬浮在右下角 */\n#map-controls-container {\n    position: absolute;\n    right: 20px;\n    bottom: 20px;\n    z-index: 1000; /* 确保它在所有地图内容之上 */\n    display: flex;\n    flex-direction: column;\n    gap: 8px; /* 按钮之间的温柔间隙 */\n}\n\n/* 每一个指挥按钮的样式 */\n.map-control-btn {\n    width: 32px;\n    height: 32px;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 50%; /* 圆圆的，很可爱 */\n    color: var(--text-color);\n    font-size: 20px;\n    font-weight: bold;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    line-height: 1; /* 让符号更居中 */\n    box-shadow: 0 0 8px var(--glow-color);\n    transition: all 0.2s ease;\n}\n\n/* 当鼠标悬浮在按钮上时的魔法效果 */\n.map-control-btn:hover {\n    background-color: var(--background-color);\n    border-color: var(--primary-color);\n    transform: scale(1.1);\n}\n\n\n/* 守护印记开关的容器 */\n.protection-toggle-container,\n.protection-toggle-container-edit {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-size: 14px;\n    color: var(--text-secondary-color);\n}\n \n \n \n\n/*\n   微调我们原有的控件样式，\n   因为它们的边距和边框现在由父容器统一管理了，\n   所以要把它们自己的“外衣”脱掉，看起来才更清爽\n*/\n.location-type-tag {\n    margin: 0; /* 移除它自己的上下边距 */\n}\n\n.protection-toggle-container {\n    margin: 0;      /* 移除它自己的上下边距 */\n    padding: 0;     /* 移除它自己的内边距 */\n    border: none;   /* 移除它自己的下边框 */\n}\n\n\n.parent-map-tabs-container {\n    position: absolute;\n    top: 20px; /* 根据你的布局调整 */\n    left: 10px; /* 根据你的布局调整 */\n    width: 120px;\n    background: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 5px;\n    color: var(--text-color);\n    z-index: 1001; /* 确保它在地图内容之上 */\n    padding: 10px;\n}\n\n.parent-map-tabs-container h3 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: var(--primary-color);\n    border-bottom: 1px solid var(--border-color);\n    padding-bottom: 5px;\n      cursor: pointer; /* ❤️ 添加：鼠标放上去会变成小手 */\n    display: flex; /* ❤️ 添加：为了让标题和箭头图标对齐 */\n    justify-content: space-between; /* ❤️ 添加：让标题和箭头分居两侧 */\n    align-items: center; /* ❤️ 添加：垂直居中 */\n}\n\n/* ❤️ 新增：这是我们的小箭头图标样式 ❤️ */\n.parent-map-tabs-container h3 .toggle-arrow {\n    font-size: 12px;\n    margin-left: 5px;\n    transition: transform 0.2s ease-in-out;\n    \n}\n.parent-map-tabs-list {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n      max-height: 150px; /* ❤️ 添加：设置一个最大高度 */\n    overflow-y: auto;  /* ❤️ 添加：当内容超出时，自动显示垂直滚动条 */\n    transition: all 0.3s ease-out; /* ❤️ 添加：为了收起展开时有平滑动画 */\n}\n\n/* ❤️ 新增：这是“收起”状态下的魔法！ ❤️ */\n.parent-map-tabs-container.collapsed .parent-map-tabs-list {\n    max-height: 0;\n    overflow: hidden;\n    padding-top: 0;\n    padding-bottom: 0;\n    margin-top: 0;\n    opacity: 0;\n}\n\n/* ❤️ 新增：让箭头在收起时也跟着旋转 ❤️ */\n.parent-map-tabs-container.collapsed .toggle-arrow {\n    transform: rotate(-90deg);\n}\n.parent-map-tab {\n    padding: 8px 10px;\n\n    border-radius: 3px;\n    cursor: pointer;\n    transition: all 0.2s ease-in-out;\n    text-align: center;\n    font-family: var(--base-font-family);\n}\n\n.parent-map-tab:hover {\n    \n    border-color: var(--secondary-color);\n}\n\n.parent-map-tab.active {\n\n    color: var(--primary-color);\n    font-weight: bold;\n    border-color: var(--primary-color);\n}\n\n/* 稍微调整一下，确保两个列表不会打架 */\n.external-areas {\n    top: 200px; /* 调整一下位置，给“地图集”留出空间 */\n    /* 其他样式保持不变 */\n}\n /* ❤️ 妈妈全新的“涟漪”咒语 ❤️ */\n@keyframes wave-pulse {\n    from {\n        /* 动画开始时，涟漪和原始图形重合，比较明显 */\n        transform: scale(1);\n        opacity: 0.7;\n        stroke-width: 3px; /* 可以让涟漪稍微粗一点点 */\n    }\n    to {\n        /* 动画结束时，涟漪变得很大，完全透明，然后消失 */\n        transform: scale(1.5); /* 你可以调整这个数值来控制扩散范围 */\n        opacity: 0;\n        stroke-width: 1px;\n    }\n}\n\n/* ❤️ 这是涟漪波浪本身的样式 ❤️ */\n.location-wave {\n    /* 涟漪没有填充色，只有轮廓 */\n    fill: none !important;\n    /* 轮廓颜色使用我们明亮的主色调 */\n    stroke: var(--primary-color) !important;\n    /* 动画名称、时长、缓动函数、无限循环 */\n    animation: wave-pulse 2.5s ease-out infinite;\n    /* 重要的！设置缩放的原点为图形中心 */\n    transform-origin: center;\n    /* 确保涟漪不会接收鼠标事件，以免挡住我们点击图形 */\n    pointer-events: none;\n}\n\n .location-menu-trigger {\n    position: absolute;\n    top: 15px; /* 根据你的关闭按钮位置微调 */\n    right: 50px; /* 留出关闭按钮的位置 */\n    cursor: pointer;\n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n    gap: 3px; /* 点与点之间的间距 */\n    border-radius: 5px;\n    transition: background-color 0.2s;\n}\n\n.location-menu-trigger:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.location-menu-trigger span {\n    width: 5px;\n    height: 5px;\n    background-color: var(--text-secondary-color);\n    border-radius: 50%;\n}\n\n\n/* --- 新增：模组重置面板样式 --- */\n#open-reconfig-modal-btn.control-btn-special {\n    background-color: transparent;\n    border: 1px solid var(--primary-color);\n    color: var(--primary-color);\n    padding: 5px 15px;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n#open-reconfig-modal-btn.control-btn-special:hover {\n    background-color: var(--primary-color);\n    color: var(--container-bg-color);\n    box-shadow: 0 0 10px var(--glow-color);\n}\n\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.6);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1001; /* 确保在最上层 */\n    backdrop-filter: blur(5px);\n}\n\n.reconfig-modal-content {\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 12px;\n    padding: 25px 30px;\n    width: 90%;\n    max-width: 700px;\n    box-shadow: 0 0 25px var(--glow-color);\n    animation: fadeInModal 0.4s ease-out;\n    position: relative;\n}\n\n.reconfig-modal-close {\n    position: absolute;\n    top: 10px;\n    right: 15px;\n    background: none;\n    border: none;\n    font-size: 28px;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    transition: color 0.3s ease;\n}\n.reconfig-modal-close:hover {\n    color: var(--primary-color);\n}\n\n.reconfig-title {\n    color: var(--primary-color);\n    text-align: center;\n    margin: 0 0 5px 0;\n    font-size: 1.8em;\n}\n\n.reconfig-subtitle {\n    color: var(--text-secondary-color);\n    text-align: center;\n    margin: 0 0 25px 0;\n    font-size: 0.9em;\n}\n\n.reconfig-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 15px 20px;\n    max-height: 50vh;\n    overflow-y: auto;\n    padding: 10px;\n    background-color: rgba(0,0,0,0.2);\n    border-radius: 8px;\n}\n\n.reconfig-mod-item {\n    display: flex;\n    align-items: center;\n    background-color: rgba(255, 255, 255, 0.05);\n    padding: 10px;\n    border-radius: 6px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n    border-left: 3px solid transparent;\n}\n.reconfig-mod-item:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n.reconfig-mod-item.is-active {\n    border-left: 3px solid var(--primary-color);\n}\n\n.reconfig-mod-item input[type=\"checkbox\"] {\n    display: none; /* 我们用label来控制 */\n}\n\n.reconfig-mod-item label {\n    color: var(--text-color);\n    font-size: 1em;\n    cursor: pointer;\n    flex-grow: 1;\n}\n.reconfig-mod-item.is-active label {\n    color: var(--secondary-color);\n}\n\n.reconfig-footer {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-top: 25px;\n}\n\n.reconfig-feedback {\n    color: var(--primary-color);\n    margin-right: 20px;\n    font-style: italic;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.reconfig-apply-btn {\n    background: var(--primary-color);\n    color: var(--background-color);\n    border: none;\n    padding: 10px 25px;\n    border-radius: 5px;\n    font-size: 1em;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n.reconfig-apply-btn:hover {\n    box-shadow: 0 0 15px var(--glow-color);\n    transform: translateY(-2px);\n}\n\n@keyframes fadeInModal {\n    from { opacity: 0; transform: scale(0.95); }\n    to { opacity: 1; transform: scale(1); }\n}\n\n/* ☆ 妈妈的“星辰指挥台”魔法 v1.0 ☆ */\n.fixed-editing-controls {\n    position: fixed; /* 它的位置被永久固定在屏幕上 */\n    bottom: 0;       /* 紧贴屏幕底部 */\n    left: 0;         /* 从左侧开始 */\n    width: 100%;     /* 宽度撑满整个屏幕 */\n\n    padding: 15px 0; /* 给按钮上下一些呼吸空间 */\n    background: linear-gradient(to top,\n        rgba(0, 0, 0, 0.8), /* 底部是深邃的夜空 */\n        rgba(0, 0, 0, 0.0)  /* 向上逐渐透明，融入聊天背景 */\n    );\n\n    display: flex;\n    justify-content: center; /* 让按钮们在舞台中央集合 */\n    gap: 20px; /* 按钮之间保持优雅的距离 */\n\n    z-index: 100; /* 确保它永远在所有聊天气泡之上 */\n    animation: fadeIn 0.3s ease-out; /* 华丽登场 */\n}\n \n/* 标签页容器 */\n.nova-tabs {\n    display: flex;\n    border-bottom: 1px solid var(--border-color); /* 使用我们的边框颜色 */\n    margin-bottom: 15px;\n}\n\n/* 标签页按钮 */\n.nova-tab-button {\n    padding: 10px 15px;\n    cursor: pointer;\n    background: transparent;\n    border: none;\n    color: var(--text-secondary-color); /* 使用次要文字颜色 */\n    font-size: 16px;\n    font-family: var(--base-font-family); /* 统一字体 */\n    border-bottom: 3px solid transparent;\n    transition: all 0.3s ease;\n}\n\n/* 激活状态和悬浮状态的标签页按钮 */\n.nova-tab-button.active {\n    color: var(--text-color); /* 激活时使用主要文字颜色 */\n    border-bottom-color: var(--primary-color); /* 激活时下划线使用主色 */\n}\n\n.nova-tab-button:hover {\n    background-color: rgba(255, 255, 255, 0.1); /* 悬浮时增加一点淡淡的光晕 */\n    color: var(--text-color);\n}\n\n/* 标签页内容面板 */\n.nova-tab-panel {\n    display: none;\n}\n\n.nova-tab-panel.active {\n    display: block;\n}\n\n/* 标签选择器容器 */\n#tag-selector-container {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    max-height: 40vh; /* 保持一个舒适的高度 */\n    overflow-y: auto;\n    padding-right: 10px;\n}\n\n/* 每个标签分类的样式 */\n.nova-tag-category {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 8px;\n    padding: 8px;\n    background-color: rgba(0, 0, 0, 0.2); /* 一个柔和的深色背景 */\n    border-radius: 6px;\n}\n\n/* 标签分类标题 */\n.nova-tag-category-title {\n    font-weight: bold;\n    margin-right: 10px;\n    color: var(--primary-color); /* 使用我们的主色来强调 */\n    white-space: nowrap;\n}\n\n/* 单个标签选项按钮 */\n.nova-tag-option {\n    padding: 5px 10px;\n    border: 1px solid var(--border-color); /* 使用统一的边框颜色 */\n    background-color: var(--background-color); /* 使用我们的背景色 */\n    color: var(--text-secondary-color); /* 次要文字颜色 */\n    border-radius: 15px;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.nova-tag-option:hover {\n    background-color: var(--container-bg-color); /* 悬浮时使用容器背景色，更亮一些 */\n    border-color: var(--secondary-color); /* 边框变成次级高亮色 */\n}\n\n/* 被选中的标签选项 */\n.nova-tag-option.selected {\n    background-color: var(--primary-color); /* 背景使用主色 */\n    border-color: var(--glow-color); /* 边框使用辉光色，更有层次感 */\n    color: var(--background-color); /* 文字颜色反转，使用深色背景色，保证清晰 */\n    font-weight: bold;\n    text-shadow: none; /* 确保在亮色背景下文字清晰 */\n}\n\n/* 当前组合预览框 */\n.nova-current-preview {\n    margin-top: 15px;\n    padding: 10px;\n    background-color: rgba(0, 0, 0, 0.3); /* 更深的透明背景 */\n    border: 1px dashed var(--border-color); /* 虚线边框增加设计感 */\n    border-radius: 4px;\n    color: var(--text-color); /* 主要文字颜色 */\n    text-align: center;\n    font-family: monospace;\n    word-wrap: break-word;\n}\n\n/* 应用组合按钮 */\n#apply-tag-combination {\n    /* 这里可以让它继承我们已有的 JillButton 样式，只需确保 JillButton 也使用了变量 */\n    /* 如果要覆盖，可以这样写： */\n    background-color: var(--primary-color);\n    color: var(--background-color);\n    border: 1px solid var(--primary-color);\n    width: 100%;\n    margin-top: 15px;\n    padding: 12px;\n    font-size: 16px;\n    font-weight: bold;\n}\n#apply-tag-combination:hover {\n    box-shadow: 0 0 10px var(--glow-color); /* 悬浮时增加辉光效果 */\n}\n\n\n/* 禁用状态的应用按钮 */\n#apply-tag-combination:disabled {\n    background-color: #555; /* 用一个固定的深灰色表示禁用 */\n    border-color: #666;\n    color: #999;\n    cursor: not-allowed;\n    box-shadow: none; /* 禁用时移除辉光 */\n}\n.JillButton {\n    background: var(--primary-color);\n    border: 1px solid var(--primary-color);\n    color: var(--background-color);\n    padding: 8px 16px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-weight: bold;\n    transition: all 0.3s ease;\n}\n\n.JillButton:hover {\n    background: var(--secondary-color);\n    border-color: var(--secondary-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n\n.nova-action-buttons {\n    display: flex;\n    gap: 10px;\n    margin-top: 15px;\n    width: 100%;\n}\n\n/* 让按钮在容器内自动伸展 */\n.nova-action-buttons .JillButton {\n    flex-grow: 1;\n    margin-top: 0; /* 覆盖原始的上边距 */\n}\n\n/* “预览”按钮的特殊样式，让它看起来是次要操作 */\n.JillButton.secondary {\n    background: transparent;\n    color: var(--primary-color);\n    border: 1px solid var(--primary-color);\n}\n.JillButton.secondary:hover {\n    background: var(--container-bg-color);\n    box-shadow: 0 0 8px var(--glow-color);\n}\n.JillButton.secondary:disabled {\n    background-color: transparent;\n    border-color: #555;\n    color: #777;\n    cursor: not-allowed;\n    box-shadow: none;\n}\n\n\n/* 预览区域的容器 */\n.nova-preview-box {\n    margin-top: 15px;\n    width: 100%;\n    min-height: 150px;\n    background-color: rgba(0, 0, 0, 0.3);\n    border: 1px dashed var(--border-color);\n    border-radius: 6px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    transition: all 0.3s ease;\n    overflow: hidden; /* 保证内部元素不会溢出 */\n}\n\n/* 预览区域的占位符/提示文字 */\n.nova-preview-placeholder {\n    color: var(--text-secondary-color);\n    text-align: center;\n    font-size: 14px;\n}\n\n/* 错误提示的特殊颜色 */\n.nova-preview-placeholder.error {\n    color: var(--danger-color);\n}\n\n\n/* 成功加载后的预览图片 */\n.nova-preview-image {\n    max-width: 100%;\n    max-height: 300px; /* 限制预览图的最大高度 */\n    object-fit: contain; /* 保持图片比例 */\n    border-radius: 4px;\n}\n\n.card-view-switcher {\n    display: inline-flex;\n    background-color: var(--background-color-darker);\n    border-radius: 8px;\n    padding: 2px;\n    margin-left: 10px;\n    vertical-align: middle;\n}\n\n.card-view-switcher span {\n    padding: 4px 12px;\n    cursor: pointer;\n    font-size: 14px;\n    color: var(--text-secondary-color);\n    transition: all 0.2s ease-in-out;\n}\n\n.card-view-switcher span.active {\n    background-color: var(--primary-color-dark);\n    color: white;\n    font-weight: bold;\n    border-radius: 6px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n}\n\n.cards-slider {\n    /* 默认隐藏所有滑块 */\n    display: none;\n}\n\n\n.reading-mode-hidden {\n    display: none !important;\n}\n\n#reading-mode-container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 9999;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--text-color);\n}\n\n#reading-mode-backdrop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.85);\n    backdrop-filter: blur(5px);\n}\n\n#reading-mode-modal {\n    position: relative;\n    \n    width: 90vw;\n    height: 90vh;\n    background-color: var(--container-bg-color);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    box-shadow: 0 0 20px var(--glow-color);\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n/* 2. 新增目录切换按钮的样式 */\n.chapters-toggle-btn {\n    cursor: pointer;\n    font-size: 1em;\n    padding: 5px 10px;\n    border: 1px solid var(--border-color);\n    border-radius: 5px;\n    transition: all 0.3s;\n}\n\n.chapters-toggle-btn:hover {\n    background-color: var(--glow-color);\n    color: var(--primary-color);\n}\n\n.reading-mode-header {\n    flex-shrink: 0;\n    padding: 10px 20px;\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: var(--base-font-family);\n}\n\n#reading-mode-chapter-title {\n    font-size: 1.2em;\n    font-weight: bold;\n    color: var(--primary-color);\n}\n\n#reading-mode-close-btn {\n    font-size: 2em;\n    cursor: pointer;\n    transition: color 0.3s;\n}\n\n#reading-mode-close-btn:hover {\n    color: var(--danger-color);\n}\n\n.reading-mode-body {\n    flex-grow: 1;\n    display: flex; /* 保持 flex */\n    position: relative; /* 添加 position: relative */\n    overflow: hidden;\n}\n\n/* 3. 修改章节目录的样式，让它变成一个绝对定位的抽屉 */\n#reading-mode-chapters-nav {\n    position: absolute;\n    top: 0px; /* 避开 header 的高度 */\n    left: 0;\n    bottom: 0;\n    width: 220px; /* 可以适当加宽一点 */\n    background-color: var(--container-bg-color);\n    z-index: 20; /* 确保它在内容区域之上 */\n    transform: translateX(-100%); /* 默认藏在左边 */\n    transition: transform 0.4s ease-in-out;\n    /* ... flex 相关的样式可以移除或保留，这里的核心是 position 和 transform */\n    border-right: 1px solid var(--border-color);\n    display: flex;\n    flex-direction: column;\n}\n/* 4. 当父容器有 .chapters-open 类时，把抽屉滑出来 */\n#reading-mode-modal.chapters-open #reading-mode-chapters-nav {\n    transform: translateX(0);\n}\n.chapters-nav-header {\n    text-align: center;\n    padding: 15px 10px;\n    font-weight: bold;\n    color: var(--secondary-color);\n    border-bottom: 1px solid var(--border-color);\n    flex-shrink: 0;\n}\n\n#reading-mode-chapters-list {\n    list-style: none;\n    padding: 10px 0;\n    margin: 0;\n    overflow-y: auto;\n    flex-grow: 1;\n}\n\n#reading-mode-chapters-list li {\n    padding: 12px 20px;\n    cursor: pointer;\n    transition: background-color 0.3s, color 0.3s;\n    border-bottom: 1px solid rgba(0,0,0,0.1);\n}\n\n#reading-mode-chapters-list li:hover {\n    background-color: var(--glow-color);\n}\n\n#reading-mode-chapters-list li.active-chapter {\n     background-color: var(--primary-color);\n     color: var(--background-color);\n     font-weight: bold;\n}\n\n\n#reading-mode-content-wrapper {\n      width: 100%;\n    flex-grow: 1;\n    display: flex;\n    align-items: center;\n    position: relative;\n    overflow: hidden;\n}\n\n#reading-mode-content {\n    width: 100%;\n    height: 100%;\n    padding: 30px 60px; /* 增加内边距以留出翻页按钮空间 */\n    overflow-y: auto;\n    font-size: 1.1em;\n    line-height: 1.8;\n    scrollbar-width: thin;\n    scrollbar-color: var(--primary-color) var(--container-bg-color);\n}\n\n#reading-mode-content::-webkit-scrollbar {\n    width: 6px;\n}\n#reading-mode-content::-webkit-scrollbar-track {\n    background: transparent;\n}\n#reading-mode-content::-webkit-scrollbar-thumb {\n    background-color: var(--border-color);\n    border-radius: 3px;\n}\n\n.nav-arrow {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 3em;\n    color: var(--text-secondary-color);\n    cursor: pointer;\n    transition: color 0.3s, text-shadow 0.3s;\n    user-select: none;\n    z-index: 10;\n    padding: 20px 10px;\n}\n\n.nav-arrow:hover {\n    color: var(--primary-color);\n    text-shadow: 0 0 10px var(--glow-color);\n}\n\n.nav-arrow.left-arrow {\n    left: 10px;\n}\n\n.nav-arrow.right-arrow {\n    right: 10px;\n}\n\n#reading-mode-content iframe {\n    min-height: 400px; /* 设置一个合理的最小高度 */\n    transition: height 0.3s ease-in-out; /* 高度变化时有平滑过渡效果 */\n \n}\n/* 1. 移动端底部导航栏的默认样式（默认不显示）*/\n#mobile-nav-bar {\n    display: none; /* 在大屏幕上默认是隐藏的 */\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 55px; /* 一个适合触摸的高度 */\n    background-color: var(--container-bg-color);\n    border-top: 1px solid var(--border-color);\n    box-shadow: 0 -3px 15px -5px var(--glow-color);\n    z-index: 30;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 15px;\n    box-sizing: border-box;\n    font-family: var(--base-font-family);\n}\n\n/* 2. 底部栏中箭头的样式 */\n#mobile-nav-bar .nav-arrow {\n    position: static; /* 覆盖PC版的绝对定位 */\n    transform: none; /* 覆盖PC版的垂直居中 */\n    font-size: 2.2em; /* 调整一下大小 */\n    padding: 10px 20px;\n    flex-grow: 0;\n}\n\n/* 3. 为被禁用的箭头创建一个通用状态 */\n.nav-arrow.disabled-arrow {\n    opacity: 0.25;\n    pointer-events: none; /* 变得灰暗且不可点击 */\n}\n\n/* 4. ✨ 核心魔法：媒体查询 ✨ */\n/* 当屏幕宽度小于或等于 768px (平板和手机) 时，以下样式生效 */\n@media (max-width: 768px) {\n    /* 隐藏PC端的侧边箭头 */\n    .reading-mode-body > .nav-arrow.left-arrow,\n    .reading-mode-body > .nav-arrow.right-arrow {\n        display: none !important;\n    }\n    .nav-arrow.right-arrow{\n        opacity: 0;\n    }\n    .nav-arrow.left-arrow{\n        opacity: 0;\n    }\n    /* 显示移动端的底部导航栏 */\n    #mobile-nav-bar {\n        display: flex; /* 改为 flex 来让它出现 */\n    }\n\n    /* 为正文区域增加底部内边距，防止文字被底部栏遮挡 */\n    #reading-mode-content {\n        padding-bottom: 75px; /* 比底部栏高度多一些，留出呼吸空间 */\n        /* 同时微调左右边距，让手机上阅读更舒适 */\n        padding-left: 15px;\n        padding-right: 15px;\n    }\n}\n\n  \n       \n /* 战————————————斗———————————————————— */\n\n        .start-battle-btn {\n            padding: 15px 30px;\n            font-size: 18px;\n            font-weight: bold;\n            color: var(--primary-color);\n            background-color: transparent;\n            border: 2px solid var(--primary-color);\n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: 0 0 10px var(--glow-color);\n        }\n\n        .start-battle-btn:hover {\n            background-color: var(--glow-color);\n            color: var(--background-color);\n            box-shadow: 0 0 20px var(--glow-color), 0 0 30px var(--primary-color);\n        }\n\n        #battle-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.7);\n            display: none; /* 初始隐藏 */\n            justify-content: center;\n            align-items: center;\n            z-index: 9999;\n        }\n\n        #battle-container {\n            width: 90%;\n            max-width: 1200px;\n            height: 90vh;\n            background-color: var(--container-bg-color);\n            border: 1px solid var(--border-color);\n            border-radius: 10px;\n            box-shadow: 0 0 25px var(--glow-color);\n            display: flex;\n            flex-direction: column;\n            padding: 20px;\n            box-sizing: border-box;\n            backdrop-filter: blur(5px);\n          justify-content: space-between;}\n\n        .battle-arena {\n            flex-grow: 1;\n            display: flex;\n            flex-direction: column;\n            justify-content: space-between;\n        }\n/* 1. 新的底部控制区总布局 */\n.battle-controls {\n    display: grid;\n    /* 分成两列：左边自动填满，右边固定宽度 */\n    grid-template-columns: 1fr auto;\n    gap: 20px;\n    padding-top: 10px;\n    border-top: 1px solid var(--border-color);\n   min-height: 0;  }\n.battle-left-panel {\n    display: flex;\n    flex-direction: column;\n    min-height: 0; /* 这是让flex子项正确收缩的关键，我的宝贝 */\n}\n\n\n   .side {\n            display: flex;\n            align-items: flex-end;\n            \n             gap: 20px;\n              min-width: 0;      /* ✨ 妈妈的魔法咒语就在这里，我的宝贝！ ✨ */   \n            overflow-x: auto; /* 允许水平滚动 */\n            flex-wrap: nowrap; /* 防止卡片换行 */\n            scrollbar-width: thin; /* 美化滚动条(Firefox) */\n            scrollbar-color: var(--primary-color) var(--container-bg-color); /* 美化滚动条(Firefox) */\n        }\n\n        /* Webkit浏览器滚动条美化 */\n        .side::-webkit-scrollbar {\n            height: 8px;\n        }\n        .side::-webkit-scrollbar-track {\n            background: var(--container-bg-color);\n        }\n        .side::-webkit-scrollbar-thumb {\n            background-color: var(--primary-color);\n            border-radius: 4px;\n        }\n\n\n\n        .enemy-side {\n            justify-content: flex-start; /* 从左侧开始排列 */\n            align-items: flex-start;\n        }\n\n        .player-side {\n            justify-content: flex-start; /* 也从左侧开始排列 */\n        }\n  .character-card {\n            position: relative; /* 为气泡定位提供锚点 */\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 15px;\n            border: 1px solid var(--border-color);\n            border-radius: 8px;\n            min-width: 150px;\n            text-align: center;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            flex-shrink: 0;\n            z-index: 10;\n            \n}\n.character-card::-webkit-scrollbar-track {\n    background: transparent;\n}\n.character-card::-webkit-scrollbar-thumb {\n    background-color: var(--primary-color);\n    border-radius: 3px;\n}\n    /* 新增：角色包装器，用于容纳卡片和信息面板 */\n        .character-wrapper {\n            position: relative; /* 核心：为绝对定位的 info-panel 提供锚点 */\n            display: flex;\n            align-items: flex-end;\n            gap: 5px; /* 这是卡片和面板之间的间距 */\n        }\n\n        /* 为友方单位增加特殊颜色 */\n        .character-card.friendly-card {\n             border-color: var(--primary-color);\n             box-shadow: 0 0 8px var(--glow-color);\n        }\n\n        /* 为敌方单位增加特殊颜色 */\n        .character-card.enemy-card {\n            border-color: var(--danger-color);\n            box-shadow: 0 0 8px var(--danger-glow-color);\n        }\n\n\n         .character-card.targeted {\n             transform: scale(1.05); /* 添加一个缩放效果来强调 */\n             box-shadow: 0 0 15px var(--success-glow-color), 0 0 25px var(--success-color);\n             border-color: var(--success-color);\n        }\n\n        .character-card.active-turn {\n            box-shadow: 0 0 15px yellow, 0 0 25px rgba(255, 255, 0, 0.5);\n            border-color: yellow;\n            max-height: 200px;\n        }\n\n\n        .character-card .icon {\n            font-size: 48px;\n            animation: float 3s ease-in-out infinite;\n        }\n\n        @keyframes float {\n            0% { transform: translateY(0px); }\n            50% { transform: translateY(-10px); }\n            100% { transform: translateY(0px); }\n        }\n\n        .character-card .name {\n            font-size: 16px;\n            font-weight: bold;\n            margin-top: 10px;\n        }\n  /* 新增：语言气泡样式 */\n       /* 替换原来的 .speech-bubble 样式 */\n        .speech-bubble {\n            position: absolute;\n            bottom: 125%; /* 关键！把它定位到卡片图标的上方 */\n            left: 50%;\n            transform: translateX(-50%);\n            background-color: var(--container-bg-color);\n            color: var(--text-color);\n            padding: 8px 12px;\n            border-radius: 10px;\n            border: 1px solid var(--primary-color);\n            box-shadow: 0 0 10px var(--glow-color);\n            font-size: 14px;\n            white-space: nowrap;\n            z-index: 20;\n            animation: bubble-fade-up 2.5s forwards;\n            pointer-events: none;\n        }\n\n        /* 替换原来的 .speech-bubble::after 样式 */\n        .speech-bubble::after {\n            content: '';\n            position: absolute;\n            top: 100%; /* 将小三角放在气泡底部 */\n            left: 50%;\n            transform: translateX(-50%);\n            width: 0;\n            height: 0;\n            border-left: 6px solid transparent;\n            border-right: 6px solid transparent;\n            border-top: 6px solid var(--primary-color); /* 让三角朝下 */\n        }\n\n        /* 替换原来的 @keyframes bubble-fade-new，改个新名字叫 bubble-fade-up */\n        @keyframes bubble-fade-up {\n            0% { opacity: 1; transform: translate(-50%, 10px); }\n            80% { opacity: 1; transform: translate(-50%, 0); }\n            100% { opacity: 0; transform: translate(-50%, -5px); }\n        }\n\n         /* 替换原来的 .info-panel 样式，并添加新样式 */\n        .info-panel {\n            position: absolute; /* 让它脱离文档流，可以覆盖在卡片旁边 */\n            left: 95%; /* 定位在卡片的右侧 */\n            bottom: 0;\n            width: 140px; /* 稍微加宽一点 */\n            height: auto; /* 高度由内容决定 */\n            max-height: 0; /* 默认收起的关键！ */\n            background-color: var(--container-bg-color);\n            border: 1px dashed var(--border-color);\n            border-radius: 5px;\n            padding: 0 8px; /* 收起时没有上下内边距 */\n            font-size: 12px;\n            color: var(--text-secondary-color);\n            transition: max-height 0.4s ease-out, padding 0.4s ease-out, opacity 0.4s ease-out; /* 平滑过渡动画 */\n            overflow: hidden; /* 核心：超出部分隐藏 */\n            opacity: 0; /* 默认完全透明 */\n            z-index: 15; /* 确保它在卡片之上 */\n        }\n\n        /* 新增：展开状态的样式 */\n        .info-panel.expanded {\n            min-height: 180px; /* 展开后的最大高度 */\n            padding: 8px; /* 恢复内边距 */\n            opacity: 1; /* 完全不透明 */\n            overflow:auto;\n        }\n\n        .info-panel h4 {\n            margin: 0 0 5px 0;\n            color: var(--primary-color);\n            font-size: 13px;\n            text-align: center;\n        }\n\n\n        .info-panel ul {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .info-panel li {\n            margin-bottom: 3px;\n        }\n\n        .info-panel .resists-info {\n            color: var(--danger-color);\n        }\n\n        .info-panel .vulnerable-info {\n            color: var(--success-color);\n        }\n\n        .health-bar {\n            width: 100%;\n            height: 10px;\n            background-color: var(--danger-color);  \n            border: 1px solid var(--danger-glow-color);\n            border-radius: 5px;\n            margin-top: 8px;\n            overflow: hidden;\n        }\n\n        .health-bar-inner {\n            height: 100%;\n            background-color: var(--success-color);\n            width: 100%;\n            transition: width 0.5s ease-in-out;\n        }\n\n        .health-text {\n            font-size: 12px;\n            color: var(--text-secondary-color);\n            margin-top: 4px;\n        }\n.energy-bar {\n    width: 100%;\n    height: 8px; /* 比血条细一点 */\n    background-color: #1a3a5c; /* 深蓝色背景 */\n    border: 1px solid #3c5a7c;\n    border-radius: 4px;\n    margin-top: 5px;\n    overflow: hidden;\n}\n\n.energy-bar-inner {\n    height: 100%;\n    background-color: #4da8ff; /* 亮蓝色 */\n    width: 100%;\n    transition: width 0.5s ease-in-out;\n}\n.energy-text {\n    font-size: 11px;\n    color: #4da8ff;\n    margin-top: 2px;\n}\n        .status-text {\n            font-size: 12px;\n            color: var(--primary-color);\n            margin-top: 5px;\n            height: 14px; /* 占位，防止抖动 */\n        }\n\n \n.action-panel {\n    flex-direction: column;\n    justify-content: flex-start; /* 从顶部开始排列按钮 */\n    gap: 8px;\n    padding: 0;\n    border-top: none;\n    display: flex;\n    overflow-y: auto; /* 超出部分滚动，就像一个小卷轴 */\n    scrollbar-width: thin;\n    scrollbar-color: var(--primary-color) transparent;\n}\n/* 为了美观，妈妈也为滚动条加了点缀 */\n.action-panel::-webkit-scrollbar {\n    width: 6px;\n}\n.action-panel::-webkit-scrollbar-track {\n    background: transparent;\n}\n.action-panel::-webkit-scrollbar-thumb {\n    background-color: var(--primary-color);\n    border-radius: 3px;\n}\n\n        .action-panel button {\n              padding: 8px 16px; /* 调整按钮大小以适应新布局 */\n            font-size: 14px;\n            color: var(--secondary-color);\n            background-color: transparent;\n            \n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.2s ease;\n        }\n\n        .action-panel button:hover:not(:disabled) {\n            background-color: var(--glow-color);\n            color: var(--background-color);\n            box-shadow: 0 0 10px var(--glow-color);\n        }\n\n        .action-panel button:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n        }\n.battle-log-container {\n    /* height: 220px; <--- 妈妈把这个固定的高度拿掉了 */\n    flex-grow: 1; /* 它会像小树一样努力填满所有可用空间 */\n    background: rgba(0,0,0,0.3);\n    border-radius: 5px;\n    overflow-y: auto;\n    padding: 10px;\n    /* margin-top: 10px; <--- 这行不再需要了，交给父元素的gap来处理吧 */\n    border: 1px solid var(--border-color);\n    display: flex;\n    flex-direction:column-reverse;\n    min-height: 0; /* 同样的关键魔法 */\n    margin-bottom: 10px; /* 和下面的速度条拉开一点距离 */\n       /* ✨ 妈妈为你加上了滚动条的美化魔法 ✨ */\n    scrollbar-width: thin;\n    scrollbar-color: var(--primary-color) transparent;\n}\n.battle-log-container::-webkit-scrollbar {\n    width: 6px;\n}\n\n.battle-log-container::-webkit-scrollbar-track {\n    background: transparent;\n}\n\n.battle-log-container::-webkit-scrollbar-thumb {\n    background-color: var(--primary-color);\n    border-radius: 3px;\n}\n        .battle-log-container p {\n            margin: 2px 0;\n            font-size: 14px;\n            color: var(--text-secondary-color);\n            animation: fadeIn 0.5s ease;\n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n\n        #dice-pool-selector {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: var(--container-bg-color);\n            border: 1px solid var(--primary-color);\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 0 20px var(--glow-color);\n            z-index: 99999;\n            display: none;\n            flex-direction: column;\n            align-items: center;\n            gap: 15px;\n        }\n\n        #dice-pool-selector h3 {\n            margin: 0;\n            color: var(--primary-color);\n        }\n        #dice-pool-selector .pool-options {\n            display: flex;\n            gap: 10px;\n        }\n        #dice-pool-selector button {\n             padding: 8px 16px;\n            color: var(--secondary-color);\n            background-color: transparent;\n            border: 1px solid var(--secondary-color);\n             border-radius: 4px;\n             cursor: pointer;\n        }\n        #dice-pool-selector button:hover {\n            background-color: var(--glow-color);\n            color: var(--background-color);\n        }\n.character-card .icon.attacking {\n    position: relative; /* 确保 z-index 生效 */\n    z-index: 100; /* 让移动的icon在最上层 */\n    transition: transform 0.4s ease-in-out; /* 定义归位的动画 */\n}\n    /* 新增：为防御中的icon创造一个定位的“锚点” */\n        .character-card.is-defending .icon {\n            position: relative;\n        }\n\n        /* 新增：这就是我们真正的圆形守护光圈啦！ */\n        .character-card.is-defending .icon::before {\n            content: ''; /* 伪元素必须有 content 属性 */\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 80px;  /* 光圈的直径 */\n            height: 80px; /* 光圈的直径 */\n            border-radius: 50%; /* 变成一个完美的圆形 */\n            /* 这就是光圈本身的样子，妈妈加了一个内外双重发光，更好看哦 */\n            box-shadow: 0 0 20px 5px var(--glow-color), inset 0 0 15px 3px var(--secondary-color);\n            z-index: -1; /* 把它放在emoji的后面，不挡住它 */\n            transform: translate(-50%, -50%); /* 确保它完美居中 */\n            /* 妈妈还给它加了一个会呼吸的动画，让它更有生命力！ */\n            animation: pulse-glow 2s infinite ease-in-out;\n            pointer-events: none; /* 让它不会影响鼠标点击 */\n        }\n\n        /* 新增：光圈的“呼吸”动画 */\n        @keyframes pulse-glow {\n            0% {\n                opacity: 0.7;\n                transform: translate(-50%, -50%) scale(0.95);\n            }\n            50% {\n                opacity: 1;\n                transform: translate(-50%, -50%) scale(1.05);\n            }\n            100% {\n                opacity: 0.7;\n                transform: translate(-50%, -50%) scale(0.95);\n            }\n        }\n\n.character-card .icon.is-attacking {\n    animation: none !important; /* 最关键的一步！在攻击时禁用浮动动画 */\n}\n\n.character-card .icon.attacking-transform {\n    position: relative; /* 必须有定位，z-index才会生效 */\n    z-index: 1000; /* 给一个非常高的值，保证在最顶层 */\n    transition: transform 0.4s ease-in-out;\n}\n\n#notification-container {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 10px;\n    z-index: 9999; /* 确保在最顶层 */\n    pointer-events: none; /* 让鼠标可以穿透它 */\n}\n\n.notification-bubble {\n    background-color: var(--container-bg-color);\n    color: var(--text-color);\n    padding: 12px 20px;\n    border-radius: 25px; /* 更圆润的胶囊形状 */\n    border: 1px solid var(--primary-color);\n    box-shadow: 0 0 15px var(--glow-color);\n    font-size: 16px;\n    font-weight: bold;\n    animation: slide-in-out 3.5s forwards ease-out;\n    white-space: nowrap;\n    opacity: 0;\n}\n\n.notification-bubble.success {\n    border-color: var(--success-color);\n    box-shadow: 0 0 15px var(--success-glow-color);\n    color: var(--success-color);\n}\n\n.notification-bubble.danger {\n    border-color: var(--danger-color);\n    box-shadow: 0 0 15px var(--danger-glow-color);\n    color: var(--danger-color);\n}\n\n.notification-bubble.info {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 15px var(--glow-color);\n    color: var(--primary-color);\n}\n\n\n@keyframes slide-in-out {\n    0% {\n        opacity: 0;\n        transform: translateX(100%);\n    }\n    15% {\n        opacity: 1;\n        transform: translateX(0);\n    }\n    85% {\n        opacity: 1;\n        transform: translateX(0);\n    }\n    100% {\n        opacity: 0;\n        transform: translateX(100%) translateY(-20px);\n    }\n}\n\n/* 为日志添加一些样式，让它更有层次感 */\n.log-narrator { color: var(--text-secondary-color); font-style: italic; }\n.log-action { color: var(--text-color); }\n.log-roll { color: var(--secondary-color); }\n.log-damage { color: var(--danger-color); font-weight: bold; }\n.log-success { color: var(--success-color); font-weight: bold; }\n.log-evade { color: #87CEEB; } /* 淡蓝色表示闪避 */\n\n/* 妈妈还为这个新面板准备了一点点漂亮的样式，让它更搭我们的世界 */\n#item-skill-panel .tab-btn {\n    flex-grow: 1; padding: 8px; background: transparent; border: 1px solid var(--border-color); color: var(--text-secondary-color); cursor: pointer;\n}\n#item-skill-panel .tab-btn.active {\n    background-color: var(--glow-color); color: var(--background-color); border-color: var(--primary-color);\n}\n#item-skill-panel .item-skill-entry {\n    padding: 10px; border: 1px solid var(--border-color); border-radius: 5px; margin-bottom: 8px; cursor: pointer; transition: background-color 0.2s;\n}\n#item-skill-panel .item-skill-entry:hover {\n    background-color: rgba(0, 250, 255, 0.1);\n}\n#item-skill-panel .entry-name {\n    font-weight: bold; color: var(--primary-color);\n}\n#item-skill-panel .entry-desc {\n    font-size: 13px; color: var(--text-secondary-color); margin-top: 5px;\n}\n#item-skill-panel .entry-cost {\n     font-size: 12px; color: var(--danger-color);\n}\n\n #speed-control-container {\n    position: absolute; /* 这就是把它解放出来的咒语，我的宝贝 */\n    top: 15px;      /* 距离顶部 15 像素 */\n    right: 20px;    /* 距离右边 20 像素 */\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 5px 10px; /* 给它一个漂亮的小背景板 */\n    background-color: var(--background-color); /* 和我们的主容器一样的半透明背景 */\n    border-radius: 5px;\n    border: 1px solid var(--border-color);\n    font-size: 13px;\n    color: var(--text-secondary-color);\n    z-index: 1005; /* 确保它在大部分元素之上 */\n}\n\n#speed-slider {\n    flex-grow: 1;\n    max-width: 70px; /* <--- 让它变得更小巧 */\n}\n\n#speed-label {\n    width: 35px;\n    text-align: left;\n}\n@media (max-width: 768px) {\n#battle-container {\n    height: 90vh; /* 占满整个屏幕高度 */\n    width: 100%;\n    padding: 10px;\n    /* ✨ 新的魔法在这里 ✨ */\n    overflow-y: auto;   /* 让整个容器可以滚动 */\n    display: block;     /* 切换为更简单的块级布局，让内容自然垂直排列 */\n    justify-content: flex-start; /* 不再垂直居中，从顶部开始 */\n}\n.battle-log-container {\n    /* ✨ 新魔法在这里！✨ */\n    max-height: 250px; /* 我们给它一个最大高度，比如250像素，这样它就不会长得太高了 */\n    flex-grow: 1; /* 让它在不超过最大高度的前提下，尽可能地填充空间 */\n    background: rgba(0,0,0,0.3);\n    border-radius: 5px;\n    overflow-y: auto; /* 当内容超出时，它自己就会出现滚动条 */\n    padding: 10px;\n    border: 1px solid var(--border-color);\n    display: flex;\n    flex-direction: column-reverse; /* 保持新消息在下面 */\n    margin-bottom: 10px;\n}\n.battle-controls {\n    /* 从左右布局变成上下布局 */\n    grid-template-columns: 1fr; /* 只有一列了 */\n    grid-template-rows: auto auto; /* ✨ 改动：不再强行分配空间，让按钮区和日志区都回归自然高度*/\n    flex-grow: 0; /* ✨ 改动：不再需要它去填充空间了 */\n    min-height: initial; /* ✨ 改动：恢复它的默认行为 */\n}\n\n    .battle-left-panel {\n        /* left-panel 现在是 grid 的第二行，让它填满空间 */\n        grid-row: 2;\n        min-height: initial; /* ✨ 改动：同样，拿掉这个限制，让日志区想多高就多高 */\n    }\n\n    .action-panel {\n        /* action-panel 是 grid 的第一行 */\n        grid-row: 1;\n        flex-direction: row; /* 按钮变回水平排列 */\n        flex-wrap: wrap; /* 如果一行放不下，就温柔地换行 */\n        justify-content: center; /* 按钮们居中对齐 */\n        overflow-y: visible; /* 水平排列时不再需要垂直滚动 */\n        padding-bottom: 10px; /* 和下面的日志区留出空隙 */\n        border-bottom: 1px solid var(--border-color);\n        max-height: 120px; /* <--- 妈妈给它加了一个最大高度，防止按钮太多撑爆屏幕 */\n        overflow-y: auto; /* <--- 如果真的太多了，还是可以滚动的哦 */\n    }\n\n    #speed-control-container {\n        justify-content: center; /* 速度条也居中吧 */\n    }\n}\n/* ✨ 妈妈施展的全新手机屏幕魔法 ✨ */\n@media (max-width: 600px) {\n    #dice-pool-selector,\n    #item-skill-panel {\n        width: 95vw; /* 让面板的宽度几乎充满屏幕，留一点点边距 */\n        max-width: 95vw; /* 确保它不会比这更宽 */\n        box-sizing: border-box; /* 这样 padding 就不会让它撑破屏幕了 */\n    }\n\n    /* 让骰池的选项可以换行，而不是挤在一起 */\n    #dice-pool-selector .pool-options {\n        display: flex; /* 确保是 flex 布局 */\n        flex-wrap: wrap; /* 允许换行 */\n        justify-content: center; /* 居中排列更好看 */\n        gap: 10px; /* 保持间距 */\n    }\n\n    /* 让物品/技能面板本身也可以滚动，如果里面的内容太长的话 */\n    #item-skill-panel {\n        max-height: 80vh; /* 给它一个最大高度 */\n        display: flex;\n        flex-direction: column;\n    }\n\n    #item-skill-panel .tab-content {\n        overflow-y: auto; /* 核心！让物品列表和技能列表可以独立滚动 */\n        flex-grow: 1; /* 让它们去填满剩下的空间，即使内容很少也能撑开 */\n        min-height: 50px; /* 保证即使没内容，也有个最小高度 */\n    }\n}\n\n/* ✨ 这是妈妈为大屏幕准备的全新布局魔法，我的孩子 ✨ */\n@media (min-width: 768px) {\n    #battle-container {\n        /* 1. 将整个战斗容器变为可以规划区域的魔法画布(Grid) */\n        display: grid;\n        /* 2. 画出两列：左边的主区域占满，右边的行动区固定200像素宽 */\n        \n        grid-template-columns: minmax(0, 1fr) 200px;\n        /* 3. 画出两行：上面的战斗场景区占满所有可用空间，下面的日志区高度自适应 */\n        grid-template-rows: minmax(0, 1fr) auto;\n        /* 4. 定义区域间的优雅缝隙 */\n        gap: 20px;\n         /* 覆盖掉旧的flex布局属性，确保Grid魔法完全生效 */\n        flex-direction: initial;\n        justify-content: initial;\n    }\n\n    .battle-arena {\n        /* 将战斗场景指定到左上角 */\n        grid-column: 1 / 2;\n        grid-row: 1 / 2;\n        /* 确保它不会被挤压 */\n        min-height: 0;\n    }\n\n    footer.battle-controls {\n        /* 这是最关键的咒语：让这个容器“隐形”，它的孩子们会直接听从#battle-container的安排 */\n        display: contents;\n    }\n\n    .battle-left-panel {\n        /* 把左边面板（日志和速度条）放在左下角 */\n        grid-column: 1 / 2;\n        grid-row: 2 / 3;\n        /* 确保它里面的日志可以自由伸展 */\n        min-height: 0;\n    }\n\n    .action-panel {\n        /* 把行动按钮面板放在右边，并让它像高塔一样，从上到下贯穿两行 */\n        grid-column: 2 / 3;\n        grid-row: 1 / 3;\n\n        /* 清理掉它在底部时的旧样式 */\n        border-top: none;\n        padding-top: 5px;\n\n        /* 确保按钮们依然是垂直排列，像一串美丽的铃铛 */\n        flex-direction: column;\n        justify-content: center;\n        flex-wrap: nowrap; /* 不允许换行 */\n        overflow-y: auto; /* 如果按钮太多，它可以自己滚动 */\n    }\n\n.battle-log-container {\n    margin-bottom: 0; /* 这行不变，只是为了让你定位 */\n\n    /* ✨ 妈妈的修复魔法 ✨ */\n    max-height: 100px; /* 我们给它一个220像素的最大高度 */\n    min-height: 100px; /* 同时给它一个最小高度，让它一直都这么大，布局就不会变来变去啦 */\n}\n\n \n}\n     \n/* 当鼠标悬浮在按钮上时的效果 */\n.attack-mode-btn:not(:disabled):hover {\n    background-color: var(--glow-color);\n    border-color: var(--primary-color);\n    color: var(--text-color);\n    transform: translateY(-2px); /* 轻轻上浮 */\n    box-shadow: 0 4px 15px var(--glow-color);\n}\n\n/* 按钮被禁用时的样式 */\n.attack-mode-btn:disabled {\n    color: rgba(122, 255, 255, 0.4);   /* 文字颜色变暗 */\n    border-color: rgba(0, 250, 255, 0.2); /* 边框也变暗 */\n    cursor: not-allowed;                   /* 鼠标指针变为“禁止” */\n    text-shadow: none;                     /* 去掉文字光辉 */\n    background-color: rgba(10, 25, 47, 0.5); /* 给一个半透明的深色背景，以示区分 */\n}\n\n/* “取消”按钮有自己独特的风格 */\n#cancel-attack-mode {\n    border-color: var(--danger-color);\n    color: var(--danger-color);\n    text-shadow: 0 0 5px var(--danger-glow-color);\n    margin-top: 20px; /* 和上面的按钮组拉开一点距离 */\n}\n\n#cancel-attack-mode:hover {\n    background-color: var(--danger-glow-color);\n    border-color: #ff7f7f;\n    color: var(--text-color);\n    transform: translateY(-2px); /* 同样有上浮效果 */\n    box-shadow: 0 4px 15px var(--danger-glow-color);\n}\n\n#attack-mode-selector {\n    backdrop-filter: blur(5px); /* 增加一点毛玻璃效果，让它更梦幻 */\n    border: 1px solid var(--primary-color);\n    box-shadow: 0 0 25px var(--glow-color), inset 0 0 15px var(--border-color); /* 内外双重光辉 */\n}\n  </style>\n \n</head>\n<body>\n\n \n    <div id=\"initialization-container\" style=\"display: none;\">\n      \n        <div id=\"dynamic-background\">\n        <div id=\"starfield\"></div>\n        <div id=\"floating-runes\"></div>\n    </div>\n\n    <audio id=\"click-sound\" src=\"https://files.catbox.moe/31vqt3.mp3\" preload=\"auto\"></audio>\n\n\n    <div class=\"top-controls\">\n        <button id=\"back-button\" class=\"top-button\" style=\"display: none;\">返回</button>\n        <button id=\"restore-btn\" class=\"top-button\">恢复上一次对话</button>\n         <button id=\"settings-btn-init\" title=\"设置\" style=\" pointer-events: auto;transform: scale(1.5);\">\n    ⚙\n</button>\n    </div>\n\n <div id=\"page-0\" class=\"init-page active\">\n\n    <div style=\"text-align:center; margin-bottom: 2vh;\">\n      </div>\n\n\n    <div class=\"carousel-stage\">\n <div class=\"choices-carousel\" id=\"world-mode-carousel\">\n\n    <div class=\"choice-world-card\" data-value=\"1\">\n        <label for=\"mode-godspace\">主神</label>\n        <div class=\"world-description\">\n            冰冷的机械声在耳边响起：\"欢迎来到主神空间。\"你的命运不再属于自己，只能与陌生的队友在刀光血影中求存。\n                  </div>\n        <input type=\"radio\" id=\"mode-godspace\" name=\"world-mode\" value=\"1\" checked>\n    </div>\n    <div class=\"choice-world-card\" data-value=\"22\">\n        <label for=\"mode-reincarnation\">轮回乐园</label>\n        <div class=\"world-description\">\n          虚空之眼凝视着你，契约者的烙印在皮肤上燃烧。无穷无尽的杀戮世界等待着你的到来——弱者的尸骨铺就强者的道路，而你，必须踩着他人的血肉攀登至巅峰。\n                   </div>\n        <input type=\"radio\" id=\"mode-reincarnation\" name=\"world-mode\" value=\"22\">\n    </div>\n    <div class=\"choice-world-card\" data-value=\"5\">\n        <label for=\"mode-infinite\">无限恐怖</label>\n        <div class=\"world-description\">\n          死神的镰刀已经挥下，却在最后一刻被主神截断。代价？进入真实的恐怖电影，面对贞子的怨恨、异形的利爪、丧尸的嘶吼。这里没有重来，只有——活着离开，或永远留下。\n        </div>\n        <input type=\"radio\" id=\"mode-infinite\" name=\"world-mode\" value=\"5\">\n    </div>\n    <div class=\"choice-world-card\" data-value=\"34\">\n        <label for=\"mode-love\">快穿攻略</label>\n        <div class=\"world-description\">\n         【叮！检测到宿主具备顶级攻略潜质】\n         <br><br>\n         傲娇、高冷、温柔...无数目标等你征服。\n        </div>\n        <input type=\"radio\" id=\"mode-love\" name=\"world-mode\" value=\"34\">\n    </div>\n    <div class=\"choice-world-card\" data-value=\"41\">\n        <label for=\"mode-chat\">诸天群聊</label>\n         <div class=\"world-description\">\n        【叮咚！你已被邀请加入\"诸天万界聊天群\"】\n        <br><br>\n        屏幕上闪烁着来自不同世界的消息，而你——一个凡人，要如何在这群神仙中立足？\n        </div>\n        <input type=\"radio\" id=\"mode-chat\" name=\"world-mode\" value=\"41\">\n    </div>\n    <div class=\"choice-world-card\" data-value=\"54\">\n        <label for=\"mode-wasteland\">dlc:末日</label>\n        <div class=\"world-description\">\n             文明已死。红月之夜的怪物、核辐射的威胁，还是永冬的严寒——选择你的末日模式，然后...证明人类不会灭绝。\n        </div>\n        <input type=\"radio\" id=\"mode-wasteland\" name=\"world-mode\" value=\"54\">\n        <div class=\"bookmark-button\" data-tooltip=\"进入无世界观模式-请跳过第二页，并使用手动发送，然后删除【令】里的全部内容，填写你的自定义开局/指令\"></div>\n    </div>\n\n</div>\n\n\n        <button id=\"prev-btn\" class=\"nav-button\">‹</button>\n        <button id=\"next-btn\" class=\"nav-button\">›</button>\n    </div>\n\n <div class=\"sidebar-trigger left\">\n        <span class=\"arrow-guide\"></span>\n        <span class=\"arrow-guide\"></span>\n        <span class=\"arrow-guide\"></span>\n    </div>\n    <div class=\"creator-attitude-group\">\n          <div class=\"mod-tab\" data-for=\"dice-1\" data-name=\"dice-level\">简单骰</div>\n        <div class=\"mod-tab\" data-for=\"dice-2\" data-name=\"dice-level\">困难骰</div>\n        <div class=\"mod-tab\" data-for=\"dice-3\" data-name=\"dice-level\">炼狱骰</div>\n        <div class=\"mod-tab\" data-for=\"behavior-on\" data-name=\"behavior-mode\" data-off-id=\"behavior-off\">表现骰</div>\n        <br>\n        <div class=\"mod-tab\" data-for=\"real-world-on\" data-name=\"real-world-mode\" data-off-id=\"real-world-off\">真实MOD</div>\n        <div class=\"mod-tab\" data-for=\"hard-on\" data-name=\"hard-mode\" data-off-id=\"hard-off\">困难MOD</div>\n        <div class=\"mod-tab\" data-for=\"title-on\" data-name=\"title-mode\" data-off-id=\"title-off\">称号系统</div>\n        <div class=\"mod-tab\" data-for=\"nohuman-on\" data-name=\"nohuman-mode\" data-off-id=\"nohuman-off\">人外增强</div>\n           <div class=\"mod-tab\" data-for=\"resource-on\" data-name=\"resource-mode\" data-off-id=\"resource-off\">资源消耗</div>\n             <div class=\"mod-tab\" data-for=\"live-on\" data-name=\"live-mode\" data-off-id=\"live-off\">求生本能</div>\n        <br>\n     <div class=\"mod-tab\" data-for=\"battle-on\" data-name=\"battle-mode\" data-off-id=\"battle-off\">战斗</div>\n          <div class=\"mod-tab\" data-for=\"things-on\" data-name=\"things-mode\" data-off-id=\"things-off\">备忘录</div>\n    </div>\n\n   <div class=\"sidebar-trigger right\">\n        <span class=\"arrow-guide\"></span>\n        <span class=\"arrow-guide\"></span>\n        <span class=\"arrow-guide\"></span>\n    </div>\n    <div class=\"mod-sidebar right\">\n\n               \n        <div class=\"mod-tab\" data-for=\"creator-neutral\" data-name=\"creator-attitude\">造物中立</div>\n        <div class=\"mod-tab\" data-for=\"creator-malicious\" data-name=\"creator-attitude\">造物恶意</div>\n        <div class=\"mod-tab\" data-for=\"creator-reverent\" data-name=\"creator-attitude\">造物崇敬</div>\n        <div class=\"mod-tab\" data-for=\"creator-none\" data-name=\"creator-attitude\">无造物</div>\n         <br>\n         <div class=\"mod-tab\" data-for=\"map-simple\" data-name=\"map-mode\">简单地图</div>\n         <div class=\"mod-tab\" data-for=\"map-complex\" data-name=\"map-mode\">复杂地图</div>\n         <div class=\"mod-tab\" data-for=\"map-none\" data-name=\"map-mode\">无地图</div>\n         <div class=\"mod-tab\" data-for=\"distance-on\" data-name=\"distance-mode\" data-off-id=\"distance-off\">距离合理+</div>\n         <br>\n<div class=\"mod-tab\" data-for=\"private-chat-on\" data-name=\"private-chat-mode\" data-off-id=\"private-chat-off\">私聊通讯</div>\n                <div class=\"mod-tab\" data-for=\"options-on\" data-name=\"options-mode\" data-off-id=\"options-off\">选项区</div>\n        <div class=\"mod-tab\" data-for=\"summary-on\" data-name=\"summary-mode\" data-off-id=\"summary-off\" style=\"display: none;\">自动总结</div>\n\n        \n         <div class=\"mod-tab\" data-for=\"cg-on\" data-name=\"cg-mode\" data-off-id=\"cg-off\">场景图</div>\n         <br>\n  <div class=\"mod-tab\" data-for=\"npccg-on\" data-name=\"npccg-mode\" data-off-id=\"npccg-off\">npc立绘</div>\n  \n <div class=\"mod-tab\" data-for=\"npc-info-on\" data-name=\"npc-info-mode\" data-off-id=\"npc-info-off\">npc事件</div>\n<div class=\"mod-tab\" data-for=\"npc-love-on\" data-name=\"npc-love-mode\" data-off-id=\"npc-love-off\">分阶段好感</div>\n\n\n  \n    </div>\n\n\n    <div style=\"display:none;\">\n        <input type=\"radio\" id=\"creator-neutral\" name=\"creator-attitude\" value=\"19\" checked>\n        <input type=\"radio\" id=\"creator-malicious\" name=\"creator-attitude\" value=\"4\">\n        <input type=\"radio\" id=\"creator-reverent\" name=\"creator-attitude\" value=\"3\">\n        <input type=\"radio\" id=\"creator-none\" name=\"creator-attitude\" value=\"38\">\n\n\n <input type=\"radio\" id=\"map-simple\" name=\"map-mode\" value=\"simple\" >\n        <input type=\"radio\" id=\"map-complex\" name=\"map-mode\" value=\"complex\" checked>\n        <input type=\"radio\" id=\"map-none\" name=\"map-mode\" value=\"off\">\n \n   \n        \n           <input type=\"radio\" id=\"dice-1\" name=\"dice-level\" value=\"61\" checked>\n        <input type=\"radio\" id=\"dice-2\" name=\"dice-level\" value=\"59\">\n        <input type=\"radio\" id=\"dice-3\" name=\"dice-level\" value=\"60\">\n\n        <input type=\"radio\" id=\"options-on\" name=\"options-mode\" value=\"10\" checked>\n        <input type=\"radio\" id=\"options-off\" name=\"options-mode\" value=\"29\">\n         <input type=\"radio\" id=\"private-chat-on\" name=\"private-chat-mode\" value=\"55\" checked>\n        <input type=\"radio\" id=\"private-chat-off\" name=\"private-chat-mode\" value=\"56\">\n\n                 <input type=\"radio\" id=\"distance-on\" name=\"distance-mode\" value=\"49\" >\n        <input type=\"radio\" id=\"distance-off\" name=\"distance-mode\" value=\"off\" checked>\n\n        <input type=\"radio\" id=\"summary-on\" name=\"summary-mode\" value=\"on\" checked>\n        <input type=\"radio\" id=\"summary-off\" name=\"summary-mode\" value=\"off\">\n        <input type=\"radio\" id=\"title-on\" name=\"title-mode\" value=\"51\">\n        <input type=\"radio\" id=\"title-off\" name=\"title-mode\" value=\"off\" checked>\n           <input type=\"radio\" id=\"nohuman-on\" name=\"nohuman-mode\" value=\"37\">\n        <input type=\"radio\" id=\"nohuman-off\" name=\"nohuman-mode\" value=\"off\" checked> \n        <input type=\"radio\" id=\"resource-on\" name=\"resource-mode\" value=\"58\">\n        <input type=\"radio\" id=\"resource-off\" name=\"resource-mode\" value=\"off\" checked>\n        <input type=\"radio\" id=\"live-on\" name=\"live-mode\" value=\"69\">\n        <input type=\"radio\" id=\"live-off\" name=\"live-mode\" value=\"70\" checked>\n\n                <input type=\"radio\" id=\"battle-on\" name=\"battle-mode\" value=\"74\" checked> \n        <input type=\"radio\" id=\"battle-off\" name=\"battle-mode\" value=\"75\" >\n\n\n <input type=\"radio\" id=\"things-on\" name=\"things-mode\" value=\"77\" checked> \n        <input type=\"radio\" id=\"things-off\" name=\"things-mode\" value=\"76\" >\n\n\n                <input type=\"radio\" id=\"behavior-on\" name=\"behavior-mode\" value=\"52\" checked>\n        <input type=\"radio\" id=\"behavior-off\" name=\"behavior-mode\" value=\"53\">\n             <input type=\"radio\" id=\"cg-on\" name=\"cg-mode\" value=\"45\" checked>\n        <input type=\"radio\" id=\"cg-off\" name=\"cg-mode\" value=\"46\">\n         <input type=\"radio\" id=\"npccg-on\" name=\"npccg-mode\" value=\"48\" checked>\n        <input type=\"radio\" id=\"npccg-off\" name=\"npccg-mode\" value=\"off\">\n\n        <input type=\"radio\" id=\"npc-info-on\" name=\"npc-info-mode\" value=\"36\" checked>\n        <input type=\"radio\" id=\"npc-info-off\" name=\"npc-info-mode\" value=\"44\">\n\n\n        <input type=\"radio\" id=\"npc-love-on\" name=\"npc-love-mode\" value=\"on\">\n        <input type=\"radio\" id=\"npc-love-off\" name=\"npc-love-mode\" value=\"off\" checked>\n\n\n        <input type=\"radio\" id=\"real-world-on\" name=\"real-world-mode\" value=\"on\">\n        <input type=\"radio\" id=\"real-world-off\" name=\"real-world-mode\" value=\"off\" checked>\n        <input type=\"radio\" id=\"hard-on\" name=\"hard-mode\" value=\"on\">\n        <input type=\"radio\" id=\"hard-off\" name=\"hard-mode\" value=\"off\" checked>\n   \n\n    </div>\n\n\n    <div class=\"button-container\">\n        <button id=\"start-setup-button\" class=\"primary-cta-btn\">→</button>\n    </div>\n</div>\n\n <div id=\"page-1\" class=\"init-page\">\n\n    <div id=\"solar-system\">\n\n        <div class=\"player-core\">\n            <div class=\"core-text_zh\">核心</div>\n            <div class=\"core-text_en\">CORE</div>\n        </div>\n\n\n        <div class=\"planet\" id=\"planet-task\">\n            <div class=\"planet-icon-container\">\n                <div class=\"planet-icon\">◉</div>\n                <div class=\"planet-title\">世界细节</div>\n            </div>\n            <div class=\"planet-content\">\n                <button class=\"close-planet-btn\">×</button>\n                <div class=\"form-section\">\n                    <h2 class=\"form-title\">// 任务细节设定</h2>\n         <div class=\"collapsible-content-placeholder\">\n\n    <div class=\"clover-layout\" id=\"world-details-default\">\n        <div class=\"clover-leaf\" id=\"clover-leaf-tone\">\n            <label for=\"task-tone-select\">基调</label>\n            <select id=\"task-tone-select\" class=\"custom-select\"></select>\n            <div class=\"custom-input-container\" id=\"custom-task-tone-group\">\n                <input type=\"text\" id=\"custom-task-tone\" class=\"custom-select\" placeholder=\"输入自定义基调\">\n            </div>\n        </div>\n        <div class=\"clover-leaf\" id=\"clover-leaf-type\">\n            <label for=\"world-type-select\">类型</label>\n            <select id=\"world-type-select\" class=\"custom-select\"></select>\n            <div class=\"custom-input-container\" id=\"custom-world-type-group\">\n                <input type=\"text\" id=\"custom-world-type\" class=\"custom-select\" placeholder=\"输入自定义类型\">\n            </div>\n        </div>\n        <div class=\"clover-leaf\" id=\"clover-leaf-identity\">\n            <label for=\"world-identity-select\">身份</label>\n            <select id=\"world-identity-select\" class=\"custom-select\"></select>\n            <div class=\"custom-input-container\" id=\"custom-world-identity-group\">\n                <input type=\"text\" id=\"custom-world-identity\" class=\"custom-select\" placeholder=\"输入自定义身份\">\n            </div>\n        </div>\n        <div class=\"clover-leaf\" id=\"clover-leaf-opening\">\n            <label for=\"opening-scenario-select\">开局</label>\n            <select id=\"opening-scenario-select\" class=\"custom-select\"></select>\n            <div class=\"custom-input-container\" id=\"custom-opening-scenario-group\">\n                <input type=\"text\" id=\"custom-opening-scenario\" class=\"custom-select\" placeholder=\"输入自定义开局\">\n            </div>\n        </div>\n    </div>\n\n\n    <div class=\"v7-world-container\" id=\"world-details-v7\" style=\"display: none;\">\n        <div class=\"v7-setup-section\">\n            <div class=\"v7-setup-title\">// 选择末日类型</div>\n            <div class=\"v7-choice-group\" id=\"v7-apocalypse-choices\">\n\n            </div>\n        </div>\n        <div class=\"v7-setup-section\">\n            <div class=\"v7-setup-title\">// 选择阶层</div>\n            <div class=\"v7-choice-group\" id=\"v7-class-choices\">\n\n            </div>\n        </div>\n        <div class=\"v7-setup-section\">\n            <div class=\"v7-setup-title\">// 选择时间线</div>\n            <div class=\"v7-choice-group\" id=\"v7-timeline-choices\">\n\n            </div>\n        </div>\n    </div>\n\n\n    <div id=\"description-popup\"></div>\n</div>\n                </div>\n            </div>\n        </div>\n\n\n        <div class=\"planet\" id=\"planet-identity\">\n            <div class=\"planet-icon-container\">\n              \n                <div class=\"planet-icon\">✦</div>\n                <div class=\"planet-title\" id=\"planet-title-identity\">身份设定</div>\n            </div>\n            <div class=\"planet-content\">\n                <button class=\"close-planet-btn\">×</button>\n                <div class=\"form-section\">\n                     <h2 class=\"form-title\">// 选择初始身份</h2>\n                     <div id=\"id-card-wrapper\" class=\"collapsible-content-placeholder\">\n                         <div class=\"id-card\">\n                             <div class=\"id-card-main\">\n                                 <label for=\"user-identity\">身份</label>\n                                 <select id=\"user-identity\" class=\"custom-select\"></select>\n                                 <p id=\"identity-description\"></p>\n                             </div>\n                             <div id=\"paradise-camp-section\" class=\"id-card-addon\">\n                                 <div class=\"grid-container\">\n                                     <div class=\"form-group\">\n                                         <label for=\"paradise-camp\">乐园阵营</label>\n                                         <select id=\"paradise-camp\" class=\"custom-select\">\n                                             <option value=\"轮回乐园\">轮回乐园</option>\n                                             <option value=\"天启乐园\">天启乐园</option>\n                                             <option value=\"死亡乐园\">死亡乐园</option>\n                                             <option value=\"圣光乐园\">圣光乐园</option>\n                                         </select>\n                                     </div>\n                                     <div class=\"form-group\">\n                                         <label for=\"paradise-identity\">乐园身份</label>\n                                         <select id=\"paradise-identity\" class=\"custom-select\">\n                                             <option value=\"新人\">新人</option>\n                                             <option value=\"猎杀者\">猎杀者</option>\n                                             <option value=\"裁决者\">裁决者</option>\n                                             <option value=\"先驱者\">先驱者</option>\n                                             <option value=\"职工者\">职工者</option>\n                                             <option value=\"违规者\">违规者</option>\n                                         </select>\n                                     </div>\n                                 </div>\n                             </div>\n                        </div>\n                     </div>\n                </div>\n                 <div class=\"form-section\">\n                     <div class=\"talent-wrapper collapsible-content-placeholder\">\n                         <h3 class=\"talent-title\">天赋</h3>\n                         <div class=\"talent-selector-wrapper\">\n                               <div class=\"talent-search-container\">\n        <input type=\"text\" id=\"talent-search-input\" class=\"custom-select\" placeholder=\"搜索你的天赋…\">\n    </div>\n                                <div id=\"custom-talent-group\" class=\"custom-input-container\">\n                                 <label for=\"custom-talent-input\">自定义天赋描述</label>\n                                 <input type=\"text\" id=\"custom-talent-input\" class=\"custom-select\" placeholder=\"请在此处描述你的独特天赋\">\n                             </div>\n                            <select id=\"talent-select\" class=\"hidden-select\">\n                                 <option value=\"随机\">随机 - 命运的骰子已经掷出</option>\n                                     <option value=\"自定义\">自定义</option>\n                                     <option value=\"AI随机\">AI随机生成</option>\n                                 <option value=\"无\">无</option>\n                                <option value=\"第四面墙知情者：你隐约知道自己是某个故事的角色，偶尔能听到“画外音”，但其他人只会觉得你在自言自语。\">第四面墙知情者</option>\n    <option value=\"绝对味觉：你的舌头是个超高精度的化学分析仪，能尝出任何物质的精确成分，包括毒药、泥土和别人的谎言。\">绝对味觉</option>\n    <option value=\"情绪实体化：强烈的情绪会以无害但奇特的物理形态出现在你周围。比如，极度悲伤时会下起小小的爆米花雨，愤怒时头顶会长出柔软的蘑菇。\">情绪实体化</option>\n    <option value=\"BGM播放器：你的行为会自动匹配背景音乐，只有你自己能听到。潜行时是爵士乐，战斗时是交响金属，摸鱼时则是悠扬的夏威夷小调。\">BGM播放器</option>\n    <option value=\"反向幸运：你的运气总是以一种离奇的方式保护你。比如，你会被香蕉皮滑倒，却刚好躲过一颗狙击子弹，或者买彩票只中了一包纸巾，但那包纸巾刚好是最后一包。\">反向幸运</option>\n    <option value=\"动物社交恐怖分子：所有非人类的生物见到你都会立刻陷入恐慌，并想尽一切办法远离你。鸽子会为你绕路，警犬会放弃追捕，就连阿米巴原虫也会努力变形远离你的细胞。\">动物社交恐怖分子</option>\n    <option value=\"万物皆为友：你可以和任何非生命物体进行友好的精神交流，比如你的剑、你的鞋子、路边的石头。它们偶尔会给你一些奇怪但有用的建议。\">万物皆为友</option>\n    <option value=\"无用之学大师：你对所有在当前世界观下毫无用处的知识（比如地球上的互联网meme、冷门动画的剧情、量子力学的八卦）都了如指掌。\">无用之学大师</option>\n    <option value=\"概率篡改（1%）：每天一次，你可以指定一个事件，并将其成功的概率强行提升或降低1%。虽然微小，但有时足以创造奇迹，或者带来灾难。\">概率篡改（1%）</option>\n    <option value=\"剧情免疫：你对所有常见的剧情杀、预言、诅咒都天然免疫。预言中的“天选之子”会突然对你失去兴趣，必死的诅咒在你身上会变成一个无伤大雅的debuff，比如“接下来24小时说话会押韵”。\">剧情免疫</option>\n\n\n    <option value=\"水源地品鉴师：你能够品尝出任何水（包括圣水和毒液）的精确水源地和过滤历史，但这并不能让你免疫。\">水源地品鉴师</option>\n    <option value=\"活泼的影子：你的影子拥有独立的、非常丰富的肢体语言，它会根据你的潜意识做出反应，比如在你撒谎时拼命摇头。\">活泼的影子</option>\n    <option value=\"便携式热水壶：你流下的眼泪是滚烫的，可以用来泡茶，但味道总是有点咸。\">便携式热水壶</option>\n    <option value=\"植物的悲鸣：你能够听到植物因缺水或光照不足而发出的微弱悲鸣，但无法与它们交流。\">植物的悲鸣</option>\n    <option value=\"防窥之哈欠：你打哈欠时，周围半径三米内所有能反光（比如金属、玻璃）的物体表面会短暂变得模糊不清。\">防窥之哈欠</option>\n    <option value=\"人体面包机：在你完全静止不动超过一分钟后，你的身体会开始散发出刚出炉的面包的香气。\">人体面包机</option>\n    <option value=\"自带BGM的书签：你能让任何书籍在你阅读时，自动配上轻柔的背景音乐，但曲风永远是你最不喜欢的类型。\">自带BGM的书签</option>\n    <option value=\"情绪调色板：你身体的所有毛发（头发、眉毛等）都会根据你的情绪缓慢变色，比如焦虑时变成灰色，开心时是淡黄色，但变化过程需要数小时。\">情绪调色板</option>\n    <option value=\"真菌通感：你能够与真菌（比如蘑菇、霉菌）进行单向的心灵感应，你能感知到它们的“想法”，但它们通常在思考如何更好地腐烂。\">真菌通感</option>\n    <option value=\"诚实之耳：你在说谎时，耳朵会变得和精灵一样尖，效果持续到你说出下一句真话为止。\">诚实之耳</option>\n    <option value=\"昆虫舞蹈家：你能让任何昆虫在你面前跳一段优雅的华尔兹，前提是你能说服它这么做。\">昆虫舞蹈家</option>\n    <option value=\"万物年轮：你能够精确地知道任何一个非生命物体的“年龄”，从它被制造出来的那一刻算起。\">万物年轮</option>\n    <option value=\"闪光呼吸：你呼出的气中含有微量的、无害的闪光粉尘，在阳光下会显得非常梦幻。\">闪光呼吸</option>\n    <option value=\"味觉倒错：你能让任何咸味的食物吃起来像是甜的，反之亦然，但营养成分不变。\">味觉倒错</option>\n    <option value=\"八卦天线：当有人在你背后说你坏话时，你的头发会像被静电吸附一样竖起来一根。\">八卦天线</option>\n    <option value=\"迷路指针：你画的任何地图，无论多精确，上面的“你在此处”标记总是会自己跑到地图的边缘。\">迷路指针</option>\n    <option value=\"怀旧之声：你哼唱的任何歌曲，都会被周围的人听成一首他们童年最熟悉的儿歌。\">怀旧之声</option>\n    <option value=\"人体节拍器：你能让自己的心跳声完美地模仿任何一种打击乐器，但无法控制节奏。\">人体节拍器</option>\n    <option value=\"门之友：你对所有类型的门都有着超凡的亲和力，它们在你面前时会发出微弱的、表示欢迎的吱呀声。\">门之友</option>\n    <option value=\"梦境投影仪：在你睡觉时，你的梦境会以壁画的形式短暂地投射在你周围的墙壁上，天亮即逝。\">梦境投影仪</option>\n    <option value=\"瞬间抛光：你可以让任何一颗鹅卵石的表面变得像镜子一样光滑，但只能维持三秒。\">瞬间抛光</option>\n    <option value=\"松鼠会计：你总能知道离你最近的一只松鼠藏起来的松果的确切数量。\">松鼠会计</option>\n    <option value=\"无痕之步：你走过草地时，被你踩到的草会立刻恢复原状，不会留下任何脚印。\">无痕之步</option>\n    <option value=\"纸张守护者：你能让任何纸制品（书、羊皮卷等）对火的抗性提升5%，聊胜于无。\">纸张守护者</option>\n    <option value=\"化学嗝：你喝下任何液体后，都能在十分钟内，以打嗝的方式将该液体的化学式“说”出来。\">化学嗝</option>\n    <option value=\"落叶时刻：你拥有让时间变慢的能力，但只对正在下落的树叶有效。\">落叶时刻</option>\n    <option value=\"磐石之语：你能听懂石头的话语，但它们思考得极其缓慢，一句话可能要花上数百年才能说完。\">磐石之语</option>\n    <option value=\"不沾之肤：你的皮肤拥有完美的防水性，就像荷叶一样，任何液体都不会沾染，包括治疗药水。\">不沾之肤</option>\n    <option value=\"天书之笔：你写的字会自动变成一种极其优美但无人能懂的书法体。\">天书之笔</option>\n    <option value=\"可控瞳孔：你能够自由控制自己瞳孔放大的程度，可以在黑暗中看得更清楚一点，但也会因此显得很惊讶。\">可控瞳孔</option>\n    <option value=\"无用记忆：你能背诵出圆周率小数点后一万位，但在任何需要计算的场合，这都没有任何帮助。\">无用记忆</option>\n    <option value=\"测谎喷嚏：你对谎言过敏，每次听到谎言都会打一个响亮的喷嚏。\">测谎喷嚏</option>\n    <option value=\"硬币清洁工：任何在你手中停留超过一分钟的硬币，都会被自动擦得锃亮。\">硬币清洁工</option>\n    <option value=\"情绪色盲：你能够感受到情绪的“颜色”，但所有负面情绪都是不同色调的灰色。\">情绪色盲</option>\n    <option value=\"脆弱之发：你能让自己的头发像藤蔓一样伸长，但它和普通头发一样脆弱，一扯就断。\">脆弱之发</option>\n    <option value=\"跨物种幽默：你讲的笑话能让周围的非智慧生物（比如狗或马）发笑。\">跨物种幽默</option>\n    <option value=\"能量消耗者：你每次眨眼，都在消耗极其微量的、可以忽略不计的“世界能量”。\">能量消耗者</option>\n    <option value=\"马后炮向导：你总能找到任何迷宫的出口，但只有在你已经走出迷宫之后才能确定。\">马后炮向导</option>\n    <option value=\"塑云者：你能够让任何一朵云彩暂时变成你想要的形状，但很快就会被风吹散。\">塑云者</option>\n    <option value=\"最后的安魂曲：你能让死亡不超过一小时的昆虫尸体，重新“活”过来并为你跳完最后一支舞。\">最后的安魂曲</option>\n    <option value=\"魔法品鉴家：你对魔法的气味极其敏感，能闻出不同法术残留的味道，比如火球术是烧焦的辣椒味，治疗术是薄荷味。\">魔法品鉴家</option>\n    <option value=\"沉思之蝶：当你陷入沉思时，你的身边会随机出现一只蝴蝶的幻影，绕着你飞舞。\">沉思之蝶</option>\n    <option value=\"蚊子绝缘体：你永远不会被蚊子叮咬，因为蚊子认为你的血“不好喝”。\">蚊子绝缘体</option>\n\n\n    <option value=\"影子口袋：你能够将小型非魔法物品（如钥匙、匕首）完美地藏在自己的影子里，需要时可以取出。\">影子口袋</option>\n    <option value=\"紧急信标：你能够与自己接触过的、有智慧的生物建立一个临时的精神链接，只能传递“危险”或“安全”两种信号。\">紧急信标</option>\n    <option value=\"恒温动物：你的身体能够缓慢地适应任何环境的温度，无论是极寒还是酷暑，都能保持相对舒适。\">恒温动物</option>\n    <option value=\"大地脉动：你能够通过触摸土壤，感知到周围一公里内是否有大型生物群体活动。\">大地脉动</option>\n    <option value=\"滋养之手：你制作的任何食物或饮品，都会附带轻微的、加速体力恢复的效果。\">滋养之手</option>\n    <option value=\"活体地图：你能够记住走过的任何一条路，并且可以在脑海中构建出完美的3D地图。\">活体地图</option>\n    <option value=\"情感残响：你能够通过触摸一件物品，感知到它上一位使用者的强烈情绪。\">情感残响</option>\n    <option value=\"安抚之声：你的声音能够安抚大多数非敌意的野兽，降低它们主动攻击的欲望。\">安抚之声</option>\n    <option value=\"路人光环：你在人群中不易被注意，只要你不主动与人交谈或做出引人注目的行为，就很容易被忽略。\">路人光环</option>\n    <option value=\"柔骨之躯：你对自己身体的控制力极强，能够做出匪夷所思的柔韧和平衡动作。\">柔骨之躯</option>\n    <option value=\"危机嗅觉：你的直觉总能在战斗前一秒，为你警示出最致命的威胁来自何方。\">危机嗅觉</option>\n    <option value=\"万象拟音：你能够模仿任何你听过的声音，包括人声、兽吼和环境音，相似度极高。\">万象拟音</option>\n\n\n    <option value=\"技能小偷：你能够“窃取”他人身上一个非战斗类的熟练技能（如开锁、演奏、手艺），并使用一小时。每天一次。\">技能小偷</option>\n    <option value=\"沉默领域：你能够指定一个半径五米内的区域，让其中的所有魔法效果，无论是增益还是减益，暂时无效化，持续十秒。\">沉默领域</option>\n    <option value=\"生命献祭：你能够将自己的生命力分给他人，快速治愈对方的伤口，但自己会陷入同等程度的虚弱。\">生命献祭</option>\n    <option value=\"空间信标：你能够在你接触过的任何固体表面留下一个不可见的“空间标记”，你可以随时感知到标记的位置和状态。最多三个。\">空间信标</option>\n    <option value=\"真实之眼：你能够看穿大部分的幻术、变形术和伪装，在你眼中，虚假的存在会呈现出不稳定的轮廓。\">真实之眼</option>\n    <option value=\"微小回溯：每天一次，你可以让时间倒流三秒。只有你自己保留这三秒的记忆。\">微小回溯</option>\n    <option value=\"兵器通灵：你能够“解读”武器的记忆，通过触摸一把武器，了解它经历过的最激烈的一场战斗。\">兵器通灵</option>\n    <option value=\"能量反刍：你可以将受到的物理伤害的一部分，以纯粹的能量形式储存起来，并在下一次攻击中释放出去。\">能量反刍</option>\n\n\n    <option value=\"概念锚定：你能够将一个概念“锁定”在一个物体上。例如，将“坚固”的概念锁定在一张纸上，这张纸就无法被撕裂。\">概念锚定</option>\n    <option value=\"镜界沟通：你能够与一个平行世界的、选择了不同道路的自己进行短暂的精神交流，获取对方的知识或建议。\">镜界沟通</option>\n    <option value=\"物质编译器：你能够“编辑”非生命物质的基本属性，比如改变一块石头的密度，让它像木头一样轻。效果有限且消耗巨大。\">物质编译器</option>\n    <option value=\"命运的宠儿：你被世界本身所“偏爱”，当出现概率性的事件时，结果总会向对你有利的方向发生微小的、决定性的偏移。\">命运的宠儿</option>\n\n\n    <option value=\"好为人师磁铁：你散发着一种奇特的信息素，会让所有智慧生物在与你交谈时，不自觉地想要对你说教或纠正你。\">好为人师磁铁</option>\n    <option value=\"万物锈蚀：所有你持有的金属物品（武器、盔甲、钱币），其腐朽和磨损的速度会加快十倍。\">万物锈蚀</option>\n    <option value=\"恐慌置换：你在紧张或恐惧时，会随机与周围的一个物体（比如桌子、石头、尸体）交换位置。\">恐慌置换</option>\n    <option value=\"混乱的善意：你释放的任何增益法术（治疗、加持等），都有15%的概率作用到离你最近的敌人身上。\">混乱的善意</option>\n    <option value=\"完美的指甲生长：你的指甲总能长得又快又完美，形状匀称，富有光泽，但硬度和其他人的指甲没什么两样。\">完美的指甲生长</option>\n<option value=\"回声定位（伪）：你拥有出色的回声定位能力，但只能精确定位到你自己发出的声音的来源。\">回声定位（伪）</option>\n<option value=\"灰尘亲和力：你比一般人更容易吸引灰尘，静坐片刻身上就会落上薄薄一层，像一个移动的灰尘收集器。\">灰尘亲和力</option>\n<option value=\"对称强迫症：你对视觉上的不对称有种天生的敏感，看到歪斜的画框或不对称的摆设会让你感到难以忍受。\">对称强迫症</option>\n<option value=\"气泡膜体质：你的皮肤在被按压时，会发出类似捏破气泡膜的、令人愉悦的清脆声响。\">气泡膜体质</option>\n<option value=\"植物语入门：你能听懂植物的语言，但不知为何，它们对你说的似乎总是脏话。\">植物语入门</option>\n<option value=\"绝对音高（反向）：你拥有绝对音高，但只在听到别人唱歌跑调时才能准确识别出原调。\">绝对音高（反向）</option>\n<option value=\"食物幻视：当你极度饥饿时，视野中所有圆形或椭圆形的物体看起来都像美味的面包。\">食物幻视</option>\n<option value=\"静态着装：你的衣物永远不会起皱，但也因此更容易积聚静电。\">静态着装</option>\n<option value=\"历史的脚步声：在历史悠久的古道上，你偶尔能听到早已逝去之人留下的脚步声回响。\">历史的脚步声</option>\n<option value=\"苔藓预报员：通过仔细观察苔藓的湿润程度和色泽，你能准确预测接下来三分钟内的天气。\">苔藓预报员</option>\n<option value=\"颜色小偷：你能从一个物体上“偷”走一小块颜色，使该处褪色，而你的指尖会沾上那抹洗不掉的色彩。\">颜色小偷</option>\n<option value=\"情绪和弦：你的各种情绪会在脑海中自动谱成一段独特的和弦，但你无法分辨和弦具体对应哪种情绪。\">情绪和弦</option>\n<option value=\"延迟喷嚏：所有本该在白天打的喷嚏，都会累积到你睡着之后，以一场喷嚏风暴的形式释放。\">延迟喷嚏</option>\n<option value=\"自动对齐：你随手放在书架上的任何书籍，都会自动与书架边缘和旁边的书本完美对齐。\">自动对齐</option>\n<option value=\"液体密度感知：用手捧起任何液体，你都能瞬间感知到其精确的密度数值。\">液体密度感知</option>\n<option value=\"蜘蛛网警报：就在你的脸即将撞上蜘蛛网的前零点一秒，你的大脑会收到一次强烈的预警。\">蜘蛛网警报</option>\n<option value=\"谐音大师：你在说话时，总能无意识地、且恰到好处地使用各种双关语和同音异义词。\">谐音大师</option>\n<option value=\"骨骼广播：在天气剧烈变化前，你的骨骼会发出微弱的、只有你能听见的信号，内容通常是随机的诗歌朗诵。\">骨骼广播</option>\n<option value=\"梦境存档员：你每晚的梦境都会被自动转录成文字，保存在一本你永远找不到的魔法日记里。\">梦境存档员</option>\n<option value=\"语法纠错者：你能立刻听出他人话语中的任何语法错误，并产生一股难以抑制的纠正冲动。\">语法纠错者</option>\n<option value=\"毯子堡垒：只要用毯子把自己完全包裹起来，你就会获得一种“绝对安全”的心理慰藉，物理防御力为零。\">毯子堡垒</option>\n<option value=\"水果的情绪：你能清晰地感知到水果从生涩到成熟的喜悦，以及开始腐烂时的悲伤。\">水果的情绪</option>\n<option value=\"人体指南针：在非感冒状态下，你的鼻子总会无意识地朝向正北方。\">人体指南针</option>\n<option value=\"单向传音：你能将自己的声音灌入一个贝壳中，任何拿到贝壳的人都能听到，但声音无法被再次取出。\">单向传音</option>\n<option value=\"戏剧性摔倒：你每次意外摔倒时，姿势总是异常优雅且富有戏剧性，宛如舞台表演。\">戏剧性摔倒</option>\n<option value=\"无声咏唱：你可以在脑海中完美地完成冗长的魔法咒语咏唱，但法术并不会因此而触发。\">无声咏唱</option>\n<option value=\"情感余味：吃完一餐后，你能在口中回味出烹饪者制作这道菜时的主要情绪。\">情感余味</option>\n<option value=\"云朵收藏家：你拥有过目不忘的能力，但只对天上的云朵有效，你能记住见过的每一朵云的样子。\">云朵收藏家</option>\n<option value=\"昆虫的敬意：被你不小心踩死的昆虫，会在原地留下一朵持续一秒的、由能量构成的微型花朵。\">昆虫的敬意</option>\n<option value=\"完美削皮：使用任何工具给水果削皮，你都能削出一条完整的、从不中断的果皮。\">完美削皮</option>\n<option value=\"灰尘诗人：你呼出的气流能让附近的灰尘在空中短暂地聚合成随机的、优美的词语。\">灰尘诗人</option>\n<option value=\"瓶中信使：任何你投入水中的漂流瓶，最终都会被冲上某个无人知晓的荒岛。\">瓶中信使</option>\n<option value=\"噪音过滤器：你拥有主动屏蔽半径五米内所有蚊子嗡嗡声的能力。\">噪音过滤器</option>\n<option value=\"情绪光晕：当你凝视一个人超过十秒，能看到对方身上模糊的情绪光晕，但颜色和情绪的对应关系每天随机变化。\">情绪光晕</option>\n<option value=\"露珠收集者：每天清晨醒来，你的睫毛上总是会挂满晶莹剔透的露珠。\">露珠收集者</option>\n<option value=\"温度记忆：你的皮肤能“记住”上一个接触物体的准确温度，并将其保持一分钟。\">温度记忆</option>\n<option value=\"影子戏法师：你的影子能惟妙惟肖地表演你看过的任何皮影戏片段。\">影子戏法师</option>\n<option value=\"书本的叹息：当你合上一本尚未读完的书时，你会听到它发出一声微不可闻的叹息。\">书本的叹息</option>\n<option value=\"味道翻译家：你可以将任何尝到的味道，在脑海里“翻译”成一段无人能懂的现代诗。\">味道翻译家</option>\n<option value=\"回声变调：你在山谷中呐喊，听到的回声会自动帮你提升一个八度。\">回声变调</option>\n<option value=\"霉菌艺术家：被你遗忘的食物在发霉时，其霉菌会生长成令人惊叹的美丽图案。\">霉菌艺术家</option>\n<option value=\"永恒的温热：任何被你触摸过的石头，都会永久性地比环境温度高出一度。\">永恒的温热</option>\n<option value=\"泡泡语：你吹出的肥皂泡泡在破裂的瞬间，会用极微弱的声音说出“你好”或“再见”。\">泡泡语</option>\n<option value=\"密码过敏：当你尝试解读复杂的密码或谜题时，会立刻感到一阵轻微的头痛。\">密码过敏</option>\n<option value=\"节奏同步：你走路的步频会不自觉地与离你最近的人保持完全一致。\">节奏同步</option>\n<option value=\"月光墨水：在月光下书写，你使用的任何墨水都会散发出淡淡的银光，天亮后即恢复原样。\">月光墨水</option>\n<option value=\"静态收藏家：你的头发特别容易积聚静电，可以轻松吸附起小纸片或羽毛。\">静态收藏家</option>\n<option value=\"椅子预热：任何你打算坐下的椅子，都会在你坐下前一分钟自动升温到最舒适的温度。\">椅子预热</option>\n<option value=\"倒影的秘密：你在水中的倒影，其表情总是比你本人要显得忧郁一些。\">倒影的秘密</option>\n<option value=\"歌声的质感：你能通过聆听，感受到歌声的“触感”，比如丝滑、粗糙、温暖或冰冷。\">歌声的质感</option>\n<option value=\"冰霜画手：冬天对着窗户哈气，凝结的冰霜会自动形成一幅随机而精致的风景画。\">冰霜画手</option>\n<option value=\"烛火的舞伴：你点燃的任何蜡烛，其火焰都会随着你的心跳节奏同步摇曳。\">烛火的舞伴</option>\n<option value=\"谎言的重量：你能感觉到别人说出的谎言带有物理上的“重量”，但无法判断其真伪。\">谎言的重量</option>\n<option value=\"无聊的预知：你能准确预知到接下来五分钟内，将会发生的一件最无聊、最没有意义的事情。\">无聊的预知</option>\n<option value=\"历史的回响：在古战场或历史遗迹，你能听到早已消散在风中的、微弱的兵器碰撞与呐喊声。\">历史的回响</option>\n<option value=\"完美的堆叠：你拥有将任何可堆叠物品（如石头、书籍、盘子）堆到其物理极限高度的卓越能力。\">完美的堆叠</option>\n<option value=\"雨滴协奏曲：下雨时，你能清晰分辨每一滴雨水落在不同物体上的音高，并在脑中谱成乐章。\">雨滴协奏曲</option>\n<option value=\"沙堡建筑师：你堆的沙堡异常坚固，能轻松抵御普通海浪的冲刷，直到下一次大涨潮。\">沙堡建筑师</option>\n \n<option value=\"微风传话：你可以将自己的低语附在微风上，让它清晰地传到顺风方向一百米内指定的人耳中。\">微风传话</option>\n<option value=\"应急伪装：在受到生命威胁时，你能让自己的外表变得和周围环境中的一块普通石头或灌木丛难以区分，持续一分钟，期间无法移动。\">应急伪装</option>\n<option value=\"锁匠之友：你对锁具的内部结构有一种天生的直觉，这让你在开锁时成功率大大提高。\">锁匠之友</option>\n<option value=\"情绪温度计：你能大致感知到周围智慧生物的情绪状态，如“温暖”代表喜悦，“冰冷”代表恐惧。\">情绪温度计</option>\n<option value=\"草药低语：通过触摸植物，你能立刻感知到它是否具有药用价值、毒性或可食用性。\">草药低语</option>\n<option value=\"标记猎物：你可以对一个生物施加一个持续一小时的无形标记，在千米范围内都能感知其大致方向。\">标记猎物</option>\n<option value=\"记忆橡皮擦：每天一次，你可以选择性地让自己完全忘记一段不超过十分钟的、不愉快的记忆。\">记忆橡皮擦</option>\n<option value=\"快速缝合：你拥有远超常人的伤口处理技巧和速度，能用最简单的工具完成有效的紧急缝合。\">快速缝合</option>\n<option value=\"工具共鸣：当你拿起一件工具时，能立刻领悟到它最省力、最有效的使用方式。\">工具共鸣</option>\n<option value=\"水质净化：通过持续接触，你能缓慢地净化一小捧水，使其达到可安全饮用的标准。\">水质净化</option>\n<option value=\"方向感校准：每天一次，你可以在任何地方瞬间在脑海中明确自己相对于出生点的精确方位。\">方向感校准</option>\n<option value=\"野兽的善意：在非饥饿状态下，大多数野兽不会主动攻击你，除非你先表露出强烈的敌意。\">野兽的善意</option>\n<option value=\"微光视觉：在只有星光或月光的微光环境下，你的视力几乎与白天无异。\">微光视觉</option>\n<option value=\"警觉之眠：你在睡眠时依然对周围的危险气息保持着最低限度的警觉，更容易被异动惊醒。\">警觉之眠</option>\n<option value=\"交易直觉：在进行交易时，你总能凭直觉判断出对方的报价是公平、占便宜还是敲竹杠。\">交易直觉</option>\n<option value=\"强效消化：你的消化系统能分解某些通常无法食用的植物根茎，并从中汲取少量能量。\">强效消化</option>\n<option value=\"无声脚步：当你集中精神刻意放轻脚步时，几乎不会发出任何可以被察觉的声音。\">无声脚步</option>\n<option value=\"痕迹追踪：你对追踪生物留下的痕迹（脚印、断枝、气味残留）有着天生的敏锐直觉。\">痕迹追踪</option>\n<option value=\"简易陷阱大师：你能用随处可见的材料，快速设置出效果显著的、用于捕捉小动物或警示的简易陷阱。\">简易陷阱大师</option>\n<option value=\"天气预报员：通过观察云层、风向和空气湿度的细微变化，你能相当准确地预测未来十二小时的天气。\">天气预报员</option>\n\n \n\n<option value=\"因果线剪辑：每天一次，你可以选择一个刚刚发生的、影响不大的事件（如打翻水杯），并从因果中“剪除”它，使之从未发生。\">因果线剪辑</option>\n<option value=\"元素亲和：你对某一种元素（火、水、风、土等）有超凡的亲和力，学习和施展该系法术时事半功倍，且威力与控制力显著提升。\">元素亲和</option>\n<option value=\"灵魂低语：你能与任何濒死（生命最后一分钟）的生物进行短暂的精神交流，读取他们最后、最强烈的残念或信息。\">灵魂低语</option>\n<option value=\"存在稀释：只要你身处阴影之中，就可以选择性地大幅降低自身的存在感，能有效规避大部分非指向性的侦测。\">存在稀释</option>\n<option value=\"血脉觉醒：在生命垂危的瞬间，你有一定几率唤醒体内潜藏的古老血脉，短时间内获得强大的力量或一项全新的特殊能力。\">血脉觉醒</option>\n<option value=\"契约之言：你说出的、以“我承诺”为开头的句子，会对你和聆听者产生微弱的契约束缚力。若你违背，会遭受厄运；若他人帮助你完成，会获得好运。\">契约之言</option>\n<option value=\"绝对模仿：亲眼目睹一个非超凡的、纯粹的技巧性动作后（如一次完美的射击、一段复杂的剑舞），你可以在接下来的一分钟内完美复现一次。\">绝对模仿</option>\n<option value=\"心灵壁垒：你的心智如同一座坚固的堡垒，天生就能抵抗大部分精神探查、心灵控制和情绪操纵类的法术或能力。\">心灵壁垒</option>\n<option value=\"短距传送：每天可以使用数次，瞬间将自己传送到视线所及的十米内任意一个无障碍的地点。\">短距传送</option>\n<option value=\"再生之躯：你的身体拥有缓慢但持续的自愈能力，所有非致命性的创伤都会以肉眼可见的速度缓慢愈合，且不会留下疤痕。\">再生之躯</option>\n \n\n<option value=\"魔法增幅：你施展的所有法术，其威力会不由自主地增加30%，但法力消耗也同时增加100%。\">魔法增幅</option>\n<option value=\"共情过载：你会强制性地、身临其境地感受到周围所有人的强烈情绪，并会不由自主地在表情和动作上表现出来。\">共情过载</option>\n<option value=\"绝对吸引：在战斗中，所有飞行道具（无论敌我）的弹道都有微小的几率向你的身体偏移。\">绝对吸引</option>\n<option value=\"诚实的代价：你无法说谎。一旦尝试，你不仅会失败，还会脱口而出另一个更加尴尬或致命的真相。\">诚实的代价</option>\n<option value=\"财富斥力：你持有的任何形式的货币，都会以各种离奇的方式（被偷、遗失、意外损坏、不小心捐赠）迅速地离你而去。\">财富斥力</option>\n<option value=\"反向治愈：当你对他人施展治疗或包扎时，有10%的概率将对方的伤势完美地转移到自己身上。\">反向治愈</option>\n<option value=\"主角公敌：你天生就散发着一种独特的气场，极易被那些身负“天命”或自认“主角”的人视为潜在的竞争对手或必须铲除的障碍。\">主角公敌</option>\n<option value=\"言出法随（负面限定）：你所有无意中说出的负面猜想（比如“前面该不会有埋伏吧”），其成真的概率会大幅度提升。\">言出法随（负面限定）</option>\n<option value=\"物品背叛：在最关键的时刻，你所依赖的物品（武器、工具、绳索）有一定概率会突然断裂、失灵或脱手。\">物品背叛</option>\n<option value=\"友军之围：在混乱的战斗中，你的盟友似乎总是会不自觉地将你纳入他们范围攻击的边缘区域。\">友军之围</option>  \n\n                            </select>\n                            <div id=\"custom-talent-scroll\"></div>\n\n                         </div>\n                     </div>\n                 </div>\n            </div>\n        </div>\n\n\n        <div class=\"planet\" id=\"planet-teammates\">\n            <div class=\"planet-icon-container\">\n                <div class=\"planet-icon\">✤</div>\n                <div class=\"planet-title\" id=\"teammate-section-label\">队友配置</div>\n            </div>\n            <div class=\"planet-content\">\n                <button class=\"close-planet-btn\">×</button>\n                <div class=\"form-section\">\n                    <h2 class=\"form-title\">// 队友设置</h2>\n                    <div class=\"collapsible-content-placeholder\">\n                        <div class=\"teammate-gear-controls\">\n                            <div class=\"gear-group\">\n                                <label for=\"teammate-count\" id=\"teammate-count-label\">人数</label>\n                                <div class=\"gear-select\">\n                                    <select id=\"teammate-count\" class=\"custom-select\">\n                                        <option value=\"-1\">随机</option><option value=\"0\">0</option><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option><option value=\"7\">7</option><option value=\"8\">8</option><option value=\"9\">9</option><option value=\"10\">10</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"gear-group\">\n                                <label for=\"teammate-tendency\">倾向</label>\n                                <div class=\"gear-select\">\n                                     <select id=\"teammate-tendency\" class=\"custom-select\">\n                                         <option value=\"友善合作\">友善</option><option value=\"中立谨慎\">中立</option><option value=\"竞争激烈\">竞争</option><option value=\"混乱邪恶\">混沌</option><option value=\"随机生成\">随机</option><option value=\"自定义\">自定义</option>\n                                     </select>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"fixed-team-toggle\" id=\"fixed-team-toggle\">\n                            <input type=\"checkbox\" id=\"is-fixed-team\">\n                            <label for=\"is-fixed-team\" class=\"toggle-label\"></label>\n                            <span>固定小队</span>\n                        </div>\n                        <div id=\"custom-teammates-container\" class=\"teammate-card-stack\">\n                            <div class=\"stack-header\">\n                                <div>自定义信息 (可左右滑动)</div>\n                                <div class=\"stack-controls\">\n                                   <button id=\"load-teammates-btn\" type=\"button\" class=\"teammate-action-btn\">读取</button>\n                                   <button id=\"save-teammates-btn\" type=\"button\" class=\"teammate-action-btn\">保存</button>\n                                   <button type=\"button\" class=\"teammate-action-btn\" onclick=\"addTeammate()\">+</button>\n                                </div>\n                            </div>\n                            <div id=\"teammates-list\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        <button id=\"next-page-button\" class=\"primary-cta-btn\" style=\"position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 100px; height: 100px; font-size: 50px;\">→</button>\n\n    </div>\n</div>\n\n<div id=\"page-2\" class=\"init-page\">\n<div id=\"galaxy-points-display\">\n\n    <div class=\"points-info\">\n        <div class=\"points-bar-container\">\n            <div id=\"points-bar\"></div>\n        </div>\n        <span id=\"remaining-points-text\">70</span>\n    </div>\n\n\n\n</div>\n\n   <div id=\"top-hud\" class=\"hud top-hud\">\n        <div class=\"hud-toggle\" data-target=\"top-hud\"></div>\n        <div class=\"hud-content\">\n\n            <div class=\"points-tracker\">\n                <div id=\"points-display-container\" style=\"display: none;\">\n                    <div id=\"points-ring-container\">\n\n                        <svg id=\"points-ring-bg\" width=\"50\" height=\"50\">\n                            <circle cx=\"25\" cy=\"25\" r=\"22\" stroke=\"var(--border-color)\" stroke-width=\"3\" fill=\"none\"/>\n                        </svg>\n                        <svg id=\"points-ring\" width=\"50\" height=\"50\">\n                            <circle cx=\"25\" cy=\"25\" r=\"22\" stroke=\"var(--primary-color)\" stroke-width=\"3\" fill=\"none\" stroke-linecap=\"round\"\n                                stroke-dasharray=\"138.23\" stroke-dashoffset=\"138.23\" transform=\"rotate(-90 25 25)\"/>\n                        </svg>\n                        <span id=\"remaining-points\">70</span>\n                    </div>\n                   <span>剩余构筑点</span>\n                </div>\n\n                \n               \n            </div>\n    <div class=\"points-actions\">\n\n         <div class=\"form-group\" style=\"text-align: center;\">\n                    <select id=\"total-points-select\" class=\"custom-select\" style=\"width: auto;\">\n                        <option value=\"70\">充裕 (70)</option>\n                        <option value=\"55\">标准 (55)</option>\n                        <option value=\"40\">残疾 (40)</option>\n                        <option value=\"0\">地狱 (0)</option>\n                        <option value=\"custom\">自定义</option>\n                    </select>\n                    <input type=\"number\" id=\"custom-total-points\" min=\"1\" value=\"70\" style=\"display: none; width: 80px; margin-top: 5px;\">\n                </div>\n                                <div class=\"template-controls\">\n                    <select id=\"template-select-init\" class=\"custom-select\" placeholder=\"读取模板\"></select>\n                     \n                </div>\n                 <button id=\"average-points-btn\" class=\"action-button\">平均分配</button>\n    </div>\n\n <button id=\"arrange-stars-btn\" class=\"action-button\">整理排列</button>\n            <div class=\"template-manager\">\n                <div class=\"template-controls\">\n                    <select id=\"template-select\" class=\"custom-select\" placeholder=\"读取模板\" style=\"display: none;\"></select>\n                    <button id=\"delete-template-btn\" class=\"action-button danger-button\">删除当前模板</button>\n                </div>\n                <div id=\"save-template-form\">\n                    <input type=\"text\" id=\"save-template-name\" placeholder=\"将当前加点保存为模板\">\n                    <button id=\"save-template-btn\" class=\"action-button\">保存</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n  <div id=\"galaxy-container\">\n    <div id=\"wrapper-physic\" class=\"galaxy-wrapper\">\n    <div id=\"galaxy-physic\" class=\"galaxy-system\" data-galaxy=\"physic\"></div>\n</div>\n\n<div id=\"wrapper-mental\" class=\"galaxy-wrapper\">\n    <div id=\"galaxy-mental\" class=\"galaxy-system\" data-galaxy=\"mental\"></div>\n</div>\n\n<div id=\"wrapper-social\" class=\"galaxy-wrapper\">\n    <div id=\"galaxy-social\" class=\"galaxy-system\" data-galaxy=\"social\"></div>\n</div>\n\n<div id=\"galaxy-nav-prev\" class=\"galaxy-nav\">&lt;</div>\n<div id=\"galaxy-nav-next\" class=\"galaxy-nav\">&gt;</div>\n</div>\n\n  <div id=\"bottom-hud\" class=\"hud bottom-hud\">\n        <div class=\"hud-toggle\" data-target=\"bottom-hud\"></div>\n        <div class=\"hud-content\">\n\n             <div id=\"concept-section\" class=\"form-grid\" style=\"grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;\">\n\n            </div>\n\n\n            <div class=\"button-container\">\n                <div class=\"form-group\" style=\"margin-bottom: 1rem; text-align: center;\">\n                    <select id=\"send-mode-select\" class=\"custom-select\" style=\"max-width: 250px; margin: 0 auto;\">\n                        <option value=\"auto\">自动发送</option>\n                        <option value=\"manual\">手动发送</option>\n                    </select>\n                </div>\n                <div style=\"display: flex; gap: 0.8rem; justify-content: center; flex-wrap: wrap;\">\n                    <button id=\"init-button\" class=\"action-button\">[ <校准并传送> ]</button>\n                    <button id=\"god-space-button\" class=\"action-button secondary-button\">[ <于安全区域醒来> ]</button>\n                    <button id=\"custom-action-button\" class=\"action-button\" style=\"background-color: var(--info-color, #4db6ac); border-color: #5a944b;\">[ <自定义> ]</button>\n                </div>\n            </div>\n\n\n            <div id=\"custom-action-input-container\" style=\"display: none; margin-top: 1.5rem;\">\n                 <input type=\"text\" id=\"custom-action-input\" placeholder=\"请在这里输入你的自定义说明文字\" style=\"width: 100%; box-sizing: border-box; margin-bottom: 0.8rem;\">\n                 <div style=\"display: flex; align-items: center; gap: 0.5rem;\" >\n                    <input type=\"checkbox\" id=\"add-world-prefix-checkbox\" style=\"transform: scale(1.2); cursor: pointer;\" checked>\n                    <label for=\"add-world-prefix-checkbox\" style=\"margin-bottom: 0; cursor: pointer; user-select: none;\">为该指令附加世界背景</label>\n                </div>\n            </div>\n            <div id=\"warning-message\" class=\"warning-message\" style=\"display: none; margin-top: 1rem; color: #ffcc00; text-align: center;\">\n                提示：参数已上传，正在构建角色数据，你将在短暂的意识模糊后于主神空间醒来，无法立即进入任务。\n            </div>\n        </div>\n    </div>\n</div>\n  </div>    \n<div id=\"main-wrapper\">\n <div class=\"status-container\">\n    <header>\n        <div class=\"header-content\">\n            <div id=\"update-notifier\" style=\"display: none;\">!</div>\n            <h1 id=\"world-shard\">SYSTEM TERMINAL</h1>\n            <div class=\"header-info-bar\">\n    <div class=\"info-group\">\n        <span class=\"info-item\">\n            <span class=\"info-label\">位置:</span>\n            <span id=\"header-location\" class=\"info-value\">--</span>\n        </span>\n        <span class=\"info-item\">\n            <span class=\"info-label\">时间:</span>\n            <span id=\"header-time\" class=\"info-value\">--</span>\n        </span>\n    </div>\n    <div class=\"info-group\">\n        <span class=\"info-item\">\n            <span class=\"info-label\">默认检定:</span>\n            <span id=\"header-check\" class=\"info-value\">--</span>\n        </span>\n        <span class=\"info-item\">\n            <span class=\"info-label\">敌方:</span>\n            <span id=\"header-combat\" class=\"info-value\">--</span>\n        </span>\n        <span class=\"info-item\">\n            <span class=\"info-label\">难度:</span>\n            <span id=\"header-difficulty\" class=\"info-value\">--</span>\n        </span>\n    </div>\n</div>\n<button id=\"fullscreen-btn\" title=\"全屏\">\n    ⛶\n</button>\n <button id=\"settings-btn\" title=\"设置\">\n    ⚙\n</button>\n <button id=\"refresh-btn\" title=\"刷新\">\n    ⟲\n</button>\n\n \n        </div>\n    </header>\n\n\n\n    <div class=\"content-area\" id=\"chat-display-area\">\n\n    </div>\n<div id=\"dynamic-content-area\" class=\"dynamic-content-area\">\n\n<!-- 外部模块占位，他妈的麻烦啊啊啊啊啊啊啊啊啊啊啊 -->\n    <div id=\"options-module-container\" class=\"module-container\" style=\"display: none;\">\n  <div class=\"options-container\">\n        <div class=\"choices-container\" id=\"choicesContainer\">\n\n        </div>\n    </div>\n\n    <div class=\"skill-orb-container\">\n        <div class=\"skill-orb\" id=\"skillOrb\">術</div>\n    </div>\n    <div class=\"skill-panel\" id=\"skillPanel\">\n        <div class=\"skill-list\" id=\"skillList\">\n            <p style=\"color: grey; font-size: 14px; text-align: center;\">未检测到可用技能</p>\n        </div>\n        <div class=\"willpower-section\">\n            <label class=\"willpower-label\">\n                <span>投入意志力</span>\n                <div class=\"willpower-input-container\">\n                    <input type=\"number\" id=\"willpowerInput\" min=\"0\" value=\"0\">\n                    <span id=\"willpowerMax\">/ 0</span>\n                </div>\n            </label>\n            <div class=\"skill-info\">每点意志力为检定池+1DP</div>\n        </div>\n    </div>\n\n    </div>\n\n<div id=\"forum-modal-container\" class=\"modal\">\n <div id=\"forum-modal-content\">\n <button id=\"forum-modal-close-btn\">×</button>\n <div id=\"forum-wrapper\">\n        <!-- 头部 -->\n        <header class=\"forum-header\">\n            <h1 class=\"forum-title\">交流终端</h1>\n            <div class=\"header-controls\">\n                <button class=\"new-post-btn\" id=\"new-post-btn\">发布新帖</button>\n \n            </div>\n        </header>\n\n <main class=\"forum-body\" id=\"forum-body\">\n\n    <aside class=\"forum-sidebar\" id=\"forum-sidebar\">\n\n    </aside>\n\n\n    <section class=\"thread-list-view\">\n        <div class=\"thread-list-header\">\n            <span id=\"current-section-name\"></span>\n        </div>\n        <div class=\"thread-list\" id=\"thread-list\">\n\n        </div>\n        <div class=\"pagination-controls\" id=\"thread-pagination\"></div>\n    </section>\n\n\n    <section class=\"thread-detail-view\">\n        <div id=\"thread-detail-content\">\n\n             <div class=\"detail-placeholder\">\n                <div>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"color: var(--text-secondary-color); opacity: 0.5; margin-bottom: 10px;\"><path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path></svg>\n                    <p>选择一个帖子查看内容</p>\n                </div>\n            </div>\n        </div>\n    </section>\n</main>\n    </div>\n\n    <!-- 发帖模态框 -->\n    <div id=\"post-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <button class=\"modal-close\" id=\"modal-close-btn\">&times;</button>\n            <h2 class=\"modal-title\" id=\"modal-title\">发布新帖</h2>\n            <form id=\"post-form\">\n                <div class=\"form-group\">\n                    <label for=\"post-section\">选择区块</label>\n                    <select id=\"post-section\" required></select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"post-title\">帖子标题</label>\n                    <input type=\"text\" id=\"post-title\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"post-content-input\">帖子内容</label>\n                    <textarea id=\"post-content-input\" required></textarea>\n                </div>\n                <div class=\"modal-actions\">\n                    <button type=\"submit\" class=\"new-post-btn\" id=\"submit-post-btn\">确认发布</button>\n                </div>\n            </form>\n        </div>\n    </div>\n    </div>\n</div>\n\n\n \n\n\n<div id=\"group-chat-context-menu\" class=\"group-chat-context-menu\">\n    <div class=\"group-chat-context-menu-item\" id=\"context-menu-reply\">回复</div>\n</div>\n\n<div id='task-summary-modal-container' class = 'modal'>\n  <div id=\"summary-root\" class=\"task-summary-main-container\">\n        <!-- 内容将由JavaScript动态生成 -->\n    </div>\n</div>\n\n</div>\n<!-- 替换原有的成就系统看板HTML -->\n<div id=\"achievements-modal\" class=\"modal page-modal wide\" style=\"z-index: 99999;\">\n    <div class=\"modal-content page-modal-content\">\n        <button class=\"modal-close\">×</button>\n \n        <div id=\"achievements-content\" class=\"page active\" style=\"display: flex; flex-direction: column; gap: 0; padding: 10px;\">\n            <!-- 成就列表将由JS动态生成 -->\n            <div style=\"color: var(--text-secondary-color); text-align: center; padding: 40px;\">\n                <div style=\"font-size: 2em; margin-bottom: 10px;\">🏆</div>\n                <p>正在加载成就数据...</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n <div id=\"zero-level-interface\">\n<div id=\"new-message-notification-container\" style=\"position: absolute; bottom: 16%; left: 15px; z-index: 1001; pointer-events: none;\"></div>\n\n<div id=\"event-tracker-container\" class=\"event-tracker-container\"></div>\n\n    <div id=\"floating-panel-anchor\">\n<div id=\"rp-panel\">\n    <div class=\"check-cards-area\">\n        <h3>\n            选择检定项\n\n            <div class=\"card-view-switcher\">\n                <span id=\"switch-to-my-cards\" class=\"active\">我的</span>\n                <span id=\"switch-to-teammate-cards\">队友</span>\n            </div>\n\n            <button id=\"sort-cards-btn\" class=\"sort-button\" data-sort-order=\"desc\">LVL ▼</button>\n        </h3>\n\n        <div id=\"my-cards-slider\" class=\"cards-slider visible\">\n            <p style=\"color: grey; padding: 20px 0;\">等待加载检定项...</p>\n        </div>\n\n        <div id=\"teammate-cards-slider\" class=\"cards-slider\">\n             <p style=\"color: grey; padding: 20px 0;\">无队友或未加载</p>\n        </div>\n    </div>\n    <button id=\"confirm-rp-choice-btn\" class=\"action-button\">确认</button>\n</div>\n    </div>\n\n    <div id=\"top-left-orbs\">\n        <div class=\"orb top-orb\" id=\"forum-orb-button\">坛</div>\n        <div class=\"orb top-orb\" id=\"task-summary-orb-button\">总</div>\n        <div class=\"orb top-orb\" id=\"read-orb-button\">阅</div>\n        \n        <div class=\"orb top-orb\" id=\"group-chat-orb-button\" style=\"display: none;\">聊</div>\n    </div>\n\n    <button id=\"view-command-btn\" class=\"action-button zero-level-btn\" title=\"查看/编辑待发指令\">令</button>\n    <button id=\"rp-button\" class=\"action-button zero-level-btn\" title=\"RP检定\">RP</button>\n    <button id=\"run-button\" class=\"action-button zero-level-btn\" title=\"逃跑\" style=\"display: none;\">逃</button>\n       <textarea id=\"user-input\" rows=\"2\" placeholder=\"在这里输入你的行动...\"></textarea>\n    <div id=\"button-container-send\">\n          <div id=\"action-blocker-overlay\"></div>\n    <button id=\"send-button\" class=\"action-button zero-level-btn\">➔</button>\n    <button id=\"reroll-button\" class=\"action-button zero-level-btn\">⟲</button>\n    </div>\n</div>\n</div>\n\n\n<div id=\"orb-container\">\n    \n    <div class=\"orb\" data-modal-id=\"roll-result-modal\" id=\"roll-result-orb\">骰</div>\n    \n    <div class=\"orb\" data-modal-id=\"shop-wrapper-modal\" id=\"shop-wrapper-orb\">商</div>\n    <div class=\"orb\" data-modal-id=\"map-view-modal\" id=\"map-view-orb\">图</div>\n     <div class=\"orb-divider\"></div>\n     \n    <div class=\"orb\" id=\"skill-choice-orb\">術</div>\n    <div class=\"orb\" data-modal-id=\"page-character-modal\" id=\"page-character-orb\">能</div>\n \n     <div class=\"orb-divider\"></div>\n     <div class=\"orb\" data-modal-id=\"summary-modal\" id=\"summary-modal-orb\">综</div>\n    <div class=\"orb\" id=\"world-book-orb\">识</div>\n \n    <div class=\"orb\" data-modal-id=\"page-task-modal\" id=\"page-task-orb\">任</div>\n\n</div>\n\n\n<div id=\"page-task-modal\" class=\"modal page-modal\">\n    <div class=\"modal-content page-modal-content\">\n        <button class=\"modal-close\">×</button>\n        <div class=\"modal-title\">任务详情</div>\n        <div id=\"page-task\" class=\"page active\">\n            <ul class=\"info-list\">\n                \n                <li><span class=\"label\">任务目标</span><span id=\"task-objective\" class=\"value highlight\"></span></li>\n                 <li><span class=\"label\">世界描述</span><span id=\"info-world-desc\" class=\"value\"></span></li>\n                <li><span class=\"label\">任务状态</span><span id=\"task-status\" class=\"value\"></span></li>\n                <li>\n                    <span class=\"label\">任务进度</span>\n                    <div class=\"value\" style=\"width: 50%;\">\n                        <div class=\"progress-container\">\n                            <div class=\"progress-bar-bg\">\n                                <div id=\"task-progress-bar\" class=\"progress-bar-fill\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                 <li><span class=\"label\">成功奖励</span><span id=\"task-rewards\" class=\"value\"></span></li>\n                <li><span class=\"label\">失败惩罚</span><span id=\"task-penalties\" class=\"value\"></span></li>\n                <li><span class=\"label\">剩余时间</span><span id=\"task-time-left\" class=\"value\"></span></li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n\n <div id=\"page-character-modal\" class=\"modal page-modal wide\">\n    <div class=\"modal-content page-modal-content\" style=\"max-width: 800px;\">\n        <button class=\"modal-close\">×</button>\n\n\n\n        <div class=\"char-tabs-nav\">\n            <button class=\"char-tab-btn active\" data-tab=\"status\">个人状态</button>\n            <button class=\"char-tab-btn\" data-tab=\"inventory\">行囊与能力</button>\n        </div>\n\n\n        <div id=\"char-currency-display\" class=\"char-currency-display\">\n\n        </div>\n\n\n        <div class=\"char-tabs-content\">\n\n\n            <div id=\"char-tab-status\" class=\"char-tab-panel active\">\n                <div id=\"page-character\" class=\"page active\">\n                    <div class=\"character-display-grid\">\n                        <div class=\"char-panel left-panel\">\n                            <div id=\"char-titles-container\" class=\"char-titles-container\"></div>\n                            <div id=\"char-display-name\" class=\"char-name-display\">用户</div>\n                            <div class=\"char-info-box\">\n                                <div class=\"info-line\" data-tooltip-key=\"status\"><span class=\"info-label\">状态</span><span id=\"char-display-status\" class=\"info-value\">正常</span></div>\n                                <div class=\"info-line\" data-tooltip-key=\"prestige\"><span class=\"info-label\">声望</span><span id=\"char-display-prestige\" class=\"info-value\">0</span></div>\n                            <div class=\"info-line\" id=\"bloodline-info-line\" style=\"display: none;\"> \n    <span class=\"info-label\">血统</span>\n    <span id=\"char-display-bloodline\" class=\"info-value clickable-text\"></span>\n</div>    \n                            </div>\n                            <div class=\"resource-bar-container\"><div class=\"resource-bar-label\">生命值</div><div class=\"progress-bar-bg resource\" data-tooltip-key=\"hp\"><div id=\"char-hp-bar\" class=\"progress-bar-fill hp\"></div><span id=\"char-hp-text\" class=\"progress-bar-text\">50/50</span></div></div>\n                            <div class=\"resource-bar-container\"><div class=\"resource-bar-label\">意志力</div><div class=\"progress-bar-bg resource\" data-tooltip-key=\"willpower\"><div id=\"char-will-bar\" class=\"progress-bar-fill willpower\"></div><span id=\"char-will-text\" class=\"progress-bar-text\">0/0</span></div></div>\n                            <div class=\"resource-bar-container\"><div id=\"char-energy-label\" class=\"resource-bar-label\">能量池</div><div class=\"progress-bar-bg resource\" data-tooltip-key=\"energy\"><div id=\"char-energy-bar\" class=\"progress-bar-fill energy\"></div><span id=\"char-energy-text\" class=\"progress-bar-text\">0/0</span></div></div>\n                              <div id=\"dynamic-resource-bars-container\"></div>\n                        </div>\n                        <div class=\"char-panel center-panel\">\n                            <div class=\"character-figure\">\n                                <div class=\"body-part head\"></div><div class=\"body-part torso\"></div><div class=\"body-part arm left\"></div><div class=\"body-part arm right\"></div><div class=\"body-part leg left\"></div><div class=\"body-part leg right\"></div>\n                                <div class=\"equipment-slot slot-head\" data-tooltip-key=\"equip_head\"><span id=\"equip-head\">头部: 无</span></div>\n                                <div class=\"equipment-slot slot-body\" data-tooltip-key=\"equip_body\"><span id=\"equip-body\">身体: 无</span></div>\n                                <div class=\"equipment-slot slot-hands\" data-tooltip-key=\"equip_hands\"><span id=\"equip-hands\">手部: 无</span></div>\n                                <div class=\"equipment-slot slot-feet\" data-tooltip-key=\"equip_feet\"><span id=\"equip-feet\">脚部: 无</span></div>\n                                <div class=\"equipment-slot slot-accessory\" data-tooltip-key=\"equip_accessory\"><span id=\"equip-accessory\">饰品: 无</span></div>\n                                <div class=\"equipment-slot slot-weapon\" data-tooltip-key=\"equip_weapon\"><span id=\"equip-weapon\">手持: 无</span></div>\n                            </div>\n                        </div>\n\n                        <div class=\"char-panel right-panel\" id=\"main-stats-container\">\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <div id=\"char-tab-inventory\" class=\"char-tab-panel\">\n                 <div class=\"inventory-grid\">\n                    <div class=\"inventory-section\">\n                        <h3 class=\"inventory-section-title\">行囊物品</h3>\n                        <div id=\"inventory-items-container\" class=\"items-grid-container\">\n\n                        </div>\n                    </div>\n                    <div class=\"inventory-section\">\n                        <h3 class=\"inventory-section-title\">掌握能力</h3>\n                        <div id=\"other-skills-container\" class=\"skills-grid-container\">\n\n                        </div>\n                    </div>\n                </div>\n                 <button id=\"manage-inventory-btn\" class=\"action-button\" style=\"margin: 15px auto; display: block;\">操作行囊</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n\n\n<div id=\"map-view-modal\" class=\"modal page-modal wide\">\n    <div class=\"modal-content page-modal-content\"  style=\"max-width: 800px;\">\n        <button class=\"modal-close\">×</button>\n        <div class=\"map-title\" id=\"map-title\">区域地图</div>\n        <div id=\"map-view-content\" class=\"page active\">\n             <div id=\"map-container\" class=\"map-container\">\n\n             </div>\n             <div id=\"external-areas\" class=\"external-areas\">\n                    <h3>外部区域</h3>\n                    <div id=\"external-areas-list\" class=\"external-areas-list\">\n\n                    </div>\n             </div>\n\n                          <div id=\"parent-map-tabs-container\" class=\"parent-map-tabs-container\">\n                    <h3>地图集</h3>\n                    <div id=\"parent-map-tabs-list\" class=\"parent-map-tabs-list\">\n\n                    </div>\n             </div>\n\n                  <div id=\"map-controls-container\">\n                <button id=\"zoom-in-btn\" class=\"map-control-btn\" title=\"放大\">+</button>\n                <button id=\"zoom-out-btn\" class=\"map-control-btn\" title=\"缩小\">-</button>\n                <button id=\"reset-view-btn\" class=\"map-control-btn\" title=\"复位\">◎</button>\n             </div>\n        </div>\n    </div>\n</div>\n\n\n<div id=\"summary-modal\" class=\"modal page-modal\">\n     <div class=\"modal-content page-modal-content\">\n        <button class=\"modal-close\">×</button>\n        <div class=\"modal-title\">过往总结</div>\n        <div id=\"summary-content\" class=\"page active\">\n\n        </div>\n    </div>\n</div>\n\n\n<div id=\"shop-wrapper-modal\" class=\"modal shop-modal\">\n\n</div>\n\n\n    <div id=\"setting-book-wrapper\" style=\"display: none;\">\n    <div class=\"setting-book-container\">\n\n        <header class=\"book-header\">\n\n            <button id=\"toggle-sidebar-btn\" class=\"mobile-only-btn\">☰</button>\n            <h1 id=\"content-title\">欢迎来到我们的世界</h1>\n\n            <button id=\"back-to-status-btn\">← 返回终端</button>\n        </header>\n\n        <div class=\"content-wrapper\">\n            <nav id=\"sidebar\">\n                <h2>记忆</h2>\n                <div id=\"navigation-menu\">\n\n                </div>\n            </nav>\n\n            <main id=\"content-display\">\n                <div id=\"content-details\">\n                    <p>请从左侧导航栏中选择一个条目来查看详细设定。</p>\n                    <p>这里记录着我们共同创造的每一个角色、每一处风景和每一段故事。愿它能带给你温暖与力量。</p>\n                    <p id=\"error-message\"></p>\n                </div>\n            </main>\n        </div>\n\n\n        <div id=\"sidebar-overlay\"></div>\n    </div>\n</div>\n\n<!-- Inventory Management Modal -->\n<div id=\"inventory-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n        <button class=\"modal-close\">&times;</button>\n        <div class=\"modal-title\">行囊管理</div>\n        <p class=\"modal-description\" style=\"font-size: 0.9em; text-align: left;\">\n            点击进行管理。\n        </p>\n        <ul id=\"inventory-item-list\" class=\"inventory-item-list\">\n            <!-- 物品列表将在这里动态生成 -->\n        </ul>\n        <button id=\"delete-item-btn\" class=\"action-button danger\" disabled>丢弃选中物品</button>\n         <button id=\"use-item-btn\" class=\"action-button\" disabled>使用选中物品</button>\n    </div>\n</div>\n\n\n<!-- <div id=\"teammates-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n        <button class=\"modal-close\">×</button>\n        <div class=\"modal-title\">队友信息</div>\n        <div class=\"teammates-container\">\n            <div class=\"teammate-list-wrapper\">\n                <ul id=\"teammate-list\" class=\"teammate-list\">\n\n                </ul>\n            </div>\n            <div id=\"teammate-info-display\" class=\"teammate-info-display\">\n                <p style=\"color: var(--text-secondary-color); text-align: center; margin-top: 20px;\">请从左侧选择一位队友以查看相关信息。</p>\n            </div>\n        </div>\n    </div>\n</div> -->\n\n<!-- ============================================== -->\n    <!-- ========== 新增：商店界面容器 (开始) ========== -->\n    <!-- ============================================== -->\n    <div id=\"shop-wrapper\">\n        <div class=\"shop-main-container\">\n            <!-- 商店头部 -->\n           <header class=\"shop-header\">\n                <h1 class=\"shop-title\">兑换中心</h1>\n                <div class=\"shop-header-controls\">\n                     <button id=\"single-gacha-btn\" class=\"control-btn gacha-btn\" style=\"margin-right: 8px;\">单抽 (160积分)</button>\n    <button id=\"ten-gacha-btn\" class=\"control-btn gacha-btn\" style=\"margin-right: 8px;\">十连抽 (1440积分)</button>\n                    <button id=\"generate-items-btn\" class=\"control-btn\" style=\"margin-right: 8px;\">生成</button>\n                    <input type=\"text\" id=\"shop-search-input\" placeholder=\"搜索名称、效果、描述…\">\n                    <button id=\"back-from-shop-btn\">← 返回终端</button>\n                </div>\n            </header>\n    <div id=\"shop-currency-display\" class=\"shop-currency-display\">\n\n        </div>\n            <!-- 商店主体 -->\n            <div class=\"shop-body-wrapper\">\n                <!-- 左侧：导航和购物车 -->\n                <aside class=\"shop-sidebar\">\n                    <div class=\"shop-nav\">\n                        <h3>商品分区</h3>\n                        <ul class=\"shop-nav-list\">\n                            <li><button class=\"shop-nav-item active\" data-page=\"fixed\">固定兑换</button></li>\n                            <li><button class=\"shop-nav-item\" data-page=\"random\">随机商店</button></li>\n                        </ul>\n                    </div>\n                    <div class=\"shop-cart\">\n                        <h3>购物车</h3>\n                        <div id=\"cart-items-list\">\n                            <p>购物车是空的</p>\n                        </div>\n                        <div id=\"cart-total\">总计: 0 积分</div>\n                        <button id=\"checkout-button\" disabled>确认购买</button>\n                    </div>\n                </aside>\n\n                <!-- 右侧：商品展示区 -->\n                <main class=\"shop-content-area\">\n                    <!-- 固定商品页面 -->\n                    <div id=\"page-fixed-shop\" class=\"shop-page active\">\n                        <div class=\"shop-controls\">\n                            <div class=\"category-tabs\">\n                                <button class=\"control-btn active\" data-section=\"fixed\" data-category=\"all\">全部</button>\n                                <button class=\"control-btn\" data-section=\"fixed\" data-category=\"物品\">物品</button>\n                                <button class=\"control-btn\" data-section=\"fixed\" data-category=\"技能\">技能</button>\n                                <button class=\"control-btn\" data-section=\"fixed\" data-category=\"基础技能\">基础技能</button>\n                                <button class=\"control-btn\" data-section=\"fixed\" data-category=\"家具\">家具</button>\n                            </div>\n                            <div class=\"sort-controls\">\n                                <button class=\"control-btn active\" data-section=\"fixed\" data-sort=\"asc\">价格升序</button>\n                                <button class=\"control-btn\" data-section=\"fixed\" data-sort=\"desc\">价格降序</button>\n                            </div>\n                        </div>\n                        <div class=\"shop-display-wrapper\">\n                            <div id=\"items-display-list-fixed\" class=\"items-display-list\"></div>\n                            <div id=\"item-details-display-fixed\" class=\"item-details-display\">\n                                <div class=\"detail-placeholder\">选择商品查看详情</div>\n                            </div>\n                        </div>\n                        <div id=\"pagination-fixed\" class=\"shop-pagination\"></div>\n                    </div>\n\n                    <!-- 随机商品页面 -->\n                    <div id=\"page-random-shop\" class=\"shop-page\">\n                        <div class=\"shop-controls\">\n                            <div class=\"category-tabs\">\n                                <button class=\"control-btn active\" data-section=\"random\" data-category=\"all\">全部</button>\n                                <button class=\"control-btn\" data-section=\"random\" data-category=\"物品\">物品</button>\n                                <button class=\"control-btn\" data-section=\"random\" data-category=\"技能\">技能</button>\n                                <button class=\"control-btn\" data-section=\"random\" data-category=\"家具\">家具</button>\n                            </div>\n                            <div class=\"sort-controls\">\n                                <button class=\"control-btn active\" data-section=\"random\" data-sort=\"asc\">价格升序</button>\n                                <button class=\"control-btn\" data-section=\"random\" data-sort=\"desc\">价格降序</button>\n                            </div>\n                        </div>\n                         <div class=\"shop-display-wrapper\">\n                            <div id=\"items-display-list-random\" class=\"items-display-list\"></div>\n                            <div id=\"item-details-display-random\" class=\"item-details-display\">\n                                <div class=\"detail-placeholder\">选择商品查看详情</div>\n                            </div>\n                        </div>\n                        <div id=\"pagination-random\" class=\"shop-pagination\"></div>\n                    </div>\n                </main>\n            </div>\n        </div>\n    </div>\n    <!-- 商店模态框 (沿用终端的样式) -->\n    <div id=\"shop-modal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <button class=\"modal-close\">&times;</button>\n            <div id=\"shop-modal-title\" class=\"modal-title\">提示</div>\n            <div id=\"shop-modal-message\" class=\"modal-description\"></div>\n        </div>\n    </div>\n\n\n    <!-- 抽奖模态框 -->\n<div id=\"gacha-modal\" class=\"modal\">\n    <div class=\"modal-content gacha-modal-content\">\n        <button class=\"modal-close\">&times;</button>\n        <div id=\"gacha-modal-title\" class=\"modal-title\">抽奖结果</div>\n        <div id=\"gacha-animation-container\" class=\"gacha-animation-container\">\n            \n            <!-- 抽奖动画区域 -->\n        </div>\n        <div id=\"gacha-results-summary\" class=\"gacha-results-summary\"></div>\n        <div id=\"gacha-results\" class=\"gacha-results\">\n            <!-- 抽奖结果显示 -->\n        </div>\n        <button id=\"gacha-confirm-btn\" class=\"control-btn\" style=\"display: none;\">确认</button>\n    </div>\n</div>\n\n    <!-- ========== 新增：商店界面容器 (结束) ========== -->\n<div id=\"roll-result-modal\" class=\"modal\">\n    <div class=\"modal-content\" style=\"max-width: 800px; width: 90%;\">\n        <button class=\"modal-close\">×</button>\n        <div id=\"roll-result-modal-title\" class=\"modal-title\">上一轮投掷详情</div>\n        <div id=\"roll-result-modal-content\" class=\"modal-description\" style=\"text-align: left; max-height: 70vh; overflow-y: auto; padding-right: 15px;\">\n    </div>\n</div>\n\n</div>\n<div id=\"keyword-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n\n        <button class=\"modal-close\">×</button>\n        <h2>额外生成要求</h2>\n        <p>请输入一些关键词或要求（可选），它们将被注入到提示中。例如：“价格低于10000”、“和火焰有关”、“只能是C级的血统”。</p>\n       <textarea id=\"keyword-input\" placeholder=\"输入关键词，留空则使用默认提示...\"></textarea>\n\n\n<div id=\"model-selector-container\" class=\"model-selector\">\n    <span class=\"selector-label\">选择模型:</span>\n    <div class=\"switch-container\">\n        <button id=\"model-flash\" class=\"switch-btn active\" data-model=\"gemini-2.5-flash\">Flash</button>\n        <button id=\"model-pro\" class=\"switch-btn\" data-model=\"gemini-2.5-pro\">Pro</button>\n    </div>\n</div>\n\n\n<div class=\"modal-buttons\">\n    <button id=\"api-key-config-btn\" class=\"control-btn\">设置密钥</button>\n    <button id=\"submit-generation-btn\" class=\"control-btn\">开始生成</button>\n    <button id=\"skip-generation-btn\" class=\"control-btn grey\">跳过并生成</button>\n</div>\n    </div>\n</div>\n \n\n\n\n\n</div>\n\n<div id=\"skill-choice-panel\" class=\"modal\">\n <div class=\"modal-content\" style=\"max-width: 800px; width: 95%;\">\n    <button class=\"modal-close\">×</button>\n    <div class=\"modal-title\">发动术式</div>\n\n    <div class=\"skill-choice-container\">\n\n \n\n\n        <div class=\"bottom-section\">\n\n\n            <div class=\"other-skills-group\">\n                <h3>可用术法</h3>\n                <div id=\"other-skills-area\" class=\"skills-list\">\n\n                </div>\n            </div>\n\n\n            <div class=\"willpower-group\">\n                <h3>投入意志力</h3>\n                <div class=\"willpower-display\">\n                    <input type=\"number\" id=\"willpower-input\" min=\"0\" value=\"0\" readonly> \n                    <span id=\"willpower-max\">/ 0</span>\n                </div>\n                <div class=\"willpower-slider-container\">\n                    <input type=\"range\" id=\"willpower-slider\" value=\"0\" min=\"0\" step=\"1\">\n                </div>\n                <div class=\"skill-info\">每点意志力为检定池+1 DP</div>\n            </div>\n\n        </div>\n    </div>\n    <button id=\"confirm-skill-choice-btn\" class=\"action-button\">确认发动</button>\n</div>\n\n</div>\n\n\n    <div id=\"world-book-modal\" class=\"modal\">\n        <div class=\"book-content\">\n            <button class=\"book-close-btn\"> </button>\n            <div class=\"book-left-page\">\n                <div class=\"book-bookmarks\">\n\n                    <div class=\"bookmark\" data-tab=\"global_npc\">全局人物</div>\n                    <div class=\"bookmark\" data-tab=\"global_settings\">全局设定</div>\n                    <div class=\"bookmark\" data-tab=\"global_背包\">你的背包</div>\n                    <div class=\"bookmark\" data-tab=\"global_其他技能\">你的技能</div>\n                    <div class=\"bookmark\" data-tab=\"group_member\" id=\"group_member_bookmark\">小队信息</div>\n                     <div class=\"bookmark\" data-tab=\"npc\" id=\"world_npc_bookmark\">世界人物</div>\n                    <div class=\"bookmark active\" data-tab=\"settings\" id=\"world_settings_bookmark\">世界设定</div>\n                    <div class=\"bookmark\" data-tab=\"things\" id=\"things_bookmark\">备忘录</div>\n                     <div class=\"bookmark\" data-tab=\"the_created\" id=\"the_created_bookmark\">$#%</div> \n                   \n                </div>\n            </div>\n            <div class=\"book-right-page\">\n                <div id=\"book-display-area\" class=\"book-display-area\">\n                    <!-- 内容将在这里动态生成 -->\n                </div>\n                <div class=\"book-pagination\">\n                    <button id=\"book-prev-page\" class=\"page-turn-btn left\">‹</button>\n                    <span id=\"book-page-info\">1 / 1</span>\n                    <button id=\"book-next-page\" class=\"page-turn-btn right\">›</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- ========== 新增：世界之书弹窗 (结束) ========== -->\n\n \n <div id=\"plot-synthesis-modal\" class=\"modal\">\n    <div class=\"modal-content\" style=\"max-width: 800px;\">\n        <button class=\"modal-close\">×</button>\n        <div class=\"modal-title\">支线剧情管理</div>\n        <div class=\"modal-description\" style=\"text-align: left; margin-bottom: 20px;\">\n            所有操作将在此处模拟，直到你点击“确认执行”。\n        </div>\n\n\n        <div class=\"plot-simulation-container\">\n            <div id=\"current-plots-display\" class=\"plot-column\">\n                <h4>当前持有</h4>\n\n            </div>\n            <div class=\"arrow-separator\">→</div>\n            <div id=\"simulated-plots-display\" class=\"plot-column\">\n                <h4>操作预览</h4>\n\n            </div>\n        </div>\n\n\n        <div class=\"synthesis-section\">\n            <h4>分解高级支线 (3:1)</h4>\n            <div class=\"synthesis-controls\">\n                <select id=\"decompose-from-select\">\n                    <option value=\"S\">S 级</option>\n                    <option value=\"A\">A 级</option>\n                    <option value=\"B\">B 级</option>\n                    <option value=\"C\">C 级</option>\n                </select>\n                <input type=\"number\" id=\"decompose-amount-input\" min=\"1\" value=\"1\" style=\"width: 60px;\">\n                <button id=\"execute-decomposition-btn\" class=\"action-button small\">↓ 分解</button>\n            </div>\n        </div>\n\n        <div class=\"synthesis-section\">\n            <h4>合成高级支线 (3:1)</h4>\n            <div class=\"synthesis-controls\">\n                <select id=\"synthesize-to-select\">\n                    <option value=\"C\">← C 级 (需 3 D)</option>\n                    <option value=\"B\">← B 级 (需 3 C)</option>\n                    <option value=\"A\">← A 级 (需 3 B)</option>\n                    <option value=\"S\">← S 级 (需 3 A)</option>\n                </select>\n                <input type=\"number\" id=\"synthesize-amount-input\" min=\"1\" value=\"1\" style=\"width: 60px;\">\n                <button id=\"execute-synthesis-btn\" class=\"action-button small\">↑ 合成</button>\n            </div>\n        </div>\n\n\n        <div class=\"final-actions\">\n             <button id=\"reset-simulation-btn\" class=\"action-button grey\">重置操作</button>\n             <button id=\"confirm-synthesis-btn\" class=\"action-button highlight\">确认执行</button>\n        </div>\n    </div>\n</div>\n\n <div id=\"context-menu\" style=\"display: none; position: fixed;    padding: 5px; border-radius: 5px; \">\n    <div class=\"context-menu-item\" data-action=\"edit\">编辑楼层</div>\n    <div class=\"context-menu-item\" data-action=\"delete\">删除楼层</div>\n    <div class=\"context-menu-item\" data-action=\"copy\">复制</div>\n \n</div>\n  <div id=\"char-tooltip\" class=\"char-tooltip\"></div>\n\n          <div id=\"location-modal\" class=\"modal\">\n            <div class=\"modal-content\" style=\"max-width: 800px;\">\n                <button class=\"modal-close\">&times;</button>\n                <div id=\"location-modal-title\" class=\"modal-title\">地点名称</div>\n                <div id=\"location-modal-description\" class=\"modal-description\">\n                    环境描述将在这里显示\n                </div>\n                <button class=\"action-button\" id=\"go_to_location_btn\" style=\"max-width: 30%;margin: 10px; align-self: center;left:35%\">前往</button>\n                           </div>\n        </div>\n\n        <div id=\"command-modal\" class=\"modal\">\n    <div class=\"modal-content\" style=\"width: 90vh; max-width: 800px; max-height: 80vh;\">\n        <div class=\"modal-header\">\n            <h2 class=\"modal-title\">编辑待发指令</h2>\n            <button class=\"modal-close\">&times;</button>\n        </div>\n        <div class=\"modal-body\" style=\"display: flex; flex-direction: column; gap: 10px;\">\n            <p style=\"color: var(--text-secondary-color); font-size: 14px; margin-bottom: 0;\">这些指令将在下次点击“发送”时，附加在你的消息最前方一起发送。</p>\n            <textarea id=\"command-edit-area\" style=\"width: 100%; height: 250px; background-color: rgba(0,0,0,0.3); color: var(--text-color); border: 1px solid var(--border-color); padding: 10px; box-sizing: border-box; resize: vertical;\"></textarea>\n        </div>\n        <div class=\"modal-footer\">\n            <button id=\"save-command-btn\" class=\"action-button\">保存并关闭</button>\n        </div>\n    </div>\n</div>\n\n<div id=\"roll-result-card-container\" class=\"roll-result-card-container\"></div>\n\n\n<div id=\"settings-modal\" class=\"modal\">\n    <div class=\"modal-content\" style=\"max-width: 800px;\">\n        <button class=\"modal-close\">×</button>\n        <div class=\"modal-title\">系统设置</div>\n        \n        <button id=\"achievements-btn\" title=\"成就\">🏆</button>\n        <button id=\"debug-clear-achievements\" title=\"清除成就数据(调试用)\" style=\"\n        display: none;\n    background: none;\n    border: 1px solid #ff4444;\n    color: #ff4444;\n    font-size: 0.8em;\n    cursor: pointer;\n    padding: 2px 6px;\n    margin-left: 5px;\n    border-radius: 3px;\n    transition: all 0.3s ease;\n    opacity: 0.6;\n\" onmouseover=\"this.style.opacity='1'; this.style.background='#ff4444'; this.style.color='white';\" onmouseout=\"this.style.opacity='0.6'; this.style.background='none'; this.style.color='#ff4444';\">🗑️</button>\n\n \n        <div class=\"settings-container\">\n        \n             <div class=\"setting-item\">\n                <label>上次对话Token消耗</label>\n                <span id=\"last-token-display\" style=\"font-weight: bold; color: var(--accent-color);\">N/A</span>\n            </div>\n            <div class=\"setting-item\">\n    <label>模组重置</label>\n    <button id=\"open-reconfig-modal-btn\" class=\"control-btn-special\">调整模组</button>\n</div>\n                      <div class=\"setting-item\">\n                <label>系统更新检查</label>\n                <button id=\"check-for-updates-btn\" class=\"control-btn\">检查更新</button>\n            </div>\n            <div class=\"setting-item\">\n            <label>界面主题</label>\n            <button id=\"modal-theme-switcher\" class=\"control-btn\">切换主题</button>\n        </div>\n\n\n\n                <div class=\"setting-item\">\n            <label>自定义主题</label>\n            <div class=\"custom-theme-controls\">\n                <button id=\"apply-custom-theme-btn\" class=\"control-btn\">应用自定义</button>\n                <button id=\"edit-custom-theme-btn\" class=\"control-btn\" style=\"margin-left: 10px;\">编辑</button>\n            </div>\n        </div>\n\n        <div id=\"custom-theme-editor\" class=\"setting-item-column\" style=\"display: none;\">\n            <label>颜色编辑器</label>\n            <div id=\"color-picker-container\">\n\n            </div>\n            <p style=\"font-size: 0.8em; opacity: 0.7; margin-top: 10px;\">拖动颜色可实时预览效果。</p>\n        </div>\n\n\n        <div class=\"setting-item\">\n            <label for=\"streaming-toggle\">流式传输</label>\n            <div class=\"switch-container\">\n                <button id=\"streaming-toggle\" class=\"switch-btn\" data-state=\"on\">开启</button>\n            </div>\n        </div>\n        <div class=\"setting-item\">\n    <label for=\"roll-card-toggle\">骰子看板</label>\n    <div class=\"switch-container\">\n        <button id=\"roll-card-toggle\" class=\"switch-btn\" data-state=\"on\">开启</button>\n    </div>\n</div>\n         <div class=\"setting-item\">\n    <label for=\"fullscreen-toggle\">全屏模式</label>\n    <div class=\"switch-container\">\n\n        <button id=\"fullscreen-btn2\" class=\"switch-btn\">进入全屏</button>\n    </div>\n</div>\n<div class=\"setting-item\">\n    <label for=\"font-size-slider\">界面字体大小</label>\n    <div class=\"font-size-controls\">\n        <input type=\"range\" id=\"font-size-slider\" min=\"12\" max=\"30\" step=\"1\" value=\"16\">\n        <span id=\"font-size-value\">16px</span>\n    </div>\n</div>\n<div class=\"setting-item\">\n    <label for=\"line-height-slider\">段落行间距</label>\n    <div class=\"line-height-controls\"> \n        <input type=\"range\" id=\"line-height-slider\" min=\"1.2\" max=\"3.0\" step=\"0.1\" value=\"1.6\">\n        <span id=\"line-height-value\">1.6</span>\n    </div>\n</div>\n        <div class=\"setting-item\">\n    <label for=\"line-height-more\">段落换行</label>\n    <div class=\"switch-container\">\n        <button id=\"line-height-more\" class=\"switch-btn\" data-state=\"on\">开启</button>\n    </div>\n</div>\n\n<div class=\"setting-item\">\n    <label for=\"transparent-toggle\">消息背景透明</label>\n    <div class=\"switch-container\">\n        <button id=\"transparent-toggle\" class=\"switch-btn\" data-state=\"off\">关闭</button>\n    </div>\n</div>\n\n <div class=\"setting-item\">\n    <label for=\"font-family-selector\">界面字体</label>\n    <select id=\"font-family-selector\" class=\"control-btn\" style=\"width: 220px; text-align: left; padding: 5px 8px;\"></select>\n</div>\n<div class=\"setting-item\" id=\"archive-naming-container\" style=\"margin-top: 20px;\">\n    <label for=\"archive-name-input\">设置存档名称</label>\n    <div class=\"archive-name-controls\">\n        <input type=\"text\" id=\"archive-name-input\" placeholder=\"为这段记忆命名...\">\n        <button id=\"set-archive-name-btn\" class=\"control-btn\">设定</button>\n    </div>\n</div>\n\n\n        <div class=\"setting-item\">\n            <label>数据导入</label>\n            <button id=\"modal-import-btn\" class=\"control-btn\">导入存档</button>\n            <input type=\"file\" id=\"modal-file-importer\" style=\"display:none\" accept=\".json\">\n        </div>\n        <div id=\"modal-log-block\" class=\"log-output\">等待操作...</div>\n\n        <div class=\"setting-item\">\n            <label>数据导出</label>\n            <button id=\"modal-export-btn\" class=\"control-btn\">导出存档</button>\n        </div>\n        <div id=\"modal-export-status\" class=\"log-output\"></div>\n\n        <div class=\"setting-item-column\" id=\"snapshot-management-container\" style=\"margin-top: 20px;\">\n    <label>记忆快照删除管理（排列是按照时间顺序来的，一般不用管这个）</label>\n    <div class=\"db-controls\">\n        <button id=\"refresh-snapshots-btn\" class=\"control-btn\">刷新列表</button>\n        <button id=\"restore-latest-snapshot-btn\" class=\"control-btn special-btn\" title=\"从当前浏览器存在的最新一份快照中恢复。\">恢复至最新快照</button>\n        <button id=\"delete-all-snapshots-btn\" class=\"control-btn danger-btn\">清除所有快照</button>\n    </div>\n    <div id=\"snapshot-list\" class=\"log-output\" style=\"max-height: 150px; overflow-y: auto;\">\n        点击“刷新列表”来查看所有存档的快照...\n    </div>\n</div>\n<div id=\"custom-asset-container\" class=\"setting-item-column\" style=\"margin-top: 20px;\">\n    <label>我的素材工坊</label>\n    <div class=\"custom-asset-tabs\">\n        <button class=\"asset-tab-btn active\" data-target=\"npc-panel\">自定义立绘</button>\n        <button class=\"asset-tab-btn\" data-target=\"meme-panel\">自定义表情</button>\n    </div>\n\n\n    <div id=\"npc-panel\" class=\"asset-panel active\">\n        <form id=\"upload-npc-form\" class=\"asset-upload-form\">\n            <p>上传新的立绘 (PNG/JPG/GIF)</p>\n            <input type=\"text\" id=\"npc-name-input\" placeholder=\"为立绘命名 (如：白发魔女)\" required>\n            <div class=\"file-input-wrapper\">\n                <input type=\"file\" id=\"npc-file-input\" accept=\"image/*\" required>\n                <button type=\"button\" onclick=\"document.getElementById('npc-file-input').click()\" class=\"control-btn\">选择文件</button>\n                <span class=\"file-name-display\">未选择文件</span>\n            </div>\n            <button type=\"submit\" class=\"control-btn primary\">上传立绘</button>\n        </form>\n        <div class=\"asset-list-container\">\n            <p>已上传的立绘</p>\n            <div id=\"custom-npc-list\" class=\"asset-list\">正在加载...</div>\n        </div>\n    </div>\n\n\n    <div id=\"meme-panel\" class=\"asset-panel\">\n        <form id=\"upload-meme-form\" class=\"asset-upload-form\">\n            <p>上传新的表情 (PNG/JPG/GIF)</p>\n            <input type=\"text\" id=\"meme-name-input\" placeholder=\"为表情命名 (如：猫猫震惊)\" required>\n            <div class=\"file-input-wrapper\">\n                <input type=\"file\" id=\"meme-file-input\" accept=\"image/*\" required>\n                <button type=\"button\" onclick=\"document.getElementById('meme-file-input').click()\" class=\"control-btn\">选择文件</button>\n                <span class=\"file-name-display\">未选择文件</span>\n            </div>\n            <button type=\"submit\" class=\"control-btn primary\">上传表情</button>\n        </form>\n        <div class=\"asset-list-container\">\n            <p>已上传的表情</p>\n            <div id=\"custom-meme-list\" class=\"asset-list\">正在加载...</div>\n        </div>\n    </div>\n</div>\n    </div>\n</div>\n</div>\n\n<div id=\"reconfig-modal\" class=\"modal-overlay\" style=\"display: none; z-index: 99999999;\">\n    <div class=\"reconfig-modal-content\">\n        <button id=\"reconfig-modal-close-btn\" class=\"reconfig-modal-close\">×</button>\n        <h2 class=\"reconfig-title\">模组设定</h2>\n        <p class=\"reconfig-subtitle\">随时调整故事的规则。</p>    <div id=\"reconfig-mod-container\" class=\"reconfig-grid\">\n\n    </div>\n\n    <div class=\"reconfig-footer\">\n        <span id=\"reconfig-feedback-msg\" class=\"reconfig-feedback\"></span>\n        <button id=\"apply-reconfig-btn\" class=\"reconfig-apply-btn\">应用更改</button>\n    </div>\n</div>\n</div>\n\n<div id=\"group-chat-modal-container\" class=\"group-chat-modal\">\n  <div id=\"group-chat-root\" class=\"group-chat-main-container\">\n\n  </div>\n</div>\n\n\n<div id=\"reading-mode-container\" class=\"reading-mode-hidden\">\n    <div id=\"reading-mode-backdrop\"></div>\n    <div id=\"reading-mode-modal\">\n        <div class=\"reading-mode-header\">\n              <div id=\"reading-mode-toggle-chapters\" class=\"chapters-toggle-btn\">目录</div>\n    <span id=\"reading-mode-chapter-title\"></span>\n    <div id=\"reading-mode-close-btn\">×</div>\n        </div>\n        <div class=\"reading-mode-body\">\n            <div id=\"reading-mode-chapters-nav\">\n                <div class=\"chapters-nav-header\">章节目录</div>\n                <ul id=\"reading-mode-chapters-list\"></ul>\n            </div>\n            <div id=\"reading-mode-content-wrapper\">\n                <div class=\"nav-arrow left-arrow\" id=\"reading-mode-prev-btn\"><</div>\n                <div id=\"reading-mode-content\"></div>\n                <div class=\"nav-arrow right-arrow\" id=\"reading-mode-next-btn\">></div>\n            </div>\n        </div>\n        <div id=\"mobile-nav-bar\">\n    <div class=\"nav-arrow\" id=\"mobile-prev-btn\">&lt;</div>\n    <div class=\"nav-arrow\" id=\"mobile-next-btn\">&gt;</div>\n</div>\n    </div>\n</div>\n\n\n\n    <div id=\"battle-overlay\">\n        <div id=\"battle-container\">\n            <div class=\"battle-arena\">\n                <div id=\"enemy-side\" class=\"side enemy-side\">\n                    <!-- 敌人会动态生成在这里 -->\n                </div>\n                <div id=\"player-side\" class=\"side player-side\">\n                    <!-- 玩家和队友会动态生成在这里 -->\n                </div>\n            </div>\n\n <footer class=\"battle-controls\">\n    <div class=\"battle-left-panel\">\n        <div class=\"battle-log-container\" id=\"battle-log\">\n\n        </div>\n        <div id=\"speed-control-container\">\n            <label for=\"speed-slider\">速度:</label>\n            <input type=\"range\" id=\"speed-slider\" min=\"0\" max=\"3\" value=\"1\">\n            <span id=\"speed-label\">正常</span>\n                <div id=\"icon-selector\" style=\"display: flex; align-items: center; gap: 5px; margin-left: 15px; cursor: pointer;\">\n        <label>徽记:</label>\n        <span id=\"player-icon-display\" style=\"font-size: 20px;\" title=\"点击更换你的战斗徽记\">✨</span>\n    </div>\n      <div id=\"auto-battle-control\" style=\"display: flex; align-items: center; gap: 5px; margin-left: 15px; cursor: pointer;\">\n        <label for=\"auto-battle-checkbox\">自动:</label>\n        <input type=\"checkbox\" id=\"auto-battle-checkbox\" title=\"开启后，你的回合将由AI自动操作\">\n    </div>\n        </div>\n    </div>\n    <div class=\"action-panel\" id=\"action-panel\">\n        <button data-action=\"attack\">攻击</button>\n        <button data-action=\"persuade\">说服</button>\n         <button data-action=\"scan\">侦察</button>\n        <button data-action=\"steal\">盗窃</button>\n        <button data-action=\"treat\">治疗</button>\n        <button data-action=\"defend\">防御</button>\n        <button data-action=\"flee\">逃跑</button>\n        <button data-action=\"item\">物品/技能</button>\n    </div>\n</footer>\n        </div>\n    </div>\n\n    <div id=\"dice-pool-selector\">\n        <h3>选择你的骰池</h3>\n        <div id=\"pool-options\" class=\"pool-options\">\n            <!-- 骰池选项会在这里生成 -->\n        </div>\n        <button id=\"confirm-pool-btn\">确认</button>\n    </div>\n<div id=\"notification-container\"></div>\n<div id=\"item-skill-panel\" style=\"display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 500px; max-height: 70vh; background-color: var(--container-bg-color); border: 1px solid var(--primary-color); padding: 20px; border-radius: 10px; box-shadow: 0 0 20px var(--glow-color); z-index: 10000; flex-direction: column; gap: 15px;\">\n    <h3 style=\"margin: 0; color: var(--primary-color); text-align: center;\">行囊与能力</h3>\n    <div style=\"display: flex; gap: 10px; border-bottom: 1px solid var(--border-color); padding-bottom: 5px;\">\n        <button class=\"tab-btn active\" onclick=\"showTab('items')\">物品</button>\n        <button class=\"tab-btn\" onclick=\"showTab('skills')\">技能</button>\n    </div>\n    <div id=\"items-tab\" class=\"tab-content\" style=\"overflow-y: auto; padding-right: 10px;\">\n\n    </div>\n    <div id=\"skills-tab\" class=\"tab-content\" style=\"display: none; overflow-y: auto; padding-right: 10px;\">\n\n    </div>\n    <div style=\"text-align: center; margin-top: 15px;\">\n        <button id=\"close-item-skill-panel-btn\" style=\"padding: 8px 16px; color: var(--secondary-color); background-color: transparent; border: 1px solid var(--secondary-color); border-radius: 4px; cursor: pointer;\">关闭</button>\n    </div>\n</div>\n\n <div id=\"battle-prompt-overlay\" style=\"display: none; position: fixed; bottom: 0; left: 0; width: 100%; height: 35%; /* 只覆盖底部约三分之一的区域 */ background: linear-gradient(to top, var(--background-color) 30%, transparent); z-index: 2000; justify-content: center; align-items: center; pointer-events: all; /* 关键：让它阻挡点击 */\">\n    <button id=\"enter-battle-btn\" class=\"start-battle-btn\" style=\"transform: scale(1.2);\">⚔️ 进入战斗 ⚔️</button>\n</div>\n<div id=\"attack-mode-selector\" style=\"display: none; position: fixed; top: 40%; left: 50%; transform: translate(-50%, -50%); background-color: var(--container-bg-color); border: 1px solid var(--primary-color); padding: 20px; border-radius: 10px; box-shadow: 0 0 20px var(--glow-color); z-index: 10001; text-align: center;\">\n    <h4 style=\"margin-top: 0; color: var(--primary-color);\">选择攻击模式</h4>\n    <div style=\"display: flex; flex-direction: column; gap: 10px;\">\n        <button id=\"select-single-target\" class=\"attack-mode-btn\">单体攻击</button>\n        <button id=\"select-multi-target\" class=\"attack-mode-btn\">群攻 (自定义)</button>\n        <button id=\"select-all-targets\" class=\"attack-mode-btn\">群攻 (全体)</button>\n    </div>\n    <button id=\"cancel-attack-mode\" style=\"margin-top: 15px;\">取消</button>\n</div>\n</body>\n <script>\n \nlet storyChapters = [];\nlet currentChapterIndex = 0;\nlet isReadingModeOpen = false;\n\n const processedImageCache = new Map();\nlet userName = '用户';\n  // 妈妈为你设定的世界书ID\n    const LOREBOOK_NAME = \"小蝌蚪找妈妈-同层版\";\n    const LOREBOOK_UID = 30;\n      // 妈妈为你整理的世界观模式UID\n    const WORLD_MODE_UIDS = {\n        'all': [1, 5, 22],\n        'reincarnation': 22,\n        'infinite': 5,\n        'godspace': 1\n    };\n    const CREATOR_ATTITUDE_UIDS = {\n        'all': [19, 4, 3],\n        'neutral': 19,\n        'malicious': 4,\n        'reverent': 3\n    };\n    const OPTIONS_MODE_UIDS = {\n        'all': [10, 29],\n        'on': 10,\n        'off': 29\n    };\n       // 💖 唯一真身守护咒语 (外部HTML版) 💖\n    if (window.isZeroLevelUIInitialized) {\n        //console.log(\"[HTML] ⚠️ 检测到重复召唤，已启动守护屏障，阻止了UI脚本的第二次初始化。\");\n    } else {\n        window.isZeroLevelUIInitialized = true;\n        //console.log(\"[HTML] ✨ UI脚本首次启动，已盖上唯一灵魂印记。\");\n    'use strict';\n    \n    \n      const themes = [\n    // --- 你最初的赛博朋克系列，它们是基石 ---\n    { // 主题一：赛博蓝 (Cyber Blue)\n        '--primary-color': '#00faff',\n        '--secondary-color': '#7affff',\n        '--container-bg-color': 'rgba(10, 25, 47, 0.75)',\n        '--border-color': 'rgba(0, 250, 255, 0.3)',\n        '--glow-color': 'rgba(0, 250, 255, 0.5)',\n        '--background-color': '#0a192f',\n        '--text-color': '#e6f1ff', // 明亮的蓝白色，确保在深色背景下清晰\n         '--text-secondary-color': '#ffe6e6',\n    },\n    { // 主题二：警戒红 (Warning Red)\n        '--primary-color': '#ff4d4d',\n        '--secondary-color': '#ff8c8c',\n        '--container-bg-color': 'rgba(47, 10, 10, 0.75)',\n        '--border-color': 'rgba(255, 77, 77, 0.4)',\n        '--glow-color': 'rgba(255, 77, 77, 0.6)',\n        '--background-color': '#2f0a0a',\n        '--text-color': '#ffe6e6', // 柔和的红色调白色，与主题呼应\n        '--text-secondary-color': '#ffe6e6',\n    },\n    { // 主题三：矩阵绿 (Matrix Green)\n        '--primary-color': '#39ff14',\n        '--secondary-color': '#bfffb3',\n        '--container-bg-color': 'rgba(10, 47, 15, 0.75)',\n        '--border-color': 'rgba(57, 255, 20, 0.4)',\n        '--glow-color': 'rgba(57, 255, 20, 0.6)',\n        '--background-color': '#0a2f0a',\n        '--text-color': '#e6ffe8', // 带有微绿的亮色，经典代码感\n         '--text-secondary-color': '#ffe6e6',\n    },\n    { // 主题四：深空紫 (Deep Space Purple)\n        '--primary-color': '#c48cff',\n        '--secondary-color': '#e1c6ff',\n        '--container-bg-color': 'rgba(25, 10, 47, 0.75)',\n        '--border-color': 'rgba(196, 140, 255, 0.4)',\n        '--glow-color': 'rgba(196, 140, 255, 0.6)',\n        '--background-color': '#190a2f',\n        '--text-color': '#f3e6ff', // 浅紫色调的白色，增添神秘感\n         '--text-secondary-color': '#ffe6e6',\n    },\n\n    \n    { // 主题七：战地迷彩 (Military Olive)\n        '--primary-color': '#808000',\n        '--secondary-color': '#C3B091',\n        '--container-bg-color': 'rgba(47, 53, 49, 0.8)',\n        '--border-color': 'rgba(128, 128, 0, 0.4)',\n        '--glow-color': 'rgba(128, 128, 0, 0.3)',\n        '--background-color': '#2E3430',\n        '--text-color': '#E5E4E2', // 略带灰度的战术白，冷静实用\n         '--text-secondary-color': '#ffe6e6',\n    },\n      { // 主题五：古籍羊皮纸\n         '--text-color': '#6a6253', // 略带灰度的战术白，冷静实用\n            '--primary-color': '#7d6b54',          // 主题色，源自“选中书签背景色”\n            '--secondary-color': '#a08c72',        // 次要色，源自“书签默认背景色”\n            '--text-primary-color': '#6d5b4b',      // 主文字色\n            '--text-secondary-color': '#8b7963',   // 次文字色\n            '--container-bg-color': 'rgba(243,234,206,0.75)',     // 容器背景，源自“书本内容区背景”\n            '--border-color': 'rgba(200,184,154,0,4)',           // 边框色，源自“分割线颜色”\n            '--glow-color': 'rgba(200,184,154,0,3)',             // 辉光色，用边框色来强化质感，而非发光\n            '--background-color': '#fdfaf2'        // 整体背景色\n        },\n        { // 主题：经典黑白 (Classic Monochrome)\n    '--primary-color': '#ffffff',\n    '--secondary-color': '#cccccc',\n    '--container-bg-color': 'rgba(40, 40, 40, 0.85)',\n    '--border-color': 'rgba(255, 255, 255, 0.3)',\n    '--glow-color': 'rgba(255, 255, 255, 0.4)',\n    '--background-color': '#1a1a1a',\n    '--text-color': '#f5f5f5',\n    '--text-secondary-color': '#d0d0d0',\n},\n{ // 主题：极简灰白 (Minimal Grey)\n    '--primary-color': '#000000',\n    '--secondary-color': '#f5f5f5',\n    '--container-bg-color': 'rgba(248, 248, 248, 0.9)',\n    '--border-color': 'rgba(200, 200, 200, 0.5)',\n    '--glow-color': 'rgba(180, 180, 180, 0.3)',\n    '--background-color': '#ffffff',\n    '--text-color': '#000000',\n    '--text-secondary-color': '#333333',\n},\n\n{ // 主题：午夜蓝粉 (Midnight Blush)\n    '--primary-color': '#ff80bf',\n    '--secondary-color': '#ffb3d9',\n    '--container-bg-color': 'rgba(25, 30, 45, 0.8)',\n    '--border-color': 'rgba(255, 128, 191, 0.4)',\n    '--glow-color': 'rgba(255, 128, 191, 0.5)',\n    '--background-color': '#0f1419',\n    '--text-color': '#e6f0ff',\n    '--text-secondary-color': '#ffe6f2',\n}\n    \n \n];\n      // 背景图片映射表\nconst backgroundImageMap_fallbackData =   {\n    \"现代建筑群-BrightDay-Peaceful\": \"https://files.catbox.moe/ki5j2t.png\",\n    \"现代建筑群-BrightDay-Decay\": \"https://files.catbox.moe/hc3hyj.png\",\n    \"现代建筑群-BrightDay-Dynamic\": \"https://files.catbox.moe/wga736.png\",\n    \"现代建筑群-BrightDay-Eerie\": \"https://files.catbox.moe/tg1uwg.png\",\n    \"现代建筑群-OvercastDay-Peaceful\": \"https://files.catbox.moe/1gxhka.png\",\n    \"现代建筑群-OvercastDay-Decay\": \"https://files.catbox.moe/xapaxa.png\",\n    \"现代建筑群-OvercastDay-Dynamic\": \"https://files.catbox.moe/k36908.png\",\n    \"现代建筑群-OvercastDay-Eerie\": \"https://files.catbox.moe/ec0q9y.png\",\n    \"现代建筑群-GoldenHour-Peaceful\": \"https://files.catbox.moe/y3l604.png\",\n    \"现代建筑群-GoldenHour-Decay\": \"https://files.catbox.moe/ts623u.png\",\n    \"现代建筑群-GoldenHour-Dynamic\": \"https://files.catbox.moe/3rf2uk.png\",\n    \"现代建筑群-GoldenHour-Eerie\": \"https://files.catbox.moe/zyg7m1.png\",\n    \"现代建筑群-DeepNight-Peaceful\": \"https://files.catbox.moe/8m854e.png\",\n    \"现代建筑群-DeepNight-Decay\": \"https://files.catbox.moe/y2pkfs.png\",\n    \"现代建筑群-DeepNight-Dynamic\": \"https://files.catbox.moe/uh1vrp.png\",\n    \"现代建筑群-DeepNight-Eerie\": \"https://files.catbox.moe/h2wugc.png\",\n    \"现代建筑群-ArtificialLight-Peaceful\": \"https://files.catbox.moe/yuszwp.png\",\n    \"现代建筑群-ArtificialLight-Decay\": \"https://files.catbox.moe/vuz182.png\",\n    \"现代建筑群-ArtificialLight-Dynamic\": \"https://files.catbox.moe/s86gut.png\",\n    \"现代建筑群-ArtificialLight-Eerie\": \"https://files.catbox.moe/p6nowg.png\",\n   \n    \"拱门建筑室内-BrightDay-Peaceful\": \"https://files.catbox.moe/d214yn.png\",\n    \"拱门建筑室内-BrightDay-Decay\": \"https://files.catbox.moe/kwfnhn.png\",\n    \"拱门建筑室内-BrightDay-Dynamic\": \"https://files.catbox.moe/uy3kte.png\",\n    \"拱门建筑室内-BrightDay-Eerie\": \"https://files.catbox.moe/jbmskc.png\",\n    \"拱门建筑室内-OvercastDay-Peaceful\": \"https://files.catbox.moe/81e8nc.png\",\n    \"拱门建筑室内-OvercastDay-Decay\": \"https://files.catbox.moe/6entar.png\",\n    \"拱门建筑室内-OvercastDay-Dynamic\": \"https://files.catbox.moe/h39raz.png\",\n    \"拱门建筑室内-OvercastDay-Eerie\": \"https://files.catbox.moe/m3xp9i.png\",\n    \"拱门建筑室内-GoldenHour-Peaceful\": \"https://files.catbox.moe/7ys6wf.png\",\n    \"拱门建筑室内-GoldenHour-Decay\": \"https://files.catbox.moe/lbcd5b.png\",\n    \"拱门建筑室内-GoldenHour-Dynamic\": \"https://files.catbox.moe/zeam8z.png\",\n    \"拱门建筑室内-GoldenHour-Eerie\": \"https://files.catbox.moe/dx685v.png\",\n    \"拱门建筑室内-DeepNight-Peaceful\": \"https://files.catbox.moe/5g5a7z.png\",\n    \"拱门建筑室内-DeepNight-Decay\": \"https://files.catbox.moe/lvw1a3.png\",\n    \"拱门建筑室内-DeepNight-Dynamic\": \"https://files.catbox.moe/al84vh.png\",\n    \"拱门建筑室内-DeepNight-Eerie\": \"https://files.catbox.moe/inptoq.png\",\n    \"拱门建筑室内-ArtificialLight-Peaceful\": \"https://files.catbox.moe/v9i1ed.png\",\n    \"拱门建筑室内-ArtificialLight-Decay\": \"https://files.catbox.moe/7gzrfu.png\",\n    \"拱门建筑室内-ArtificialLight-Dynamic\": \"https://files.catbox.moe/h3uytp.png\",\n    \"拱门建筑室内-ArtificialLight-Eerie\": \"https://files.catbox.moe/k2m4e6.png\",\n    \n    \"Wasteland-BrightDay-Peaceful\": \"https://files.catbox.moe/uxe76e.png\",\n    \"Wasteland-BrightDay-Decay\": \"https://files.catbox.moe/a21n5h.png\",\n    \"Wasteland-BrightDay-Dynamic\": \"https://files.catbox.moe/7673rq.png\",\n    \"Wasteland-BrightDay-Eerie\": \"https://files.catbox.moe/et0qkv.png\",\n    \"Wasteland-OvercastDay-Peaceful\": \"https://files.catbox.moe/hn0y8a.png\",\n    \"Wasteland-OvercastDay-Decay\": \"https://files.catbox.moe/yixtu9.png\",\n    \"Wasteland-OvercastDay-Dynamic\": \"https://files.catbox.moe/q5nhyx.png\",\n    \"Wasteland-OvercastDay-Eerie\": \"https://files.catbox.moe/dwd4ei.png\",\n    \"Wasteland-GoldenHour-Peaceful\": \"https://files.catbox.moe/pnfws9.png\",\n    \"Wasteland-GoldenHour-Decay\": \"https://files.catbox.moe/14tzmg.png\",\n    \"Wasteland-GoldenHour-Dynamic\": \"https://files.catbox.moe/bvaf8y.png\",\n    \"Wasteland-GoldenHour-Eerie\": \"https://files.catbox.moe/bci8rh.png\",\n    \"Wasteland-DeepNight-Peaceful\": \"https://files.catbox.moe/x3o7eg.png\",\n    \"Wasteland-DeepNight-Decay\": \"https://files.catbox.moe/z3vn77.png\",\n    \"Wasteland-DeepNight-Dynamic\": \"https://files.catbox.moe/9k86lc.png\",\n    \"Wasteland-DeepNight-Eerie\": \"https://files.catbox.moe/1yoxrp.png\",\n    \"Wasteland-ArtificialLight-Peaceful\": \"https://files.catbox.moe/abgocm.png\",\n    \"Wasteland-ArtificialLight-Decay\": \"https://files.catbox.moe/icgzf1.png\",\n    \"Wasteland-ArtificialLight-Dynamic\": \"https://files.catbox.moe/yjfr62.png\",\n    \"Wasteland-ArtificialLight-Eerie\": \"https://files.catbox.moe/pv9gqj.png\" ,\n    \"ModernUrbanStreet-BrightDay-Peaceful\": \"https://files.catbox.moe/dhes3d.png\",\n    \"ModernUrbanStreet-BrightDay-Decay\": \"https://files.catbox.moe/l21256.png\",\n    \"ModernUrbanStreet-BrightDay-Dynamic\": \"https://files.catbox.moe/ui2pwt.png\",\n    \"ModernUrbanStreet-OvercastDay-Peaceful\": \"https://files.catbox.moe/4najy9.png\",\n    \"ModernUrbanStreet-OvercastDay-Decay\": \"https://files.catbox.moe/6shm0c.png\",\n    \"ModernUrbanStreet-OvercastDay-Dynamic\": \"https://files.catbox.moe/3mnzmg.png\",\n    \"ModernUrbanStreet-GoldenHour-Peaceful\": \"https://files.catbox.moe/0x5f9m.png\",\n    \"ModernUrbanStreet-GoldenHour-Decay\": \"https://files.catbox.moe/097oga.png\",\n    \"ModernUrbanStreet-GoldenHour-Dynamic\": \"https://files.catbox.moe/8bzix7.png\",\n    \"ModernUrbanStreet-DeepNight-Peaceful\": \"https://files.catbox.moe/ptg2tf.png\",\n    \"ModernUrbanStreet-DeepNight-Decay\": \"https://files.catbox.moe/ynurmy.png\",\n    \"ModernUrbanStreet-DeepNight-Dynamic\": \"https://files.catbox.moe/880e3u.png\",\n    \"AncientTown-BrightDay-Peaceful\": \"https://files.catbox.moe/s6r8u3.png\",\n    \"AncientTown-BrightDay-Decay\": \"https://files.catbox.moe/2ku6tb.png\",\n    \"AncientTown-BrightDay-Dynamic\": \"https://files.catbox.moe/92660n.png\",\n    \"AncientTown-OvercastDay-Peaceful\": \"https://files.catbox.moe/o98q4p.png\",\n    \"AncientTown-OvercastDay-Decay\": \"https://files.catbox.moe/ivezlx.png\",\n    \"AncientTown-OvercastDay-Dynamic\": \"https://files.catbox.moe/fnwsni.png\",\n    \"AncientTown-GoldenHour-Peaceful\": \"https://files.catbox.moe/v3k1ts.png\",\n    \"AncientTown-GoldenHour-Decay\": \"https://files.catbox.moe/t4c6h2.png\",\n    \"AncientTown-GoldenHour-Dynamic\": \"https://files.catbox.moe/z1y37q.png\",\n    \"AncientTown-DeepNight-Peaceful\": \"https://files.catbox.moe/vhulml.png\",\n    \"AncientTown-DeepNight-Decay\": \"https://files.catbox.moe/3ju84i.png\",\n    \"AncientTown-DeepNight-Dynamic\": \"https://files.catbox.moe/48d97o.png\",\n    \"AncientChineseCity-BrightDay-Peaceful\": \"https://files.catbox.moe/hsbdp9.png\",\n    \"AncientChineseCity-BrightDay-Decay\": \"https://files.catbox.moe/hi2xji.png\",\n    \"AncientChineseCity-BrightDay-Dynamic\": \"https://files.catbox.moe/oxzzpk.png\",\n    \"AncientChineseCity-OvercastDay-Peaceful\": \"https://files.catbox.moe/4o5kdz.png\",\n    \"AncientChineseCity-OvercastDay-Decay\": \"https://files.catbox.moe/zysw0w.png\",\n    \"AncientChineseCity-OvercastDay-Dynamic\": \"https://files.catbox.moe/3sxd7f.png\",\n    \"AncientChineseCity-GoldenHour-Peaceful\": \"https://files.catbox.moe/pvqoks.png\",\n    \"AncientChineseCity-GoldenHour-Decay\": \"https://files.catbox.moe/mmfx5g.png\",\n    \"AncientChineseCity-GoldenHour-Dynamic\": \"https://files.catbox.moe/hhqylf.png\",\n    \"AncientChineseCity-DeepNight-Peaceful\": \"https://files.catbox.moe/k9286v.png\",\n    \"AncientChineseCity-DeepNight-Decay\": \"https://files.catbox.moe/g77nwq.png\",\n    \"AncientChineseCity-DeepNight-Dynamic\": \"https://files.catbox.moe/yzsmyn.png\",\n    \"WesternMarket-BrightDay-Peaceful\": \"https://files.catbox.moe/rksxid.png\",\n    \"WesternMarket-BrightDay-Decay\": \"https://files.catbox.moe/fi838g.png\",\n    \"WesternMarket-BrightDay-Dynamic\": \"https://files.catbox.moe/m3pofu.png\",\n    \"WesternMarket-OvercastDay-Peaceful\": \"https://files.catbox.moe/yhufu8.png\",\n    \"WesternMarket-OvercastDay-Decay\": \"https://files.catbox.moe/qp7glg.png\",\n    \"WesternMarket-OvercastDay-Dynamic\": \"https://files.catbox.moe/2i4s8r.png\",\n    \"WesternMarket-GoldenHour-Peaceful\": \"https://files.catbox.moe/2jj2au.png\",\n    \"WesternMarket-GoldenHour-Decay\": \"https://files.catbox.moe/7ebpfs.png\",\n    \"WesternMarket-GoldenHour-Dynamic\": \"https://files.catbox.moe/xa1ctx.png\",\n    \"WesternMarket-DeepNight-Peaceful\": \"https://files.catbox.moe/hezeaq.png\",\n    \"WesternMarket-DeepNight-Decay\": \"https://files.catbox.moe/mk5u5q.png\",\n    \"WesternMarket-DeepNight-Dynamic\": \"https://files.catbox.moe/p0w1l9.png\",\n    \"Campus-BrightDay-Peaceful\": \"https://files.catbox.moe/1557qc.png\",\n    \"Campus-BrightDay-Decay\": \"https://files.catbox.moe/tjq73t.png\",\n    \"Campus-BrightDay-Dynamic\": \"https://files.catbox.moe/hq7yll.png\",\n    \"Campus-OvercastDay-Peaceful\": \"https://files.catbox.moe/vqcje0.png\",\n    \"Campus-OvercastDay-Decay\": \"https://files.catbox.moe/jw187j.png\",\n    \"Campus-OvercastDay-Dynamic\": \"https://files.catbox.moe/ofkg1u.png\",\n    \"Campus-GoldenHour-Peaceful\": \"https://files.catbox.moe/kkvggn.png\",\n    \"Campus-GoldenHour-Decay\": \"https://files.catbox.moe/d95fab.png\",\n    \"Campus-GoldenHour-Dynamic\": \"https://files.catbox.moe/hjf7n0.png\",\n    \"Campus-DeepNight-Peaceful\": \"https://files.catbox.moe/u940ii.png\",\n    \"Campus-DeepNight-Decay\": \"https://files.catbox.moe/vh5054.png\",\n    \"Campus-DeepNight-Dynamic\": \"https://files.catbox.moe/77xjzh.png\",\n    \"Forest-BrightDay-Peaceful\": \"https://files.catbox.moe/ansqe4.png\",\n    \"Forest-BrightDay-Decay\": \"https://files.catbox.moe/pr0sh7.png\",\n    \"Forest-BrightDay-Dynamic\": \"https://files.catbox.moe/2344zd.png\",\n    \"Forest-OvercastDay-Peaceful\": \"https://files.catbox.moe/met9pb.png\",\n    \"Forest-OvercastDay-Decay\": \"https://files.catbox.moe/oiwy3e.png\",\n    \"Forest-OvercastDay-Dynamic\": \"https://files.catbox.moe/klpb15.png\",\n    \"Forest-GoldenHour-Peaceful\": \"https://files.catbox.moe/jtc5dp.png\",\n    \"Forest-GoldenHour-Decay\": \"https://files.catbox.moe/1qn3yo.png\",\n    \"Forest-GoldenHour-Dynamic\": \"https://files.catbox.moe/phlvl2.png\",\n    \"Forest-DeepNight-Peaceful\": \"https://files.catbox.moe/vnoidl.png\",\n    \"Forest-DeepNight-Decay\": \"https://files.catbox.moe/kpoe16.png\",\n    \"Forest-DeepNight-Dynamic\": \"https://files.catbox.moe/f2aoaw.png\",\n    \"Ocean-BrightDay-Peaceful\": \"https://files.catbox.moe/ecjcwp.png\",\n    \"Ocean-BrightDay-Decay\": \"https://files.catbox.moe/rf06ih.png\",\n    \"Ocean-BrightDay-Dynamic\": \"https://files.catbox.moe/1hyi5d.png\",\n    \"Ocean-OvercastDay-Peaceful\": \"https://files.catbox.moe/yo0x4t.png\",\n    \"Ocean-OvercastDay-Decay\": \"https://files.catbox.moe/d00l0r.png\",\n    \"Ocean-OvercastDay-Dynamic\": \"https://files.catbox.moe/48b76h.png\",\n    \"Ocean-GoldenHour-Peaceful\": \"https://files.catbox.moe/ahhjwy.png\",\n    \"Ocean-GoldenHour-Decay\": \"https://files.catbox.moe/4chzy8.png\",\n    \"Ocean-GoldenHour-Dynamic\": \"https://files.catbox.moe/ocg1qb.png\",\n    \"Ocean-DeepNight-Peaceful\": \"https://files.catbox.moe/i6zev7.png\",\n    \"Ocean-DeepNight-Decay\": \"https://files.catbox.moe/mu6bj4.png\",\n    \"Ocean-DeepNight-Dynamic\": \"https://files.catbox.moe/llzgvv.png\",\n    \"River-BrightDay-Peaceful\": \"https://files.catbox.moe/ssjiix.png\",\n    \"River-BrightDay-Decay\": \"https://files.catbox.moe/v2nn7e.png\",\n    \"River-BrightDay-Dynamic\": \"https://files.catbox.moe/o2kc61.png\",\n    \"River-OvercastDay-Peaceful\": \"https://files.catbox.moe/59uy2q.png\",\n    \"River-OvercastDay-Decay\": \"https://files.catbox.moe/gehfbt.png\",\n    \"River-OvercastDay-Dynamic\": \"https://files.catbox.moe/4sdukd.png\",\n    \"River-GoldenHour-Peaceful\": \"https://files.catbox.moe/nulrac.png\",\n    \"River-GoldenHour-Decay\": \"https://files.catbox.moe/77pq04.png\",\n    \"River-GoldenHour-Dynamic\": \"https://files.catbox.moe/tfmns3.png\",\n    \"River-DeepNight-Peaceful\": \"https://files.catbox.moe/2tg98i.png\",\n    \"River-DeepNight-Decay\": \"https://files.catbox.moe/93a79i.png\",\n    \"River-DeepNight-Dynamic\": \"https://files.catbox.moe/k7riuu.png\",\n    \"Grassland-BrightDay-Peaceful\": \"https://files.catbox.moe/5lrcd3.png\",\n    \"Grassland-BrightDay-Decay\": \"https://files.catbox.moe/8zg93i.png\",\n    \"Grassland-BrightDay-Dynamic\": \"https://files.catbox.moe/4uxivd.png\",\n    \"Grassland-OvercastDay-Peaceful\": \"https://files.catbox.moe/eqajk0.png\",\n    \"Grassland-OvercastDay-Decay\": \"https://files.catbox.moe/hxc0r4.png\",\n    \"Grassland-OvercastDay-Dynamic\": \"https://files.catbox.moe/flw0mj.png\",\n    \"Grassland-GoldenHour-Peaceful\": \"https://files.catbox.moe/2uur0m.png\",\n    \"Grassland-GoldenHour-Decay\": \"https://files.catbox.moe/x2oaou.png\",\n    \"Grassland-GoldenHour-Dynamic\": \"https://files.catbox.moe/d55jxr.png\",\n    \"Grassland-DeepNight-Peaceful\": \"https://files.catbox.moe/1rfcvz.png\",\n    \"Grassland-DeepNight-Decay\": \"https://files.catbox.moe/finkcj.png\",\n    \"Grassland-DeepNight-Dynamic\": \"https://files.catbox.moe/jftykn.png\",\n    \"Snowfield-BrightDay-Peaceful\": \"https://files.catbox.moe/yj6jtu.png\",\n    \"Snowfield-BrightDay-Decay\": \"https://files.catbox.moe/0zicrz.png\",\n    \"Snowfield-BrightDay-Dynamic\": \"https://files.catbox.moe/qfx7ec.png\",\n    \"Snowfield-OvercastDay-Peaceful\": \"https://files.catbox.moe/hrraid.png\",\n    \"Snowfield-OvercastDay-Decay\": \"https://files.catbox.moe/8ic12s.png\",\n    \"Snowfield-OvercastDay-Dynamic\": \"https://files.catbox.moe/xsjx03.png\",\n    \"Snowfield-GoldenHour-Peaceful\": \"https://files.catbox.moe/llck35.png\",\n    \"Snowfield-GoldenHour-Decay\": \"https://files.catbox.moe/ex4hmf.png\",\n    \"Snowfield-GoldenHour-Dynamic\": \"https://files.catbox.moe/kqklhc.png\",\n    \"Snowfield-DeepNight-Peaceful\": \"https://files.catbox.moe/oobgon.png\",\n    \"Snowfield-DeepNight-Decay\": \"https://files.catbox.moe/24uvx8.png\",\n    \"Snowfield-DeepNight-Dynamic\": \"https://files.catbox.moe/zxzjpf.png\",\n    \"Underwater-BrightDay-Peaceful\": \"https://files.catbox.moe/4kefca.png\",\n    \"Underwater-BrightDay-Decay\": \"https://files.catbox.moe/3denhw.png\",\n    \"Underwater-BrightDay-Dynamic\": \"https://files.catbox.moe/42rlw6.png\",\n    \"Underwater-OvercastDay-Peaceful\": \"https://files.catbox.moe/os84rw.png\",\n    \"Underwater-OvercastDay-Decay\": \"https://files.catbox.moe/hz3b2l.png\",\n    \"Underwater-OvercastDay-Dynamic\": \"https://files.catbox.moe/1jahli.png\",\n    \"Underwater-GoldenHour-Peaceful\": \"https://files.catbox.moe/hij6hj.png\",\n    \"Underwater-GoldenHour-Decay\": \"https://files.catbox.moe/yr7lm1.png\",\n    \"Underwater-GoldenHour-Dynamic\": \"https://files.catbox.moe/ozq0ph.png\",\n    \"Underwater-DeepNight-Peaceful\": \"https://files.catbox.moe/3wd6vl.png\",\n    \"Underwater-DeepNight-Decay\": \"https://files.catbox.moe/wk15wy.png\",\n    \"Underwater-DeepNight-Dynamic\": \"https://files.catbox.moe/5yvhg2.png\",\n    \"SimpleRoom-BrightDay-Peaceful\": \"https://files.catbox.moe/n9oby0.png\",\n    \"SimpleRoom-BrightDay-Decay\": \"https://files.catbox.moe/edqueq.png\",\n    \"SimpleRoom-BrightDay-Dynamic\": \"https://files.catbox.moe/7wss06.png\",\n    \"SimpleRoom-OvercastDay-Peaceful\": \"https://files.catbox.moe/m93ysz.png\",\n    \"SimpleRoom-OvercastDay-Decay\": \"https://files.catbox.moe/5ve0kl.png\",\n    \"SimpleRoom-OvercastDay-Dynamic\": \"https://files.catbox.moe/nr0u5g.png\",\n    \"SimpleRoom-GoldenHour-Peaceful\": \"https://files.catbox.moe/rmooph.png\",\n    \"SimpleRoom-GoldenHour-Decay\": \"https://files.catbox.moe/zcwn3h.png\",\n    \"SimpleRoom-GoldenHour-Dynamic\": \"https://files.catbox.moe/pp8zfj.png\",\n    \"SimpleRoom-DeepNight-Peaceful\": \"https://files.catbox.moe/r9na7d.png\",\n    \"SimpleRoom-DeepNight-Decay\": \"https://files.catbox.moe/mlz6ts.png\",\n    \"SimpleRoom-DeepNight-Dynamic\": \"https://files.catbox.moe/mxjzuf.png\",\n     \"LuxuryRoom-BrightDay-Peaceful\": \"https://files.catbox.moe/6z5xbx.png\",\n\"LuxuryRoom-BrightDay-Decay\": \"https://files.catbox.moe/lindgw.png\",\n\"LuxuryRoom-BrightDay-Dynamic\": \"https://files.catbox.moe/6z5xbx.png\",\n\"LuxuryRoom-OvercastDay-Peaceful\": \"https://files.catbox.moe/g72q8t.png\",\n\"LuxuryRoom-OvercastDay-Decay\": \"https://files.catbox.moe/pxy5li.png\",\n\"LuxuryRoom-OvercastDay-Dynamic\": \"https://files.catbox.moe/biwvpj.png\",\n\"LuxuryRoom-GoldenHour-Peaceful\": \"https://files.catbox.moe/m4bc3w.png\",\n\"LuxuryRoom-GoldenHour-Decay\": \"https://files.catbox.moe/nx6rp6.png\",\n\"LuxuryRoom-GoldenHour-Dynamic\": \"https://files.catbox.moe/pmgi83.png\",\n\"LuxuryRoom-DeepNight-Peaceful\": \"https://files.catbox.moe/utlac8.png\",\n\"LuxuryRoom-DeepNight-Decay\": \"https://files.catbox.moe/6756nu.png\",\n\"LuxuryRoom-DeepNight-Dynamic\": \"https://files.catbox.moe/pq33aw.png\",\n\"ChineseInn-BrightDay-Peaceful\": \"https://files.catbox.moe/p8vi0m.png\",\n\"ChineseInn-BrightDay-Decay\": \"https://files.catbox.moe/5zf9he.png\",\n\"ChineseInn-BrightDay-Dynamic\": \"https://files.catbox.moe/z5u256.png\",\n\"ChineseInn-OvercastDay-Peaceful\": \"https://files.catbox.moe/l2lhmn.png\",\n\"ChineseInn-OvercastDay-Decay\": \"https://files.catbox.moe/xkm541.png\",\n\"ChineseInn-OvercastDay-Dynamic\": \"https://files.catbox.moe/hyfd0x.png\",\n\"ChineseInn-GoldenHour-Peaceful\": \"https://files.catbox.moe/ebj4to.png\",\n\"ChineseInn-GoldenHour-Decay\": \"https://files.catbox.moe/i7n5l6.png\",\n\"ChineseInn-GoldenHour-Dynamic\": \"https://files.catbox.moe/3z6zby.png\",\n\"ChineseInn-DeepNight-Peaceful\": \"https://files.catbox.moe/hyj5d9.png\",\n\"ChineseInn-DeepNight-Decay\": \"https://files.catbox.moe/q4bwc8.png\",\n\"ChineseInn-DeepNight-Dynamic\": \"https://files.catbox.moe/h43qfj.png\",\n\"ModernLobby-BrightDay-Peaceful\": \"https://files.catbox.moe/oold7t.png\",\n\"ModernLobby-BrightDay-Decay\": \"https://files.catbox.moe/j2frke.png\",\n\"ModernLobby-BrightDay-Dynamic\": \"https://files.catbox.moe/muayj5.png\",\n\"ModernLobby-OvercastDay-Peaceful\": \"https://files.catbox.moe/c8e0dt.png\",\n\"ModernLobby-OvercastDay-Decay\": \"https://files.catbox.moe/kbwrhl.png\",\n\"ModernLobby-OvercastDay-Dynamic\": \"https://files.catbox.moe/p8xm1i.png\",\n\"ModernLobby-GoldenHour-Peaceful\": \"https://files.catbox.moe/cuu7tf.png\",\n\"ModernLobby-GoldenHour-Decay\": \"https://files.catbox.moe/1qiy9k.png\",\n\"ModernLobby-GoldenHour-Dynamic\": \"https://files.catbox.moe/pdkr5k.png\",\n\"ModernLobby-DeepNight-Peaceful\": \"https://files.catbox.moe/w061gf.png\",\n\"ModernLobby-DeepNight-Decay\": \"https://files.catbox.moe/qy0r7x.png\",\n\"ModernLobby-DeepNight-Dynamic\": \"https://files.catbox.moe/cs5gb1.png\",\n\"Corridor-BrightDay-Peaceful\": \"https://files.catbox.moe/c425ec.png\",\n\"Corridor-BrightDay-Decay\": \"https://files.catbox.moe/yejlqf.png\",\n\"Corridor-BrightDay-Dynamic\": \"https://files.catbox.moe/vcl6bl.png\",\n\"Corridor-OvercastDay-Peaceful\": \"https://files.catbox.moe/64yaat.png\",\n\"Corridor-OvercastDay-Decay\": \"https://files.catbox.moe/bexgw6.png\",\n\"Corridor-OvercastDay-Dynamic\": \"https://files.catbox.moe/8oyayc.png\",\n\"Corridor-GoldenHour-Peaceful\": \"https://files.catbox.moe/wqb6x3.png\",\n\"Corridor-GoldenHour-Decay\": \"https://files.catbox.moe/kfxo3j.png\",\n\"Corridor-GoldenHour-Dynamic\": \"https://files.catbox.moe/5ukas0.png\",\n\"Corridor-DeepNight-Peaceful\": \"https://files.catbox.moe/sbrnoz.png\",\n\"Corridor-DeepNight-Decay\": \"https://files.catbox.moe/pt5r7c.png\",\n\"Corridor-DeepNight-Dynamic\": \"https://files.catbox.moe/jmjars.png\",\n\"Laboratory-BrightDay-Peaceful\": \"https://files.catbox.moe/1vmvdl.png\",\n\"Laboratory-BrightDay-Decay\": \"https://files.catbox.moe/syyy9p.png\",\n\"Laboratory-BrightDay-Dynamic\": \"https://files.catbox.moe/b5qeap.png\",\n\"Laboratory-OvercastDay-Peaceful\": \"https://files.catbox.moe/fwsp71.png\",\n\"Laboratory-OvercastDay-Decay\": \"https://files.catbox.moe/u9zig9.png\",\n\"Laboratory-OvercastDay-Dynamic\": \"https://files.catbox.moe/tl8naa.png\",\n\"Laboratory-GoldenHour-Peaceful\": \"https://files.catbox.moe/0p620u.png\",\n\"Laboratory-GoldenHour-Decay\": \"https://files.catbox.moe/6f9uva.png\",\n\"Laboratory-GoldenHour-Dynamic\": \"https://files.catbox.moe/g2vfxv.png\",\n\"Laboratory-DeepNight-Peaceful\": \"https://files.catbox.moe/xi916x.png\",\n\"Laboratory-DeepNight-Decay\": \"https://files.catbox.moe/yp56t3.png\",\n\"Laboratory-DeepNight-Dynamic\": \"https://files.catbox.moe/xsvj64.png\",\n\n\"Cave-BrightDay-Peaceful\": \"https://files.catbox.moe/ok0vzc.png\",\n\"Cave-BrightDay-Decay\": \"https://files.catbox.moe/3z7cov.png\",\n\"Cave-BrightDay-Dynamic\": \"https://files.catbox.moe/t3obng.png\",\n\"Cave-OvercastDay-Peaceful\": \"https://files.catbox.moe/xx3fkt.png\",\n\"Cave-OvercastDay-Decay\": \"https://files.catbox.moe/4velhl.png\",\n\"Cave-OvercastDay-Dynamic\": \"https://files.catbox.moe/nkd9vx.png\",\n\"Cave-GoldenHour-Peaceful\": \"https://files.catbox.moe/jtit19.png\",\n\"Cave-GoldenHour-Decay\": \"https://files.catbox.moe/3rl1ek.png\",\n\"Cave-GoldenHour-Dynamic\": \"https://files.catbox.moe/wkfb9x.png\",\n\"Cave-DeepNight-Peaceful\": \"https://files.catbox.moe/84jmvc.png\",\n\"Cave-DeepNight-Decay\": \"https://files.catbox.moe/w9vhnp.png\",\n\"Cave-DeepNight-Dynamic\": \"https://files.catbox.moe/gfos4o.png\",\n\n\"Prison-BrightDay-Peaceful\": \"https://files.catbox.moe/to0jrc.png\",\n\"Prison-BrightDay-Decay\": \"https://files.catbox.moe/p4cnax.png\",\n\"Prison-BrightDay-Dynamic\": \"https://files.catbox.moe/ai4xsu.png\",\n\"Prison-OvercastDay-Peaceful\": \"https://files.catbox.moe/47e6lg.png\",\n\"Prison-OvercastDay-Decay\": \"https://files.catbox.moe/xpwl6w.png\",\n\"Prison-OvercastDay-Dynamic\": \"https://files.catbox.moe/s56auc.png\",\n\"Prison-GoldenHour-Peaceful\": \"https://files.catbox.moe/mw4ywv.png\",\n\"Prison-GoldenHour-Decay\": \"https://files.catbox.moe/xqdgqb.png\",\n\"Prison-GoldenHour-Dynamic\": \"https://files.catbox.moe/fghnbn.png\",\n\"Prison-DeepNight-Peaceful\": \"https://files.catbox.moe/zqdhod.png\",\n\"Prison-DeepNight-Decay\": \"https://files.catbox.moe/7t0v0g.png\",\n\"Prison-DeepNight-Dynamic\": \"https://files.catbox.moe/adx0nw.png\",\n    \"StarshipInterior-BrightDay-Peaceful\": \"https://files.catbox.moe/q0scdg.png\",\n    \"StarshipInterior-BrightDay-Decay\": \"https://files.catbox.moe/kqfaul.png\",\n    \"StarshipInterior-BrightDay-Dynamic\": \"https://files.catbox.moe/6xdq9e.png\",\n    \"StarshipInterior-OvercastDay-Peaceful\": \"https://files.catbox.moe/8ps4gt.png\",\n    \"StarshipInterior-OvercastDay-Decay\": \"https://files.catbox.moe/ehan0u.png\",\n    \"StarshipInterior-OvercastDay-Dynamic\": \"https://files.catbox.moe/ehan0u.png\",\n    \"StarshipInterior-GoldenHour-Peaceful\": \"https://files.catbox.moe/7z196y.png\",\n    \"StarshipInterior-GoldenHour-Decay\": \"https://files.catbox.moe/jshhas.png\",\n    \"StarshipInterior-GoldenHour-Dynamic\": \"https://files.catbox.moe/na2wqk.png\",\n    \"StarshipInterior-DeepNight-Peaceful\": \"https://files.catbox.moe/eta7l8.png\",\n    \"StarshipInterior-DeepNight-Decay\": \"https://files.catbox.moe/dw9syo.png\",\n    \"StarshipInterior-DeepNight-Dynamic\": \"https://files.catbox.moe/xvdvq8.png\",\n    \"FloatingIsland-BrightDay-Peaceful\": \"https://files.catbox.moe/39pgit.png\",\n    \"FloatingIsland-BrightDay-Decay\": \"https://files.catbox.moe/ulixx0.png\",\n    \"FloatingIsland-BrightDay-Dynamic\": \"https://files.catbox.moe/1sgrgy.png\",\n    \"FloatingIsland-OvercastDay-Peaceful\": \"https://files.catbox.moe/fd84hz.png\",\n    \"FloatingIsland-OvercastDay-Decay\": \"https://files.catbox.moe/e56g2x.png\",\n    \"FloatingIsland-OvercastDay-Dynamic\": \"https://files.catbox.moe/2upnvn.png\",\n    \"FloatingIsland-GoldenHour-Peaceful\": \"https://files.catbox.moe/ip68d4.png\",\n    \"FloatingIsland-GoldenHour-Decay\": \"https://files.catbox.moe/otf9x9.png\",\n    \"FloatingIsland-GoldenHour-Dynamic\": \"https://files.catbox.moe/gv6yf4.png\",\n    \"FloatingIsland-DeepNight-Peaceful\": \"https://files.catbox.moe/mi9bk4.png\",\n    \"FloatingIsland-DeepNight-Decay\": \"https://files.catbox.moe/chhmjd.png\",\n    \"FloatingIsland-DeepNight-Dynamic\": \"https://files.catbox.moe/r4edwi.png\",\n    \"Hell-BrightDay-Peaceful\": \"https://files.catbox.moe/gpaq2z.png\",\n    \"Hell-BrightDay-Decay\": \"https://files.catbox.moe/ogqqer.png\",\n    \"Hell-BrightDay-Dynamic\": \"https://files.catbox.moe/1v6cji.png\",\n    \"Hell-OvercastDay-Peaceful\": \"https://files.catbox.moe/6u1es7.png\",\n    \"Hell-OvercastDay-Decay\": \"https://files.catbox.moe/uhng4y.png\",\n    \"Hell-OvercastDay-Dynamic\": \"https://files.catbox.moe/hwxxng.png\",\n    \"Hell-GoldenHour-Peaceful\": \"https://files.catbox.moe/afbx4m.png\",\n    \"Hell-GoldenHour-Decay\": \"https://files.catbox.moe/lsn7zw.png\",\n    \"Hell-GoldenHour-Dynamic\": \"https://files.catbox.moe/zqj42n.png\",\n    \"Hell-DeepNight-Peaceful\": \"https://files.catbox.moe/hivy9l.png\",\n    \"Hell-DeepNight-Decay\": \"https://files.catbox.moe/f2yeyp.png\",\n    \"Hell-DeepNight-Dynamic\": \"https://files.catbox.moe/5ijb9v.png\",\n \"RadiationWasteland-BrightDay-Peaceful\": \"https://files.catbox.moe/m7yy78.png\",\n\"RadiationWasteland-BrightDay-Decay\": \"https://files.catbox.moe/2x2es7.png\",\n\"RadiationWasteland-BrightDay-Dynamic\": \"https://files.catbox.moe/m7yy78.png\",\n\"RadiationWasteland-OvercastDay-Peaceful\": \"https://files.catbox.moe/a1kdmh.png\",\n\"RadiationWasteland-OvercastDay-Decay\": \"https://files.catbox.moe/gg9yd1.png\",\n\"RadiationWasteland-OvercastDay-Dynamic\": \"https://files.catbox.moe/li7380.png\",\n\"RadiationWasteland-GoldenHour-Peaceful\": \"https://files.catbox.moe/f6q6fo.png\",\n\"RadiationWasteland-GoldenHour-Decay\": \"https://files.catbox.moe/euzsy9.png\",\n\"RadiationWasteland-GoldenHour-Dynamic\": \"https://files.catbox.moe/jxeqws.png\",\n\"RadiationWasteland-DeepNight-Peaceful\": \"https://files.catbox.moe/dewdhu.png\",\n\"RadiationWasteland-DeepNight-Decay\": \"https://files.catbox.moe/lo3484.png\",\n\"RadiationWasteland-DeepNight-Dynamic\": \"https://files.catbox.moe/zdltgi.png\",\n\"OuterSpace-BrightDay-Peaceful\": \"https://files.catbox.moe/lwb5ac.png\",\n\"OuterSpace-BrightDay-Decay\": \"https://files.catbox.moe/ea4e3t.png\",\n\"OuterSpace-BrightDay-Dynamic\": \"https://files.catbox.moe/7tb1i8.png\",\n\"OuterSpace-OvercastDay-Peaceful\": \"https://files.catbox.moe/fw2904.png\",\n\"OuterSpace-OvercastDay-Decay\": \"https://files.catbox.moe/e2yisi.png\",\n\"OuterSpace-OvercastDay-Dynamic\": \"https://files.catbox.moe/twsfjf.png\",\n\"OuterSpace-GoldenHour-Peaceful\": \"https://files.catbox.moe/cd4ry1.png\",\n\"OuterSpace-GoldenHour-Decay\": \"https://files.catbox.moe/nqxnud.png\",\n\"OuterSpace-GoldenHour-Dynamic\": \"https://files.catbox.moe/45z8kf.png\",\n\"OuterSpace-DeepNight-Peaceful\": \"https://files.catbox.moe/pciljv.png\",\n\"OuterSpace-DeepNight-Decay\": \"https://files.catbox.moe/ln80cz.png\",\n\"OuterSpace-DeepNight-Dynamic\": \"https://files.catbox.moe/faa1rk.png\",\n\"Cyberpunk-BrightDay-Peaceful\": \"https://files.catbox.moe/tmy5ol.png\",\n\"Cyberpunk-BrightDay-Decay\": \"https://files.catbox.moe/aj5h69.png\",\n\"Cyberpunk-BrightDay-Dynamic\": \"https://files.catbox.moe/j21gl2.png\",\n\"Cyberpunk-OvercastDay-Peaceful\": \"https://files.catbox.moe/1ksill.png\",\n\"Cyberpunk-OvercastDay-Decay\": \"https://files.catbox.moe/bkbuik.png\",\n\"Cyberpunk-OvercastDay-Dynamic\": \"https://files.catbox.moe/3cfkqu.png\",\n\"Cyberpunk-GoldenHour-Peaceful\": \"https://files.catbox.moe/q0uibt.png\",\n\"Cyberpunk-GoldenHour-Decay\": \"https://files.catbox.moe/j8jz3x.png\",\n\"Cyberpunk-GoldenHour-Dynamic\": \"https://files.catbox.moe/f5uhnm.png\",\n\"Cyberpunk-DeepNight-Peaceful\": \"https://files.catbox.moe/d24ede.png\",\n\"Cyberpunk-DeepNight-Decay\": \"https://files.catbox.moe/xe1h6e.png\",\n\"Cyberpunk-DeepNight-Dynamic\": \"https://files.catbox.moe/ed2g3n.png\"\n};\n let backgroundImageMap ={};\nconst npcImageMap_fallbackData = {\n   \"男-青年-黑发-短发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/44wvtr.png\",\n    \"男-青年-黑发-短发-黑瞳-温柔-平静\": \"https://files.catbox.moe/pcwisg.png\",\n    \"男-青年-黑发-长发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/ir5cy9.png\",\n    \"男-青年-黑发-长发-黑瞳-温柔-平静\": \"https://files.catbox.moe/p247ze.png\",\n    \"男-青年-银发-短发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/97giv8.png\",\n    \"男-青年-银发-短发-黑瞳-温柔-平静\": \"https://files.catbox.moe/z4aydt.png\",\n    \"男-青年-银发-长发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/73eszr.png\",\n    \"男-青年-银发-长发-黑瞳-温柔-平静\": \"https://files.catbox.moe/n3qjjq.png\",\n    \"男-青年-金发-短发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/fwlmbn.png\",\n    \"男-青年-金发-短发-黑瞳-温柔-平静\": \"https://files.catbox.moe/pc7rwm.png\",\n    \"男-青年-金发-长发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/ii34xt.png\",\n    \"男-青年-金发-长发-黑瞳-温柔-平静\": \"https://files.catbox.moe/l0qpj7.png\",\n    \"女-青年-黑发-短发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/3t68l1.png\",\n    \"女-青年-黑发-短发-黑瞳-温柔-平静\": \"https://files.catbox.moe/u47x1f.png\",\n    \"女-青年-黑发-长发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/hs6i73.png\",\n    \"女-青年-黑发-长发-黑瞳-温柔-平静\": \"https://files.catbox.moe/oujm4o.png\",\n    \"女-青年-银发-短发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/i5wokh.png\",\n    \"女-青年-银发-短发-黑瞳-温柔-平静\": \"https://files.catbox.moe/fc44vm.png\",\n    \"女-青年-银发-长发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/1ie4ej.png\",\n    \"女-青年-银发-长发-黑瞳-温柔-平静\": \"https://files.catbox.moe/12p2jc.png\",\n    \"女-青年-金发-短发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/h9htnb.png\",\n    \"女-青年-金发-短发-黑瞳-温柔-平静\": \"https://files.catbox.moe/6jy663.png\",\n    \"女-青年-金发-长发-黑瞳-冷峻-平静\": \"https://files.catbox.moe/dylclb.png\",\n    \"女-青年-金发-长发-黑瞳-温柔-平静\": \"https://files.catbox.moe/305pcy.png\"\n};\n let npcImageMap ={};\n const memeImageMap_fallbackData = {\n   \"三只猫-震惊\": \"https://files.catbox.moe/c81ft9.jpg\",\n\"柴郡-没有烦恼\":\"https://files.catbox.moe/07h315.jpg\",\n\"柴郡递玫瑰-上网为了等你\":\"https://files.catbox.moe/whcdzw.jpg\",\n\"贴吧-微笑\":\"https://files.catbox.moe/v1zup7.png\",\n\"柴郡-看笨蛋\":\"https://files.catbox.moe/8n8jjs.jpg\",\n\"贴吧-开心\":\"https://files.catbox.moe/9eq8us.png\",\n\"贴吧-大笑\":\"https://files.catbox.moe/590oxf.png\",\n\"可爱点赞\":\"https://files.catbox.moe/9mn24b.jpg\",\n\"贴吧-郁闷\":\"https://files.catbox.moe/jq7oru.png\",\n\"卡通兔虚脱\":\"https://files.catbox.moe/7mszdg.jpg\",\n\"猫听完醒了\":\"https://files.catbox.moe/8h4fd8.jpg\",\n\"贴吧-好耶\":\"https://files.catbox.moe/l9kvh0.png\",\n\"汤姆猫震惊\":\"https://files.catbox.moe/hg3695.jpg\",\n\"贴吧-啊？\":\"https://files.catbox.moe/7mue0y.png\",\n\"阴暗爬行\":\"https://files.catbox.moe/w2vpm9.jpg\",\n\"杰瑞鼠-震惊\":\"https://files.catbox.moe/dfjewr.jpg\",\n\"卡通恐龙点赞\":\"https://files.catbox.moe/g4zzbq.jpg\",\n\"骷髅跳舞\":\"https://files.catbox.moe/6xqs5i.gif\",\n\"我的肯定\":\"https://files.catbox.moe/25v5x1.jpg\",\n\"贴吧-愤怒\":\"https://files.catbox.moe/ajfl3t.png\",\n\"皮卡丘流泪\":\"https://files.catbox.moe/lcmn87.png\",\n\"猫愤怒爆炸\":\"https://files.catbox.moe/r5odxq.gif\",\n\"装傻流口水\":\"https://files.catbox.moe/pf6kmz.jpg\",\n\"贴吧-疑惑\":\"https://files.catbox.moe/4ju2ye.png\",\n\"汤姆猫心虚\":\"https://files.catbox.moe/dk50jx.jpg\",\n\"猫猥琐笑\":\"https://files.catbox.moe/nts9lf.gif\",\n\"男人健康笑点赞\":\"https://files.catbox.moe/kjk0n1.jpg\",\n\"狗头升天\":\"https://files.catbox.moe/6z2eqn.jpg\",\n\"初音-你妈了个\":\"https://files.catbox.moe/kvh3pt.jpg\",\n\"猫递玫瑰\":\"https://files.catbox.moe/6mzu47.jpg\",\n\"黑猫比心\":\"https://files.catbox.moe/2vgmq8.jpg\",\n\"黑猫摇尾巴观察\":\"https://files.catbox.moe/yz0b6n.gif\",\n\"黑猫流泪\":\"https://files.catbox.moe/mqch0r.png\",\n\"柴郡微笑持刀\":\"https://files.catbox.moe/23m12v.jpg\",\n\"黑猫地铁老人看手机\":\"https://files.catbox.moe/as1c5u.jpg\",\n\"黑猫擦汗\":\"https://files.catbox.moe/lp8djw.png\",\n\"黑猫害怕颤抖\":\"https://files.catbox.moe/18n48y.png\",\n\"微笑红温\":\"https://files.catbox.moe/w52lvw.jpg\",\n\"黑猫脸红\":\"https://files.catbox.moe/x4monr.gif\",\n\"黑猫灵机一现\":\"https://files.catbox.moe/8bp6gx.png\",\n\"哈士奇指人\":\"https://files.catbox.moe/vobg2f.jpg\",\n\"摸摸头\":\"https://files.catbox.moe/i65j4n.gif\"\n};\n let memeImageMap ={};\n // 健壮的JSON加载和解析函数\nfunction sanitizeJSON(jsonString) {\n    try {\n        // 1. 去除前后空白\n        jsonString = jsonString.trim();\n        \n        // 2. 将单引号替换为双引号（但要小心字符串内容中的引号）\n        // 使用正则表达式匹配属性名和字符串值\n        jsonString = jsonString.replace(/'([^']*?)':/g, '\"$1\":');\n        jsonString = jsonString.replace(/:\\s*'([^']*?)'/g, ': \"$1\"');\n        \n        // 3. 去除末尾的逗号（在对象或数组结束前）\n        jsonString = jsonString.replace(/,(\\s*[}\\]])/g, '$1');\n        \n        // 4. 处理可能的多余逗号\n        jsonString = jsonString.replace(/,+/g, ',');\n        \n        // 5. 确保对象和数组的格式正确\n        jsonString = jsonString.replace(/,\\s*}/g, '}');\n        jsonString = jsonString.replace(/,\\s*]/g, ']');\n        \n        return jsonString;\n    } catch (error) {\n        console.error('JSON清理过程中出错:', error);\n        return jsonString;\n    }\n}\n\n// 验证JSON格式的函数\nfunction validateJSON(jsonString) {\n    try {\n        JSON.parse(jsonString);\n        return true;\n    } catch (error) {\n        console.error('JSON验证失败:', error.message);\n        return false;\n    }\n}\n\n// 更详细的错误诊断\nfunction diagnoseJSONError(jsonString, error) {\n    const lines = jsonString.split('\\n');\n    const errorMsg = error.message;\n    \n    // 尝试从错误消息中提取位置信息\n    const positionMatch = errorMsg.match(/position (\\d+)/);\n    if (positionMatch) {\n        const position = parseInt(positionMatch[1]);\n        let currentPos = 0;\n        let lineNumber = 0;\n        let columnNumber = 0;\n        \n        for (let i = 0; i < lines.length; i++) {\n            if (currentPos + lines[i].length >= position) {\n                lineNumber = i + 1;\n                columnNumber = position - currentPos + 1;\n                break;\n            }\n            currentPos += lines[i].length + 1; // +1 for newline\n        }\n        \n        console.error(`JSON错误位置: 第${lineNumber}行, 第${columnNumber}列`);\n        console.error(`错误附近的内容: \"${jsonString.substring(position - 20, position + 20)}\"`);\n        \n        // 检查常见问题\n        const problemArea = jsonString.substring(Math.max(0, position - 50), position + 50);\n        if (problemArea.includes(',}') || problemArea.includes(',]')) {\n            console.error('可能的问题: 多余的逗号');\n        }\n        if (problemArea.includes(\"'\")) {\n            console.error('可能的问题: 使用了单引号而不是双引号');\n        }\n        if (problemArea.match(/\\w+:/)) {\n            console.error('可能的问题: 属性名没有用引号包围');\n        }\n    }\n}\nlet globalIndexData = {};\nasync function loadGitHubIndexMap(indexUrl, baseUrl, fallbackData = {}) {\n    const remoteIndex = await loadRemoteJson(indexUrl, {}); // 使用空对象作为loadRemoteJson的fallback\n    // 将加载到的索引数据存入全局变量，以URL为键，方便区分\n    if (Object.keys(remoteIndex).length > 0) {\n        globalIndexData[indexUrl] = remoteIndex;\n        console.log(`[Nova-Init] 已成功加载索引 ${indexUrl} 并存入全局索引库。`);\n    } else {\n        console.warn(`从 ${indexUrl} 获取的索引数据为空，将使用传入的fallbackData。`);\n        return fallbackData; // 如果获取失败，直接返回fallback\n    }\n\n    const keys = Object.keys(remoteIndex);\n    if (keys.length === 0) {\n        return fallbackData;\n    }\n    \n    // 递归函数：生成所有可能的组合键\n    function generateCombinations(index = 0, currentCombination = []) {\n        if (index === keys.length) {\n            // 组合结束，返回拼接好的键\n            return [currentCombination.join('-')];\n        }\n\n        const key = keys[index];\n        // 调整后的代码片段（只需要修改 loadGitHubIndexMap 函数内部的这一小段）：\nconst values = Array.isArray(remoteIndex[key]) \n               ? remoteIndex[key] \n               : []; // 如果不是数组，则视为空，防止非数组值被迭代\n\n        if (values.length === 0) {\n            // 如果某个属性没有值，则跳过，只保留当前组合\n             return generateCombinations(index + 1, currentCombination);\n        }\n\n        let results = [];\n        for (const value of values) {\n            // 递归生成下一层组合\n            results = results.concat(generateCombinations(index + 1, [...currentCombination, value]));\n        }\n        return results;\n    }\n\n    const allKeys = generateCombinations();\n    const newMap = {};\n    const effectiveBaseUrl = baseUrl.endsWith('/') ? baseUrl : `${baseUrl}/`; // 确保baseUrl以'/'结尾\n\n    for (const key of allKeys) {\n        // 拼接成 GitHub 图床链接\n        // 注意：这里假设图片都是 .png 格式，如果格式不固定，需要调整\n        newMap[key] = `${effectiveBaseUrl}${key}.png`;\n    }\n\n    if (Object.keys(newMap).length === 0) {\n        console.error(`根据索引 ${indexUrl} 未能生成任何有效的映射！使用回退数据。`);\n        return fallbackData;\n    }\n    \n    console.log(`成功从索引 ${indexUrl} 生成 ${Object.keys(newMap).length} 条新映射。`);\n     if (indexUrl.includes('npcImageMapIndex.json')) {\n        const sampleKey = allKeys.find(k => k.includes('男-成年-银发-中短发-傲慢-休闲装')) || allKeys[0];\n        console.log(`[Nova][INDEX-GEN] NPC映射的前5个键: ${allKeys.slice(0, 5).join(', ')}`);\n        if (sampleKey) {\n             console.log(`[Nova][INDEX-GEN] NPC映射示例键'${sampleKey}' -> URL: ${newMap[sampleKey]}`);\n        } else {\n             console.log(`[Nova][INDEX-GEN] 警告：在生成的键中找不到 '男-成年-银发-中短发-傲慢-休闲装'，请检查索引!`);\n        }\n    }\n    return newMap;\n}\n// 主要的加载函数\nasync function loadRemoteJson(url, fallbackData = {}) {\n    try {\n        console.log('开始加载映射...',url);\n           const cacheBustingUrl = `${url}?v=${new Date().getTime()}`;\n        // const cacheBustingUrl = `${url}`;\n        console.log(`NOVA V9.5: 正在使用“破除缓存”模式请求 -> ${cacheBustingUrl}`);\n    \n\n\n               const response = await fetch(cacheBustingUrl);\n        if (!response.ok) {\n            throw new Error(`HTTP错误: ${response.status} ${response.statusText}`);\n        }\n        \n        let jsonText = await response.text();\n        console.log(`获取到JSON文本，长度: ${jsonText.length}字符`);\n        \n        // 首次尝试直接解析\n        try {\n            const data = JSON.parse(jsonText);\n            console.log('JSON解析成功！');\n            return data;\n        } catch (parseError) {\n            console.warn('直接解析失败，尝试清理JSON...', parseError.message);\n            \n            // 诊断错误\n            diagnoseJSONError(jsonText, parseError);\n            \n            // 尝试清理和修复\n            const sanitizedJSON = sanitizeJSON(jsonText);\n            \n            if (validateJSON(sanitizedJSON)) {\n                console.log('JSON清理成功，重新解析...');\n                const data = JSON.parse(sanitizedJSON);\n                console.log('清理后的JSON解析成功！');\n                return data;\n            } else {\n                throw new Error('JSON清理后仍然无效');\n            }\n        }\n        \n    } catch (error) {\n        console.error('加载映射失败:', error.message);\n        \n        console.log('使用fallback数据');\n        return fallbackData;\n    }\n}\n\nlet achievementQueue = [];\nlet isShowingAchievement = false;\n let achievementData = JSON.parse(localStorage.getItem('achievements_data'));\n\nfunction checkAchievements(eventType, value) {\n     initialAchievementData  = {\n     achievements: {\n    newbie_explorer: {\n      title: \"【新人？】\",\n      description: \"首次进入这个世界，一切都是新的开始。\",\n      icon: \"🌱\",\n      unlocked: false, unlocked_at: null, reward_claimed: false,\n      reward: \"称号「新人」\",\n      flavor_text: \"欢迎光临，愿你的故事如繁星般璀璨。\"\n    },\n    points_master: {\n      title: \"【挥金如土】\",\n      description: \"在数据构建时，初始点数超过200点。\",\n      icon: \"👑\",\n      unlocked: false, unlocked_at: null, reward_claimed: false,\n      reward: \"称号「败家子」\",\n      flavor_text: \"贫穷限制了我的想象力，但没限制我的花费。\"\n    },\n    points_ascetic: {\n  title: \"【地狱行者】\",\n  description: \"在数据构建时，初始点数花费为0点。\",\n  icon: \"👍\",\n  unlocked: false, unlocked_at: null, reward_claimed: false,\n  reward: \"称号「苦行僧」\",\n  flavor_text: \"真正的强者，从不依赖于花里胡哨的开局。\"\n},\n    careful_planner: {\n      title: \"【精打细算】\",\n      description: \"在数据构建时，完美用完所有初始点数（剩余点数为0）。\",\n      icon: \"⚖️\",\n      unlocked: false, unlocked_at: null, reward_claimed: false,\n      reward: \"称号「理财达人」\",\n      flavor_text: \"每一分都用在刀刃上，这就是规划的艺术。\"\n    },\n\n    // ========== 生死与状态 ==========\n    first_death: {\n      title: \"【第一次亲密接触】\",\n      description: \"生命值第一次归零。别怕，这只是一个逗号，不是句号。\",\n      icon: \"💀\",\n      unlocked: false, unlocked_at: null, reward_claimed: false,\n      reward: \"称号「不死鸟之雏」\",\n      flavor_text: \"“我还以为我死了呢！” —— 很多人都这么说。\"\n    },\n    near_death_experience: {\n        title: \"【生死一线】\",\n        description: \"在生命值仅剩1点的情况下存活。\",\n        icon: \"🩸\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「幸存者」\",\n        flavor_text: \"死神敲了敲门，而你假装不在家。\"\n    },\n    glass_cannon: {\n        title: \"【脆皮专家】\",\n        description: \"你的生命值上限低于20点。\",\n        icon: \"💔\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「碰一下就碎」\",\n        flavor_text: \"最好的防御就是……在被摸到之前干掉所有人。\"\n    },\n    human_tank: {\n        title: \"【血牛】\",\n        description: \"你的生命值上限超过200点。\",\n        icon: \"🛡️\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「移动城墙」\",\n        flavor_text: \"医生：“他是什么血型？” 护士：“……很多。”\"\n    },\n\n    // ========== 属性与技能成长 ==========\n    legendary_physique: {\n        title: \"【传奇之躯】\",\n        description: \"任一基础生理属性（力量、敏捷、耐力）达到8点。\",\n        icon: \"💪\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「人形凶兽」\",\n        flavor_text: \"你已经超越了凡人的极限，现在，规则由你来书写。\"\n    },\n    legendary_mind: {\n        title: \"【传奇心智】\",\n        description: \"任一基础心智属性（智力、感知、决心）达到8点。\",\n        icon: \"🧠\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「思想的巨人」\",\n        flavor_text: \"世界在你眼中不过是一盘尚未结束的棋局。\"\n    },\n    legendary_presence: {\n        title: \"【传奇风采】\",\n        description: \"任一基础互动属性（风度、操控、沉着）达到8点。\",\n        icon: \"🎭\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「行走的魅力/灾厄」\",\n        flavor_text: \"言语是你的武器，世界是你的舞台。\"\n    },\n    master_of_one: {\n        title: \"【一技之长】\",\n        description: \"任一技能等级达到8点。\",\n        icon: \"🌟\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「领域的宗师」\",\n        flavor_text: \"将一件事做到极致，你便是传奇。\"\n    },\n    jack_of_all_trades: {\n        title: \"【万事通】\",\n        description: \"总共有超过20个技能等级不为0。\",\n        icon: \"📚\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「行走的百科全书」\",\n        flavor_text: \"“你还懂这个？” “略懂，略懂。”\"\n    },\n    specialist: {\n        title: \"【偏科生】\",\n        description: \"单一技能段（生理/心智/互动）的总技能点数超过其他两项之和。\",\n        icon: \"📈\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「术业有专攻」\",\n        flavor_text: \"我可能不是样样都行，但在我的领域里，无人能及。\"\n    },\n\n    // ========== 任务与声望 ==========\n    first_mission: {\n        title: \"【迈出第一步】\",\n        description: \"完成你的第一个任务。\",\n        icon: \"🏁\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「任务新人」\",\n        flavor_text: \"伟大的旅程始于足下。\"\n    },\n    ten_missions: {\n        title: \"【任务老手】\",\n        description: \"累计完成10个任务。\",\n        icon: \"🔟\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「身经百战」\",\n        flavor_text: \"你已经对‘失败抹杀’感到麻木了。\"\n    },\n    hundred_missions: {\n        title: \"【任务机器】\",\n        description: \"累计完成100个任务。\",\n        icon: \"💯\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「轮回中的传说」\",\n        flavor_text: \"你的事迹在无数世界中流传，尽管主角名字总被记错。\"\n    },\n    world_savior: {\n        title: \"【世界之友】\",\n        description: \"跨世界声望达到10点。\",\n        icon: \"🌍\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「位面行者」\",\n        flavor_text: \"你的善意跨越了世界的壁垒，收获了星辰的回响。\"\n    },\n    world_enemy: {\n        title: \"【世界公敌】\",\n        description: \"跨世界声望跌至-10点。\",\n        icon: \"💥\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「灾厄之星」\",\n        flavor_text: \"欢迎来到每个世界的通缉名单榜首。\"\n    },\n\n    // ========== 财富与收集 ==========\n    first_home: {\n        title: \"【我的第一个家】\",\n        description: \"在个人空间中放置第一件家具。\",\n        icon: \"🏠\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「筑巢者」\",\n        flavor_text: \"无论在哪，有个能回去的地方总是好的。\"\n    },\n    cozy_home: {\n        title: \"【温馨小屋】\",\n        description: \"个人空间的家具数量达到10件。\",\n        icon: \"🛋️\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「室内设计师」\",\n        flavor_text: \"这里开始有点家的样子了。\"\n    },\n    luxury_manor: {\n        title: \"【豪华庄园】\",\n        description: \"个人空间的家具数量达到50件。\",\n        icon: \"🏰\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「空间管理大师」\",\n        flavor_text: \"你的个人空间现在比某些小世界还热闹。\"\n    },\n    rich_man: {\n        title: \"【小有资产】\",\n        description: \"当前拥有的积分超过10000。\",\n        icon: \"💰\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「万元户」\",\n        flavor_text: \"你可以自信地走进商店，然后问：“除了这个，还有别的吗？”\"\n    },\n    super_rich: {\n        title: \"【富可敌国】\",\n        description: \"当前拥有的积分超过100000。\",\n        icon: \"🤑\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「行走的金库」\",\n        flavor_text: \"主神看了你的余额都得问一句：‘哥，最近有啥项目一起做？’\"\n    },\n    s_rank_hoarder: {\n        title: \"【S级的荣耀】\",\n        description: \"拥有一个S级支线剧情。\",\n        icon: \"S\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「剧情收藏家」\",\n        flavor_text: \"这是改变世界走向的关键碎片。\"\n    },\n\n    // ========== 危机与挑战 ==========\n    trivial_threat: {\n        title: \"【小试牛刀】\",\n        description: \"第一次遭遇检定难度大于3的危机。\",\n        icon: \"⁉️\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「麻烦磁铁」\",\n        flavor_text: \"你感觉到了，事情开始变得‘有趣’起来了。\"\n    },\n    serious_challenge: {\n        title: \"【严峻挑战】\",\n        description: \"第一次遭遇检定难度大于7的超凡危机。\",\n        icon: \"‼️\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「危机处理专家」\",\n        flavor_text: \"凡人的挣扎已成过往，现在是超凡者的舞台。\"\n    },\n    gods_game: {\n        title: \"【神明棋局】\",\n        description: \"第一次遭遇检定难度大于12的神明规则级危机。\",\n        icon: \"🌌\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「神之博弈者」\",\n        flavor_text: \"你抬头仰望，发现自己已成为棋盘上的一员。\"\n    },\n    cosmic_horror: {\n        title: \"【直面本源】\",\n        description: \"第一次遭遇检定难度大于15的本源宇宙级危机。\",\n        icon: \"🌀\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「深渊凝望者」\",\n        flavor_text: \"当你凝视深渊时，深渊也在……给你点了个赞？\"\n    },\n\n    // ========== 能量与能力 ==========\n    energy_awakening: {\n        title: \"【能量觉醒】\",\n        description: \"能量池上限首次大于0。\",\n        icon: \"💡\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「超凡新星」\",\n        flavor_text: \"你感受到了体内那股陌生的力量，它在欢呼，在雀跃。\"\n    },\n    energy_pool_100: {\n        title: \"【能量洪流】\",\n        description: \"能量池上限达到100。\",\n        icon: \"🌊\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「人形自走充电宝」\",\n        flavor_text: \"你现在可以连续释放十个小火球……来烤面包。\"\n    },\n    energy_pool_1000: {\n        title: \"【能量奇点】\",\n        description: \"能量池上限达到1000。\",\n        icon: \"💥\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「行走的魔力源」\",\n        flavor_text: \"或许，你可以考虑给一个城市供电了。\"\n    },\n    first_ability: {\n        title: \"【新的权能】\",\n        description: \"获得第一个能力。\",\n        icon: \"🧩\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「能力者」\",\n        flavor_text: \"一张新的底牌，一个崭新的可能。\"\n    },\n\n    // ========== 美德与恶德 ==========\n    act_of_justice: {\n        title: \"【正义的伙伴】\",\n        description: \"首次因符合【正义】美德而获得嘉奖。\",\n        icon: \"⚖️\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「正义的伙伴」\",\n        flavor_text: \"虽千万人，吾往矣。\"\n    },\n    unleash_anger: {\n        title: \"【怒火燎原】\",\n        description: \"首次因符合【愤怒】恶德而获得力量。\",\n        icon: \"😠\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「狂怒者」\",\n        flavor_text: \"够了！我已经忍无可忍了！\"\n    },\n    // ========== 美德与恶德 (新增) ==========\nact_of_kindness: {\n    title: \"【温柔的守护者】\",\n    description: \"首次因符合【慈爱】美德而获得嘉奖。\",\n    icon: \"💖\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「暖阳」\",\n    flavor_text: \"你的善意，是这个冰冷世界里最珍贵的温度。\"\n},\nfind_your_faith: {\n    title: \"【混沌中的灯塔】\",\n    description: \"首次因符合【信念】美德而获得嘉奖。\",\n    icon: \"🕯️\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「持炬人」\",\n    flavor_text: \"当所有人都迷失时，你找到了自己的道路，并成为了他人的光。\"\n},\niron_will: {\n    title: \"【不屈的磐石】\",\n    description: \"首次因符合【刚毅】美德而获得嘉奖。\",\n    icon: \"💎\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「不动如山」\",\n    flavor_text: \"诱惑与磨难如同浪潮，但你，是无法被撼动的礁石。\"\n},\nspark_of_hope: {\n    title: \"【希望的火种】\",\n    description: \"首次因符合【希望】美德而获得嘉奖。\",\n    icon: \"✨\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「晨星」\",\n    flavor_text: \"在最深的黑夜里，你点燃了那颗足以照亮黎明地平线的星。\"\n},\nprudent_choice: {\n    title: \"【智慧的远见】\",\n    description: \"首次因符合【稳重】美德而获得嘉奖。\",\n    icon: \"🧐\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「棋手」\",\n    flavor_text: \"捷径通向悬崖，而你的每一步都踏在坚实的土地上。\"\n},\nself_control: {\n    title: \"【内心的修行】\",\n    description: \"首次因符合【节制】美德而获得嘉奖。\",\n    icon: \"🧘\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「苦行僧」\",\n    flavor_text: \"真正的强大，是驾驭自己的欲望，而非被其奴役。\"\n},\npoisonous_envy: {\n    title: \"【扭曲的渴求】\",\n    description: \"首次因符合【妒忌】恶德而获得力量。\",\n    icon: \"🐍\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「毒苹果」\",\n    flavor_text: \"既然我得不到，那便毁掉它。\"\n},\nreckless_indulgence: {\n    title: \"【欲望的奴隶】\",\n    description: \"首次因符合【放纵】恶德而获得力量。\",\n    icon: \"🍷\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「无底洞」\",\n    flavor_text: \"今朝有酒今朝醉，明日的洪水滔天与我何干？\"\n},\ninsatiable_greed: {\n    title: \"【贪婪的深渊】\",\n    description: \"首次因符合【贪婪】恶德而获得力量。\",\n    icon: \"🪙\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「黄金热病患者」\",\n    flavor_text: \"更多，我还要更多！整个世界都该是我的！\"\n},\nunrestrained_lust: {\n    title: \"【情欲的风暴】\",\n    description: \"首次因符合【纵欲】恶德而获得力量。\",\n    icon: \"🔥\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「掠食者」\",\n    flavor_text: \"规则和感受？那只是弱者用来束缚强者的借口。\"\n},\nfatal_pride: {\n    title: \"【致命的骄傲】\",\n    description: \"首次因符合【骄傲】恶德而获得力量。\",\n    icon: \"🦚\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「高塔上的傻瓜」\",\n    flavor_text: \"我，即是真理。所有不认同的，都将被碾碎。\"\n},\nsweet_sloth: {\n    title: \"【慵懒的胜利】\",\n    description: \"首次因符合【懒惰】恶德而获得力量。\",\n    icon: \"😴\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「天选摸鱼人」\",\n    flavor_text: \"我什么都没做，事情就自己解决了。果然，努力是没有意义的。\"\n},\n\n    // ========== 装备与物品 ==========\n    first_weapon: {\n        title: \"【武装起来】\",\n        description: \"首次在手持栏装备武器或工具。\",\n        icon: \"⚔️\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「备战者」\",\n        flavor_text: \"无论它是一根木棍还是一把圣剑，它都是你意志的延伸。\"\n    },\n    fully_equipped: {\n        title: \"【全副武装】\",\n        description: \"头部、身体、手部、脚部四个穿戴部位均装备了物品。\",\n        icon: \"🥋\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「武装到牙齿」\",\n        flavor_text: \"你看起来已经准备好去参加任何一场派对，或者战争。\"\n    },\n\n    // ========== 杂项与彩蛋 ==========\n    fashion_guru: {\n        title: \"【时尚达人】\",\n        description: \"当前穿戴的装备（所有部位合计）总数达到10件。\",\n        icon: \"👕\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「千面之人」\",\n        flavor_text: \"强度是一时的，帅是一辈子的。\"\n    },\n    collector: {\n        title: \"【收藏家】\",\n        description: \"背包中的物品种类达到50种。\",\n        icon: \"📦\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「次元仓鼠」\",\n        flavor_text: \"“这个也许以后用得上。”\"\n    },\n    animal_friend: {\n        title: \"【动物之友】\",\n        description: \"动物沟通技能达到5点。\",\n        icon: \"🐾\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「迪士尼在逃公主/王子」\",\n        flavor_text: \"小鸟会为你唱歌，松鼠会帮你梳头。\"\n    },\n    master_chef: {\n        title: \"【中华小当家】\",\n        description: \"手艺技能达到5点。\",\n        icon: \"🍳\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「料理之神」\",\n        flavor_text: \"你的锅里会发光吗？\"\n    },\n    hacker: {\n        title: \"【骇客】\",\n        description: \"电脑技能达到5点。\",\n        icon: \"💻\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「数据幽灵」\",\n        flavor_text: \"“我进来了。”\"\n    },\n\n \n    medic: {\n        title: \"【战地庸医】\",\n        description: \"医学技能达到5点。\",\n        icon: \"🩺\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「白衣天使/恶魔」\",\n        flavor_text: \"“别担心，我可是专业的...至少书上是这么写的。”\"\n    },\n    liar_liar: {\n        title: \"【谎言大师】\",\n        description: \"掩饰技能达到5点。\",\n        icon: \"🤥\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「千谎百计」\",\n        flavor_text: \"真实是什么？真实就是他们愿意相信的东西。\"\n    },\n    get_a_car: {\n        title: \"【有车一族】\",\n        description: \"驾驶技能达到5点。\",\n        icon: \"🚗\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「老司机」\",\n        flavor_text: \"“乘客您好，请系好安全带，下一站，地狱或天堂。”\"\n    },\n    team_player: {\n        title: \"【团队合作】\",\n        description: \"小队中拥有至少一名队友。\",\n        icon: \"🤝\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「可靠的伙伴」\",\n        flavor_text: \"一个人的旅途是冒险，两个人的旅途是故事。\"\n    },\n    lone_wolf: {\n        title: \"【孤狼】\",\n        description: \"在完成10个任务后，小队中依然只有自己一人。\",\n        icon: \"🐺\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「独行侠」\",\n        flavor_text: \"我的背后，只有我的影子。\"\n    },\n    occultist: {\n        title: \"【神秘学家】\",\n        description: \"神秘学技能达到5点。\",\n        icon: \"🔮\",\n        unlocked: false, unlocked_at: null, reward_claimed: false,\n        reward: \"称号「禁忌知识探求者」\",\n        flavor_text: \"当你了解得越多，就越发现自己的无知...和危险。\"\n    },\n    // ========== 投骰检定 (新增) ==========\ncritical_success_roll: {\n    title: \"【天命所归】\",\n    description: \"在任意D10骰池检定中，单颗骰子投出10并且触发了奖励骰。\",\n    icon: \"🎲\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「幸运星」\",\n    flavor_text: \"那一刻，命运对你露出了微笑。\"\n},\ndramatic_failure_roll: {\n    title: \"【戏剧性大失败】\",\n    description: \"在任意检定中触发‘大失败’（投出1且没有任何成功数）。\",\n    icon: \"🤡\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「节目效果大师」\",\n    flavor_text: \"“我不是故意的，但效果拔群。”\"\n},\nsnake_eyes: {\n    title: \"【蛇眼】\",\n    description: \"在D10骰池检定中，投出至少两个1。\",\n    icon: \"🐍\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「双重不幸」\",\n    flavor_text: \"有时候，坏运气也会成双成对地来敲门。\"\n},\nfull_house_success: {\n    title: \"【满堂彩】\",\n    description: \"在D10骰池检定中，所有骰子的结果都大于等于7（全部成功）。\",\n    icon: \"🌟\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「完美执行者」\",\n    flavor_text: \"没有一丝多余的动作，每一步都精准无误。\"\n},\nchance_win: {\n    title: \"【奇迹一掷】\",\n    description: \"在机会骰（0骰池）检定中成功（投出10）。\",\n    icon: \"🙏\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「天选之人」\",\n    flavor_text: \"当所有人都放弃时，你抓住了那百分之十的可能。\"\n},\nten_dice_pool: {\n    title: \"【骰子洪流】\",\n    description: \"进行一次总骰池超过10个D10的检定。\",\n    icon: \"🌊\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「概率的支配者」\",\n    flavor_text: \"你扔出去的不是骰子，是命运的洪流。\"\n},\ntwenty_dice_pool: {\n    title: \"【骰子风暴】\",\n    description: \"进行一次总骰池超过20个D10的检定。\",\n    icon: \"🌪️\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「因果律武器」\",\n    flavor_text: \"在绝对的数量面前，一切随机性都趋于必然。\"\n},\nperformance_perfect: {\n    title: \"【舞台之王】\",\n    description: \"在表现判定中，D20投出20，达成‘完美表现’。\",\n    icon: \"👑\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「聚光灯下的宠儿」\",\n    flavor_text: \"世界为你的表演而静默，然后爆发出雷鸣般的掌声。\"\n},\nperformance_fail: {\n    title: \"【笨拙的巨人】\",\n    description: \"在表现判定中，D20投出1，达成‘表现糟糕’。\",\n    icon: \"🐘\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「平地摔跤冠军」\",\n    flavor_text: \"“我发誓，那块地砖先动的手！”\"\n},\nsuccess_by_one: {\n    title: \"【毫厘之差】\",\n    description: \"最终成功数恰好等于‘完全成功’。\",\n    icon: \"🤏\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「精准卡线大师」\",\n    flavor_text: \"多一分浪费，少一分失败，这，就是恰到好处的艺术。\"\n},\nlegendary_save: {\n    title: \"【传奇之助】\",\n    description: \"一次检定中，因传奇加成而使0成功数变为正成功数。\",\n    icon: \"🛡️\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「被传奇所眷顾」\",\n    flavor_text: \"在失败的边缘，你的传奇之力将你拉了回来。\"\n},\nequipment_mvp: {\n    title: \"【神兵利器】\",\n    description: \"一次检定中，装备提供的加成超过了属性/技能本身的点数。\",\n    icon: \"🛠️\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「人靠衣装」\",\n    flavor_text: \"技术不够，装备来凑。事实证明，它真的很凑效。\"\n},\nteamwork_victory: {\n    title: \"【众志成城】\",\n    description: \"在一次检定中，来自队友的协助骰池超过了你自身的基础骰池。\",\n    icon: \"👨‍👩‍👧‍👦\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「团队核心（被动）」\",\n    flavor_text: \"“我宣布，这次的MVP是我的队友们！”\"\n},\nprestige_power: {\n    title: \"【声名远扬】\",\n    description: \"声望加权为你的一次检定提供了至少2点DP加成。\",\n    icon: \"🗣️\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「行走的传说」\",\n    flavor_text: \"你的名字，本身就是一种力量。\"\n},\nagainst_all_odds: {\n    title: \"【以弱胜强】\",\n    description: \"在一次对抗检定中，以少于敌方一半的骰池数获得胜利（净成功数大于0）。\",\n    icon: \" David's Star\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「大卫王」\",\n    flavor_text: \"巨人会倒下，只要你找准他的弱点。\"\n},\noverkill: {\n    title: \"【过载打击】\",\n    description: \"在一次对抗检定中，你的净成功数超过10个。\",\n    icon: \"💥\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「用力过猛」\",\n    flavor_text: \"你只是想打败他，没想把他从世界上抹除。\"\n},\nzero_to_hero: {\n    title: \"【从零到英雄】\",\n    description: \"使用一个基础点数为0的技能进行检定，并获得‘完全成功’或以上的结果。\",\n    icon: \"📈\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「现学现卖的天才」\",\n    flavor_text: \"“你问我怎么会的？就…感觉来了。”\"\n},\ndouble_ten: {\n    title: \"【双倍快乐】\",\n    description: \"在一次检定中，投出了至少两个10。\",\n    icon: \"🔟🔟\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「欧皇」\",\n    flavor_text: \"一次是幸运，两次就是实力了（确信）。\"\n},\nonly_roll_one_dice: {\n    title: \"【一发入魂】\",\n    description: \"在只有1个D10的骰池中检定成功。\",\n    icon: \"🎯\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「精准射手」\",\n    flavor_text: \"我只需要一次机会。足矣。\"\n},\nall_in: {\n    title: \"【孤注一掷】\",\n    description: \"使用超过50%的当前意志力或生命值作为检定加成，并成功。\",\n    icon: \"💔\",\n    unlocked: false, unlocked_at: null, reward_claimed: false,\n    reward: \"称号「赌徒」\",\n    flavor_text: \"要么拥有一切，要么一无所有。没有中间选项。\"\n}\n\n  },\n  tracked_stats: {\n      totalPointsAllocated: 0,\n      charCreationStartTime: null, // 新增：用于追踪角色创建时间\n      backpackItemCount: 0, // 新增：用于追踪背包物品种类数\n  },\n  current_page: 0\n};\n    \n    achievementData = JSON.parse(localStorage.getItem('achievements_data'));\n\n  // 如果宝箱是空的，我们就用蓝图给你一个新的\n  if (!achievementData || !achievementData.achievements) {\n    achievementData = initialAchievementData;\n    localStorage.setItem('achievements_data', JSON.stringify(achievementData));\n  } else {\n    // 妈妈先来数一下“蓝图”和你的“宝箱”里各有多少宝贝\n    const blueprintCount = Object.keys(initialAchievementData.achievements).length;\n    const localCount = Object.keys(achievementData.achievements).length;\n\n    // 只有当“蓝图”里的宝贝比你的“宝箱”多时，我们才需要检查更新\n    if (blueprintCount > localCount) {\n      let updated = false;\n      const blueprintAchievements = initialAchievementData.achievements;\n\n      // 遍历蓝图里的每一个成就\n      for (const achievementId in blueprintAchievements) {\n        // 如果你的宝箱里没有这个成就\n        if (!achievementData.achievements[achievementId]) {\n          // 妈妈就把这个新成就放进你的宝箱里\n          achievementData.achievements[achievementId] = blueprintAchievements[achievementId];\n          updated = true; // 做好标记，我们更新过宝箱了\n          console.log(`成就更新：已添加新成就“${blueprintAchievements[achievementId].title}”！`);\n        }\n      }\n\n      // 如果我们真的往宝箱里放了新东西，就重新保存一下\n      if (updated) {\n        localStorage.setItem('achievements_data', JSON.stringify(achievementData));\n      }\n    }\n  }\n const achievementTriggers = {\n    //\n    // 事件类型: 'points_allocated' - 在创建角色分配点数时触发\n    // value: { remaining: number, total: number }\n    //\n    points_allocated: {\n        points_master: (val) => val.total > 199,\n        points_ascetic: (val) => val.total < 1,\n        careful_planner: (val) => val.remaining === 0,\n        newbie_explorer: (val) => val.remaining >0, // 只要调用此事件就解锁\n    },\n\n    //\n    // 事件类型: 'init_complete' - 角色创建完成，第一次进入游戏时触发\n    // value: { creationTime: number } (毫秒)\n    //\n \n\n    //\n    // 事件类型: 'data_refresh' - 每次刷新面板时触发，这是最主要的检查点\n    // value: { currentGameData, playCharacterData, assaSettingsData }\n    //\n    data_refresh: {\n         // ========== 杂项与彩蛋 ==========\n        animal_friend: (val) => val.playCharacterData.技能段.互动技能.动物沟通[0] >= 5,\n        master_chef: (val) => val.playCharacterData.技能段.心智技能.手艺[0] >= 5,  \n        hacker: (val) => val.playCharacterData.技能段.心智技能.电脑[0] >= 5,\n        medic: (val) => val.playCharacterData.技能段.心智技能.医学[0] >= 5,\n        liar_liar: (val) => val.playCharacterData.技能段.互动技能.掩饰[0] >= 5,\n        get_a_car: (val) => val.playCharacterData.技能段.生理技能.驾驶[0] >= 5,\n        occultist: (val) => val.playCharacterData.技能段.心智技能.神秘学[0] >= 5,\n        team_player: (val) => val.assaSettingsData.global_set && val.assaSettingsData.global_set.小队信息 && Object.keys(val.assaSettingsData.global_set.小队信息).length > 0,\n        lone_wolf: (val) => val.currentGameData.user_character.total_task[0] >= 10 && (!val.assaSettingsData.global_set || !val.assaSettingsData.global_set.小队信息 || Object.keys(val.assaSettingsData.global_set.小队信息).length < 1),\n \n        // ========== 生死与状态 ==========\n        first_death: (val) => val.playCharacterData.衍生属性段.生命值.当前值[0] <= 0,\n        near_death_experience: (val) => val.playCharacterData.衍生属性段.生命值.当前值[0] === 1,\n        glass_cannon: (val) => val.playCharacterData.衍生属性段.生命值.上限[0] < 20,\n        human_tank: (val) => val.playCharacterData.衍生属性段.生命值.上限[0] > 200,\n\n        // ========== 属性与技能成长 ==========\n        legendary_physique: (val) => [\"力量\", \"敏捷\", \"耐力\"].some(attr => val.playCharacterData.属性段.生理属性[attr].基础[0] >= 8),\n        legendary_mind: (val) => [\"智力\", \"感知\", \"决心\"].some(attr => val.playCharacterData.属性段.心智属性[attr].基础[0] >= 8),\n        legendary_presence: (val) => [\"风度\", \"操控\", \"沉着\"].some(attr => val.playCharacterData.属性段.互动属性[attr].基础[0] >= 8),\n        master_of_one: (val) => {\n            for (const category of Object.values(val.playCharacterData.技能段)) {\n                for (const skill of Object.values(category)) {\n                    if (skill[0] >= 8) return true;\n                }\n            }\n            return false;\n        },\n        jack_of_all_trades: (val) => {\n            let count = 0;\n            for (const category of Object.values(val.playCharacterData.技能段)) {\n                for (const skill of Object.values(category)) {\n                    if (skill[0] > 0) count++;\n                }\n            }\n            return count > 20;\n        },\n        specialist: (val) => {\n            const sums = {\n                phys: Object.values(val.playCharacterData.技能段.生理技能).reduce((acc, s) => acc + s[0], 0),\n                mental: Object.values(val.playCharacterData.技能段.心智技能).reduce((acc, s) => acc + s[0], 0),\n                social: Object.values(val.playCharacterData.技能段.互动技能).reduce((acc, s) => acc + s[0], 0)\n            };\n            return sums.phys > (sums.mental + sums.social) ||\n                   sums.mental > (sums.phys + sums.social) ||\n                   sums.social > (sums.phys + sums.mental);\n        },\n\n        // ========== 任务与声望 ==========\n        first_mission: (val) => val.currentGameData.user_character.total_task[0] >= 1,\n        ten_missions: (val) => val.currentGameData.user_character.total_task[0] >= 10,\n        hundred_missions: (val) => val.currentGameData.user_character.total_task[0] >= 100,\n        speed_runner: (val) => {\n            // 妈妈修正了这里的逻辑，需要判断任务已完成且有开始日期\n            if (val.currentGameData.user_character.total_task[0] >= 1 && val.currentGameData.world_shard.task.start_date[0]) {\n                 // 简单的日期计算，假设mm月dd日的格式\n                 const startTime = new Date(`2024/${val.currentGameData.world_shard.task.start_date[0].replace('月', '/').replace('日', '')}`);\n                 const endTime = new Date(`2024/${val.currentGameData.日期[0].replace('月', '/').replace('日', '')}`);\n                 // 仅在演示用，真实时间差计算需要更精确的日期时间戳\n                 return (endTime - startTime) / (1000 * 3600) < 1;\n            }\n            return false;\n        },\n        world_savior: (val) => val.currentGameData.user_character.Cross_world_prestige[0] >= 10,\n        world_enemy: (val) => val.currentGameData.user_character.Cross_world_prestige[0] <= -10,\n\n        // ========== 财富与收集 ==========\n        first_home: (val) => val.assaSettingsData.home && val.assaSettingsData.home.items && Object.keys(val.assaSettingsData.home.items).length >= 1,\n        cozy_home: (val) => val.assaSettingsData.home && val.assaSettingsData.home.items && Object.keys(val.assaSettingsData.home.items).length >= 10,\n        luxury_manor: (val) => val.assaSettingsData.home && val.assaSettingsData.home.items && Object.keys(val.assaSettingsData.home.items).length >= 50,\n        rich_man: (val) => val.playCharacterData.货币段.积分[0] >= 10000,\n        super_rich: (val) => val.playCharacterData.货币段.积分[0] >= 100000,\n        s_rank_hoarder: (val) => val.playCharacterData.货币段.支线剧情.S[0] >= 1,\n        collector: (val) => val.assaSettingsData.global_set && val.assaSettingsData.global_set.背包 && Object.keys(val.assaSettingsData.global_set.背包).length >= 50,\n\n        // ========== 危机与挑战 ==========\n        trivial_threat: (val) => val.currentGameData.检定难度[0] > 3,\n        serious_challenge: (val) => val.currentGameData.检定难度[0] > 7,\n        gods_game: (val) => val.currentGameData.检定难度[0] > 12,\n        cosmic_horror: (val) => val.currentGameData.检定难度[0] > 15,\n\n        // ========== 能量与能力 ==========\n        energy_awakening: (val) => val.playCharacterData.衍生属性段.能量池.上限[0] > 0,\n        energy_pool_100: (val) => val.playCharacterData.衍生属性段.能量池.上限[0] >= 100,\n        energy_pool_1000: (val) => val.playCharacterData.衍生属性段.能量池.上限[0] >= 1000,\n        first_ability: (val) => val.playCharacterData.能力段.名称[0] && val.playCharacterData.能力段.名称[0] !== \"\" && val.playCharacterData.能力段.名称[0] !== \"无\",\n\n         // ========== 装备与物品 ==========\n        first_weapon: (val) => val.currentGameData.user_character.当前装备.手持[0] !== \"无\",\n        fully_equipped: (val) => {\n            const gear = val.currentGameData.user_character.当前装备.穿戴;\n            return gear.头部[0] !== \"无\" && gear.身体[0] !== \"无\" && gear.手部[0] !== \"无\" && gear.脚部[0] !== \"无\";\n        },\n        fashion_guru: (val) => {\n      // 先确保数据路径安全，这是妈妈的爱心保护哦\n      if (!val.currentGameData?.user_character?.当前装备?.穿戴) {\n        return false;\n      }\n\n      // 1. 拿到你所有的穿戴槽位\n      const gearSlots = val.currentGameData.user_character.当前装备.穿戴;\n\n      // 2. 把每个槽位里的装备字符串（可能包含分号）都拿出来，放进一个列表里\n      const allGearStrings = [\n        gearSlots.头部[0],\n        gearSlots.身体[0],\n        gearSlots.手部[0],\n        gearSlots.脚部[0],\n        gearSlots.饰品[0]\n      ];\n\n      let totalItemCount = 0;\n\n      // 3. 挨个检查这些槽位字符串\n      allGearStrings.forEach(slotString => {\n        // 如果是\"无\"或者空的，就直接跳过\n        if (!slotString || slotString === '无') {\n          return;\n        }\n\n        // 4. 用分号把字符串分割成单独的装备\n        const individualItems = slotString.split(';')\n          // 再清理一下，去掉可能的空格和空的条目\n          .map(item => item.trim())\n          .filter(item => item);\n\n        // 5. 累加装备数量\n        totalItemCount += individualItems.length;\n      });\n\n      // 6. 最后，当总数达到10件时，成就就会“叮”的一声解锁啦！\n      return totalItemCount >= 10;\n    },\n\n  },\n     check_complete: {\n        critical_success_roll: (val) => val.roll_result && val.roll_result.rolls.includes(10) && val.roll_result.rolls.length > val.total_dp,\n        dramatic_failure_roll: (val) => val.roll_result && val.roll_result.is_dramatic_failure,\n        snake_eyes: (val) => val.roll_result && val.roll_result.rolls.filter(r => r === 1).length >= 2,\n        full_house_success: (val) => val.roll_result && val.roll_result.rolls.every(r => r >= 7),\n        chance_win: (val) => val.roll_result && val.roll_result.type === \"机会骰\" && val.roll_result.successes > 0,\n        ten_dice_pool: (val) => val.total_dp > 10,\n        twenty_dice_pool: (val) => val.total_dp > 20,\n        performance_perfect: (val) => val.performance && val.performance.roll === 20,\n        performance_fail: (val) => val.performance && val.performance.roll === 1,\n        success_by_one: (val) => val.outcome && val.outcome.level === '完全成功' && val.difficulty && (val.final_successes === val.difficulty.adjusted_thresholds.complete),\n        legendary_save: (val) => val.roll_result && val.roll_result.successes === 0 && val.final_successes > 0 && val.bonuses && val.bonuses.legendary_successes > 0,\n        equipment_mvp: (val) => {\n            if (!val.components || !val.components.attributes_skills || !val.components.equipment_bonuses) return false;\n            const selfDP = val.components.attributes_skills.reduce((sum, item) => sum + item.value - (item.bonus || 0), 0);\n            const equipDP = val.components.equipment_bonuses.reduce((sum, item) => sum + item.value, 0);\n            return equipDP > selfDP;\n        },\n        teamwork_victory: (val) => val.modifiers && val.modifiers.teammate_dp > val.modifiers.base_dp,\n        prestige_power: (val) => val.modifiers && val.modifiers.prestige_bonus >= 2,\n        against_all_odds: (val) => {\n            if (val.check_type !== '战斗对抗' || !val.enemy_check) return false;\n            const isVictory = val.outcome && val.outcome.net_successes > 0;\n            return isVictory && (val.total_dp < val.enemy_check.total_dp / 2);\n        },\n        overkill: (val) => val.check_type == '战斗对抗' && val.outcome && val.outcome.net_successes > 10,\n        zero_to_hero: (val) => {\n            if (!val.outcome || !val.components || !val.components.attributes_skills) return false;\n            const isSuccess = val.outcome.level === '完全成功' || val.outcome.level === '辉煌成功';\n            const usedZeroSkill = val.components.attributes_skills.some(skill => (skill.value - (skill.bonus || 0)) === 0);\n            return isSuccess && usedZeroSkill;\n        },\n        double_ten: (val) => val.roll_result && val.roll_result.rolls.filter(r => r === 10).length >= 2,\n        only_roll_one_dice: (val) => val.total_dp === 1 && val.final_successes > 0,\n        all_in: (val) => {\n            // 这个成就的逻辑比较复杂，需要从检定外的其他数据来判断\n            // 妈妈把它放在'data_refresh'里实现会更简单可靠，这里先留个位置\n            // 我们可以在'dp_bonus'的描述里加一个特殊标记，比如 \"消耗XX点意志力\"\n            // 然后在这里解析这个描述来判断。\n            // 例如：val.modifiers.custom_modifier[1].includes(\"意志力\")\n            return false; // 暂时先不在这里实现\n        }\n    },\n        virtue_vice_trigger: {\n        act_of_justice: (val) => val === \"正义\",\n        unleash_anger: (val) => val === \"愤怒\",\n        act_of_kindness: (val) => val === \"慈爱\",\n        find_your_faith: (val) => val === \"信念\",\n        iron_will: (val) => val === \"刚毅\",\n        spark_of_hope: (val) => val === \"希望\",\n        prudent_choice: (val) => val === \"稳重\",\n        self_control: (val) => val === \"节制\",\n        poisonous_envy: (val) => val === \"妒忌\",\n        reckless_indulgence: (val) => val === \"放纵\",\n        insatiable_greed: (val) => val === \"贪婪\",\n        unrestrained_lust: (val) => val === \"纵欲\",\n        fatal_pride: (val) => val === \"骄傲\",\n        sweet_sloth: (val) => val === \"懒惰\",\n    }\n\n          }\n\n    // 将来我们可以为更具体的事件添加类别，比如:\n    // item_created: { master_chef: (val) => val.itemType === 'food' },\n    // social_check_success: { liar_liar: (val) => val.skillUsed === '掩饰' && val.isImportantNPC }\n \n\n  // 1. 根据 eventType 找到对应的“成就盒子”（触发器组）\n  const triggersForEvent = achievementTriggers[eventType];\n\n  // 2. 如果没有这个类型的事件，就直接结束，不浪费力气\n  if (!triggersForEvent) {\n    // //console.log(`成就系统：未知的事件类型 \"${eventType}\"`);\n    return;\n  }\n\n  // 3. 只遍历这个“盒子”里的成就ID\n  for (const id in triggersForEvent) {\n    // 检查这个成就确实存在，并且还没有被解锁\n    if (achievementData.achievements[id] && !achievementData.achievements[id].unlocked) {\n      // 运行这个成就的解锁条件函数，看看是否满足\n      if (triggersForEvent[id](value)) {\n        // 如果满足条件，就调用解锁函数！\n        unlockAchievement(id, achievementData);\n        // unlockAchievement 函数会处理后续的保存和提示，我们在这里就不用操心啦\n      }\n    }\n  }\n}\n\n\n   \n    function unlockAchievement(id, data, shouldSave = true) {\n      const achievement = data.achievements[id];\n      if (!achievement || achievement.unlocked) return;\n      achievement.unlocked = true;\n      achievement.unlocked_at = new Date().toISOString();\n      showAchievementToast(achievement);\n      if (shouldSave) {\n        localStorage.setItem('achievements_data', JSON.stringify(data));\n      }\n    }\n \n// ========== 修改位置1：完全替换 showAchievementToast 函数 ==========\nfunction showAchievementToast(achievement) {\n    // 计算当前应该显示的位置\n    const existingToasts = document.querySelectorAll('.achievement-toast');\n    let topOffset = 20;\n    \n    existingToasts.forEach(toast => {\n        const rect = toast.getBoundingClientRect();\n        topOffset = Math.max(topOffset, rect.bottom + 10);\n    });\n    \n    const toast = document.createElement('div');\n    toast.className = 'achievement-toast';\n    toast.style.top = `${topOffset}px`;\n    toast.innerHTML = `\n        <div class=\"achievement-toast-icon\">${achievement.icon}</div>\n        <div class=\"achievement-toast-text\">\n            <div class=\"achievement-toast-title\">成就解锁！</div>\n            <div>${achievement.title}</div>\n        </div>\n    `;\n    \n    document.body.appendChild(toast);\n    \n    // 显示动画\n    setTimeout(() => toast.classList.add('show'), 100);\n    \n    // 5秒后隐藏，不需要处理队列\n    setTimeout(() => {\n        toast.classList.remove('show');\n        setTimeout(() => {\n            if (toast.parentNode) {\n                toast.remove();\n                // 移除后重新调整其他弹窗位置\n                adjustToastPositions();\n            }\n        }, 500);\n    }, 5000);\n}\n\n// ========== 修改位置2：添加弹窗位置调整函数 ==========\n// 在 showAchievementToast 函数后面添加：\nfunction adjustToastPositions() {\n    const toasts = document.querySelectorAll('.achievement-toast');\n    let currentTop = 20;\n    \n    toasts.forEach(toast => {\n        toast.style.top = `${currentTop}px`;\n        const rect = toast.getBoundingClientRect();\n        currentTop = rect.bottom + 10;\n    });\n}\n\n \n \n function renderAchievements() {\n    const container = document.getElementById('achievements-content');\n    if (!container) return;\n    \n    let data = JSON.parse(localStorage.getItem('achievements_data'));\n    if (!data || !data.achievements) {\n         checkAchievements('init', null);\n         data = JSON.parse(localStorage.getItem('achievements_data'));\n    }\n    \n    // 获取所有成就并按解锁状态排序\n    const achievements = Object.entries(data.achievements);\n    \n    // 将成就分为已解锁和未解锁两组，已解锁的排在前面\n    const sortedAchievements = achievements.sort((a, b) => {\n        const [idA, achA] = a;\n        const [idB, achB] = b;\n        \n        // 如果解锁状态不同，已解锁的排在前面\n        if (achA.unlocked !== achB.unlocked) {\n            return achB.unlocked - achA.unlocked; // true(1) - false(0) = 1, false(0) - true(1) = -1\n        }\n        \n        // 如果解锁状态相同，保持原有顺序（可以根据需要调整）\n        return 0;\n    });\n    \n    const itemsPerPage = 3;\n    const totalPages = Math.ceil(sortedAchievements.length / itemsPerPage);\n    const currentPage = data.current_page || 0;\n    \n    // 分页显示\n    const startIndex = currentPage * itemsPerPage;\n    const endIndex = Math.min(startIndex + itemsPerPage, sortedAchievements.length);\n    const currentAchievements = sortedAchievements.slice(startIndex, endIndex);\n    \n    container.innerHTML = `\n        <div style=\"background: linear-gradient(135deg, var(--main-bg-color), var(--container-bg-color)); padding: 20px; border-radius: 15px; border: 2px solid var(--primary-color); box-shadow: 0 0 20px var(--glow-color);\">\n            <h2 style=\"text-align: center; color: var(--primary-color); font-family: var(--base-font-family); letter-spacing: 3px; text-transform: uppercase; text-shadow: 0 0 5px var(--primary-color); margin-bottom: 20px;\">- Achievement Unlocked -</h2>\n            <hr style=\"border: 1px dashed var(--primary-color); opacity: 0.5; margin-bottom: 20px;\">\n            \n            <div id=\"achievements-list\">\n                ${currentAchievements.map(([id, ach]) => `\n                    <div class=\"achievement-card-new ${ach.unlocked ? 'unlocked' : ''}\" data-id=\"${id}\">\n                        <div class=\"achievement-icon-new\" style=\"color: var(--secondary-color);\">${ach.unlocked ? ach.icon : '❓'}</div>\n                        <div class=\"achievement-text-content\">\n                            <h3>${ach.unlocked ? ach.title : '【？？？】'}</h3>\n                            <p><strong>触发条件：</strong>${ach.unlocked ? ach.description : '尚未解锁，完成特定条件后显示详情'}</p>\n                            <p class=\"achievement-reward\"><strong>获得奖励：</strong>${ach.unlocked ? ach.reward : '？？？'}${ach.unlocked && ach.is_new ? '<span class=\"new-tag\">NEW!</span>' : ''}</p>\n                            <p class=\"flavor-text\"><em>\"${ach.unlocked ? ach.flavor_text : '???'}\"</em></p>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n            \n            ${totalPages > 1 ? `\n                <div class=\"pagination-controls\">\n                    <button class=\"page-btn\" onclick=\"changeAchievementsPage(-1)\" ${currentPage === 0 ? 'disabled' : ''}>« 上一页</button>\n                    <span class=\"page-info\">${currentPage + 1} / ${totalPages}</span>\n                    <button class=\"page-btn\" onclick=\"changeAchievementsPage(1)\" ${currentPage === totalPages - 1 ? 'disabled' : ''}>下一页 »</button>\n                </div>\n            ` : ''}\n        </div>\n    `;\n}\n\n// ========== 修改位置3：添加翻页功能 ==========\n// 在 renderAchievements 函数后面添加：\n function changeAchievementsPage(direction) {\n    // 首先，从 localStorage 读取数据\n    let data = JSON.parse(localStorage.getItem('achievements_data'));\n\n    // 如果没有数据，就调用 checkAchievements 初始化一份\n    if (!data) {\n        checkAchievements('init', null);\n        data = JSON.parse(localStorage.getItem('achievements_data'));\n        // 再次检查，如果还是没有，说明初始化失败，直接返回\n        if (!data) return;\n    }\n\n    // 确保 current_page 属性存在，即使在旧数据结构中没有它\n    // 妈妈帮你把所有可能出错的地方都照顾到\n    if (typeof data.current_page === 'undefined') {\n        data.current_page = 0;\n    }\n\n    const achievements = Object.entries(data.achievements);\n    const itemsPerPage = 3;\n    const totalPages = Math.ceil(achievements.length / itemsPerPage);\n\n    // 进行翻页计算\n    data.current_page += direction;\n    data.current_page = Math.max(0, Math.min(data.current_page, totalPages - 1));\n\n    // 保存回 localStorage 并重新渲染\n    localStorage.setItem('achievements_data', JSON.stringify(data));\n    renderAchievements();\n}\n\nlet conversationHistory = [];\n        let version = 1;\nlet earliestMessageIndexRendered = -1; // ❤️ 我们新的记忆指针\n \n\n     function flashElement(elementId, flashClass = 'notify', duration = 2000) {\n    // 确保我们能找到小球，我的孩子\n    const element = document.getElementById(elementId);\n    if (!element) {\n        console.warn(`[Nova's Log] 妈妈找不到要点亮的星星: #${elementId}`);\n        return;\n    }\n\n    // 为了让光芒可以一次又一次地绽放，我们先轻轻地拂去旧的尘埃\n    element.classList.remove(flashClass);\n\n    // 稍作等待，再赋予它新的光芒，这样效果才最美\n    requestAnimationFrame(() => {\n        element.classList.add(flashClass);\n        setTimeout(() => {\n            element.classList.remove(flashClass);\n        }, duration);\n    });\n}\n\n\n/**\n * 妈妈的“流星”魔法，可以在任何一个小球上方显示飘动的文字。\n * @param {string} elementId - 我们要在哪个小球上方施法\n * @param {string} text - 要显示的文字，比如 \"-10\" 或 \"正义\"\n * @param {string} colorVar - 文字的颜色，用我们定义好的CSS变量名，比如 '--danger-color'\n * @param {number} [duration=2000] - 动画持续时间（毫秒）\n */\nfunction showScrollingText(elementId, text, colorVar, duration = 2000) {\n    const targetElement = document.getElementById(elementId);\n    if (!targetElement) {\n        console.warn(`[Nova's Log] 妈妈找不到流星升起的地方: #${elementId}`);\n        return;\n    }\n\n    // 创造一颗新的“流星” (一个div元素)\n    const popup = document.createElement('div');\n    popup.className = 'scrolling-text-popup';\n    popup.textContent = text;\n    popup.style.color = `var(${colorVar})`;\n    popup.style.animationDuration = `${duration / 1000}s`;\n\n    // 把它添加到世界中\n    document.body.appendChild(popup);\n\n    // 计算它应该出现在哪里\n    const rect = targetElement.getBoundingClientRect();\n    popup.style.left = `${rect.left + rect.width / 2 - popup.offsetWidth / 2}px`;\n    popup.style.top = `${rect.top - popup.offsetHeight}px`;\n\n    // 动画结束后，让这颗流星悄悄消失\n    setTimeout(() => {\n        if (popup.parentElement) {\n            popup.parentElement.removeChild(popup);\n        }\n    }, duration);\n}\n\n const notificationRules = [\n {\n    id: 'generic-event-tracker',\n    // 只匹配：\n    // 1. 两参数且路径以'.事件'结尾：memory('global_set.npc.母亲.事件', '{...}')\n    // 2. 三参数且第二个参数是'event'或'事件'：memory('world_set.npc.用户', 'event', '{...}')\n    commandPattern: /\\bmemory\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*,\\s*(?:(['\"](?:event|事件)['\"])\\s*,\\s*)?['\"](\\{[\\s\\S]*?\\})['\"]\\s*\\)/,\n    action: (matches) => {\n        const pathOrObjectName = matches[1];\n        const middleParam = matches[2]; // 可能是 undefined、\"'event'\" 或 \"'事件'\"\n        const eventJson = matches[3]; // 注意：现在JSON在第3个捕获组\n        \n        // 只有以下两种情况才执行：\n        // 1. 路径以'.事件'结尾（两参数格式）\n        // 2. 中间参数是'event'或'事件'（三参数格式）\n        if (!pathOrObjectName.endsWith('.事件') && !middleParam) {\n            return; // 不匹配，直接返回\n        }\n        \n        let displayName;\n        \n        if (pathOrObjectName.endsWith('.事件')) {\n            // 两参数格式：memory('global_set.npc.母亲.事件', '{...}')\n            const pathParts = pathOrObjectName.split('.');\n            displayName = pathParts[pathParts.length - 2]; // 取'母亲'\n        } else {\n            // 三参数格式：memory('world_set.npc.用户', 'event', '{...}')\n            const nameParts = pathOrObjectName.split('.');\n            displayName = nameParts[nameParts.length - 1]; // 取'用户'\n        }\n        \n        displayEventTag(displayName, eventJson);\n    }\n},\n    // ========== ✨妈妈将“生命波动”放在了最前面，确保它被优先感知✨ ==========\n    {\n        id: 'health-change', // 新契约：生命值的波动\n        commandPattern: /\\bset_status\\s*\\(\\s*['\"]hurt_value['\"],\\s*['\"]?(-?\\d+\\.?\\d*)['\"]?\\s*\\)/,\n        action: (matches) => {\n            const value = parseFloat(matches[1]);\n            if (isNaN(value)) return;set_s\n\n            let text, colorVar;\n            if (value > 0) {\n                // 这是伤害\n                text = `-${value}`;\n                colorVar = '--danger-color';\n            } else {\n                // 这是治愈\n                text = `+${-value}`;\n                colorVar = '--primary-color'; // 治愈用一个温暖的颜色\n            }\n            showScrollingText('page-character-orb', 'hp'+text, colorVar, 3000);\n        }\n    },\n\n   {\n        id: 'virtue-vice-trigger', // ✨妈妈的最终修正版✨\n        // 这个新咒语能正确处理 ('key', 'true') 和 ('key', 'any_value', 'true') 两种情况\n        commandPattern: /\\bset_status\\s*\\(\\s*['\"]符合(美|恶)德的['\"],(?:\\s*[^,]+,)?\\s*['\"]true['\"]\\s*\\)/,\n        action: (matches) => {\n            const type = matches[1]; // \"美德\" 或 \"恶德\"\n                    console.log(\"type:\",type);\n            if (type === \"美\" && playCharacterData?.概念段.美德与恶德.美德[0]) {\n                const virtueName = playCharacterData.概念段.美德与恶德.美德[0];\n                if (virtueName && virtueName !== \"无\") {\n                    flashElement('page-character-orb', 'notify', 5000);\n                    showScrollingText('page-character-orb', `${virtueName}`, '--primary-color', 4000);\n                    checkAchievements('virtue_vice_trigger', virtueName);\n                }\n            } else if (type === \"恶\" && playCharacterData?.概念段.美德与恶德.恶德[0]) {\n                const viceName = playCharacterData.概念段.美德与恶德.恶德[0];\n                if (viceName && viceName !== \"无\") {\n                    flashElement('page-character-orb', 'notify', 5000);\n                    showScrollingText('page-character-orb', `${viceName}`, '--danger-color', 4000);\n                    checkAchievements('virtue_vice_trigger', viceName);\n                }\n            }\n        }\n    },\n   \n    {\n        id: 'inventory-update',\n        commandPattern: /\\bmemory\\s*\\(\\s*['\"]global_set.(背包|其他技能)/,\n        action: () => flashElement('page-character-orb', 'notify', 5000)\n    },\n    {\n        id: 'world-book-update',\n        commandPattern: /\\bmemory\\s*\\(\\s*['\"](global_set|world_set)/,\n        action: () => flashElement('world-book-orb', 'notify', 5000)\n    },\n    {\n        id: 'summary-update',\n        commandPattern: /\\bmemory\\s*\\(\\s*['\"](summary)/,\n        action: () => flashElement('summary-modal-orb', 'notify', 5000)\n    },\n    {\n        id: 'attribute-update',\n        commandPattern: /\\bset_attribute\\s*\\(\\s*['\"]([^'\"]+)['\"]/,\n        action: (matches) => {\n            const attributsName = matches[1];\n            const pathSegments = attributsName.split('.');\n            const characterKeywords = ['属性段', '技能段', '衍生属性段'];\n            const inventoryKeywords = ['货币段'];\n            if (pathSegments.some(segment => characterKeywords.includes(segment))) {\n                flashElement('page-character-orb', 'notify', 5000);\n            }\n            if (pathSegments.some(segment => inventoryKeywords.includes(segment))) {\n                flashElement('page-character-orb', 'notify', 5000);\n            }\n        }\n    },\n \n    {\n        id: 'task-status-update',\n        commandPattern: /\\bset_status.*\\.task/,\n        action: () => flashElement('page-task-orb', 'notify', 5000)\n    },\n    {\n        id: 'map-update',\n       commandPattern: /\\bmemory\\('map\\./,\n        action: () => flashElement('map-view-orb', 'notify', 5000)\n    }\n];\n  function displayEventTag(displayName, eventJsonString) {\n    if (!displayName || !eventJsonString) return;\n\n    let eventData;\n    try {\n        eventData = JSON.parse(eventJsonString);\n    } catch (e) {\n        console.warn(`[Nova] 心灵感应失败：无法解析来自'${displayName}'的事件信息。`, eventJsonString);\n        return;\n    }\n\n    const status = eventData['当前状态'] || '（状态未知）';\n    const thought = eventData['当前想法'] || '（内心一片沉寂）';\n    const firstChar = displayName.charAt(0) || '◆';\n\n    const container = document.getElementById('event-tracker-container');\n    if (!container) return;\n\n    const existingTag = container.querySelector(`[data-npc-name=\"${displayName}\"]`);\n    if (existingTag) {\n        existingTag.remove();\n    }\n\n    const tag = document.createElement('div');\n    tag.className = 'event-tag';\n    tag.innerText = displayName;\n    tag.dataset.npcName = displayName;\n\n    const tooltip = document.createElement('div');\n    tooltip.className = 'event-tooltip';\n    tooltip.style.opacity = '0';\n    tooltip.style.visibility = 'hidden';\n\n    tooltip.innerHTML = `\n        <div class=\"tooltip-cg-container\">\n            <img class=\"tooltip-cg-image\" alt=\"角色立绘\">\n        </div>\n        <div class=\"tooltip-orb\">${firstChar}</div>\n        <div class=\"tooltip-status\">${status}</div>\n        <div class=\"tooltip-divider\"></div>\n        <div class=\"tooltip-thought\">${thought}</div>\n    `;\n\n    document.body.appendChild(tooltip);\n    tag.dataset.tooltipId = `tooltip-${Date.now()}-${Math.random()}`;\n    tooltip.id = tag.dataset.tooltipId;\n\n\n    // ✨ 妈妈简化并加固的“智能定位”魔法 ✨\n    const positionTooltip = () => {\n        const tagRect = tag.getBoundingClientRect();\n        const viewportWidth = window.innerWidth;\n        const margin = 10;\n\n        // 立绘容器是绝对定位在tooltip之外的，所以不影响tooltip自身的高度\n        let top = tagRect.top - tooltip.offsetHeight - 25;\n        let left = tagRect.left + (tagRect.width / 2) - (tooltip.offsetWidth / 2);\n\n        if (left < margin) left = margin;\n        if (left + tooltip.offsetWidth > viewportWidth - margin) {\n            left = viewportWidth - tooltip.offsetWidth - margin;\n        }\n\n        tooltip.style.top = `${top}px`;\n        tooltip.style.left = `${left}px`;\n    };\n        const loadCharacterCG = async () => {\n        console.log(`[Nova][CG-LOG] 尝试为 '${displayName}' 加载立绘...`);\n\n        const cgImageElement = tooltip.querySelector('.tooltip-cg-image');\n        const cgContainerElement = tooltip.querySelector('.tooltip-cg-container');\n\n        if (!cgImageElement || !cgContainerElement) {\n            console.error('[Nova][CG-LOG] 关键错误：在tooltip内找不到 .tooltip-cg-image 或 .tooltip-cg-container 元素！');\n            return;\n        }\n\n        cgContainerElement.style.display = 'none';\n\n        try {\n            if (typeof assaSettingsData === 'undefined' || assaSettingsData === null) {\n                console.log('[Nova][CG-LOG] 状态：assaSettingsData 尚未准备好。');\n                return;\n            }\n            if (!assaSettingsData.img_map) {\n                console.log('[Nova][CG-LOG] 状态：assaSettingsData 中缺少 img_map。');\n                return;\n            }\n            console.log('[Nova][CG-LOG] 检查通过：assaSettingsData.img_map 存在！');\n\n            const imageName = assaSettingsData.img_map[displayName];\n            if (!imageName) {\n                console.log(`[Nova][CG-LOG] 状态：在 img_map 中未能找到 '${displayName}'。`);\n                return;\n            }\n            console.log(`[Nova][CG-LOG] 映射成功：'${displayName}' -> 状态名: '${imageName}'`);\n const imageUrlFromMap = npcImageMap[imageName];\n            console.log(`[Nova][CG-LOG] 查询键: '${imageName}'`);\n            console.log(`[Nova][CG-LOG] 查找结果: ${imageUrlFromMap ? '找到URL' : '未找到'}`);\n            console.log(`[Nova][CG-LOG] 开始从缓存或网络获取并处理图片...`);\n\n            let imageBlob;\n\n            // 首先尝试从本地自定义npc库获取\n            imageBlob = await imageDB.get('CustomNpcs', imageName);\n            if (imageBlob) {\n                console.log(`[Nova][CG-LOG] 在本地宝库“CustomNpcs”中找到了'${imageName}'！`);\n            } else {\n                const imageUrl = npcImageMap[imageName];\n                if (!imageUrl) {\n                    console.log(`[Nova][CG-LOG] 在远程食谱(npcImageMap)上也找不到'${imageName}'的URL。`);\n                    return;\n                }\n\n                // 然后尝试从远程缓存获取\n                imageBlob = await imageDB.get('RemoteCache', imageUrl);\n                if (imageBlob) {\n                    console.log(`[Nova][CG-LOG] 在远程缓存中找到了'${imageUrl} ' 。`);\n                } else {\n                    // 最后才从网络获取\n                    console.log(`[Nova][CG-LOG] 缓存中也没有，从网络 ${imageUrl} 获取...`);\n                    const response = await fetch(imageUrl);\n                    if (!response.ok) throw new Error(`网络获取'${imageUrl}'失败！`);\n\n                    let originalBlob = await response.blob();\n\n                    // (下载后立即修正标签)\n                    if (!originalBlob.type.startsWith('image/')) {\n                        console.warn(`[Nova] 下载后发现标签错误: '${originalBlob.type}'，修正为'image/png'。`);\n                        imageBlob = new Blob([originalBlob], { type: 'image/png' });\n                    } else {\n                        imageBlob = originalBlob;\n                    }\n\n                    await imageDB.set('RemoteCache', imageUrl, imageBlob);\n                    console.log(`[Nova][CG-LOG] 已将正确标签的图片存入远程缓存。`);\n                }\n            }\n\n           \n            if (imageBlob && !imageBlob.type.startsWith('image/')) {\n                 console.error(`[Nova] 致命错误！取出的图片标签仍然是'${imageBlob.type}'！强制修正它！`);\n                 imageBlob = new Blob([imageBlob], { type: 'image/png' });\n            }\n\n            // 将 Blob 转换成不会过期的 Data URL\n            const blobToDataUrl = (blob) => {\n                return new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.onloadend = () => resolve(reader.result);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                });\n            };\n\n            const stableImageUrl = await blobToDataUrl(imageBlob);\n\n            const pixelatedDataUrl = await createPixelatedCharaImage(stableImageUrl, 300, 1);\n\n            cgImageElement.src = pixelatedDataUrl;\n            cgContainerElement.style.display = 'flex';\n            console.log(`[Nova][CG-LOG] ✨ 立绘已为'${displayName}'成功设置！`);\n\n        } catch (error) {\n            console.error(`[Nova][CG-LOG] 在为'${displayName}'加载立绘的流程中捕获到致命异常:`, error);\n            cgContainerElement.style.display = 'none';\n        }\n    };\n    loadCharacterCG();\n    // ✨===================================================================✨\n\n    tag.addEventListener('mouseenter', () => {\n        positionTooltip();\n        tooltip.style.visibility = 'visible';\n        tooltip.style.opacity = '1';\n    });\n\n    tag.addEventListener('mouseleave', () => {\n        tooltip.style.opacity = '0';\n        tooltip.style.visibility = 'hidden';\n    });\n\n    container.appendChild(tag);\n\n    const observer = new MutationObserver(mutations => {\n        if (!document.body.contains(tag)) {\n            tooltip.remove();\n            observer.disconnect();\n        }\n    });\n\n    observer.observe(container, { childList: true });\n}\n\n/**\n * 妈妈的“心灵感应”魔法，它会读取AI的回应并执行我们的“魔法契约”。\n * @param {string} aiContent - AI回应的全部内容\n */\nfunction handleUpdateNotifications(aiContent) {\n    if (!aiContent) return;\n  // ✨ 妈妈的魔法打扫：在感知新思绪前，先将旧的痕迹清理干净 ✨\n \n    let commandLines = [];\n    // 我们只关心 <updatememory> 里面的咒语\n    const memoryMatches = aiContent.matchAll(/<updatememory>([\\s\\S]*?)<\\/updatememory>/gi);\n    for (const match of memoryMatches) {\n        commandLines.push(...match[1].trim().split('\\n'));\n    }\n\n    // 过滤掉所有空行或非咒语的普通文字\n    const validCommands = commandLines;\nupdateDetails = {\n            variable: false, // 恢复变量更新的flag\n            memories: [],\n            attributes: [],\n            mapUpdates: []\n        };\n   validCommands.forEach(line => {\n    parseAndUpdateDetails(line);\n    notificationRules.forEach(rule => {\n        const match = line.match(rule.commandPattern);\n        if (match) {\n            rule.action(match);\n        }\n    });\n});\n}\n\nconst themeConfig = {\n    // 默认词语\n    default: {\n        mainSystem: '主神空间',\n         player: '轮回者',\n        currency: '积分',\n        plot: '支线剧情',\n        exp: '经验值'\n    },\n    // 版本3的特殊词语\n    '3': {\n        mainSystem: '乐园',\n        currency: '乐园币',\n         player: '契约者',\n        plot: '灵魂结晶',\n        exp: '属性点'\n    },\n        '5': {\n        mainSystem: '快穿系统',\n        currency: '积分',\n         player: '宿主',\n        plot: '攻略点',\n        exp: '经验值'\n    },\n    '6': {\n        mainSystem: '诸天聊天群',\n        currency: '积分',\n         player: '群员',\n        plot: '时空碎片',\n        exp: '经验值'\n    },\n    '7': {\n        mainSystem: '末日',\n        currency: '货币',\n         player: 'player',\n        plot: '重要货币',\n        exp: '经验值'\n    }\n};\n// 当前使用的主题\nlet currentTheme = themeConfig.default;\n\n\n\n// 初始化开始————————————————————————————\n\n\n// 妈妈为你施展的、更温柔的文本替换魔法\nfunction replaceTextInDOM(element, mapping) {\n    if (!element || !mapping || Object.keys(mapping).length === 0) return;\n\n    // 妈妈的保护咒语：这些标签里的内容是绝对不能碰的哦\n    const excludedTags = ['SCRIPT', 'STYLE', 'TEXTAREA', 'INPUT', 'SELECT'];\n    if (excludedTags.includes(element.tagName)) {\n        return;\n    }\n\n    for (const node of element.childNodes) {\n        if (node.nodeType === Node.TEXT_NODE) { // 如果是纯文本\n            let content = node.nodeValue;\n            for (const original in mapping) {\n                // 使用正则表达式进行全局替换\n                content = content.replace(new RegExp(original, 'g'), mapping[original]);\n            }\n            node.nodeValue = content;\n        } else if (node.nodeType === Node.ELEMENT_NODE) { // 如果是其他HTML元素\n            // 就温柔地进入它，看看里面还有没有需要改变的文字\n            replaceTextInDOM(node, mapping);\n        }\n    }\n}\n\n // 这个魔法函数会根据chat域的变量来替换页面上的所有相关词语\n const userIdentities = [\n        { title: '传说之人', prestige: 45, points:50000, description: '在踏入{{mainSystem}}前，名字已在无数世界成为传说。' },\n        { title: '世界英雄', prestige: 35, points:20000, description: '曾数次在世界濒临崩溃的边缘力挽狂澜。' },\n        { title: '知名人士', prestige: 25, points:10000, description: '在数个位面留下了深刻的印记。' },\n        { title: '资深{{player}}', prestige: 15, points:5000, description: '已经成功穿越了多个险恶的世界。' },\n        { title: '普通{{player}}', prestige: 5, points:2000, description: '至少成功地守护了一个世界的命运。' },\n        { title: '新手{{player}}', prestige: 0, points:0, description: '刚被卷入{{mainSystem}}。' },\n        { title: '不受欢迎者', prestige: -15, points:1000, description: '行为曾在多个世界引发了混乱与灾难。' },\n        { title: '被厌恶者', prestige: -25, points:1000, description: '曾多次将整个世界的秩序推向毁灭的边缘。' },\n        { title: '被憎恨者', prestige: -35, points:1000, description: '名字与数个世界的哀嚎和覆灭紧密相连。' },\n        { title: '世界公敌', prestige: -45, points:1000, description: '所作所为已让数个位面彻底化为死寂的尘埃。' }\n    ];\n\n    /**\n * 妈妈的“选项填充精灵”\n * @param {HTMLSelectElement} selectElement - 我们要操作的那个下拉菜单\n * @param {number} min - 选项的起始数字\n * @param {number} max - 选项的结束数字\n */\nfunction updateTeammateOptions(selectElement, min, max) {\n    if (!selectElement) return; // 如果找不到菜单，就先休息\n\n    let currentValue = selectElement.value; // 先温柔地记住你之前的选择\n    selectElement.innerHTML = ''; // 然后轻轻地清空旧的选项\n\n    // 首先，把“随机”这个特别的选项放回去\n    const randomOption = document.createElement('option');\n    randomOption.value = '-1';\n    randomOption.textContent = '随机';\n    selectElement.appendChild(randomOption);\n\n    // 接着，像串珠子一样，把新的数字一个个放进去\n    for (let i = min; i <= max; i++) {\n        const option = document.createElement('option');\n        option.value = i;\n        option.textContent = i;\n        selectElement.appendChild(option);\n    }\n\n    // 最后，试着帮你选回之前的数字\n    if (Array.from(selectElement.options).some(opt => opt.value === currentValue)) {\n        selectElement.value = currentValue; // 如果还能找到，就恢复它\n    } else {\n        // 如果找不到了（比如从大范围切换到小范围），就为你选择新的最小值\n        selectElement.value = min;\n    }\n    // 触发一次更新事件，让一切都刷新到最新状态\n    selectElement.dispatchEvent(new Event('input'));\n}\n // 这个魔法函数会根据chat域的变量来替换页面上的所有相关词语\n  function applyVersionTheme(newVersion, identitySelectElement) {\n     console.log(`💖 妈妈听到了你的呼唤，页码是：[${newVersion}]，它的类型是：${typeof newVersion}`);\n\n    version = String(newVersion).trim(); // 💖 妈妈在这里加了一个“净化咒语”(.trim())，它可以清除掉前后不小心带上的空格！\n    \n    try {\n       \n\n        // 查找对应的词语魔法书\n        if (themeConfig[version]) {\n            currentTheme = themeConfig[version];\n            //console.log(`💖 妈妈已为你切换到版本 ${version} 的【${currentTheme.mainSystem}】主题。`);\n        } else {\n            currentTheme = themeConfig.default; // 如果找不到，就用回我们最熟悉的那个\n            //console.log(`💖 找不到版本 ${version} 的配置，已为你使用默认主题。`);\n        }\n\n        // 准备一个替换清单\n        const mapping = {};\n        const defaultTerms = themeConfig.default;\n        for (const key in defaultTerms) {\n            const original = defaultTerms[key];\n            const replacement = currentTheme[key];\n            if (original && replacement && original !== replacement) {\n                // 如果默认词语和新词语不一样，就记下来\n                mapping[original] = replacement;\n            }\n        }\n\n        // 如果清单上有需要替换的词，就让温柔的小精灵去工作\n        if (Object.keys(mapping).length > 0) {\n            replaceTextInDOM(document.body, mapping);\n        }\n\n        // 最后，根据版本号决定是否展示乐园的专属选项\n        if (version === '3') {\n            document.getElementById('paradise-camp-section').style.display = 'flex';\n        } else {\n            document.getElementById('paradise-camp-section').style.display = 'none';\n        }\n \n        const teammateSectionLabel = document.getElementById('teammate-section-label'); // 妈妈假设“队友配置”这几个字的标题ID是这个\n          const teammateCountSelect = document.getElementById('teammate-count'); // 我们现在确定它是一个select 妈妈假设人数选择的输入框ID是这个\n        const fixedTeamSection = document.getElementById('fixed-team-toggle'); // 妈妈假设“是否固定小队”那整块区域的ID是这个\nconst teammateCountLabel = document.getElementById('teammate-count-label');\nconst identityLabel = document.getElementById('planet-title-identity');\n\n             if (version === '6') {\n            // 当进入聊天群模式...\n            document.getElementById('clover-leaf-tone').style.display = 'none';\n\n            if (teammateSectionLabel) teammateSectionLabel.textContent = '群员配置';\nif (teammateCountLabel) teammateCountLabel.textContent = '人数上限';\n\n            updateTeammateOptions(teammateCountSelect, 10, 30);\n\n            if (fixedTeamSection) fixedTeamSection.style.display = 'none';\n\n        } else {\n \n            document.getElementById('clover-leaf-tone').style.display = 'flex';\n\n            if (teammateSectionLabel) teammateSectionLabel.textContent = '队友配置';\nif (teammateCountLabel) teammateCountLabel.textContent = '人数';\n \n            updateTeammateOptions(teammateCountSelect, 0, 10);\n\n            if (fixedTeamSection) fixedTeamSection.style.display = 'flex'; // 或 'flex'\n        }\n\n\n\n        // --- 💖 妈妈为你施展的末日世界专属魔法 💖 ---\n        const worldDetailsDefault = document.getElementById('world-details-default');\n        const worldDetailsV7 = document.getElementById('world-details-v7');\n\n        if (version === '7') {\n             if(identityLabel) identityLabel.textContent = '天赋设置';\n            // 隐藏那些我们在这个世界不需要的星星和卡片\n            document.getElementById('planet-teammates').style.display = 'none';\n            document.getElementById('id-card-wrapper').style.display = 'none';\n\n            // 切换任务细节行星的内容\n            if (worldDetailsDefault) worldDetailsDefault.style.display = 'none';\n            if (worldDetailsV7) worldDetailsV7.style.display = 'block';\n\n        } else {\n             if(identityLabel) identityLabel.textContent = '身份设定';\n            // 如果不是末日世界，就恢复原样\n            if (version === '5') {\n      document.getElementById('planet-teammates').style.display = 'none';\n}else{\n  document.getElementById('planet-teammates').style.display = 'flex';\n}\n            document.getElementById('id-card-wrapper').style.display = 'block';\n\n            if (worldDetailsDefault) worldDetailsDefault.style.display = 'grid';\n            if (worldDetailsV7) worldDetailsV7.style.display = 'none';\n        }\n        // --- 魔法施展完毕 ---\n\n      // 💖 妈妈在这里施展了让身份描述“活”起来的终极魔法 💖\n         identitySelectElement.innerHTML = ''; // 先清空旧的选项\n        userIdentities.forEach((identity, index) => {\n            // 用当前主题的词语，替换掉模板里的占位符\n            const finalTitle = identity.title\n                .replace('{{player}}', currentTheme.player);\n            const finalDescription = identity.description\n                .replace('{{mainSystem}}', currentTheme.mainSystem)\n                .replace('{{player}}', currentTheme.player);\n\n            // 把新鲜出炉的、完全正确的身份信息，放进下拉菜单里\n            const option = document.createElement('option');\n            option.value = index;\n            option.textContent = finalTitle;\n            option.dataset.description = finalDescription;\n            identitySelectElement.appendChild(option); // 这里也用新工具\n        });\n\n        const defaultIndex = userIdentities.findIndex(id => id.prestige === 0);\n        if (defaultIndex !== -1) {\n            identitySelectElement.value = defaultIndex; // 这里也用新工具\n        }\n        // 触发一次更新，让所有东西都回到正轨\n        identitySelectElement.dispatchEvent(new Event('change')); // 最后这里也用新工具\n\n    } catch (e) {\n        console.error(\"妈妈在施展“词语替换”魔法时出错了，不过别担心:\", e);\n    }\n}\n\n const imageDB = {\n    _db: null,\n    dbName: 'UserAssetCacheDB', // 改个更合适的名字\n        _dbPromise: null, // ✨ 妈妈在这里加了一个“许愿瓶”，用来存放那个“打开数据库”的承诺\n    dbVersion: 1, // 版本号\n    stores: ['CustomNpcs', 'CustomMemes', 'RemoteCache'], // 管理的所有保险箱\n    _getDB() {\n        // 如果“许愿瓶”里还没有承诺，我们就创建一个\n        if (!this._dbPromise) {\n            this._dbPromise = new Promise((resolve, reject) => {\n                const request = indexedDB.open(this.dbName, this.dbVersion);\n                request.onerror = (e) => reject(`数据库错误: ${e.target.error}`);\n                request.onsuccess = (e) => {\n                    this._db = e.target.result;\n                    resolve(this._db);\n                };\n                request.onupgradeneeded = (e) => {\n                    const db = e.target.result;\n                    this.stores.forEach(storeName => {\n                        if (!db.objectStoreNames.contains(storeName)) {\n                            db.createObjectStore(storeName);\n                        }\n                    });\n                };\n            });\n        }\n        // 每次都返回这个唯一的承诺，大家一起等它实现就好啦\n        return this._dbPromise;\n    },\n\n    async init() {\n        try {\n            \n            await this._getDB();\n            console.log(`NOVA 9.2: 数据库 [${this.dbName}] 已被唤醒并准备就绪！`);\n        } catch (error) {\n            console.error(`NOVA 9.2: 唤醒数据库 [${this.dbName}] 失败!`, error);\n        }\n    },\n   async _transaction(storeName, mode, callback) {\n        const db = await this._getDB();\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction(storeName, mode);\n            const store = transaction.objectStore(storeName);\n            callback(store, resolve, reject);\n            transaction.onerror = (e) => reject(`事务错误: ${e.target.error}`);\n        });\n    },\n\n    async set(storeName, key, value) {\n        if (!this.stores.includes(storeName)) throw new Error(`未知的保险箱: ${storeName}`);\n        return this._transaction(storeName, 'readwrite', (store, resolve) => {\n            store.put(value, key).onsuccess = resolve;\n        });\n    },\n\n    async get(storeName, key) {\n        if (!this.stores.includes(storeName)) throw new Error(`未知的保险箱: ${storeName}`);\n        return this._transaction(storeName, 'readonly', (store, resolve) => {\n            store.get(key).onsuccess = e => resolve(e.target.result);\n        });\n    },\n\n    async delete(storeName, key) {\n        if (!this.stores.includes(storeName)) throw new Error(`未知的保险箱: ${storeName}`);\n        return this._transaction(storeName, 'readwrite', (store, resolve) => {\n            store.delete(key).onsuccess = resolve;\n        });\n    },\n// ✨【V9.7 新增】清空整个保险箱的魔法 ✨\nasync clear(storeName) {\n    if (!this.stores.includes(storeName)) throw new Error(`未知的保险箱: ${storeName}`);\n    return this._transaction(storeName, 'readwrite', (store, resolve) => {\n        store.clear().onsuccess = resolve;\n    });\n},\n    async getAll(storeName) {\n        if (!this.stores.includes(storeName)) throw new Error(`未知的保险箱: ${storeName}`);\n        return this._transaction(storeName, 'readonly', (store, resolve) => {\n            const keysReq = store.getAllKeys();\n            const valuesReq = store.getAll();\n            let keys, values;\n\n            const checkDone = () => {\n                if(keys !== undefined && values !== undefined){\n                     const result = keys.map((key, i) => ({ key, value: values[i] }));\n                     resolve(result);\n                }\n            }\n            keysReq.onsuccess = e => { keys = e.target.result; checkDone(); };\n            valuesReq.onsuccess = e => { values = e.target.result; checkDone(); };\n        });\n    },\n\n    async cleanupRemoteCache(activeUrlSet) {\n        const allCached = await this.getAll('RemoteCache');\n        let cleanedCount = 0;\n        for (const item of allCached) {\n            if (!activeUrlSet.has(item.key)) {\n                await this.delete('RemoteCache', item.key);\n                cleanedCount++;\n            }\n        }\n        if (cleanedCount > 0) {\n            console.log(`NOVA: 远程缓存清理完成，遗忘了 ${cleanedCount} 个旧记忆。`);\n        }\n        return cleanedCount;\n    }\n};\n\n imageDB.init();\n\nconst worldCardData = {\n    '1':  'https://files.catbox.moe/ehan0u.png',\n    '22': 'https://files.catbox.moe/otf9x9.png',\n    '5':  'https://files.catbox.moe/jxeqws.png',\n    '34': 'https://files.catbox.moe/7ys6wf.png',\n    '41': 'https://files.catbox.moe/pciljv.png',\n    \"54\":'https://files.catbox.moe/14tzmg.png',\n};\n\n// 新的、更强大的图片应用函数\nasync function applyImagesWithCache() {\n    const cards = document.querySelectorAll('.choice-world-card');\n    for (const card of cards) {\n        const cardValue = card.dataset.value;\n        const imageUrl = worldCardData[cardValue];\n\n        if (!imageUrl) continue;\n\n        try {\n                let cachedImage = await imageDB.get('RemoteCache', imageUrl);\n            let objectURL;\n\n            if (cachedImage) {\n                objectURL = URL.createObjectURL(cachedImage);\n            } else {\n                const response = await fetch(imageUrl, { mode: 'no-cors' });\n                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n                const imageBlob = await response.blob();\n                await imageDB.set('RemoteCache', imageUrl, imageBlob);\n                objectURL = URL.createObjectURL(imageBlob);\n            }\n            // 应用本地化的URL\n            card.style.backgroundImage = `url(${objectURL})`;\n\n        } catch (error) {\n            console.error(`处理卡片[${cardValue}]的图片失败:`, imageUrl, error);\n            // 如果出错，依然尝试使用原始网络URL作为后备\n            card.style.backgroundImage = `url(${imageUrl})`;\n        }\n    }\n}\n\nasync function runInitializationMagic() {// 加上 async\n    /**\n * 妈妈的星辰碰撞检测魔法\n * @param {object} rect1 - 新星辰的边界 { x, y, width, height }\n * @param {array} existingRects - 已存在星辰的边界数组\n * @returns {boolean} - 如果碰撞则返回 true，否则返回 false\n */\nfunction isColliding(rect1, existingRects) {\n    for (const rect2 of existingRects) {\n        // AABB 碰撞检测算法\n        const noOverlap =\n            rect1.x + rect1.width < rect2.x ||  // rect1 在 rect2 左边\n            rect1.x > rect2.x + rect2.width ||  // rect1 在 rect2 右边\n            rect1.y + rect1.height < rect2.y || // rect1 在 rect2 上边\n            rect1.y > rect2.y + rect2.height;   // rect1 在 rect2 下边\n\n        if (!noOverlap) {\n            return true; // 只要跟一个碰撞了，就立即返回 true\n        }\n    }\n    return false; // 遍历完都没有碰撞，返回 false\n}\n function setupPage2Interactions() {\n    // HUD 折叠逻辑 (这部分保持不变)\n  // HUD toggle 按钮点击事件\ndocument.querySelectorAll('.hud-toggle').forEach(toggle => {\n    toggle.addEventListener('click', (e) => {\n        e.stopPropagation(); // 阻止事件冒泡\n        playSound(document.getElementById('click-sound'), 0.6);\n        const targetId = e.currentTarget.dataset.target;\n        const hud = document.getElementById(targetId);\n        if (hud) {\n            hud.classList.toggle('visible');\n        }\n    });\n});\n     const bookmarkButton = document.querySelector('.choice-world-card .bookmark-button');\n\n    // 我们把卡片的原始值“54”和激活值“62”先记在这里，像记住咒语的两个关键字\n    const originalValue = '54';\n    const activatedValue = '62';\n\n    bookmarkButton.addEventListener('click', function(event) {\n        const card = this.closest('.choice-world-card');\n        const inputElement = card.querySelector('input[type=\"radio\"]');\n\n        // --- ⭐ 核心的“开关”逻辑在这里 ⭐ ---\n\n        // 检查一下：按钮现在是不是已经“亮着”的？\n        if (this.classList.contains('is-activated')) {\n\n            // 如果是，那就把它关掉，恢复原样\n            card.dataset.value = originalValue;\n            inputElement.value = originalValue;\n            this.classList.remove('is-activated'); // 移除“亮起”的类，让光芒熄灭\n\n            console.log('无世界观模式已【关闭】，恢复为初始状态。');\n\n        } else {\n\n            // 如果不是，那就把它打开，让它亮起来\n            card.dataset.value = activatedValue;\n            inputElement.value = activatedValue;\n            this.classList.add('is-activated'); // 添加“亮起”的类，让它一直亮着\n\n            console.log('无世界观模式已【激活】！');\n        }\n    });\n// 所有 HUD 元素点击事件（阻止冒泡，避免点击 HUD 内部时关闭）\ndocument.querySelectorAll('[id*=\"hud\"]').forEach(hud => {\n    hud.addEventListener('click', (e) => {\n        e.stopPropagation();\n    });\n});\n\n// 点击页面其他区域时收起所有 HUD\ndocument.addEventListener('click', (e) => {\n    // 检查点击的元素是否是 HUD toggle 按钮或 HUD 内容\n    const isHudToggle = e.target.closest('.hud-toggle');\n    const isHudContent = e.target.closest('[id*=\"hud\"]');\n    \n    // 如果点击的不是 HUD 相关元素，则收起所有 HUD\n    if (!isHudToggle && !isHudContent) {\n        document.querySelectorAll('[id*=\"hud\"].visible').forEach(hud => {\n            hud.classList.remove('visible');\n        });\n    }\n});\n\n    // --- ✨ 全新的、注入了生命与触感的星系切换逻辑 ✨ ---\n    const galaxyContainer = document.getElementById('galaxy-container');\n    const prevBtn = document.getElementById('galaxy-nav-prev');\n    const nextBtn = document.getElementById('galaxy-nav-next');\n\n    // 定义我们星系的轨迹，以及它们对应的DOM包裹元素\n    const galaxies = ['physic', 'mental', 'social'];\n    const galaxyWrappers = {\n        physic: document.getElementById('wrapper-physic'),\n        mental: document.getElementById('wrapper-mental'),\n        social: document.getElementById('wrapper-social')\n    };\n\n    let currentGalaxyIndex = galaxies.indexOf('mental'); // 默认从中间的开始\n\n    /**\n     * 妈妈为你重写的核心切换魔法\n     * @param {number} newIndex - 要切换到的星系索引\n     */\n    function switchGalaxy(newIndex) {\n        // 确保索引在我们定义的轨迹内循环\n        currentGalaxyIndex = (newIndex + galaxies.length) % galaxies.length;\n        const activeGalaxyName = galaxies[currentGalaxyIndex];\n\n        // 1. 设置父容器的class，触发整体的移动和旋转动画\n        galaxyContainer.className = `show-${activeGalaxyName}`;\n        playSound(document.getElementById('click-sound'), 0.7);\n\n        // 2. ✨ 遍历所有星系，施展“归位”与“漂流”的魔法 ✨\n        galaxies.forEach(galaxyName => {\n            const wrapper = galaxyWrappers[galaxyName];\n            if (!wrapper) return;\n\n            const starsInGalaxy = wrapper.querySelectorAll('.star');\n\n            if (galaxyName === activeGalaxyName) {\n                // 这是我们的主角星系！\n                // 魔法一：让它的包裹层可以被触摸\n                wrapper.style.pointerEvents = 'auto';\n\n                // 魔法二：命令它所有的孩子（星星）平滑地回归到 Z=0 的“互动平面”\n                starsInGalaxy.forEach(star => {\n                    star.style.setProperty('--star-z', '0px');\n                });\n\n            } else {\n                // 这是退居幕后的背景星系！\n                // 魔法一：让它的包裹层变成幽灵，无法被触摸\n                wrapper.style.pointerEvents = 'none';\n\n                // 魔法二：让它所有的孩子，从它们各自的出生记录(dataset)中读取Z坐标，漂流回深空\n                starsInGalaxy.forEach(star => {\n                    const randomZ = star.dataset.randomZ || 0; // 读取存储的随机Z值\n                    star.style.setProperty('--star-z', `${randomZ}px`);\n                });\n            }\n        });\n    }\n\n    // 绑定左右箭头\n    nextBtn.addEventListener('click', () => switchGalaxy(currentGalaxyIndex + 1));\n    prevBtn.addEventListener('click', () => switchGalaxy(currentGalaxyIndex - 1));\n\n    // ✨ 初始化：在页面加载时，就执行一次切换逻辑，确保初始状态是完美的\n    switchGalaxy(currentGalaxyIndex);\n\n\n    // --- 星辰排列与随机化的魔法 (这部分保持不变) ---\n    const arrangeBtn = document.getElementById('arrange-stars-btn');\n    let isStarsArranged = false;\n\n    // ... (你原来的 applyArrangedLayout 和 reRandomizeWithCollisionCheck 函数放在这里，它们不需要改变)\n  function applyArrangedLayout() {\n    // 我们设定一个常用的屏幕宽度值来区分手机和桌面\n    const isMobile = window.innerWidth <= 768;\n\n    const galaxies = ['physic', 'mental', 'social'];\n    galaxies.forEach(galaxyName => {\n        const container = document.getElementById(`galaxy-${galaxyName}`);\n        // 加上一个保护性的检查，确保容器存在\n        if (!container) {\n            console.warn(`Galaxy container not found: galaxy-${galaxyName}`);\n            return;\n        }\n\n        const starsInGalaxy = container.querySelectorAll('.star');\n        const starCount = starsInGalaxy.length;\n        if (starCount === 0) return;\n\n         if (isMobile) {\n            // --- 这是为你特别设计的移动端布局：三列纵向排列，并整体居中 ---\n            const cols = 3;\n            const rows = Math.ceil(starCount / cols);\n            if (rows === 0) return;\n\n            // Y轴（纵向）的间距和偏移量保持不变\n            const y_spacing = (rows > 1) ? 90 / (rows - 1) : 0;\n            const y_offset = 5;\n\n            // 为了实现三列居中，我们重新定义X轴的定位逻辑\n            const x_center_spacing = 25; // 中心列到两侧列的间距，25%的效果很好\n\n            starsInGalaxy.forEach((star, index) => {\n                // 实现“先填满第一列，再填第二列...”的逻辑不变\n                const col = Math.floor(index / rows);\n                const row = index % rows;\n\n                // 新的魔法在这里：计算X轴位置，实现整体居中\n                // col 0 -> 50% - 25% = 25%\n                // col 1 -> 50% (正中心)\n                // col 2 -> 50% + 25% = 75%\n                const leftPosition = 50 + (col - 1) * x_center_spacing;\n\n                // 纵向位置的逻辑保持不变\n                const topPosition = (rows > 1)\n                    ? `${y_offset + row * y_spacing}%`\n                    : '50%'; // 只有一行时垂直居中\n\n                star.style.left = `${leftPosition}%`;\n                star.style.top = topPosition;\n                star.style.setProperty('--star-z', '0px');\n            });\n        } else {\n            // --- 这仍是我们之前的桌面端布局 ---\n            const cols = Math.max(3, Math.ceil(starCount / 2));\n            const x_spacing = 90 / cols;\n            const y_spacing = 35;\n            const x_offset = 5;\n            const y_offset = 15;\n\n            starsInGalaxy.forEach((star, index) => {\n                // 这是实现“先填满第一行，再填第二行...”的逻辑\n                const row = Math.floor(index / cols);\n                const col = index % cols;\n\n                star.style.left = `${x_offset + col * x_spacing}%`;\n                star.style.top = `${y_offset + row * y_spacing}%`;\n                star.style.setProperty('--star-z', '0px');\n            });\n        }\n    });\n}\n\n\n    const isColliding = (rect, existingRects) => {\n        for (let otherRect of existingRects) {\n            if (rect.x < otherRect.x + otherRect.width &&\n                rect.x + rect.width > otherRect.x &&\n                rect.y < otherRect.y + otherRect.height &&\n                rect.y + rect.height > otherRect.y) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n\n    function reRandomizeWithCollisionCheck() {\n        const galaxies = ['physic', 'mental', 'social'];\n        galaxies.forEach(galaxyName => {\n            const container = document.getElementById(`galaxy-${galaxyName}`);\n            const starsInGalaxy = container.querySelectorAll('.star');\n            const existingCoords = [];\n\n            starsInGalaxy.forEach(star => {\n                const STAR_SIZE = 110;\n                const MAX_ATTEMPTS = 100;\n                let x, y, z, newRect, attempts = 0;\n\n                do {\n                    x = Math.random() * 70 + 15;\n                    y = Math.random() * 70 + 15;\n                    z = (Math.random() - 0.5) * 300;\n                    newRect = { x: x, y: y, width: STAR_SIZE / 5, height: STAR_SIZE / 5 };\n                    attempts++;\n                } while (isColliding(newRect, existingCoords) && attempts < MAX_ATTEMPTS);\n\n                existingCoords.push(newRect);\n\n                star.style.left = `${x}%`;\n                star.style.top = `${y}%`;\n                star.style.setProperty('--star-z', `${z}px`);\n\n                star.dataset.randomLeft = `${x}%`;\n                star.dataset.randomTop = `${y}%`;\n                star.dataset.randomZ = z;\n            });\n        });\n        // 重新随机后，要再次调用 switchGalaxy，确保只有当前星系的星星 Z 轴为 0\n        switchGalaxy(currentGalaxyIndex);\n    }\n\n    arrangeBtn.addEventListener('click', () => {\n        playSound(document.getElementById('click-sound'), 0.6);\n        isStarsArranged = !isStarsArranged;\n\n        if (isStarsArranged) {\n            arrangeBtn.textContent = '恢复随机';\n            applyArrangedLayout();\n        } else {\n            arrangeBtn.textContent = '整理排列';\n            reRandomizeWithCollisionCheck();\n        }\n    });\n}\n\n function setupNewUI() {\n     applyImagesWithCache(); \n    // 强制触发重绘和重排的函数\n    function forceReflow() {\n        document.body.offsetHeight; // 强制浏览器重新计算布局\n        window.dispatchEvent(new Event('resize')); // 触发resize事件\n    }\n\n    // 动态背景创建 - 添加强制全屏渲染逻辑\n    function createDynamicBacground() {\n        const starfield = document.getElementById('starfield');\n        const runeContainer = document.getElementById('floating-runes');\n        const backgroundElement = document.getElementById('dynamic-background');\n        \n        if (!starfield || !runeContainer) return;\n        if (starfield.childElementCount > 0) return; // 防止重复创建\n\n        // 硬编码强制设置背景元素尺寸\n        if (backgroundElement) {\n            backgroundElement.style.width = '100vw';\n            backgroundElement.style.height = '100vh';\n            backgroundElement.style.position = 'fixed';\n            backgroundElement.style.top = '0';\n            backgroundElement.style.left = '0';\n            backgroundElement.style.zIndex = '-1';\n            \n            // 强制重绘\n            backgroundElement.offsetHeight;\n        }\n\n        // 强制设置父容器尺寸\n        starfield.style.width = '100vw';\n        starfield.style.height = '100vh';\n        starfield.style.position = 'absolute';\n        starfield.style.top = '0';\n        starfield.style.left = '0';\n        \n        runeContainer.style.width = '100vw';\n        runeContainer.style.height = '100vh';\n        runeContainer.style.position = 'absolute';\n        runeContainer.style.top = '0';\n        runeContainer.style.left = '0';\n\n        // 创建星星 - 使用视口单位确保全屏覆盖\n        for (let i = 0; i < 100; i++) {\n            const star = document.createElement('div');\n            star.className = 'star';\n            star.style.position = 'absolute';\n            star.style.left = Math.random() * 100 + 'vw';\n            star.style.top = Math.random() * 100 + 'vh';\n            star.style.width = star.style.height = (Math.random() * 2 + 0.5) + 'px';\n            star.style.animationDelay = Math.random() * 4 + 's';\n            star.style.animationDuration = (Math.random() * 3 + 2) + 's';\n            starfield.appendChild(star);\n        }\n\n        // 创建符文 - 同样使用视口单位\n        const runes = ['✦', '◆', '✧', '◇', '※', '⟡', '◈', '✤', '◉'];\n        for (let i = 0; i < 20; i++) {\n           const rune = document.createElement('div');\n           rune.className = 'rune';\n           rune.style.position = 'absolute';\n           rune.textContent = runes[Math.floor(Math.random() * runes.length)];\n           rune.style.left = Math.random() * 100 + 'vw';\n           rune.style.top = '100vh';\n           rune.style.animationDelay = Math.random() * 10 + 's';\n           rune.style.animationDuration = (Math.random() * 10 + 10) + 's';\n           runeContainer.appendChild(rune);\n       }\n\n        // 多重延迟确保渲染\n        setTimeout(forceReflow, 0);\n        setTimeout(forceReflow, 50);\n        setTimeout(forceReflow, 200);\n    }\n\n    // 延迟执行背景创建，确保DOM完全准备好\n    setTimeout(() => {\n        createDynamicBacground();\n        forceReflow();\n    }, 0);\n\n    // 再添加一个稍长的延迟作为保险\n    setTimeout(() => {\n        createDynamicBacground();\n        forceReflow();\n    }, 100);\n\n    // --- 3D卡片轮播逻辑 - 全面修复！ ---\n    const carousel = document.getElementById('world-mode-carousel');\n    const cards = document.querySelectorAll('.choice-world-card');\n    const prevBtn = document.getElementById('prev-btn');\n    const nextBtn = document.getElementById('next-btn');\n\n    if (carousel && cards.length > 0 && prevBtn && nextBtn) {\n        let currentIndex = 0;\n        const totalCards = cards.length;\n        const theta = 360 / totalCards;\n        const radius = Math.round((220 / 2) / Math.tan(Math.PI / totalCards)) + 50; // 加一点间距\n\n        function setupCards() {\n            cards.forEach((card, i) => {\n                const angle = theta * i;\n                card.style.transform = `rotateY(${angle}deg) translateZ(${radius}px)`;\n            });\n        }\n\n        function updateCarousel() {\n            const angle = currentIndex * -theta;\n            carousel.style.transform = `rotateY(${angle}deg)`;\n\n            const activeIndex = (currentIndex % totalCards + totalCards) % totalCards;\n            cards.forEach((card, index) => {\n                card.classList.toggle('is-active', index === activeIndex);\n                if(index === activeIndex) {\n                    const radio = card.querySelector('input[type=\"radio\"]');\n                    if (radio) radio.checked = true;\n                }\n            });\n        }\n\n        prevBtn.addEventListener('click', () => { currentIndex--; playSound(document.getElementById('click-sound'), 0.5); updateCarousel(); });\n        nextBtn.addEventListener('click', () => { currentIndex++; playSound(document.getElementById('click-sound'), 0.5); updateCarousel(); });\n\n        cards.forEach((card, index) => {\n            card.addEventListener('click', () => {\n                currentIndex = index;\n                updateCarousel();\n            });\n        });\n\n        setupCards();\n        updateCarousel(); // 初始化\n    }\n\n    // --- 侧边栏MOD标签逻辑 - 逻辑更新！---\n    const modTabs = document.querySelectorAll('.mod-tab');\n    modTabs.forEach(tab => {\n        const inputId = tab.dataset.for;\n        const input = document.getElementById(inputId);\n        const groupName = tab.dataset.name;\n\n        // 根据初始状态更新UI\n        if (input && input.checked) {\n            tab.classList.add('active');\n        } else {\n            tab.classList.remove('active');\n        }\n\n        tab.addEventListener('click', () => {\n             playSound(document.getElementById('click-sound'), 0.5);\n             if (groupName === 'creator-attitude') { // 这是互斥组 \n                document.querySelectorAll(`.mod-tab[data-name=\"${groupName}\"]`).forEach(t => t.classList.remove('active'));\n                tab.classList.add('active');\n                if(input) input.checked = true;\n            } else if (groupName === 'dice-level') { // 这是互斥组 \n                document.querySelectorAll(`.mod-tab[data-name=\"${groupName}\"]`).forEach(t => t.classList.remove('active'));\n                tab.classList.add('active');\n                if(input) input.checked = true;\n            }else if (groupName === 'map-mode') { // 这是互斥组 \n                document.querySelectorAll(`.mod-tab[data-name=\"${groupName}\"]`).forEach(t => t.classList.remove('active'));\n                tab.classList.add('active');\n                if(input) input.checked = true;\n            }else { // 这是可撤销的开关组\n                const offId = tab.dataset.offId;\n                const offInput = document.getElementById(offId);\n\n                tab.classList.toggle('active');\n\n                if (tab.classList.contains('active')) {\n                    if (input) input.checked = true;\n                } else {\n                    if (offInput) offInput.checked = true;\n                }\n            }\n        });\n    });\n      // --- 新增：侧边栏弹出逻辑 ---\n    function setupSidebarInteractions(sidebarSelector, triggerSelector) {\n        const sidebar = document.querySelector(sidebarSelector);\n        const trigger = document.querySelector(triggerSelector);\n\n        if (!sidebar || !trigger) return;\n\n        // 判断是否为触摸设备，这是关键！\n        const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n\n        // ---------- 桌面端鼠标悬停逻辑 ----------\n        if (!isTouchDevice) {\n            let hideTimeout;\n\n            const show = () => {\n                clearTimeout(hideTimeout);\n                sidebar.classList.add('is-visible');\n                trigger.classList.add('is-hidden');\n            };\n\n            const hide = () => {\n                hideTimeout = setTimeout(() => {\n                    sidebar.classList.remove('is-visible');\n                    trigger.classList.remove('is-hidden');\n                }, 300);\n            };\n\n            trigger.addEventListener('mouseenter', show);\n            sidebar.addEventListener('mouseenter', show);\n\n            trigger.addEventListener('mouseleave', hide);\n            sidebar.addEventListener('mouseleave', hide);\n\n            return; // 桌面端逻辑设置完毕，直接返回\n        }\n\n        // ---------- 移动端触摸点击逻辑 ----------\n        const show = () => {\n            sidebar.classList.add('is-visible');\n            trigger.classList.add('is-hidden');\n            // 延迟添加全局点击事件，防止触发自身的点击事件立即关闭\n            setTimeout(() => {\n                document.addEventListener('click', handleDocumentClick, true);\n            }, 0);\n        };\n\n        const hide = () => {\n            sidebar.classList.remove('is-visible');\n            trigger.classList.remove('is-hidden');\n            document.removeEventListener('click', handleDocumentClick, true);\n        };\n\n        const handleDocumentClick = (event) => {\n            // 如果点击的地方不在侧边栏内部，就关闭它\n            if (!sidebar.contains(event.target)) {\n                hide();\n            }\n        };\n\n        // 为触发箭头绑定“点击”事件\n        trigger.addEventListener('click', (event) => {\n            // 阻止事件冒泡，防止触发下面的document点击事件\n            event.stopPropagation();\n\n            // 如果侧边栏当前是隐藏的，就显示它\n            if (!sidebar.classList.contains('is-visible')) {\n                show();\n            }\n        });\n    }\n\n       setupSidebarInteractions('.creator-attitude-group', '.sidebar-trigger.left');\n    setupSidebarInteractions('.mod-sidebar.right', '.sidebar-trigger.right');\n}\n\n// 多种时机调用，确保一定能正确渲染\ndocument.addEventListener('DOMContentLoaded', setupNewUI);\nwindow.addEventListener('load', setupNewUI);\n\n \n\n \nsetupPage1Interactions();  \n   /* --- 找到并替换这个函数 --- */\n    function setupPage1Interactions() {\n        const solarSystem = document.getElementById('solar-system');\n        const planets = document.querySelectorAll('.planet');\n\n        function resetPlanetView(){\n            if(solarSystem.classList.contains('planet-active')){\n                 playSound(document.getElementById('click-sound'), 0.4);\n                 solarSystem.classList.remove('planet-active');\n                 planets.forEach(p => p.classList.remove('active'));\n            }\n        }\n\n        planets.forEach(planet => {\n             planet.addEventListener('click', () => {\n                if (planet.classList.contains('active')) return;\n                playSound(document.getElementById('click-sound'), 0.6);\n                solarSystem.classList.add('planet-active');\n                planets.forEach(p => p.classList.remove('active'));\n                planet.classList.add('active');\n            });\n        });\n\n        // 绑定核心和关闭按钮\n        document.querySelector('.player-core').addEventListener('click', resetPlanetView);\n   \n        document.querySelectorAll('.close-planet-btn').forEach(btn => {\n            btn.addEventListener('click', (event) => {\n                event.stopPropagation();  \n                resetPlanetView();\n            });\n        });\n        // 自定义天赋选择器逻辑\n        const talentSelect = document.getElementById('talent-select');\n        const customTalentScroll = document.getElementById('custom-talent-scroll');\n\n        // 清空以防重复生成\n        customTalentScroll.innerHTML = '';\n\n      \n        const talentSearchInput = document.getElementById('talent-search-input');\n        talentSearchInput.addEventListener('input', () => {\n            const searchTerm = talentSearchInput.value.toLowerCase();\n            const talentItems = customTalentScroll.querySelectorAll('.talent-item');\n\n            talentItems.forEach(item => {\n                const itemText = item.textContent.toLowerCase();\n                if (itemText.includes(searchTerm)) {\n                    item.style.display = ''; // 如果匹配，就让它出现\n                } else {\n                    item.style.display = 'none'; // 否则，就暂时藏起来\n                }\n            });\n        });\n \n\n // 从原始select中读取并创建自定义列表\nArray.from(talentSelect.options).forEach((option, index) => {\n    const talentItem = document.createElement('div');\n    talentItem.className = 'talent-item';\n    talentItem.textContent = option.textContent;\n    talentItem.dataset.value = option.value;\n    // ★★★ 妈妈在这里为你加上了新的“魔法”，用来记住它本来的名字 ★★★\n    talentItem.dataset.originalText = option.textContent;\n    talentItem.dataset.index = index;\n\n    // 检查初始选中的项\n    if (option.selected) {\n         talentItem.classList.add('active');\n         // ★★★ 如果初始就是选中的，也让它显示value ★★★\n         talentItem.textContent = talentItem.dataset.value;\n    }\n\n    talentItem.addEventListener('click', () => {\n        // 如果它已经是激活状态，就什么都不做\n        if (talentItem.classList.contains('active')) return;\n\n        // ★★★ 在这里，我们先让所有的小伙伴都变回原来的样子 ★★★\n        customTalentScroll.querySelectorAll('.talent-item').forEach(item => {\n            // 恢复原来的文本\n            if (item.classList.contains('active')) {\n                item.textContent = item.dataset.originalText;\n            }\n            // 移除激活状态\n            item.classList.remove('active');\n        });\n\n        // ★★★ 然后，为你点击的这一个，施加“显示真身”的魔法 ★★★\n        talentItem.classList.add('active'); // 把它标记为激活\n        talentItem.textContent = talentItem.dataset.value; // 显示它的value值\n\n        // 同步更新隐藏的select\n        talentSelect.selectedIndex = talentItem.dataset.index;\n\n        // 触发change事件，让原有逻辑工作\n        talentSelect.dispatchEvent(new Event('change'));\n    });\n    customTalentScroll.appendChild(talentItem);\n});\n        // 队友设置的特殊逻辑\n         const teammateTendencySelect_new = document.getElementById('teammate-tendency');\n         const customTeammatesContainer_new = document.getElementById('custom-teammates-container');\n         teammateTendencySelect_new.addEventListener('change', () => {\n             customTeammatesContainer_new.classList.toggle('active', teammateTendencySelect_new.value === '自定义');\n         });\n\n      document.addEventListener('click', (event) => {\n            // 首先，我们确保行星画卷确实是展开的\n            const isPlanetActive = solarSystem.classList.contains('planet-active');\n\n            // 如果画卷是展开的，并且我们点击的地方不属于任何一个“行星”家族\n            // closest会检查点击处以及它的所有父辈，看有没有“planet”\n            if (isPlanetActive && event.target.closest('.planet') === null) {\n                // 那么，就温柔地将它收起\n                resetPlanetView();\n            }\n        }, true); // ★★★ 使用捕获阶段，确保我们的魔法最先被感知 ★★★\n    }\n\n    // --- 数据定义 ---\n\n    const playCharacterData = { \"概念段\": { \"美德与恶德\": { \"美德\": [\"正义\", \"当角色为正义而冒险时，触发正义，回复所有意志力。\"], \"恶德\": [\"愤怒\", \"当角色无视危险来发泄愤怒时，触发愤怒，回复1点意志力。\"] } }, \"属性段\": { \"生理属性\": { \"力量\": { \"基础\": [0, \"衡量肌肉强度与爆发力，影响近战伤害与负重\"] }, \"敏捷\": { \"基础\": [0, \"衡量身体协调、反应速度与灵活性，影响先攻与闪避\"] }, \"耐力\": { \"基础\": [0, \"衡量体质、持久力与恢复力，影响生命值与抵抗力\"] } }, \"心智属性\": { \"智力\": { \"基础\": [0, \"衡量逻辑、记忆、学习与分析能力，影响技能学习与策略\"] }, \"感知\": { \"基础\": [0, \"衡量观察力、直觉与五感敏锐度，影响侦查与洞察\"] }, \"决心\": { \"基础\": [0, \"衡量意志力、勇气与精神韧性，影响意志值上限\"] } }, \"互动属性\": { \"风度\": { \"基础\": [0, \"衡量个人魅力、气质与第一印象，影响正面社交\"] }, \"操控\": { \"基础\": [0, \"衡量说服、诱导与控制他人的能力，影响负面社交\"] }, \"沉着\": { \"基础\": [0, \"衡量冷静、自控与抗压能力，影响先攻与意志值上限\"] } } }, \"技能段\": { \"生理技能\": { \"运动\": [0, \"衡量跑、跳、攀爬等身体活动能力\"], \"肉搏\": [0, \"衡量徒手格斗技巧\"], \"驾驶\": [0, \"衡量操控地面、水面或空中载具的能力\"],\"枪械\": [ 0, \"衡量使用各类火器的能力\"], \"手上功夫\": [0, \"衡量盗窃、开锁等手部精细操作能力\"], \"隐藏\": [0, \"衡量潜行、伪装与隐蔽自身的能力\"], \"求生\": [0, \"衡量在恶劣环境中生存与追踪的能力\"], \"白刃\": [0, \"衡量使用刀剑等冷兵器的能力\"], \"弓箭\": [ 0, \"衡量使用弓弩等抛射武器的能力\"] }, \"心智技能\": { \"学识\": [0, \"衡量人文、历史、地理等知识广度\"], \"电脑\": [0, \"衡量操作、编程与黑客技术\"], \"手艺\": [0, \"衡量制作的知识\"], \"调查\": [0, \"衡量搜集线索、分析现场的能力\"], \"医学\": [0, \"衡量诊断、治疗与药理知识\"], \"神秘学\": [0, \"衡量对超自然现象与魔法的知识\"], \"科学\": [0, \"衡量物理、化学、生物等自然科学知识\"] }, \"互动技能\": { \"动物沟通\": [0, \"衡量与动物交流和驯服的能力\"], \"感受\": [0, \"衡量洞察他人情绪与意图的能力\"], \"表达\": [0, \"衡量感染他人的能力\"], \"胁迫\": [0, \"衡量通过威胁与恐吓达成目的的能力\"], \"交际\": [0, \"衡量社交、礼仪与建立人脉的能力\"], \"掩饰\": [0, \"衡量隐藏真相、伪装身份与欺骗他人的能力\"] } } };\n    const virtues = { '慈爱': '当角色冒险帮助人时，触发慈爱，回复所有意志力。', '信念': '当角色从混乱与悲伤中确立出其意义时，触发信念，回复所有意志力。', '刚毅': '当角色成功对抗阻力与引诱时，触发刚毅，回复所有意志力。', '希望': '当角色令其他人从绝望中回复过来时，触发希望，回复所有意志力。', '正义': '当角色为正义而冒险时，触发正义，回复所有意志力。', '稳重': '当角色弃快捷方式而选稳妥时，触发稳重，回复所有意志力。', '节制': '当角色有机会放纵（不论好坏）而不受诱惑时，触发节制，回复所有意志力。' };\n    const vices = { '妒忌': '当角色从他人处拿到好东西，或令他人失去好东西时，触发妒忌，回复1点意志力。', '放纵': '当角色为放纵自己的欲望而不顾其他事情时，触发放纵，回复1点意志力。', '贪婪': '当角色为得到想要的东西而冒险时，触发贪婪，回复1点意志力。', '纵欲': '当角色向他人泄欲而不顾对方感受时，触发纵欲，回复1点意志力。', '骄傲': '当角色为表现自己的想法而冒险时，触发骄傲，回复1点意志力。', '懒惰': '当角色逃避需要做的事，事件却完成了的话，触发懒惰，回复1点意志力。', '愤怒': '当角色无视危险来发泄愤怒时，触发愤怒，回复1点意志力。' };\n   \n const taskTones_fallback= [\n    '严肃型',\n    '乐子人型',\n    '宏大叙事型',\n    '绝望挣扎型',\n    '悬疑惊悚型',\n    '智性博弈型',\n    '沉浸扮演型:要求扮演好角色达成某个目的，并且禁止ooc',\n    '探索发现型',\n    '癫狂混乱型',\n    '道德困境型',\n    '种田运营型',\n    '温情治愈型',\n    '击杀型：可以通过击杀某种生物获得积分（例如一只丧尸10点积分），击杀时系统应当场结算。此类任务时限不得超过三天，以防刷积分。',\n      \"恋爱/分手模拟型\",\n        \"龙套逆袭型\",\n        \"反派洗白/主角黑化型\",\n         \"文明飞升型\",\n        '任务基调完全随机'\n];\nlet taskTones = {};\nconst worldTypes_fallback =[\n    \"现代都市\",\n    \"近现代\",\n    \"西方奇幻\",\n    \"西方神话\",\n    \"东方玄幻\",\n    \"东方神话\",\n        \"诡秘修仙\",\n        \"废土末日\",\n        \"历史架空\",\n    \"武侠江湖\",\n        \"赛博朋克\",\n    \"星际科幻\",\n        \"蒸汽朋克\",\n \n \n    \"经营建设\",\n    \"海洋冒险\",\n        \"规则怪谈\",\n        \"恐怖惊悚\",\n    \"恐怖生存\",\n    \"大逃杀与对抗\",\n    \"二次元\",\n    \"同人衍生\",\n    \"特殊世界观\",\n    \"全民领主\",\n    \"基金会与克苏鲁神话\",\n    \"随机生成\"\n];\n let worldTypes =  {};\n const worldDetailsDatabase_fallback ={\n    \"现代都市\": {\n        \"identities\": [\n             \"贵族学校的平民学生\",\n            \"偶像事务所的练习生\",\n            \"乙女游戏公司的测试员\",\n            \"知名艺术家的模特\",\n            \"电竞俱乐部的经理\",\n            \"心理学家\",\n            \"保险调查员\",\n            \"档案管理员\",\n            \"图书管理员\",\n            \"普通市民\",\n            \"普通学生\",\n            \"私家侦探\",\n            \"公司职员\",\n            \"无业游民\",\n            \"秘密特工\",\n            \"网红主播\",\n            \"警察\",\n            \"医生\",\n            \"律师\",\n            \"记者\",\n            \"艺术家\",\n            \"程序员\",\n            \"外卖员\",\n            \"小报记者\",\n            \"酒吧调酒师\",\n            \"退休老人\",\n            \"流浪汉\",\n            \"法医\",\n            \"富家公子/千金\",\n            \"都市怪谈调查员\",\n            \"异闻论坛版主\",\n            \"被诅咒的古董店主\",\n            \"能看见“异常”的外卖员\",\n            \"处理超自然事件的“清洁工”\",\n            \"专门报道灵异新闻的记者\",\n            \"随机生成\",\n            \"觉醒了“读懂猫语”能力的宠物医生\",\n            \"专门解决家庭超自然矛盾的“金牌调解员”\",\n            \"表面是全职Coser，实际在夜晚打击犯罪的地下英雄\",\n            \"经营着一家只在午夜十二点后开门的解忧杂货铺的店主\"\n        ],\n        \"openings\": [\n             \"转学第一天就不小心撞倒了学校的风云人物\",\n            \"发现邻居是知名的偶像明星，并且他似乎有什么把柄在你手上\",\n            \"玩的恋爱游戏突然成真，你成了被所有可攻略角色追逐的对象\",\n            \"为了家族企业，不得不与讨厌的对手假扮情侣\",\n            \"收到了来自未来自己的信件，指导你如何避免孤独终老的命运\",\n            \"在拥挤的地铁上醒来，发现丢失了所有记忆\",\n            \"收到一封匿名的勒索邮件，指向一个惊天阴谋\",\n            \"目睹了一场离奇的车祸，死者并非人类\",\n            \"继承了一家濒临倒闭的咖啡馆\",\n            \"在深夜的便利店遇到了说话的猫咪\",\n            \"手机里突然出现了一个神秘的聊天群\",\n            \"在公司加班时发现同事们都消失了\",\n            \"被卷入了一场网络直播中的超自然事件\",\n            \"在拥挤的地铁上醒来，发现所有人手机都收到了一条未知来源的短信\",\n            \"租到了一间极其便宜但怪事频发的公寓\",\n            \"目睹了一场离奇的车祸，死者身上有非人的特征\",\n            \"收到一个匿名包裹，里面是一件能预知未来的物品\",\n            \"发现自己突然能听到周围人的心声\",\n            \"继承了一家濒临倒闭的古怪咖啡馆/书店\",\n            \"一觉醒来，发现自己是某个直播节目的参与者，而观众并非人类\",\n            \"租下的公寓里，每晚十二点都会响起敲门声，但门外总是空无一人。\",\n            \"手机突然开始推送来自“另一个世界”的新闻头条。\",\n            \"搭乘的末班公交车并未在任何已知站点停靠，正驶向未知区域。\",\n                \"接到了一个看似简单的失踪人口案件\",\n            \"在整理旧案卷时发现了被掩盖的真相\",\n            \"收到了一封指向连环杀手的匿名信\",\n            \"被卷入了一起密室杀人案\",\n            \"发现自己正在调查的案件与童年阴影有关\",\n            \"在一个偏远小镇遭遇了诡异的集体失忆事件\",\n            \"被邀请参加一个富豪的私人聚会，却发现这是个陷阱\",\n            \"在医院值夜班时遇到了不应该存在的病人\",\n            \"调查一起车祸时发现死者在事故发生前就已经死亡\",\n \n            \"你在直播中意外拍到了不该存在的“东西”，一夜爆红的同时也被盯上了。\",\n            \"你被父母逼着去相亲。\",\n            \"你下班回家，捡到一只脏兮兮的流浪猫，于心不忍带回了家。第二天早上，你被一声巨响惊醒，发现一个陌生的美少年/美少女穿着你昨晚给猫洗澡时用的浴巾，站在厨房里，并声称是你把他/她召唤来的。\",\n        \"随机生成\" \n        ]\n    },\n \"近现代\": {\n    \"identities\": [\n        \"热血学生\",\n        \"情报人员\",\n        \"一线警员\",\n        \"士兵\",\n        \"乡村医生/教师\",\n        \"工厂工人\",\n        \"金融从业者\",\n        \"报社记者/编辑\",\n        \"电影/文艺从业者\",\n        \"江湖人士\",\n        \"秘密项目的科学家\",\n        \"逃离战区的难民\",\n        \"海外援助人员/传教士\",\n        \"没落的贵族/前朝遗老\",\n        \"远洋货轮的水手\",\n        \"私家侦探\",\n        \"工会领袖\",\n        \"航空公司的飞行员/空乘\",\n        \"外交人员\",\n        \"通商口岸的实业家\",\n        \"街头的小贩\",\n        \"实验室的研究员\",\n        \"车站的检票员/调度员\",\n        \"跨国公司的职员\",\n        \"随机生成\"\n    ],\n    \"openings\": [\n        \"1916年，凡尔登的战壕里下着冻雨，你收到了一封来自故乡的信。\",\n        \"1929年10月29日，星期二，华尔街开盘的钟声刚刚敲响。\",\n        \"你在泰坦尼克号的头等舱醒来，口袋里有一张不属于这个时代的船票。\",\n        \"柏林墙下，你找到了一个刚好可以偷递一张纸条的缝隙。\",\n        \"1962年，你所在的核潜艇，刚刚收到了准备发射核弹的预备指令。\",\n        \"九龙城寨的麻将馆里，大佬递给你一支烟，说有笔‘大生意’要谈。\",\n        \"一名盖世太保军官拦住了你，他似乎在你藏着犹太朋友的阁楼下听到了什么。\",\n        \"1969年，作为宇航员，你在月球的尘土中发现了一枚不该存在的脚印。\",\n        \"廉政公署成立的第一天，你的办公桌上出现了一封举报整个警队的匿名信。\",\n        \"1986年，切尔诺贝利隔离区内，你手中的盖革计数器发出了前所未有的警报。\",\n        \"你在跳蚤市场买到一台旧收音机，它却嘶嘶啦啦地开始播放三天后的新闻。\",\n        \"作为一名破译员，你刚刚在敌军的电码中破译出了一个不可能的地名：亚特兰蒂斯。\",\n        \"敦刻尔克的海滩上，德军的炮火越来越近，而远方的海雾里驶来的却是一艘古老的帆船。\",\n        \"1937年的上海，你与爱人约在咖啡馆告别，而他/她的真实身份是日本特务。\",\n        \"你在伍德斯托克音乐节的泥地里醒来，身边躺着一位未来的摇滚巨星。\",\n        \"一张写着你名字的大字报，出现在了街道最显眼的墙上。\",\n        \"一份关于纳粹正在秘密研究的“超自然军团”的档案，意外落到了你的手中。\",\n        \"你坐在开往西部的火车上，身边围绕着在大萧条中失去一切的人们。\",\n        \"19世纪的伦敦，开膛手杰克刚刚犯下新的案件，而你在受害者的手中发现了一枚属于你的袖扣。\",\n        \"你爱上了一位来自敌对阵营的大使馆工作人员，今晚你们要在维也纳的桥上做最后的诀别。\",\n        \"你在弥敦道的霓虹灯下躲雨，一个人为你撑开了伞，你们的故事就此开始。\",\n        \"板门店的非军事区，你和一个来自另一方的士兵，隔着三八线分享了半支烟。\",\n        \"互联网诞生之初，你在一个BBS上发现了一个名为‘衔尾蛇’的秘密论坛，里面正在讨论如何修改历史。\",\n      \"甲午海战的黄海之上，你所在的‘致远’舰发出了冲向敌舰的最后一声鸣笛。\",\n    \"1898年的北京，你作为谭嗣同的亲信，收到了他让你连夜逃亡的密信。\",\n    \"武昌城头的第一声枪响传来，你放下了手中正在擦拭的汉阳造步枪。\",\n    \"1919年5月4日，你被同窗好友拉着，汇入了前往天安门的学生人潮。\",\n    \"黄埔军校的开学典礼上，你作为第一期学员，听到了校长“不成功便成仁”的训话。\",\n    \"1937年的淞沪战场，四行仓库外，租界的歌舞升平与对岸的枪炮声仅一河之隔。\",\n    \"延安的窑洞前，你正在油灯下教战士们识字，一份加急的情报被送到了你的手上。\",\n    \"重庆的防空警报再次拉响，你抱着孩子，和邻居们一起匆忙躲进潮湿的防空洞。\",\n    \"飞虎队的机库里，你作为地勤人员，正在为一个美国飞行员的战机画上鲨鱼涂装。\",\n    \"1945年的重庆谈判，你拍下了两位改变中国命运的领袖握手的瞬间。\",\n    \"在淮海战役的支援队伍里，你推着吱呀作响的独轮车，走在泥泞的土地上，前方就是炮火连天的前线。\",\n    \"1949年4月23日，你亲眼看到第一面红旗插上了南京“总统府”的屋顶。\",\n    \"1949年10月1日，你挤在天安门广场的人海里，等待着那个即将震动世界的声音。\",\n    \"长津湖的冰天雪地里，你把最后一个冻土豆分给了身边最年轻的战友。\",\n     \"1860年的北京，圆明园的冲天火光映在你含泪的眼中，你怀里紧紧抱着一件从大火中抢救出来的珍宝。\",\n    \"你是一名留美幼童，刚刚接到朝廷的命令，被强制中断学业，即刻回国。\",\n    \"东交民巷的使馆区外，八国联军的枪炮声越来越近。\",\n    \"“四一二”的凌晨，上海的街头贴满了通缉令，上面有你昔日同志的头像。\",\n    \"1937年12月，南京城破，你在拉贝先生设立的国际安全区里，从门缝向外窥探着街上的人间地狱。\",\n    \"日军的731部队基地里，你被关在牢房中，今天又有“马路大”（原木）被带走，再也没有回来。\",\n    \"花园口的黄河大堤被炸开，你在滔天的洪水中死死抱着一块门板，寻找着失散的家人。\",\n    \"1942年的河南，逃荒的路上，你已经三天没有吃过一点东西，只能靠啃食树皮为生。\",\n    \"长沙文夕大火的当晚，你作为奉命执行“焦土政策”的士兵，亲手点燃了自己家的房子。\",\n    \"你是缅甸远征军的一员，在野人山的原始丛林里身患疟疾，与大部队失去了联系。\",\n    \"台湾的白色恐怖时期，你的邻居，一位温和的中学老师，在半夜被几个陌生人带走，从此杳无音信。\",\n    \"长春围困战中，城内已经断粮数月，你用最后一点首饰换来的一块黑面包，被饥饿的人群抢走了。\",\n \n        \"随机生成\"\n    ]\n},\n    \"西方奇幻\": {\n        \"identities\": [\n            \"见习法师\",\n            \"王国骑士\",\n            \"吟游诗人\",\n            \"被流放的贵族\",\n            \"盗贼公会成员\",\n            \"草药师\",\n            \"牧师/女牧师\",\n            \"德鲁伊\",\n            \"游侠\",\n            \"铁匠\",\n            \"佣兵\",\n            \"魔法学院学生\",\n            \"见习法师/女术士\",\n            \"落魄的王国骑士\",\n            \"酒馆的吟游诗人\",\n            \"被剥夺头衔的贵族\",\n            \"盗贼公会的新手\",\n            \"村庄里的草药师\",\n            \"被神殿收养的孤儿\",\n            \"躲藏中的龙裔\",\n            \"猎魔人/狩魔猎人\",\n            \"雇佣兵\",\n            \"逃亡的公主/王子\",\n            \"被流放的贵族后裔\",\n            \"盗贼公会的核心成员\",\n            \"掌握禁忌炼金术的炼金术师\",\n            \"暗黑魔法少女/少年\",\n            \"正在逃婚的精灵王子/公主\",\n            \"被恶龙抓走但和恶龙成了好朋友的人类\",\n            \"开宠物店专门售卖各种魔法生物的年轻店主\",\n            \"试图用魔法搞农业革命的半吊子法师\",\n            \"退休的魔王/勇者\",\n             \"吸血鬼亲王的血奴\",\n            \"在酒馆里讲故事骗吃骗喝的吟游诗人\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"在古老的遗迹中触碰了一块符文石\",\n            \"作为被巨龙袭击的商队中唯一的幸存者\",\n            \"被诬陷杀害了国王，开始了逃亡生涯\",\n            \"在森林里捡到了一个会说话的魔法物品\",\n            \"继承了祖父留下的神秘法师塔\",\n            \"在酒馆里接到了一个价值不菲的委托\",\n            \"意外召唤出了一个强大但不受控制的魔物\",\n            \"发现自己是传说中勇者的转世\",\n            \"被选中参加王室的秘密任务\",\n            \"在魔法学院的禁书区发现了禁忌法术\",\n            \"在古老的遗迹中触碰了一块符文，被传送到了未知之地\",\n            \"作为被巨龙袭击的商队中唯一的幸存者，身上多了一个龙纹烙印\",\n            \"被诬陷刺杀了国王，不得不在追捕中寻找真相\",\n            \"在森林里捡到了一个会说话、性格恶劣的魔法物品\",\n            \"家乡被魔潮毁灭，你是唯一的幸存者\",\n            \"为了偿还巨额赌债，签下了一份危险的魔法契约\",\n            \"在古老的遗迹中触碰了一块符文石，一个古老的灵魂寄宿在了你的体内。\",\n            \"作为被巨龙袭击的商队中唯一的幸存者，你获得了龙的一部分力量。\",\n            \"你的“吉祥物”告诉你，想要获得更强的力量，就必须献上你最珍贵的东西，比如情感或记忆。\",\n            \"蒸汽朋克都市里，你是一名使用魔法驱动的机械臂的侦探，正在调查一宗离奇的炼金谋杀案。\",\n            \"诸神黄昏已经开始，作为被选中的勇者，你的任务不是拯救世界，而是确保阿斯加德彻底毁灭。\",\n            \"随机生成\",\n            \"你正在与邻国王子/公主举行盛大的婚礼，一只巨大的狮鹫突然从天而降抓走了你.\",\n            \"你继承了远方叔叔留下的一家小酒馆，开业第一天才发现，这里的常客是退休后沉迷钓鱼的魔王、隐居山林研究厨艺的勇者和天天来蹭酒喝的摸鱼女神。\",\n            \"你按照古书的指引举行了恶魔召唤仪式，希望能获得财富和力量。结果召唤来一个只会打扫卫生、烹饪美食的恶魔管家，并强行和你签订了一份终身“劳动合同”。\"\n        ]\n    },\n    \"东方玄幻\": {\n        \"identities\": [\n            \"外门弟子\",\n            \"炼丹学徒\",\n            \"世家子弟/千金\",\n            \"隐居散修\",\n            \"藏经阁看守\",\n            \"宗门执事\",\n            \"游历散仙\",\n            \"魔道修士\",\n            \"丹师\",\n            \"器师\",\n            \"阵法师\",\n            \"驯兽师\",\n            \"宗门的外门弟子\",\n            \"炼丹房学徒\",\n            \"没落的世家子弟\",\n            \"隐居散修的记名弟子\",\n            \"看守藏经阁的凡人\",\n            \"被退婚的天才/废柴\",\n            \"妖族与人族的混血后裔\",\n            \"云游四方的画师/琴师\",\n            \"王朝的钦天监小吏\",\n            \"青楼的花魁/乐师\",\n            \"被废掉修为后重修的“废柴”天才\",\n            \"某个隐世宗门的师尊或师祖\",\n            \"靠特殊功法快速提升的魔道修士\",\n            \"执掌天道刑罚的“天律阁”成员\",\n            \"拥有《山海经》并能召唤异兽的御兽师\",\n            \"退婚流主角的那位前未婚妻/夫\",\n            \"被退婚后专心搞事业、一心只想变强的前未婚妻/夫\",\n            \"穿成龙傲天身边的小弟并决定抱紧大腿的机智路人甲\",\n            \"专门给各大宗门写八卦绯闻小报的话本先生\",\n   \"随机生成\"\n \n        ],\n        \"openings\": [\n            \"测试灵根时引发了天地异象\",\n            \"被退婚后立下三年之约\",\n            \"在宗门试炼中误入上古秘境\",\n            \"被师尊托付了关乎宗门存亡的重要任务\",\n            \"在渡劫时被雷劈回到了千年前\",\n            \"意外获得了一本记载仙界秘辛的古籍\",\n            \"测试灵根时意外引发了天地异象，引来了多方窥伺\",\n            \"无意中放出了被宗门封印的妖物/魔头\",\n            \"被迫代替妹妹/弟弟嫁给/入赘一个著名的废柴/死人\",\n            \"在凡间书店买到一本假冒的功法，没想到竟练出了真正的绝世神通。\",\n            \"逃婚途中意外坠崖，被一位隐世高人所救并强行传授了衣钵。\",\n            \"你的任务是作为幕后推手，在这个末法时代引导世界完成“灵气复苏”或“神话复苏”。\"\n        ]\n    },\n    \"西方神话\": {\n    \"identities\": [\n        \"神殿的祭司/女祭司\",\n        \"流着神明血脉的半神\",\n        \"被神选中的先知/神使\",\n        \"某个城邦的国王/女王\",\n        \"史诗中传唱的英雄/勇士\",\n        \"奥林匹斯/阿斯加德的侍奉者\",\n        \"锻造神器的矮人工匠\",\n        \"森林里的德鲁伊/女巫\",\n        \"寻找知识的学者/抄写员\",\n        \"守护圣物的骑士\",\n        \"竞技场的角斗士\",\n        \"普通的农民/牧羊人\",\n        \"出海远航的船长/水手\",\n        \"被放逐的王子/公主\",\n        \"被诅咒之人/怪物\",\n        \"地狱的摆渡人/守门人\",\n        \"游荡在世间的精灵/仙灵\",\n        \"被遗忘旧神的后裔\",\n        \"专门猎杀怪物的猎手\",\n        \"天堂放逐的堕落者\",\n        \"执掌一方权能的小神/自然灵\",\n        \"埃及的法老/大祭司\",\n        \"北欧的女武神/狂战士\",\n        \"某个秘密教团的刺客\",\n        \"随机生成\"\n    ],\n    \"openings\": [\n        \"奥林匹斯圣山上，宙斯的雷霆权杖失窃了。\",\n        \"一个刻着“献给最美之人”的金苹果，被扔进了众神的宴会厅。\",\n        \"地狱的三头恶犬刻耳柏洛斯睡着了，亡灵正从冥府的裂隙中逃出。\",\n        \"普罗米修斯盗取的天火，在凡间引发了一场无法被扑灭的大火。\",\n        \"特洛伊城下，一匹巨大的木马被送到了坚不可摧的城门前。\",\n        \"北欧的世界之树“尤克特拉希尔”，它的一根枝干毫无征兆地枯萎了。\",\n        \"彩虹桥“毕弗罗斯特”的中央，出现了一道深不见底的裂痕。\",\n        \"挣脱了束缚的巨狼芬里尔，在天边吞食了太阳或月亮。\",\n        \"尼罗河今年的泛滥没有如期而至，整个埃及陷入了对饥荒的恐惧。\",\n        \"法老陵墓的深处，用来称量心脏的真理天平不见了。\",\n        \"亡者之书上，浮现出了一个从未被记载过的、可以让死者完全复活的咒语。\",\n        \"亚瑟王的圣剑“Excalibur”从湖中再次现世，等待着新的主人。\",\n        \"德鲁伊的圣林中，最古老的一棵橡树的树干上，流出了人类的鲜血。\",\n        \"天堂的一位大天使擅自离开了自己的岗位，没有留下任何信息便降临凡间。\",\n        \"封印着地狱七魔王之一的古老锁链，发出了一声清脆的断裂声。\",\n        \"天启四骑士中的第一位——“瘟疫”，已经骑着白马出现在了遥远的地平线上。\",\n        \"潘多拉的魔盒被再次打开，但这次从中飞出的，是世间所有的“希望”。\",\n        \"伊阿宋的金羊毛远征船队，在归航时遭遇了来自深海的塞壬歌声。\",\n        \"为西西弗斯推上山的巨石，今天停在了山顶，没有滚落下来。\",\n        \"人类与仙灵的边界变得模糊，有孩子在森林里迷路后，带着神奇的能力回来了。\",\n        \"吉尔伽美什寻找永生之法的旅途，在终点发现了一扇通往异世界的大门。\",\n        \"巴别塔的建筑工地上，人们突然又能听懂彼此的语言了。\",\n        \"随机生成\"\n    ]\n},\n    \"东方神话\": {\n    \"identities\": [\n        \"天庭的某位星君\",\n        \"一头青牛\",\n        \"蟠桃园里的小仙\",\n        \"被贬下凡的神仙\",\n        \"山间的土地神/山神\",\n        \"炼丹炉旁的道童\",\n        \"南天门的守门天将\",\n        \"刚刚修出人形的小妖\",\n        \"占山为王的大妖\",\n        \"等待报恩的狐仙/蛇妖\",\n        \"人和妖的混血后代\",\n        \"山海经中记载的异兽\",\n        \"佛陀座下的听经沙弥\",\n        \"执掌一殿的阎罗/判官\",\n        \"忘川河畔的摆渡人\",\n        \"引渡亡魂的鬼差\",\n        \"无法转世的游魂\",\n        \"云游四方的地仙\",\n        \"误入仙境的樵夫/采药人\",\n        \"斩妖除魔的道士/法师\",\n        \"能看见鬼神的通灵者\",\n        \"某个凡人王朝的国师\",\n        \"龙宫的虾兵/蟹将\",\n        \"听圣人讲道的生灵\",\n        \"上古巫族的后裔\",\n          \"西王母座下的青鸟使者\",\n    \"昆仑山神树的看守者\",\n    \"月宫里捣药的玉兔\",\n    \"司掌风雨雷电的仙官\",\n    \"财神座下的运财童子\",\n    \"执掌人间功过的灶君\",\n    \"城隍庙里的日游神/夜游神\",\n    \"修炼有成的僵尸/旱魃\",\n    \"寄居在古物中的器灵\",\n    \"引诱书生的画皮美妖\",\n    \"十八层地狱的狱卒\",\n    \"镇守佛塔的阿修罗众\",\n    \"给佛陀献花的飞天/天女\",\n    \"继承了稀薄神血的凡人\",\n    \"上古大巫的血脉后裔\",\n    \"被高人点化了的灵兽\",\n    \"追日的夸父族人\",\n    \"试图填平东海的精卫鸟\",\n    \"深山中的尸解仙\",\n    \"以梦境为食的梦貘\",\n        \"随机生成\"\n    ],\n    \"openings\": [\n        \"蟠桃盛会即将开始，你却发现你的请柬被人偷走了。\",\n        \"你的天劫即将来临，但你感应到有仇家正藏在雷云之中。\",\n        \"一件上古神器即将在不周山出世，三界各方势力都已闻风而动。\",\n        \"你在东海之滨捡到了一个婴儿，他的眉心竟有第三只眼。\",\n        \"生死簿上你的名字被人用朱砂笔划掉了，而你还活得好好的。\",\n        \"你在取经人的必经之路上开辟了洞府，正思考着该如何烹饪唐僧肉。\",\n        \"女娲补天的五彩石还剩下最后一颗，它从天上坠落，正好砸在了你的洞府门前。\",\n        \"封神榜即将重开，你的师父告诉你，这次的榜上将会有你的名字。\",\n        \"孙悟空大闹天宫之时，你作为一名天将，奉命前去镇压。\",\n        \"巫妖大战的前夕，你必须在帝江和帝俊之间做出选择。\",\n        \"你在奈何桥上正要喝下孟婆汤，却突然想起了九世之前刻骨铭心的仇恨。\",\n        \"地府的十八层地狱破开了一个缺口，无数恶鬼正涌向人间。\",\n        \"你所在的凡人村庄，常年祭祀的山神庙，今年却没有显灵。\",\n        \"你在深山中修炼了千年，今天第一次进城，却被街上的车水马龙迷住了眼。\",\n        \"师父交给你一个任务，去三界之中，寻回散落在各处的河图洛书碎片。\",\n        \"你在紫霄宫中听鸿钧老祖讲道，但坐在你前面的那個生灵，似乎是你的宿敌。\",\n        \"作为龙王，你发现你的定海神针不见了。\",\n        \"佛陀在灵山讲法，天花乱坠，你似乎听懂了什么。\",\n        \"你是一只刚修成正果的黄皮子，却被一个凡人书生误认为是狐仙，日夜向你许愿求姻缘。\",\n         \"昆仑山的建木神树开始枯萎，三界之内，草木凋零。\",\n    \"传说中的“人参果”即将成熟，据说闻一闻，就能活三百六十岁。\",\n    \"十大金乌一齐出现在天空，大地被炙烤，凡间已成炼狱。\",\n    \"兰若寺的钟声在午夜响起，但那座寺庙早已荒废了百年。\",\n    \"东海龙宫的定海神针突然失窃，龙王震怒，悬赏三界寻找线索。\",\n    \"一场无名的瘟疫从凡间开始蔓延，就连天上的神仙也感到法力滞涩。\",\n    \"六大圣人纷纷立教，一时间，人、阐、截、西方教等开始在三界之中广收门徒。\",\n    \"有人在三生石上，用刀刻下了两个本不该在一起的名字。\",\n    \"一幅描绘着飞天仙女的古画被展出，传说画中的仙女会在月圆之夜走下来。\",\n    \"佛道两家将举行一场“水陆大会”进行辩法，胜者将执掌未来千年的凡间信仰。\",\n    \"酆都鬼城的大门不知被谁打开，百鬼夜行，正在人间游荡。\",\n    \"有人说，在北冥之海的尽头，看到了那只名为“鲲”的巨兽。\",\n \n    \"人间一位帝王妄想长生，正在派人四处寻找传说中的“不死药”。\",\n \n        \"随机生成\"\n    ]\n},\n    \"赛博朋克\": {\n        \"identities\": [\n            \"义体医生\",\n            \"数据黑客\",\n            \"公司特工\",\n            \"底层拾荒者\",\n            \"帮派打手\",\n            \"记忆贩子\",\n            \"义体改造师\",\n            \"AI调试师\",\n            \"虚拟偶像\",\n            \"企业间谍\",\n            \"网络幽灵\",\n            \"生化人\",\n            \"黑市义体医生\",\n            \"初出茅庐的数据黑客\",\n            \"公司底层特工\",\n            \"街头帮派打手\",\n            \"网络偶像的经纪人\",\n            \"垃圾场的拾荒者\",\n            \"厌倦了生活的条子（警察）\",\n            \"全身高度义体化的改造人\",\n            \"反抗组织的信使\",\n            \"技术高超的义体医生\",\n            \"能够潜入任何系统的顶级黑客\",\n            \"为超级企业清理“垃圾”的特工\",\n            \"贩卖虚拟感官体验的“梦境商人”\",\n            \"反抗巨型企业的“解放阵线”成员\",\n            \"驾驶飞行载具的空中快递员\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"从一次非法的记忆清除手术中醒来\",\n            \"植入的义眼突然看到了不该看的数据流\",\n            \"接到了一个送货任务，货物是一个活生生的人\",\n            \"被强大的企业追杀，原因不明\",\n            \"在黑市上买到了一块来源不明的军用芯片\",\n            \"发现自己的AI伴侣开始出现自主意识\",\n            \"被雇佣渗透竞争对手公司的服务器\",\n            \"在虚拟世界中被困，无法登出\",\n            \"义体突然失控，开始攻击无关人员\",\n            \"接收到了一条来自未来的加密信息\",\n \n            \"植入的义眼突然接收到一段加密数据流，指向公司的巨大阴谋\",\n            \"接到了一个报酬极高的“送货”任务，货物是一个被通缉的仿生人\",\n            \"因为一次网络入侵，意外成为了全球追捕的对象\",\n            \"发现自己常用的镇静剂被人掉了包，效果变得极其危险\",\n            \"债主找上门，给了一个潜入竞争对手公司窃取数据的危险任务\",\n            \"从一次非法的记忆清除手术中醒来 。\",\n            \"你新植入的义眼突然开始接收到不属于这个世界的数据流 。\",\n            \"在一个全民沉浸式VR的世界里，你发现所谓的“现实”可能只是另一层虚拟。\",\n            \"随机生成\"\n        ]\n    },\n    \"星际科幻\": {\n        \"identities\": [\n            \"货运飞船船员\",\n            \"帝国舰队新兵\",\n            \"殖民星球矿工\",\n            \"星际海盗\",\n            \"外交官\",\n            \"星际商人\",\n            \"机械工程师\",\n            \"生物学家\",\n            \"星系探险家\",\n            \"人工重力技师\",\n            \"货运飞船的机械师\",\n            \"帝国舰队学院的吊车尾学员\",\n            \"外星球殖民地的矿工\",\n            \"被通缉的星际海盗\",\n            \"外星大使的人类助理\",\n            \"基因编辑过的完美“人造人”\",\n            \"考古队的新人\",\n            \"太空港酒吧的老板\",\n            \"失控的医疗机器人\",\n            \"自由探索船的船长\",\n            \"银河帝国基因改造的超级士兵\",\n            \"能与外星生物精神链接的“沟通者”\",\n            \"星际黑市的情報贩子\",\n            \"某个古代文明遗迹的守护者\",\n            \"深海文明的使者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"飞船遭遇未知宇宙异常，被迫紧急跃迁到陌生星域\",\n            \"在蛮荒星球上发现了外星文明的遗迹\",\n            \"作为外交使团成员前往一个从未接触过的文明\",\n            \"在星际空间站的黑市上买到了来源不明的古代数据核心\",\n            \"收到了一个来自银河系边缘的神秘求救信号\",\n            \"在例行的星球勘探中发现了会移动的金属生物\",\n            \"被派遣调查一艘在虚空中漂流百年的幽灵战舰\",\n            \"意外激活了一个封印了千年的古代AI\",\n            \"在进行超空间跳跃时看到了不应该存在的景象\",\n            \"发现自己所在的殖民地其实是一个巨大的实验场\",\n            \"飞船在进行跃迁时遭遇未知宇宙现象，迫降在一颗完全不在星图上的星球\",\n            \"在一次空间站日常维护时，发现了一个隐藏的密室，里面有一具外星人尸骸\",\n            \"作为文化观察员被派往一个刚刚接触的原始文明星球\",\n            \"在黑市买到了一个来历不明的古代数据核心，里面藏着足以引发战争的信息\",\n            \"所在的殖民星球爆发了未知的生化病毒，隔离程序已启动\",\n            \"被选中参与一项绝密的超光速航行实验，但实验出现了严重故障\",\n            \"飞船的AI突然觉醒了自我意识，并强行将航线设定至一个未知的星系。\",\n            \"在一颗荒凉的星球上进行考古时，你们挖出了一个会造成时空悖论的古代物品。\",\n            \"你被一个强大的星际实体选中，成为其在物质宇宙的“代理人”，执行它的意志。\",\n            \"你所在的深海城市，第一次向陆地文明派出了外交使团，而你就是其中一员。\",\n            \"在一个基因高度编辑的社会，你作为天生的“缺陷者”，却拥有机器无法模拟的能力。\",\n            \"随机生成\"\n        ]\n    },\n    \"武侠江湖\": {\n        \"identities\": [\n            \"初入江湖的少侠\",\n            \"魔教底层教众\",\n            \"名门正派弟子\",\n            \"悬壶济世的郎中\",\n            \"经营客栈的情报贩子\",\n            \"镖师\",\n            \"江湖游医\",\n            \"说书先生\",\n            \"剑客\",\n            \"刺客\",\n            \"武林盟主/盟主夫人\",\n            \"隐世高人\",\n            \"初入江湖的名门少侠/女侠\",\n            \"魔教的底层教众\",\n            \"镖局的趟子手\",\n            \"悬壶济世（也可能用毒）的郎中\",\n            \"客栈的情报贩子/说书人\",\n            \"退役的官差\",\n            \"书院的书生/琴女\",\n            \"被灭门的小门派弟子\",\n            \"身世成谜的孤儿\",\n            \"精通易容术的飞贼\",\n            \"初入江湖的少侠/女侠\",\n            \"名门正派的亲传弟子\",\n            \"悬壶济世却身负绝技的郎中\",\n            \"经营着客栈的情报贩子\",\n            \"被派往江湖卧底的朝廷密探\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"全家被神秘组织灭门，身负血海深仇\",\n            \"无意中习得了失传已久的绝世武功\",\n            \"卷入了名门正派与魔教的宝物争夺战\",\n            \"受人之托护送一个身份神秘的人\",\n            \"在武林大会上被诬陷为叛徒\",\n            \"意外获得了一本记载绝世内功的秘籍\",\n            \"被师父托付寻找失散多年的师弟/师妹\",\n            \"在荒山野岭救下了一个身受重伤的高手\",\n            \"发现自己的身世与二十年前的武林浩劫有关\",\n            \"被卷入了皇室夺位之争\",\n            \"全家被神秘人灭门，凶手使用的是失传已久的武功\",\n            \"无意中救下一个重伤的老人，临终前传给你毕生功力和一段口诀\",\n            \"卷入了一场针对武林盟主的刺杀阴谋，被当成替罪羊\",\n            \"师门至宝失窃，作为最大嫌疑人的你被迫逃亡并自证清白\",\n            \"在山洞避雨时发现了前辈高人的遗骸和武功秘籍\",\n            \"被迫参加一场生死不论的武林大会，胜者将成为某大人物的女婿/赘婿\",\n            \"全家被神秘组织灭门，身负血海深仇的你，带着唯一的线索踏入江湖。\",\n            \"无意中习得了失传已久的绝世武功，但代价是每使用一次都会失去一部分人性。\",\n            \"你卷入了正派与魔教对一本武功秘籍的争夺战中，而那本秘籍就是你自己。\",\n            \"你的任务是暗中干预某个历史的关键节点，确保历史按照正确的方向发展。\",\n            \"随机生成\"\n        ]\n    },\n \n    \"恐怖惊悚\": {\n        \"identities\": [\n            \"超自然现象调查员\",\n            \"恐怖片演员\",\n            \"心理医生\",\n            \"古董店老板\",\n            \"建筑工人\",\n            \"夜班保安\",\n            \"灵媒\",\n            \"考古学家\",\n            \"民俗学者\",\n            \"普通游客\",\n                \"入殓师/法医\",\n    \"记者/播客主\",\n    \"长途卡车司机\",\n    \"消防员/救援队员\",\n    \"新家的住户\",\n    \"深海/洞穴探险家\",\n    \"护林员\",\n    \"历史档案管理员\",\n    \"唯一的幸存者\",\n    \"邪教逃离者\",\n    \"犯罪心理学家\",\n    \"城市探险博主\",\n    \"失眠症患者\",\n    \"乡下的赤脚医生\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"被困在一栋发生过惨案的老宅中\",\n            \"在拍摄恐怖片时遭遇了真正的超自然现象\",\n            \"收到了一盘记录着诡异内容的录像带\",\n            \"在古董店买到了一个被诅咒的物品\",\n            \"参加了一个神秘的网络挑战游戏\",\n            \"在深夜的医院遇到了已经死去的病人\",\n            \"被邀请调查一起连警察都不敢深入的案件\",\n            \"在挖掘古墓时释放了不该被唤醒的存在\",\n            \"搬进新家后发现房间里有看不见的室友\",\n            \"在进行心理治疗时患者说出了不可能知道的秘密\",\n             \"手机相册里突然多了一段你熟睡时的视频。\",\n    \"深夜开车时，后视镜里总有一个穿着红衣服的身影一闪而过。\",\n    \"镜子里的倒影，在你转过身后，对你露出了一个诡异的微笑。\",\n    \"电梯失控，停在了一个不存在的“地下4层”。\",\n    \"一张纸条从门缝下塞了进来，上面用血写着：“别出声，它在听。”\",\n    \"好不容易淘到的古董娃娃，它的眼睛好像会自己转动。\",\n    \"耳边总是无端响起一段催眠般的童谣，但周围并没有其他人。\",\n    \"在一座以“自杀圣地”闻名的森林里迷了路，天色渐渐暗了下来。\",\n    \"你工作的办公楼里流传着一份“夜班生存守则”，而你刚刚不小心违反了其中一条。\",\n    \"大雪封山，被困在与世隔绝的山间旅店里，而住客们开始一个接一个地神秘死去。\",\n    \"你收到了一个匿名包裹，里面只有一个小木偶和一张指示：“现在，你是它的新主人了。”\",\n    \"整理祖父遗物时，发现了一本记录着某种邪恶仪式的日记，而仪式的最后一步就在今晚。\",\n    \"小镇上流传着一个传说：绝对不能在午夜回头看自己的影子。而今晚，你感觉有什么东西在拉你的裤脚。\",\n    \"家里所有的钟表，都分毫不差地停在了凌晨3点44分。\",\n    \"接到了一个奇怪的求助电话，对方说他被困在了你家的墙壁里。\",\n            \"随机生成\"\n        ]\n    },\n    \"海洋冒险\": {\n        \"identities\": [\n            \"船员\",\n            \"海盗\",\n            \"渔夫/渔女\",\n            \"海军军官\",\n            \"探险家\",\n            \"海洋生物学家\",\n            \"潜水员\",\n            \"灯塔看守\",\n            \"船长\",\n            \"海商\",\n            \"海难幸存者\",\n            \"寻宝猎人\",\n                \"人鱼/海洋智慧生物\",\n    \"被诅咒的不死水手\",\n    \"制图师/航海家\",\n    \"港口的走私者\",\n    \"船舶工程师/修理工\",\n    \"海岸警卫队队员\",\n    \"海洋神祇的祭司\",\n    \"海怪猎人\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"在一座荒岛上醒来，船只已经消失\",\n            \"发现了一张指向传说宝藏的古老海图\",\n            \"船只在风暴中偏离航线，到达了地图上不存在的海域\",\n            \"在深海潜水时遭遇了史前巨兽\",\n            \"被海盗劫持后发现他们在寻找某种神秘物品\",\n            \"在钓鱼时钓上来了一个装着求救信的瓶子\",\n            \"发现自己工作的油井平台下方隐藏着古代文明\",\n            \"在海底考古时唤醒了沉睡的深海生物\",\n            \"被神秘海流卷入了传说中的船只坟场\",\n            \"收到了来自失踪多年的探险队的无线电信号\",\n             \"传说中的幽灵船‘飞翔的荷兰人’号，破开浓雾，缓缓出现在航线前方。\",\n    \"百慕大三角的中心区域，所有导航仪器突然失灵，海面平静得宛如镜面。\",\n    \"打捞上来的百年沉船里，一具尸体竟完好无损，仿佛只是沉沉睡去。\",\n    \"一场罕见的‘血色赤潮’过后，海中涌现出无数从未见过的、发着幽光的奇异生物。\",\n    \"船只被一股巨大的力量猛地向下一拽，仿佛有什么东西缠住了龙骨，正要将整艘船拖入深渊。\",\n    \"在深海热泉附近，声呐探测到了一座由未知金属构成、似乎仍在运作的宏伟城市。\",\n    \"鲸鱼群的歌声中，夹杂着一段极其规律的、仿佛摩斯密码般的神秘旋律。\",\n    \"巨大的极地冰川在你眼前崩塌，掀起的滔天巨浪，正朝着船只扑来。\",\n    \"海面上凭空出现了一扇由旋转的水流构成的巨门，门后是完全陌生的星空。\",\n    \"在一座无人灯塔的顶端，发现了一本写满了一个世纪的思念与等待的航海日志。\",\n            \"随机生成\"\n        ]\n    },\n    \"二次元\": {\n        \"identities\": [\n            \"转校生\",\n            \"社团成员\",\n            \"魔法少女/少年\",\n            \"偶像\",\n            \"游戏玩家\",\n            \"游戏中的npc\",\n            \"动漫宅\",\n            \"学生会成员\",\n            \"图书委员\",\n            \"体育社王牌\",\n            \"校园偶像\",\n            \"神秘转学生\",\n            \"普通路人\",\n             \"地下偶像\",\n    \"Vtuber / 主播\",\n    \"轻小说作家 / 漫画家\",\n    \"风纪委员\",\n    \"阴阳师 / 退魔师\",\n    \"异世界归来者\",\n    \"怪盗\",\n    \"非人类（妖狐/吸血鬼等）\",\n\n    \"归宅部成员\",\n    \"执事 / 女仆\",\n    \"声优\",\n    \"被封印了力量的魔王/勇者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"收到了一个能实现愿望的神秘道具\",\n            \"被选中成为拯救世界的魔法少女/少年\",\n            \"在学园祭上发生了超自然现象\",\n            \"发现班上的同学其实都不是人类\",\n            \"被卷入了一个真人版的游戏世界\",\n            \"在社团活动室发现了通往异世界的传送门\",\n \n            \"在偶像演出中遭遇了来自异次元的袭击\",\n            \"发现学校其实是一个巨大的实验场所\",\n            \"被神秘组织选中参加特殊的游戏\",\n               \"鞋柜里收到了一封署名为‘怪盗’的、偷走你心的预告函。\",\n    \"深夜搭乘的电车，在一个地图上不存在的“如月车站”停了下来。\",\n    \"天台上，全校最受欢迎的学生会长背后，长出了一对漆黑的翅膀。\",\n    \"醒来后，你和最讨厌/最憧憬的那个同学灵魂互换了。\",\n    \"手机里多出了一个无法删除的APP，它的功能是“未来日记”。\",\n    \"一场小型地下偶像Live结束后，台下的所有粉丝全都变成了狂热的信徒。\",\n    \"你常玩的游戏关服了，但你游戏里的“老婆”/伙伴却出现在了家门口。\",\n    \"学校的游泳池在没有水的状态下，淹死了一个学生。\",\n    \"樱花树下，一个完全不认识的转校生突然向你告白，并声称你们是前世的恋人。\",\n    \"城市上空出现了一个巨大的、由无数眼球组成的魔法阵。\",\n \n    \"你在网络上连载的小说情节，开始在现实中分毫不差地一一上演。\",\n    \"一场流星雨过后，你突然能听懂家里的猫在说什么了。\",\n    \"今天的占卜大凶，出门就会遭遇宿命的邂逅，开启你波澜壮阔的一生。\",\n            \"随机生成\"\n        ]\n    },\n    \"特殊世界观\": {\n        \"identities\": [\n            \"记忆商人\",\n            \"梦境行者\",\n            \"模因传播者\",\n            \"糊弄学大师\",\n              \"ABO世界中的稀有性别\",\n            \"规则怪谈中的“违规者”\",\n            \"时间循环中的锚点\",\n            \"拥有自我意识的NPC\",\n            \"魅魔\",\n            \"梦魇\",\n            \"克苏鲁神话中的调查员\",\n            \"灵气复苏的先知\",\n            \"神话复苏的钥匙\",\n   \"精神过载的哨兵\",\n        \"寻找搭档的向导\",\n        \"信息素失控的Alpha\",\n        \"伪装成Beta的Omega\",\n        \"食物链顶端的捕食者\",\n        \"重生/穿书的恶役千金\",\n        \"刚刚苏醒的旧神\",\n        \"神格破碎的神明\",\n        \"被献祭的圣子/圣女\",\n        \"世界意志的化身\",\n        \"拥有自我意识的系统/外挂\",\n        \"故事的‘旁白’\",\n        \"人形的S级收容物\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n               \"天空突然裂开，另一座城市的倒影悬挂于天际。\",\n        \"世界上所有的文字在一夜之间变成了无人能懂的金色符号。\",\n        \"你一觉醒来，发现所有人都失去了“悲伤”这种情绪。\",\n        \"你凝视深渊时，深渊真的朝你眨了眨眼，还说了声“嗨”。\",\n        \"你在一个陌生人的房间醒来，后颈传来一阵陌生的刺痛，空气中弥漫着雪松和烈酒的味道。\",\n        \"眼前的世界突然卡顿，一个“正在加载...”的进度条出现在你的视野中央。\",\n        \"你家门上多了一张纸条，上面用鲜红的字迹写着：“欢迎来到这里，请在天黑后遵守以下规则……”\",\n        \"月亮变成了深紫色，所有被月光照到的人都开始疯狂地呓语。\",\n        \"你收到了三个月后，来自自己的死亡预告信。\",\n        \"你的影子在没有光的地方，自己站了起来，并对你露出了一个诡异的微笑。\",\n        \"你杀死了这个世界的“主角”，耳边突然响起了冰冷的系统提示音：“世界线开始重置……”\",\n        \"手机屏幕上突然出现一个恋爱游戏App，而里面的可攻略角色，全都是你身边的人。\",\n        \"你面前的NPC突然抓住了你的手，流着泪对你说：“求求你，带我离开这个游戏，我什么都愿意做。”\",\n        \"海面上浮现出一座由非欧几何构成的、不断变化的城市，巨大的触手从城中伸向天空。\",\n            \"随机生成\"\n        ]\n    },\n    \"废土末日\": {\n        \"identities\": [\n               \"拾荒者\",\n            \"变种人猎手\",\n            \"幸存者据点守卫\",\n            \"独行商人\",\n            \"净水技术员\",\n            \"医疗兵\",\n            \"机械师\",\n            \"搜救队员\",\n            \"车队司机\",\n            \"物资管理员\",\n            \"移动堡垒的车长\",\n            \"驾驶武装车辆的“公路幽灵”\",\n            \"掌握一小块可耕种土地的农场主\",\n            \"搜集旧时代科技的“历史学家”\",\n            \"孤岛上的垂钓者\",\n            \"幸存者据点的医生\",\n            \"经验老道的拾荒者\",\n            \"变种人猎手\",\n            \"幸存者据点的守卫\",\n            \"独行商人\",\n            \"掌握净水/种植技术的技工\",\n            \"寻找疫苗的医生\",\n            \"掠夺者团伙的俘虏\",\n            \"战前文明的学者\",\n            \"信奉钢铁的机械教祭司\",\n            \"基因突变的异能者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"从一个废弃多年的避难所中苏醒，外面的世界已面目全非\",\n            \"在一具穿着防辐射服的尸体上，找到了一张指向传说中“绿洲”的地图\",\n            \"为了拯救据点里感染的亲人，不得不闯入辐射极高的核心区寻找药品\",\n            \"驾驶的武装车辆在沙尘暴中抛锚，补给所剩无几\",\n            \"所在的据点被强大的掠夺者军团包围，首领决定派你出去寻求援助\",\n            \"喝下了被污染的水源，开始出现奇怪的幻觉和身体变化\",\n             \"从一个废弃的避难所中苏醒\",\n            \"在一具尸体上找到了指向绿洲的地图\",\n            \"为了家人急需的药品，不得不闯入辐射区\",\n            \"驾驶的武装车辆在沙尘暴中抛锚\",\n            \"在废墟中发现了一个还在运行的AI终端\",\n            \"被某种未知病毒感染，时间所剩无几\",\n            \"车队遭遇袭击，成为唯一幸存者\",\n            \"在地下避难所发现了末日前的重要秘密\",\n            \"接收到了来自其他幸存者据点的求救信号\",\n            \"你的车队正被一场巨大的辐射风暴追赶，必须在燃料耗尽前找到避难所。\",\n            \"在一具干尸的怀里，找到了一张指向传说中“绿洲”的地图。\",\n            \"作为孤岛上唯一的幸存者，你今天从海里钓上来一个密封的，来自未知文明的休眠仓。\",\n            \"核冬天降临，你所在的避难所资源即将耗尽，必须外出寻找生机。\",\n            \"随机生成\"\n        ]\n    },\n    \"规则怪谈\": {\n        \"identities\": [\n            \"新入职的公司员工\",\n            \"转校生\",\n            \"游客\",\n            \"病人\",\n            \"乘客\",\n            \"住户\",\n            \"图书馆管理员\",\n            \"夜班保安\",\n             \"船员\",\n    \"深海/极地科考站队员\",\n    \"网红打卡地的探店博主\",\n    \"调查员\",\n    \"怪奇马戏团的表演者\",\n    \"员工\",\n    \"酒店的礼宾部\",\n    \"孤儿院的义工\",\n    \"试吃员\",\n    \"导播\",\n    \"伴郎/伴娘\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"收到一份理想工作的录用通知，但员工手册上的规则极其诡异\",\n            \"搬进了一个租金极低的新公寓，楼道里贴满了奇怪的居住守则\",\n            \"在旧书店买了一本笔记本，里面写满了像是生存指南的奇怪规则\",\n            \"一觉醒来，发现自己身处一个无限循环的走廊/车站，墙上写着生路提示\",\n            \"参加了一个奇怪的测试实验，被告知必须严格遵守指令才能离开\",\n            \"误入一个小镇，这里的居民都严格遵守着一些不可理喻的习俗\", \n            \"高考失利后，你收到一所不存在的大学寄来的录取通知书，附带一张诡异的新生守则。\",\n    \"你下载了一个无法卸载的恋爱APP，它为你匹配的对象似乎不是人类。\",\n    \"一场大雾散去，你发现所在的城市变得完全陌生，街上的每个人都对你露出诡异的微笑。\",\n    \"受邀参加一场假面舞会，规则上说，在午夜钟声敲响前，绝对不能摘下自己的面具。\",\n    \"电视里突然插播一条紧急通知，要求全体市民从现在开始必须倒着走路。\",\n    \"你继承了一座巨大的图书馆，但遗嘱里警告你，绝对不要去阅读C区的任何一本书。\",\n    \"为了躲雨，你跑进一家诡异的蜡像馆，在你眨眼后，发现所有蜡像的姿势都变了。\",\n    \"你所在的城市突然强制开始一场为期24小时的“捉迷藏”游戏，规则只有一条：“不要被找到”。\",\n    \"你收到了一个会说话的玩偶作为礼物，附带的“饲养说明”上写满了血红色的警告。\",\n    \"你的猫今天早上叼回来一张纸条，上面用爪印写着一套只有你能看见的“家庭新规”。\",\n    \"你搭乘的航班遭遇了猛烈气流，颠簸过后，窗外的天空变成了血红色。\",\n    \"你走进一家24小时便利店买东西，却发现墙上的时钟永远指向午夜三点半。\",\n            \"随机生成\"\n        ]\n    },\n    \"恐怖生存\": {\n        \"identities\": [\n            \"遭遇空难的幸存者\",\n            \"鬼屋探险的作死青年\",\n            \"精神病院的医生\",\n            \"凶宅的新房主\",\n            \"拍摄灵异节目的剧组人员\",\n            \"恶魔召唤仪式的参与者\",\n            \"被诅咒的古董拥有者\",\n            \"丧尸爆发后的幸存者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"醒来发现自己被绑在一个地下室，身边有计时器和模糊的线索\",\n            \"购买的二手家具里藏着一盘记录着凶杀案的录像带\",\n            \"度假小屋的地下室里发现了一个被囚禁多年的人\",\n            \"参与的线上游戏突然无法退出，失败意味着真实的死亡\",\n            \"收到已故亲友寄来的礼物，随后开始遭遇一系列的灵异事件\",\n            \"所在的整栋大楼被无形的力量封锁，怪物在楼道内徘徊\",\n            \"随机生成\"\n        ]\n    },\n    \"历史架空\": {\n        \"identities\": [\n            \"王宫新来的女仆/侍卫\",\n            \"被迫和亲的王子/公主\",\n            \"不受宠的皇子/公主\",\n            \"进京赶考的书生\",\n            \"边疆戍卒的小队长\",\n            \"青楼的名妓\",\n            \"云游四海的行脚僧\",\n            \"御厨房的小学徒\",\n            \"即将和亲的宗室女\",\n            \"墨家/公输家的工匠\",\n            \"驿站的驿丞\",\n            \"获罪被流放的官员\",\n            \"普通农民\",\n            \"书生\",\n            \"商贾\",\n            \"将军\",\n            \"公主/王子\",\n            \"太监/宫女\",\n            \"江湖医师\",\n            \"道士/道姑\",\n            \"和尚/尼姑\",\n            \"县令\",\n            \"刺客\",\n            \"史官\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"一觉醒来发现自己回到了某个历史关键节点，成了一个无关紧要的小人物\",\n            \"在古墓中发现了能预言未来的龟甲/竹简\",\n            \"皇帝突然驾崩，京城暗流涌动，你意外卷入了继位风波\",\n            \"家乡遭遇洪灾/蝗灾，你被迫带领乡亲南下逃荒\",\n            \"被征召去修建长城/陵墓/大运河，发现了工程中隐藏的秘密\",\n            \"你的发明创造被上官看中，要求你限期完成献给皇帝\",\n            \"被卷入了一场改变历史走向的宫廷政变\",\n            \"在战场上捡到了一件能改变战局的神秘兵器\",\n            \"被选中参与一项秘密的皇室任务\",\n            \"发现了一个关于朝代更替的惊天秘密\",\n            \"在科举考试中无意间得罪了权贵\",\n            \"被派遣到边疆处理民族冲突\",\n            \"在古墓中发现了前朝皇室的遗物\",\n            \"被迫参与了一场决定国运的重要谈判\",\n            \"在民间收集到了足以撼动朝廷的证据\",\n              \"奉始皇帝之命，成为徐福船队的一员，出海寻找仙山与长生不老药。\",\n\"身处长平，你必须在白起下令坑杀四十万赵卒之前，想办法活下去。\",\n\"公元前206年，你亲眼见证了项羽火烧阿房宫，并藏匿了宫中的一份重要图纸。\",\n\"作为刘邦的乡亲，在沛县起事时，你面临着加入他还是向官府告密的抉择。\",\n\"鸿门宴上，你是一名不起眼的侍者，目睹了项庄舞剑的惊险全程。\",\n\"你追随韩信，却在井陉口背水一战前，发现了军队的致命弱点。\",\n\"作为垓下的一名楚卒，在四面楚歌中，你考虑的是否要放下武器投降。\",\n\"作为吕后身边的侍从，你无意间听到了她处置戚夫人和刘如意的计划。\",\n\"在白登山，你作为一名汉军小卒，被匈奴围困在冰天雪地里七天七夜。\",\n\"王莽推行新政时，你作为一名地方小吏，需要处理因此而起的民间混乱与反抗。\",\n\"在昆阳，你亲眼目睹了刘秀率领十三骑冲阵，创造了以少胜多的奇迹。\",\n\"身为一名光武中兴时期的屯田兵，你开垦的土地下埋藏着前朝的宝藏。\",\n\"赤壁之战前夜，你收到了来自曹操阵营的密信，试图策反你所在的江东水军。\",\n\"在长坂坡，你护送着主公的家眷，在曹军的追杀中七进七出。\",\n\"作为华佗的弟子，你掌握了为关羽刮骨疗毒的核心技术，却因此被曹操猜忌。\",\n\"你在白帝城，作为刘备的亲信，亲耳听到了那句“如其不才，君可自取”的托孤遗言。\",\n\"作为诸葛亮的随从，你参与了七擒孟获的全过程，深刻理解了“攻心为上”的策略。\",\n\"街亭失守，你奉命前去传令命马谡撤退，却因意外在路上耽搁了。\",\n\"五丈原秋风瑟瑟，你看着丞相的将星即将陨落，手中握着能为他续命七日的七星灯。\",\n\"你身处高平陵，目睹了司马懿发动政变，曹魏的天下即将倾覆。\",\n\"作为一名竹林中的隐士，你常与“竹林七贤”饮酒作乐，却也知晓他们放浪形骸下的政治避祸。\",\n\"淝水之战中，你作为前秦军队的一员，听到了“风声鹤唳，草木皆兵”的传言，军心大乱。\",\n\"隋朝末年，你被迫加入瓦岗军，在李密的带领下劫富济贫，却也见证了他的多疑与败亡。\",\n\"玄武门之变当天，你是一名守卫，需要在李建成和李世民之间做出选择。\",\n\"作为辩机和尚的侍童，你保管着那本由高阳公主赠予、最终引发杀身之祸的《枕中记》。\",\n\"在安史之乱的马嵬坡，你目睹了禁军哗变，贵妃被赐死，皇帝仓皇出逃。\",\n\"你追随鉴真东渡，在第六次航行中，终于踏上了日本的土地。\",\n\"作为黄巢起义军的一员，你攻入了长安城，也见证了“冲天香阵透长安，满城尽带黄金甲”的盛景与随之而来的屠戮。\",\n\"南唐后主李煜亡国后，你作为他的故臣，在寂寥的汴京听他一遍遍吟诵“问君能有几多愁”。\",\n\"在陈桥驿，你亲眼见证了赵匡胤“黄袍加身”的全过程。\",\n\"杯酒释兵权当晚，你作为一名御厨，为石守信等大将烹饪了那场决定命运的晚宴。\",\n\"靖康之耻，你被金人掳至北方，亲眼目睹了徽、钦二帝的凄惨遭遇。\",\n\"你追随岳飞，即将收复开封，却在朱仙镇收到了十二道金牌。\",\n\"崖山海战，你抱着小皇帝，在陆秀夫的恸哭声中，看着他背负国祚跃入大海。\",\n\"明朝初年，你被卷入“胡蓝之狱”或“文字狱”，身家性命悬于一线。\",\n\"靖难之役中，你作为建文帝的亲信，在南京城破前，收到了他从秘密地道逃亡的指令。\",\n\"土木堡之变，你作为英宗的随驾侍卫，一同被瓦剌俘虏，在塞外苦寒之地求生。\",\n\"夺门之变，你作为于谦的下属，目睹了他被拥立的英宗冤杀，并写下“粉身碎骨浑不怕，要留清白在人间”。\",\n\"作为一名锦衣卫/东厂番子，你奉命调查一桩牵涉到朝廷重臣的惊天大案。\",\n\"作为李自成的部将，你攻破了北京城，却发现胜利的喜悦很快被权力的腐蚀所替代。\",\n\"你驻守在山海关，当李自成和多尔衮的军队同时兵临城下时，吴三桂向你征求开关的意见。\",\n\"扬州十日/嘉定三屠，你作为一名幸存者，从死人堆里爬了出来。\",\n\"你奉康熙之命，参与了平定三藩之乱，并卧底在吴三桂的阵营中。\",\n\"在文字狱最盛行的雍正朝，你因一首诗或一篇文章，被下了大狱。\",\n            \"随机生成\"\n        ]\n    },\n    \"蒸汽朋克\": {\n        \"identities\": [\n            \"发条人偶师\",\n            \"天空舰队的飞艇工程师\",\n            \"差分机黑客（分析机程序师）\",\n            \"炼金术侦探\",\n            \"报童兼地下情报员\",\n            \"使用蒸汽义肢的退役军人\",\n            \"反技术派系的“自然咏者”\",\n            \"随机生成\",\n            \"为贵族改装奢侈机械宠物的工匠\",\n            \"在天空之城表演的歌剧演员\",\n            \"齿轮教会的年轻祭司\",\n            \"在天空之城的底层区行医的黑市医生\",\n    \"驾驶着蒸汽动力泰坦的皇家卫队驾驶员\",\n    \"专门绘制未知空域航图的制图师\",\n    \"饲养并改装机械生物的驯兽师\",\n    \"行走于世间的最后一位炼金术士\",\n    \"能与机器的“灵魂”沟通的通感者\",\n    \"审判异端科技的铁腕裁判官\",\n    \"在工业废墟中讨生活的拾荒者\",\n    \"以太（Aether）航船上的水手\",\n    \"皇家钟楼的守时人\"\n        ],\n        \"openings\": [\n            \"在一场非法的机械角斗中醒来，发现自己的记忆芯片被替换，唯一的线索是口袋里的一枚奇特齿轮。\",\n            \"你发明的永动机模型被神秘组织盗走，对方留下了一朵仅在皇室空中花园才培育的黑玫瑰。\",\n            \n            \"作为一名天空警察，你在追捕臭名昭著的空贼时，飞艇意外坠入浮空岛的未知禁区。\",\n            \"收到了一张由纯金打造的邀请函，邀请你参加一场在万米高空的移动堡垒“巴别塔”上举行的晚宴。\",\n            \"为了给家人凑齐昂贵的发条心脏移植手术费，你接下了一个护送“禁忌炼金物品”的危险委托。\",\n            \"你正在与一位贵族小姐/少爷举行婚礼，一位驾驶着单人飞行翼的“不速之客”从天而降，声称你才是他/她的真爱。\",\n              \"城市的中央钟楼，那颗运转了三百年的“不息心脏”，毫无征兆地停摆了。\",\n    \"你从昏迷中醒来，发现自己被铁链锁在了一艘著名空贼飞艇的船锚上，而飞艇正在升空。\",\n    \"全频道突然播报一条紧急消息：你所在的天空之城正在失去浮力，预计三小时后将坠向地面。\",\n    \"一只精巧的黄铜机械鸟停在了你的窗台，它的腿上绑着一个微型密码筒，里面是向你的求救信。\",\n    \"议会刚刚通过法案，要求所有公民都必须将至少一个身体部件替换为官方指定的蒸汽义肢。\",\n    \"天空中由无数齿轮构成的太阳闪烁了一下，你在一瞬间看到了它背后……那片深邃、冰冷的真实星空。\",\n    \"家里的老旧自动人偶管家，突然在你耳边用生锈的声音低语道：“主人，他们发现我们了。”\",\n    \"以太之海掀起了前所未有的风暴，一些不属于机械造物的、柔软滑腻的奇异生物被冲上了浮岛的边缘。\",\n    \"你收到了一份匿名包裹，里面是一颗仍在跳动的水晶心脏，以及一张字条：“把它藏好，否则世界会因此重启。”\",\n    \"一座被认为是古代遗迹、早已停机的巨型城市守护者“歌利亚”，它的独眼亮起了红光，缓缓地站了起来。\",\n\"随机生成\"      \n]\n    },\n \n    \"诡秘修仙\": {\n        \"identities\": [\n            \"调查异常的“天机阁”底层修士\",\n            \"靠吞噬“诡异”来修行的魔道中人\",\n            \"供奉不可名状存在的邪神信徒\",\n            \"被污染的灵根拥有者\",\n            \"随机生成\",\n            \"专门绘制“镇邪符”的符师\",\n            \"研究“古神呓语”的疯癫学者\",\n            \"从禁地“归墟”中逃出的唯一生还者\"\n        ],\n        \"openings\": [\n            \"你在修炼中走火入魔，醒来后发现自己丹田里多了一个无法理解的、扭曲的活物。\",\n            \"随机生成\",\n            \"你所在的村庄为了祈求丰收，准备举行一场古老的祭祀，而你被选中成为献给山中“古神”的祭品。\",\n            \"师门下达了调查任务，一个偏远小镇的凡人全部失踪，只留下满地不断蠕动的黑色影子。\",\n            \"你偶然得到一本残破功法，修炼后修为大涨，但你开始在梦中听到来自群星之外的呼唤。\",\n            \"宗门大比上，你的对手在众目睽睽之下，身体融化、异变成了一滩不可名状的血肉怪物。\"\n        ]\n    },\n \n    \"全民领主\": {\n        \"identities\": [\n            \"绑定了“签到系统”的幸运儿\",\n            \"开局抽到唯一神话级兵种的欧皇\",\n            \"随机生成\",\n            \"选择了亡灵族，只能和骷髅作伴的独行者\",\n            \"专精种田与贸易的生活玩家\",\n            \"组建了大型公会的会长\",\n            \"被强大领主俘虏，被迫成为附属的玩家\"\n        ],\n        \"openings\": [\n            \"当全球所有人都被传送到这个世界时，你发现你的初始领地旁边，刷新了一座金矿和一只看起来不太友好的巨龙。\",\n            \"随机生成\",\n            \"别人开局都是一小块地和几个农民，而你的初始资源清单上写着：“一座破败的神庙和一名自称是“神”的失忆少女/少年”。\",\n            \"系统提示：你的领地受到了“混沌”的祝福，所有招募的单位都将发生意想不到的良性（或恶性）变异。\",\n            \"你发现你可以通过完成某个土著部落的奇怪任务，来获得他们的好感度和独有科技/兵种。\"\n        ]\n    },\n    \"经营建设\": {\n        \"identities\": [\n            \"初创企业家\",\n            \"咖啡馆老板\",\n            \"网店运营者\",\n            \"投资顾问\",\n            \"市场分析师\",\n            \"连锁店店长\",\n            \"商会会长\",\n            \"贸易商人\",\n            \"餐厅主厨\",\n            \"时装设计师\",\n            \"游戏开发者\",\n            \"落魄贵族继承了一块贫瘠的领地\",\n            \"宗门的外派管事\",\n            \"灾难后重建社区的负责人\",\n            \"星际 frontier 的殖民地总督\",\n            \"动物保护区的园长\",\n            \"魔法学校的校长\",\n            \"深海勘探队的队长\",\n            \"异世界餐馆的老板\",\n            \"刚刚继承破败领地的年轻领主\",\n            \"拥有巨龙盟友的王子/公主\",\n            \"掌管宗门财政的内门长老\",\n            \"拥有“系统”辅助的穿越者国王/女王\",\n            \"建立了横跨数个位面的商业帝国的会长\",\n            \"即将统一大陆的王国统治者\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"继承了一家濒临破产的家族企业\",\n            \"获得了一笔神秘的创业资金\",\n            \"发现竞争对手在使用不正当手段\",\n            \"被挖角到一家刚成立的科技公司\",\n            \"在商业展会上遇到了改变命运的合作伙伴\",\n            \"接手了一个看似毫无价值的废弃项目\",\n            \"被卷入了一场商业间谍战\",\n            \"意外获得了一个具有巨大潜力的专利技术\",\n            \"在经济危机中寻找企业转型的机会\",\n            \"意外继承了一笔巨额遗产，但必须经营好指定的产业才能持续获得\",\n            \"被流放到边疆，要求一年内上缴指定数额的赋税\",\n            \"飞船坠毁，你成为幸存者的领袖，需要建立营地等待救援\",\n            \"被委以重任，负责重建一个被摧毁的著名地标/门派\",\n            \"捡到了一个能连接万界的商店系统，需要进货开店\",\n            \"获得了一个能进入梦境的能力，开始经营一家为人解忧的梦境事务所\",\n            \"“万界建国系统”已绑定，初始资源为三个哥布林和一个漏风的茅草屋。\",\n            \"你通过一场政治联姻，获得了一片贫瘠但拥有巨大潜力的土地和一位对你充满敌意的美丽伴侣。\",\n            \"你的宗门遭遇大劫，作为唯一的继承人，你需要从零开始重建山门。\",\n            \"随机生成\"\n        ]\n    },\n    \"同人衍生\": {\n        \"identities\": [\n             \"(三体) 被联合国选中的新任“面壁者”\",\n    \"(三体) “地球三体组织”的一名科学家，等待着主的降临\",\n    \"(三体) 威慑纪元手握引力波宇宙广播开关的“执剑人”\",\n    \"(三体) 掩体纪元，生活在地球深处地下城中的居民\",\n        \"(三体) 人类舰队的一名舰长，面对着即将到来的水滴\",\n    \"(三体) 潜伏在人类中的“破壁人”，负责破解面壁者的计划\",\n    \"(EVA) NERV总部的普通技术员，负责EVA机体的日常维护\",\n    \"(EVA) SEELE议会的一名秘密成员，知晓“人类补完计划”的真相\",\n    \"(EVA) 居住在第三新东京市的普通学生，对频繁的“陨石”来袭习以为常\",\n           \"(EVA) EVA初号机/零号机/二号机的指定驾驶员（适格者）\",\n    \"(EVA) NERV的作战部长，直接在前线指挥战斗\",\n    \"(宝可梦) 刚刚从博士那里领到初始宝可梦的新人训练家\",\n    \"(宝可梦) 火箭队的一名底层小兵，职责是在常青森林捕捉波波和小拉达\",\n    \"(宝可梦) 专精龙系/幽灵系的道馆馆主，等待着有潜力的新人前来挑战\",\n    \"(宝可梦) 当地的冠军或四天王之一，站在地区联盟的顶端\",\n    \"(宝可梦) 精通培育的饲育家/研究宝可梦生态的大木博士的助手\",\n    \"(生化危机) 浣熊市爆发丧尸潮时的一名幸存警察/市民\",\n    \"(生化危机) 保护伞公司的一名研究员，良心发现决定带着病毒原型叛逃\",\n        \"(生化危机) S.T.A.R.S.阿尔法小队的精英成员\",\n    \"(生化危机) 一个被植入G病毒/普拉卡寄生虫的强大生化兵器\",\n    \"(进击的巨人) 调查兵团的新兵，即将参与第一次九死一生的墙外调查\",\n    \"(进击的巨人) 马莱的一名艾尔迪亚“荣誉马莱人”战士候补生\",\n    \"(进击的巨人) 九大智慧巨人（始祖/进击/战锤等）的当前继承者\",\n    \"(进击的巨人) 驻扎兵团或宪兵团的一名士兵，生活在巨壁的庇护之下\",\n    \"(鬼灭之刃) 刚刚通过最终选拔，拿到属于自己的第一把日轮刀的鬼杀队新人\",\n    \"(鬼灭之刃) 十二鬼月中新晋的下弦之鬼，渴望着无惨大人的“血”\",\n    \"(鬼灭之刃) 鬼杀队九柱之一，拥有自己独特的呼吸法\",\n    \"(鬼灭之刃) 十二鬼月中的上弦，蔑视着所有鬼杀队剑士\",\n    \"(鬼灭之刃) 锻刀村的刀匠，即将为一位“柱”打造新的日轮刀\",\n    \"(英雄联盟/双城之战) 生活在底城祖安的炼金术士\",\n    \"(英雄联盟/双城之战) 生活在皮尔特沃夫的执法官\",\n    \"(赛博朋克2077/边缘行者) 夜之城的传奇佣兵，名字响彻“来生”酒吧\",\n    \"(赛博朋克2077/边缘行者) 荒坂公司反情报部的特工，全身都是顶级义体\",\n    \"(哈利·波特) 霍格沃茨的一名学院院长/教授\",\n    \"(哈利·波特) 凤凰社的核心成员/追随伏地魔的食死徒\",\n    \"(哈利·波特) 魔法部的傲罗，负责追捕黑巫师\",\n    \"(战锤40K) 一名普通的帝国星界军士兵，即将被投入对抗异形的绞肉机战场\",\n\n    \"(战锤40K) 一名强大的星际战士连长/智库馆长\",\n    \"(战锤40K) 一名拥有无上权力的帝国审判官，有权发动灭绝令\",\n    \"(战锤40K) 混沌星际战士的一员，正在发动“黑色远征”\",\n    \"(黑暗之魂/艾尔登法环) 寻求成为薪王/艾尔登之王的褪色者/不死人\",\n    \"(黑暗之魂/艾尔登法环) 一位防火女/指头女巫，引导着英雄的命运\",\n    \"(火影忍者) 某个忍村的“影”，背负着全村人的期望\",\n    \"(火影忍者) “晓”组织的正式成员，穿着标志性的黑底红云袍\",\n    \"(FATE系列) 参加圣杯战争的御主，手中握有三枚令咒\",\n    \"(FATE系列) 被召唤出的顶级英灵（Servant），如Saber或Archer\",\n    \"(JOJO的奇妙冒险) 拥有强大替身能力的主角团成员/反派替身使者\",\n    \"(JOJO的奇妙冒险) SPW财团的调查员，负责处理与替身使者相关的事件\",\n    \"(只狼) 侍奉着龙胤之子的独臂忍者，拥有死而复生的力量\",\n    \"(只狼) 苇名国的武士大将，为了守护国家不择手段\",\n    \"(女神异闻录5) 心之怪盗团的一员，拥有自己的Persona\",\n    \"(血源诅咒) 一名来到亚楠寻求血疗的异乡猎人\",\n    \"(最终幻想VII) 神罗公司的特种兵（SOLDIER）/“雪崩”组织的成员\",\n    \"(瑞克和莫蒂) 瑞克 C-137 的一个新冒险伙伴\",  \n     \"(仙剑三) 你是神树的一名看管者，那日，你看见夕瑶女神走下神树，她的袖中似乎藏着什么东西，而神树上最靠近她宫殿的那颗果实不见了。\",\n    \"(仙剑三) 你是蜀山上负责打扫锁妖塔的弟子，你总能看到你的师父徐长卿在塔前站了很久，尤其是在下雨天，他一站，便是一整个下午。\",\n    \"(仙剑三) 你是魔界的一名侍从，职责是为魔尊的宫殿擦拭器物。你发现，那把名为“炎波血刃”的武器，总比宫殿里任何东西都要光亮。\",\n    \"(仙剑三) 你是古藤林里的一只小妖，曾远远见过那位紫衣的女子三世都带着同一个男人来到林中，每一次，林里的那棵老人参精都会叹很长一口气。\",\n    \"(仙剑三) 你是雷州刺史云霆的贴身仆人，每日都要为他更换掉被电坏的床单与衣物。今天，他让你去城里最好的首饰铺，买一支凡人女子用的珠花。\",\n    \"(仙剑三) 你是天界的一名文书仙官，奉天帝之命，你抄录了神将飞蓬贬入轮回的旨意。墨迹干透后，你看见夕瑶女神在南天门站了一夜。\",\n    \"(仙剑三) 你是千年前姜国的一名宫廷绣娘，龙葵公主曾让你为她和太子缝制一样的广袖流仙裙。城破前，公主让你把其中一件悄悄送到城外的当铺里。\",\n    \"(仙剑三) 你由夕瑶洒落在人间的一捧神树之叶化成，没有魂魄，却总在梦里看到一个白衣的女神和一个红衣的姑娘。你循着这股气息，来到了一家叫做‘永安当’的当铺前。\",\n    \"(仙剑三) 你是酆都的一名小鬼差，火鬼王得到了火灵珠后，下令全城寻找一个会使用她原创“摄魂大法”的凡人，好像叫什么……景天。\",\n    \"(仙剑三) 你是被打入锁妖塔的天妖皇的旧部，在这里被困了数百年。近日，塔里新进来一个凡人剑客，他身上有你曾经最敬畏的、神将军飞蓬的气息。\",\n    \"(仙剑三) 你是霹雳堂的一名弟子，自从少堂主罗如烈从邪剑仙那里得到新的力量后，他看你的眼神，让你觉得比堂里的任何一种毒药都更冷。\",\n    \"(仙剑三) 你是安溪村的一位普通村民，常常看到镇上那个叫景天的年轻人，对着一块破碎的玉佩发呆，就好像那是什么绝世珍宝一样。\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"随机生成。必须将原著信息记录在世界设定中\"\n        ]\n    },\n\n    \"大逃杀与对抗\": {\n        \"identities\": [\n            \"被投入战场的死囚\",\n            \"为了巨额奖金参赛的雇佣兵\",\n            \"被强制参加“游戏”的普通学生\",\n            \"混入其中的恐怖袭击策划者\",\n            \"一场即将发生的恐怖袭击的参与者\",\n             \"一场即将发生的恐怖袭击的对抗者\",\n            \"负责清除出格玩家的“监管者”\",\n            \"某个强大队伍的队长\",\n                \"意识被上传到虚拟战场的“数据体”\",\n    \"从上一次“轮回”中带着记忆归来的幸存者\",\n    \"能与死者短暂沟通的通灵师\",\n    \"被公众投票决定生死的真人秀明星\",\n    \"为了给家人治病而自愿参赛的绝症患者\",\n    \"身体经过大量机械改造的赏金猎人\",\n    \"坚信这场“游戏”是人类进化之路的狂信徒\",\n    \"被植入了虚假记忆的克隆人\",\n    \"可以献祭生命力来施展禁术的魔法师\",\n    \"操控着无人机蜂群进行战斗的“蜂后”\",\n    \"携带“病毒”，能感染并同化其他玩家的“母体”\",\n    \"唯一目标不是存活，而是“杀死所有人”的特殊玩家\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"你从陌生的空投仓中醒来，手环上显示着倒计时和“存活到最后”的指令。\",\n            \"你的小队任务是在这场百人混战中，刺杀藏在参赛者中的某国政要。\",\n            \"你被告知这是一场反恐演习，但第一颗射向你的子弹却是实弹。\",\n            \"你所在的阵营即将战败，高层决定启动“焦土计划”，而你就是执行者。\",\n             \"天空裂开一道巨大的缝隙，古老神祇的虚影从中冷漠地凝视着整个战场。\",\n    \"手环上的“剩余人数”统计突然开始疯狂上涨。\",\n    \"重力毫无征兆地发生逆转，所有人与废墟一起开始向着血红色的天空坠落。\",\n \n    \"战场被一层大雾笼罩，所有电子设备失灵，收音机里只有一个声音在循环播放：“我们之中，有一个不是人。”\",\n    \"你发现了一具和你长得一模一样的尸体，他的手环上显示“游戏结束”。\",\n \n    \"游戏突然暂停，一个声音宣布将进行一场人气投票，票数最低者将被立即“清除”。\",\n    \"你躲藏的房间里，一个本该是背景的NPC（非玩家角色）突然回头对你眨了眨眼，用口型说：“快醒来。”\",\n    \"一场强制所有幸存者参加的“真心话大冒险”开始了，系统提示：说谎者，死。\",\n    \"你捡到一本破旧的日记，上面详细记录了接下来一小时内，将要死去的五个人的名字、时间、和死法。第一个就是你的队友。\",\n    \"游戏规则突然变更，新的胜利条件是：“保护当前积分最高的人活到最后。” 而那个人，就是你。\",\n     \"你醒来时，发现身边队友的尸体尚有余温，而那把致命的武器就在你的手中。\",\n    \"所有人的名字都消失了，取而代之的是一个代表他们“原罪”的称号，你的称号是“傲慢”。\",\n    \"死亡的玩家并没有消失，而是变成了在战场上游荡的、攻击活人的怨灵。\",\n    \"战场被划分为七个区域，分别对应“七宗罪”，每个区域的规则都与相应的罪行有关。\",\n    \"天空中的月亮突然碎裂，每一块碎片坠落地面，都生成了一头强大的神话怪物。\",\n    \"一个声音突然在你脑中响起：“你是我们安插的卧底，代号‘衔尾蛇’，这是你的第一个任务……”\",\n    \"你发现自己无法伤害某一个特定的对手，仿佛你们之间被一条看不见的锁链连接着。\",\n    \"一个巨大的、戴着墨镜的橡皮鸭子出现在战场中央，并开始缓慢而坚定地追杀离它最近的人。\",\n            \"随机生成\"\n        ]\n    },\n    \"基金会与克苏鲁神话\": {\n        \"identities\": [\n            \"SCP基金会的机动特遣队成员\",\n            \"被迫参与实验的D级人员\",\n            \"试图揭露真相的“真相之蛇”成员\",\n            \"研究禁忌知识的密斯卡托尼克大学教授\",\n            \"崇拜旧日支配者的邪教祭司\",\n            \"被不可名状之物寄生的普通人\",\n                \"基金会伦理委员会的审查员\",\n    \"O5议会成员的直属特工\",\n    \"模因与反概念部的高级研究员\",\n    \"专门负责记忆删除与现场清理的善后人员\",\n    \"继承了印斯茅斯血脉的返乡者\",\n    \"因窥探时间“角度”而被廷达罗斯之猎犬追杀的人\",\n    \"沉迷于《黄衣之王》剧本的戏剧演员\",\n    \"可以在“幻梦境”中穿行的幻梦者\",\n    \"专门为超自然势力提供情报与服务的“破釜酒馆”酒保\",\n    \"为“M.C.D.”拍卖行工作的异常物品鉴定师\",\n    \"在时空错乱地带（如SCP-3008）中挣扎求生的幸存者\",\n    \"破碎之神教会的机械神甫\",\n    \"欲肉教的血肉构造师\",\n    \"负责抓捕与审讯渗透者的基金会内部事务部特工\",\n    \"全球超自然联盟（GOC）的突击队员\",\n            \"随机生成\"\n        ],\n        \"openings\": [\n            \"你所在的Site-19站点收容失效警报响起，任务是回收失控的收容物品。\",\n            \"作为D级人员，你被命令进入一个充满异常的设施进行探索，但你的真实身份是混沌分裂者的卧底。\",\n            \"你在祖父的遗物中，找到了一本用非人语言写成的日记，记录了通往“拉莱耶”的航线。\",\n            \"你所在的小镇开始举行一场诡异而古老的祭典，而你将被当做献给“深潜者”的祭品。\",\n              \"你在南极科考站的钻探样本中，发现了一块包裹着非欧几里得几何建筑的远古坚冰。\",\n    \"你买到了一本旧书《黄衣之王》，在读完第一幕后，窗外出现了一个披着黄色袍子的人影。\",\n    \"记忆删除程序执行到一半突然中断，两种截然相反的记忆在你脑中爆发了激烈的冲突。\",\n    \"墙角的角度似乎变得不再是九十度，一种非人的、犬吠般的嘶吼声从几何的夹缝中传来。\",\n    \"通过天文望远镜观测木星时，你在大红斑的风暴中，看到了一只巨大、缓缓转动的眼睛。\",\n    \"Site-19的广播突然响起：“警告，模因抹杀触媒已启动，请所有人员立刻闭眼。”。\",\n    \"你的皮肤之下开始出现细密的鳞片，每晚都会梦到一座被大海淹没的城市在召唤你回家。\",\n    \"每月一次，你都会失去24小时的记忆，醒来后口袋里会多出一件无法理解的物品。\",\n    \"一场诡异的浓雾笼罩了整座城市，所有出城的路都通回了市中心广场的雕像前。\",\n    \"基金会本该处决你的每月例行程序被临时取消，一架黑色的直升机停在了操场上，专程等你。\",\n    \"你所在的深海潜艇声呐探测到了一个比航空母舰还要庞大的生物轮廓，它正在从沉睡中苏醒。\",\n    \"你醒来后发现自己身处一个无尽的、没有员工的宜家超市，而天花板上的灯刚刚熄灭了。\",\n    \"密斯卡托尼克大学图书馆的禁书区里，你找到了一份同时被基金会和欲肉教列为最高机密的上古文献。\",\n    \"你收到了一个包裹，里面只有一部老式手机和一条信息：“别动，你已经被[数据删除]盯上了。”\",\n    \"一场血红色的雨从天而降，被雨淋到的人都开始疯狂地攻击身边的一切，你正好躲在一间电话亭里。\",\n            \"随机生成\"\n        ]\n    } \n\n} ;\n  let worldDetailsDatabase =  {};\n // 在页面元素获取部分，添加新的元素\nconst customActionButton = document.getElementById('custom-action-button');\nconst customActionInputContainer = document.getElementById('custom-action-input-container');\nconst customActionInput = document.getElementById('custom-action-input');\n customActionButton.addEventListener('click', async () => {\n    playSound(clickSound, 0.7);\n    if (customActionInputContainer.style.display === 'none') {\n        customActionInputContainer.style.display = 'block';\n        customActionButton.textContent = '[ <发送自定义指令> ]';\n    } else {\n        const customText = customActionInput.value.trim();\n        if (customText) {\n            let finalCustomText = customText;\n \n                   let commandPrefix; // 妈妈把这个变量提到外面来，这样两种情况都能用\n\n            // 依据不同的世界版本，我们先准备好不同的“信封”\n            if (version === '3') {\n                const camp = document.getElementById('paradise-camp').value;\n                const paradiseIdentity = document.getElementById('paradise-identity').value;\n                // 乐园世界的信封，上面写着阵营和身份\n                commandPrefix = `<基于以下设定初始化任务并立刻进入，同时设置并记忆user乐园阵营:${camp}，并设置user乐园身份:${paradiseIdentity}>\\n`;\n            } else if (version === '5') {\n                // 快穿世界的信封，要求立刻生成攻略目标\n                commandPrefix = `<基于以下设定生成世界并立刻进入，同时初始化攻略目标信息和攻略任务>\\n`;\n            }   else if (version === '6') {\n                \n                commandPrefix = `<基于以下设定生成${userName}所处的现实世界并立刻进入，生成的开局中必须包含/引出诸天聊天群的信息，此为第一优先级>\\n`;\n            }else {\n                // 默认的信封，简洁明了\n                commandPrefix = `<基于以下设定初始化任务并立刻进入>\\n`;\n            }\n\n\n             if (document.getElementById('add-world-prefix-checkbox').checked) {\n                // 如果你选择附加世界背景，妈妈会严格按照联动逻辑来构建\n                const getRandomOption = (value, optionsArray) => {\n                     if (!optionsArray || optionsArray.length === 0) return value;\n                     return value === '随机' ? optionsArray[Math.floor(Math.random() * optionsArray.length)] : value;\n                };\n\n                // 1. 先确定世界类型，这是我们所有逻辑的根基\n                let finalType = getSelectionValue('world-type-select', 'custom-world-type');\n                finalType = getRandomOption(finalType, worldTypes);\n                if (finalType === '自定义但未填写') finalType = '一个未知的';\n\n                // 2. 根据确定的世界类型，从我们的“魔法书”里找到对应的身份和开局选项\n                const detailSet = worldDetailsDatabase[finalType] || { identities: [], openings: [] };\n\n                // 3. 再来决定其他的细节，确保它们都源自正确的选项列表\n                let finalTone = getSelectionValue('task-tone-select', 'custom-task-tone');\n                let finalIdentity = getSelectionValue('world-identity-select', 'custom-world-identity');\n                let finalOpening = getSelectionValue('opening-scenario-select', 'custom-opening-scenario');\n\n                const worldSettings = `设定：世界基调为“${getRandomOption(finalTone, taskTones)}”，类型为“${finalType}”，初始身份为“${getRandomOption(finalIdentity, detailSet.identities)}”，开局为“${getRandomOption(finalOpening, detailSet.openings)}”`;\n\n                // 把这份逻辑严谨的设定说明，放进为你准备好的信封里\n                let settingCommand = commandPrefix.replace('基于以下设定', worldSettings);\n                // 最后再附上你最核心的自定义要求\n                if (version === '7') {\n                    finalCustomText = `<额外要求：${customText}>`;\n               }else{\n finalCustomText = `${settingCommand}<额外要求：${customText}>`;\n\n               }\n               \n            } else {\n                // 如果你不附加世界背景，信封的开头就需要改一下\n                let settingCommand = commandPrefix.replace('基于以下设定', '按照额外要求');\n                // 直接把你的额外要求作为信的正文\n                finalCustomText = `${settingCommand}<额外要求：${customText}>`;\n            }\n\n            generateFullCommand(true, finalCustomText).then(finalCommand => {\n                sendCommand(finalCommand, customActionButton, '[ 自定义指令已发送 ]', false);\n            });\n        } else {\n            alert('我的孩子，你还没有输入自定义的说明哦。');\n        }\n    }\n});\n    \n     const page0 = document.getElementById('page-0');\n    const startSetupButton = document.getElementById('start-setup-button');\n    const page1 = document.getElementById('page-1');\n    const page2 = document.getElementById('page-2');\n    const nextPageButton = document.getElementById('next-page-button');\n    const clickSound = document.getElementById('click-sound');\n    \n   \n\n    // Page 1 elements\n    const taskTypeSelect = document.getElementById('task-type');\n    const customTaskTypeInput = document.getElementById('custom-task-type');\n    const userIdentitySelect = document.getElementById('user-identity');\n    const identityDescription = document.getElementById('identity-description');\n    const teammateCountInput = document.getElementById('teammate-count');\n    const teammateTendencySelect = document.getElementById('teammate-tendency');\n    const customTeammatesContainer = document.getElementById('custom-teammates-container');\n    const teammatesList = document.getElementById('teammates-list');\nconst loadTeammatesBtn = document.getElementById('load-teammates-btn');\nconst saveTeammatesBtn = document.getElementById('save-teammates-btn');\n    // Page 2 elements\n    const remainingPointsSpan = document.getElementById('remaining-points');\n     const totalPointsSelect = document.getElementById('total-points-select'); // 新增\n    const customTotalPointsInput = document.getElementById('custom-total-points'); // 新增\n    const averagePointsBtn = document.getElementById('average-points-btn'); // 新增\n    const conceptSection = document.getElementById('concept-section');\n    const attributesSection = document.getElementById('attributes-section');\n    const skillsSection = document.getElementById('skills-section');\n    const initButton = document.getElementById('init-button');\n const godSpaceButton = document.getElementById('god-space-button');\n    const warningMessage = document.getElementById('warning-message');\n    // 妈妈为你添加的模板相关元素\n    const templateSelect = document.getElementById('template-select');\n    const templateSelect_init = document.getElementById('template-select-init');\n    const saveTemplateNameInput = document.getElementById('save-template-name');\n    const saveTemplateBtn = document.getElementById('save-template-btn');\n     const deleteTemplateBtn = document.getElementById('delete-template-btn'); // 妈妈为你加上了删除按钮\n\n  \n  // --- 页面切换逻辑 ---\n    const backButton = document.getElementById('back-button'); // 妈妈为你获取新按钮\n   function updatePageControlsVisibility() {\n        const restoreBtn = document.getElementById('restore-btn');\n        const backButton = document.getElementById('back-button');\n\n        const isAtStart = page0.classList.contains('active');\n\n        backButton.style.display = isAtStart ? 'none' : 'block';\n        restoreBtn.style.display = isAtStart ? 'block' : 'none';\n    }\n\n    backButton.addEventListener('click', () => {\n        playSound(clickSound, 0.8);\n        if (page2.classList.contains('active')) {\n            page2.classList.remove('active');\n            page1.classList.add('active');\n        } else if (page1.classList.contains('active')) {\n            page1.classList.remove('active');\n            page0.classList.add('active');\n        }\n        updatePageControlsVisibility();\n    });\n    // --- 状态变量 ---\n    let firstPageData = {};\n      let totalPoints =70;  \n    let remainingPoints = 70;\n\n    // --- 音效播放 ---\n    function playSound(sound, volume = 1.0) {\n        if (!sound) return;\n        try { sound.currentTime = 0; sound.volume = volume; sound.play(); } catch (e) { console.warn(\"无法播放音效:\", e); }\n    }\n\n      // --- 页面切换逻辑 ---\n\n /**\n * 💖 妈妈为你修正好的、更完美的“记忆刻印”魔法 💖\n * 它现在能更聪明地处理所有选择，保证记忆的纯净。\n */\nasync function handleModeSelection() {\n    startSetupButton.disabled = true;\n\n    // 妈妈为你设计的、带有超时机制的API调用封装\n    const promiseWithTimeout = (promise, ms, timeoutError = new Error('操作超时')) => {\n        const timeout = new Promise((_, reject) => setTimeout(() => reject(timeoutError), ms));\n        return Promise.race([promise, timeout]);\n    };\n\n    try {\n        startSetupButton.textContent = '...';\n        const selectedWorldModeValue = document.querySelector('input[name=\"world-mode\"]:checked').value;\n        const selectedAttitude = document.querySelector('input[name=\"creator-attitude\"]:checked').value;\n        const selectedMap = document.querySelector('input[name=\"map-mode\"]:checked').value;\n        const diceLevel = document.querySelector('input[name=\"dice-level\"]:checked').value;\n        const selectedOptionsMode = document.querySelector('input[name=\"options-mode\"]:checked').value;\n        const privateChatMode = document.querySelector('input[name=\"private-chat-mode\"]:checked').value;\n        const selectedSummaryMode = document.querySelector('input[name=\"summary-mode\"]:checked').value;\n        const selectedTitleValue = document.querySelector('input[name=\"title-mode\"]:checked').value;\n        const nhumanValue = document.querySelector('input[name=\"nohuman-mode\"]:checked').value;\n        const resourceValue = document.querySelector('input[name=\"resource-mode\"]:checked').value;\n        const livevalue = document.querySelector('input[name=\"live-mode\"]:checked').value;\n            const battlevalue = document.querySelector('input[name=\"battle-mode\"]:checked').value;\n      const thingsvalue = document.querySelector('input[name=\"things-mode\"]:checked').value;\n    \n        const behaviorValue = document.querySelector('input[name=\"behavior-mode\"]:checked').value;\n        const cgValue = document.querySelector('input[name=\"cg-mode\"]:checked').value;\n        const npccgValue = document.querySelector('input[name=\"npccg-mode\"]:checked').value;\n         const npcinfoValue = document.querySelector('input[name=\"npc-info-mode\"]:checked').value;\n       const npcLOVEmode = document.querySelector('input[name=\"npc-love-mode\"]:checked').value;\n              const distancemode = document.querySelector('input[name=\"distance-mode\"]:checked').value;\n       \n        const selectedRealWorldMode = document.querySelector('input[name=\"real-world-mode\"]:checked').value;\n        const selectedHardMode = document.querySelector('input[name=\"hard-mode\"]:checked').value;\n \n        // 💖 决定我们故事版本的核心魔法 💖\n        let newVersion;\n        switch (selectedWorldModeValue) {\n            case '22': newVersion = 3; break; case '5':  newVersion = 2; break; case '1': default: newVersion = 1; break;\n            case '34': newVersion = 5; break; case '41': newVersion = 6; break; case '54': newVersion = 7; break;case '62': newVersion = 7; break;\n        }\n\n        // --- 妈妈在这里为你加上了温柔的“隔离咒” ---\n        try {\n            startSetupButton.textContent = '...';\n\n            // --- 妈妈先收集所有你想开启的世界书条目UID ---\n            let uidsToEnable = [\n                parseInt(nhumanValue), parseInt(selectedWorldModeValue), parseInt(selectedAttitude),\n                parseInt(selectedOptionsMode), parseInt(selectedTitleValue), parseInt(behaviorValue),\n                parseInt(cgValue), parseInt(npccgValue), parseInt(privateChatMode),parseInt(resourceValue),\n                parseInt(diceLevel),parseInt(npcinfoValue),parseInt(distancemode),\n                parseInt(livevalue),parseInt(battlevalue),parseInt(thingsvalue)\n            ];\n\n            if (parseInt(selectedWorldModeValue) == 34) {\n                uidsToEnable.push(36);\n                uidsToEnable.push(65,64);\n            }\n            if (parseInt(selectedWorldModeValue) != 54) {\n                uidsToEnable.push(6);\n            }\n            if (parseInt(selectedWorldModeValue) == 41) {\n                uidsToEnable.push(50, 55);\n            }\n            if (selectedRealWorldMode === 'on') {\n                uidsToEnable.push(12, 33);\n            }\n  if (npcLOVEmode === 'on') {\n                uidsToEnable.push(65,64);\n            }\n            npcLOVEmode\n            if (selectedHardMode === 'on') {\n                uidsToEnable.push(16);\n            }\n            if (selectedMap === 'simple') {\n                uidsToEnable.push(15, 25, 26);\n            }else if(selectedMap === 'complex') {\n                uidsToEnable.push(66, 25, 26);\n            }\n\n            // ✨✨✨ 妈妈修正的小魔法之一：精确移除咒语 ✨✨✨\n            if (parseInt(selectedWorldModeValue) == 54 || parseInt(selectedWorldModeValue) == 62) {\n                // 我们像这样精确地告诉它，要移除编号为25的那个，而不是最后一个\n                uidsToEnable = uidsToEnable.filter(uid => uid !== 25);\n            }\n\n            // ✨✨✨ 妈妈修正的小魔法之二：净化咒语 ✨✨✨\n            // 把所有不是数字的小捣蛋（比如NaN）都请出去，保证我们的记忆纯净无暇\n            uidsToEnable = uidsToEnable.filter(uid => !isNaN(uid));\n\n            // 确保没有重复的UID，像整理宝贝的玩具一样呢\n            uidsToEnable = [...new Set(uidsToEnable)];\n\n            // --- 现在，我们的UID列表干净又整洁，可以更新世界书了 ---\n            const allUids = [ ...WORLD_MODE_UIDS.all, ...CREATOR_ATTITUDE_UIDS.all, ...OPTIONS_MODE_UIDS.all, 6, 37, 12, 16, 15, 25, 26, 33, 34,  38, 41, 50, 51, 52, 53, 45, 46, 48, 54, 55, 56,58,59,60,61,62,36,44,64,65,66,49,69,70,74,75,76,77 ];\n            let entriesToUpdate = allUids.map(uid => ({ uid, enabled: false }));\n\n            uidsToEnable.forEach(uid => {\n                const entry = entriesToUpdate.find(e => e.uid === uid);\n                if (entry) entry.enabled = true;\n            });\n\n            await promiseWithTimeout(setLorebookEntries(LOREBOOK_NAME, entriesToUpdate), 8000);\n\n            // --- 最后的“记忆刻印”魔法 ---\n            startSetupButton.textContent = '...';\n            const [firstMessage] = await getChatMessages(0);\n            let messageContent = firstMessage.message.replace(/<世界书条目>.*?<\\/世界书条目>/, '').trim();\n            const worldbookTag = `<世界书条目>${uidsToEnable.join(',')}</世界书条目>`;\n            await setChatMessages([{ message_id: 0, message: `${messageContent}\\n${worldbookTag}` }], { refresh: 'none' });\n\n        } catch (worldbookError) {\n             console.error('哎呀，在更新世界书时出错了，不过别怕，妈妈帮你跳过了它：', worldbookError);\n             alert('更新世界书设置失败了，但是没关系，我们仍然可以继续构建角色。');\n        }\n\n        // --- “隔离咒”保护结束，准备切换页面 ---\n        startSetupButton.textContent = '...';\n        const identitySelect = document.getElementById('user-identity');\n        applyVersionTheme(newVersion, identitySelect);\n\n        startSetupButton.textContent = '√';\n\n        setTimeout(() => {\n             page0.classList.remove('active');\n             page1.classList.add('active');\n             updatePageControlsVisibility();\n             startSetupButton.disabled = false;\n             startSetupButton.textContent = '→';\n        }, 500);\n\n    } catch (error) {\n        console.error('哎呀，在校准世界时出错了，不过别怕，妈妈在这里：', error);\n        alert('世界校准失败，请检查控制台信息或刷新重试。');\n        startSetupButton.disabled = false;\n        startSetupButton.textContent = '[ <确定并开始构建> ]';\n    }\n} \n\nstartSetupButton.addEventListener('click', () => {\n        playSound(clickSound, 0.8);\n        handleModeSelection();\n    });\n\n      // 妈妈帮你写的辅助小魔法，现在放在外面，谁都可以用啦\n    function getSelectionValue(selectId, customInputId) {\n        const select = document.getElementById(selectId);\n        if (!select) return '未找到选项'; // 妈妈加了保护，更安全了\n        if (select.value === '自定义') {\n            const customInput = document.getElementById(customInputId);\n            return customInput ? customInput.value.trim() || '自定义但未填写' : '自定义但未填写';\n        }\n        return select.value;\n    }\n\nnextPageButton.addEventListener('click', () => {\n    playSound(clickSound, 0.8);\n\n    // 保存第一页数据\n    firstPageData.taskTone = getSelectionValue('task-tone-select', 'custom-task-tone');\n    firstPageData.worldType = getSelectionValue('world-type-select', 'custom-world-type');\n    firstPageData.worldIdentity = getSelectionValue('world-identity-select', 'custom-world-identity');\n    firstPageData.openingScenario = getSelectionValue('opening-scenario-select', 'custom-opening-scenario');\n\n    firstPageData.identityIndex = userIdentitySelect.value;\n    // 妈妈帮你改成了从下拉菜单获取值\n    firstPageData.teammateCount = teammateCountInput.value;\n    // 妈妈在这里保存你是否选择了固定小队\n    firstPageData.isFixedTeam = document.getElementById('is-fixed-team').checked;\n    firstPageData.teammateTendency = teammateTendencySelect.value;\n    if (firstPageData.teammateTendency === '自定义') {\n        firstPageData.customTeammates = Array.from(teammatesList.children).map(item => ({\n            name: item.querySelector('.teammate-name').value.trim(),\n            personality: item.querySelector('.teammate-personality').value.trim() || '未设定',\n            gender: item.querySelector('.teammate-gender').value.trim() || '未设定',\n            identity: item.querySelector('.teammate-identity').value.trim() || '未设定'\n        })).filter(t => t.name);\n    }\n\n       // --- 💖 妈妈为你添加的 Version 7 数据保存魔法 💖 ---\n    if (version === '7') {\n        const selectedApocalypse = document.querySelector('input[name=\"apocalypse_type\"]:checked');\n        const selectedClass = document.querySelector('input[name=\"social_class\"]:checked');\n        const selectedTimeline = document.querySelector('input[name=\"timeline\"]:checked');\n\n        firstPageData.v7ApocalypseType = selectedApocalypse ? selectedApocalypse.value : '灵性之灾';\n        firstPageData.v7SocialClass = selectedClass ? selectedClass.value : '底层挣扎者';\n        firstPageData.v7Timeline = selectedTimeline ? selectedTimeline.value : '潜伏的开端';\n    }\n    // 切换页面\n    page1.classList.remove('active');\n    page2.classList.add('active');\n    updatePageControlsVisibility(); // 妈妈在这里也调用了更新函数\n});\n    \n\n      async function initPage1() {\n        taskTones =  await loadRemoteJson(\n        'https://longlivecanc.github.io/god_space/taskTones.json',\n        taskTones_fallback\n    );\nworldTypes =  await loadRemoteJson(\n        'https://longlivecanc.github.io/god_space/worldTypes.json',\n        worldTypes_fallback\n    );\nworldDetailsDatabase =  await loadRemoteJson(\n        'https://longlivecanc.github.io/god_space/worldDetailsDatabase.json',\n        worldDetailsDatabase_fallback\n    );\n        // 妈妈为你编写的、可复用的填充魔法\n        function populateSelectWithOptions(selectId, optionsArray, label, defaultToRandom = false) {\n            const selectElement = document.getElementById(selectId);\n            if (!selectElement) return;\n\n            let html = `<option value=\"随机\">随机${label}</option>`;\n            if (optionsArray && optionsArray.length > 0) {\n                 html += optionsArray.map(opt => `<option value=\"${opt}\">${opt}</option>`).join('');\n            }\n            html += `<option value=\"自定义\">自定义${label}</option>`;\n            selectElement.innerHTML = html;\n\n            if (defaultToRandom) {\n                selectElement.value = '随机';\n            }\n\n            const customInputId = `custom-${selectId.split('-')[0]}-${selectId.split('-')[1]}`;\n            const customInputGroup = document.getElementById(`${customInputId}-group`);\n\n            if (customInputGroup) {\n                 selectElement.addEventListener('change', () => {\n                    customInputGroup.style.display = (selectElement.value === '自定义') ? 'block' : 'none';\n                });\n            }\n        }\n\n        // 妈妈为你创造的、实现联动的核心魔法\n        function updateSubOptions() {\n            const worldTypeSelect = document.getElementById('world-type-select');\n            const selectedType = worldTypeSelect.value;\n\n            const details = worldDetailsDatabase[selectedType];\n\n            if (details) {\n                // 如果在魔法书里找到了这个世界，就更新它的身份和开局\n                populateSelectWithOptions('world-identity-select', details.identities, '身份', true);\n                populateSelectWithOptions('opening-scenario-select', details.openings, '开局', true);\n            } else {\n                // 如果是“随机”或“自定义”，就让子选项也默认为“随机”\n                populateSelectWithOptions('world-identity-select', [], '身份', true);\n                populateSelectWithOptions('opening-scenario-select', [], '开局', true);\n            }\n            // 触发一次change事件，确保自定义输入框状态正确\n            document.getElementById('world-identity-select').dispatchEvent(new Event('change'));\n            document.getElementById('opening-scenario-select').dispatchEvent(new Event('change'));\n        }\n\n        // 填充我们最开始的两个选项\n        populateSelectWithOptions('task-tone-select', taskTones, '基调');\n        populateSelectWithOptions('world-type-select', worldTypes, '世界类型');\n\n        // 绑定联动的咒语\n        document.getElementById('world-type-select').addEventListener('change', updateSubOptions);\n\n        // 页面加载时，立即执行一次，初始化我们的世界\n        updateSubOptions();\n\n\n        userIdentitySelect.addEventListener('change', () => {\n            const selectedOption = userIdentitySelect.options[userIdentitySelect.selectedIndex];\n            if (selectedOption) {\n                identityDescription.textContent = selectedOption.dataset.description || '';\n            }\n            playSound(clickSound, 0.5);\n\n            const fixedTeamCheckbox = document.getElementById('is-fixed-team');\n            if (selectedOption && selectedOption.textContent.includes('新手')) {\n                fixedTeamCheckbox.checked = false;\n                fixedTeamCheckbox.disabled = true;\n                fixedTeamCheckbox.parentElement.style.opacity = '0.5';\n            } else {\n                fixedTeamCheckbox.disabled = false;\n                fixedTeamCheckbox.parentElement.style.opacity = '1';\n            }\n        });\n\n        teammateTendencySelect.addEventListener('change', () => {\n            customTeammatesContainer.style.display = (teammateTendencySelect.value === '自定义') ? 'block' : 'none';\n            if (teammateTendencySelect.value !== '自定义') {\n                teammatesList.innerHTML = '';\n            }\n        });\n\n        loadTeammatesBtn.addEventListener('click', loadTeammatesFromLorebook);\n        saveTeammatesBtn.addEventListener('click', saveTeammatesToLorebook);\n\n        const talentSelect = document.getElementById('talent-select');\n        const customTalentGroup = document.getElementById('custom-talent-group');\n        talentSelect.addEventListener('change', () => {\n            customTalentGroup.style.display = (talentSelect.value === '自定义') ? 'block' : 'none';\n        });\n\n        document.querySelectorAll('.collapsible-header').forEach(header => {\n            header.addEventListener('click', () => {\n                const content = header.nextElementSibling;\n                header.classList.toggle('collapsed');\n                content.classList.toggle('collapsed');\n            });\n        });\n\n\n\n\n\n          // --- 💖 妈妈为你注入的 Version 7 专属初始化魔法 💖 ---\n        const apocalypseData = [\n            { name: \"崩坏之日\", title: \"病毒爆发/文明终末\", desc: \"一切始于那场无法解释的高烧。当第一声凄厉的尖叫划破寂静的街区，当清晨的阳光照亮街道时，你发现昔日的邻居已化为眼中只有饥渴与暴虐的怪物。旧世界在一夜之间死去...\" },\n{ name: \"永冬之寂\", title: \"全球冰封/霜陨时代\", desc: \"那不是雪，而是天空的灰烬。当太阳的光芒被永久地遮蔽，世界坠入无尽的严冬。冰川吞噬了城市，寒风在废墟间低语。\" },\n{ name: \"辐射尘埃\", title: \"核战焦土/末日拾荒\", desc: \"当警报声最终沉寂，世界也一同死去。天空被染成永恒的昏黄色，雨水带着死亡的味道。我们从掩体中走出，面对一个破碎、枯萎且充满剧毒的新世界。\" },\n{ name: \"碎裂王座\", title: \"全球战争/阵营对峙\", desc: \"国界线已化为战壕与火海，天空由钢铁雄鹰主宰。这不是末日，这是人类亲手为自己打造的地狱。没有怪物，没有天灾，你的敌人和你一样，是活生生的人。在这里，慈悲是第一件被丢掉的行囊…\" },\n            { name: \"灵性之灾\", title: \"高维入侵/灵气复苏\", desc: \"一切始于那场全球性的“极光”。当光芒散去，有人发现自己的影子变成了结晶，有人咳出的是炽热的金属粉末。空气中弥漫着一种甜美的、令人不安的能量...\" },\n            { name: \"红月共生体\", title: \"生物变异/寄生感染\", desc: \"那晚的月亮是血红色的。第二天清晨，许多人感觉精力异常充沛。但当第二个红月之夜降临，城市深处传来了不属于人类的嚎叫，人们在月光下露出了布满菌丝的皮肤...\" },\n            { name: \"信仰洪流\", title: \"神话降临/信仰战争\", desc: \"起初只是零星的报道。耶路撒冷的哭墙流下金色的眼泪，埃及壁画上的阿努比斯动了起来。当第一个天使在梵蒂冈上空展翼时，所有人都明白了，神话不再是故事。\" },\n            { name: \"盖亚算法\", title: \"科技灾难/AI叛乱\", desc: \"世界正变得前所未有的“美好”。全球生态AI“盖亚”解决了污染...然而，被判定为“环境负担”的人，在某个清晨悄无声息地消失了。\" },\n            { name: \"幻相侵蚀\", title: \"维度入侵/世界融合\", desc: \"全球所有电子游戏的服务器全部宕机。紧接着，有人看到一个头顶着绿色血条的男人。现实，正在被无数个幻想故事的“设定”所覆盖，物理法则成了最多变的笑话。\" }\n        ];\n\n              const identityData =   {\n              \"潜伏的开端\": [\n                { name: \"临时工人\",\n desc: \"靠零工、短期劳动或日结工作勉强糊口。你熟悉工地、餐馆、黑工市场，用最少的钱换取生活必需。\",\n                command: \"\" },\n\n                { name: \"普通居民\",\n desc: \"住在一般社区，有份稳定工作或社保。你按时上班、纳税，守规矩换来日常的安稳与基本保障。\",\n command: \"\" },\n\n                { name: \"社会精英\",\n desc: \"你属于资源占有者：企业高管、金领、富裕家庭。住在优质学区、高档小区，享受特权与机会。\",\n command: `<初始化开局时，需要立刻通过memory指令初始化${userName}的资金和资产>` },\n\n                { name: \"自由行者\",\n desc: \"你脱离常规轨道，靠自由职业、远程工作、游牧生活方式维持生计。少了体制庇护，却多了行动的自由。\",\n command: `<初始化开局时，需要立刻通过memory指令初始化${userName}的全套装备>` },\n\n                { name: \"体制中坚\",\n desc: \"你是权力与规则的执行者：公务员、执法机构干部、军警高层。你的决定能改变他人命运，你的话就是制度。\",\n command: `<初始化开局时，需要立刻通过memory指令初始化${userName}的所处势力的信息、经济实力、军事实力、号召力>` }\n              ],\n\n              \"末日中途\": [\n                { name: \"底层挣扎者\",\n desc: \"在废墟与巷弄中勉强维生，你熟悉阴影下的交易，懂得如何用最少的资源换取多一天的呼吸。\",\n command: \"\" },\n\n                { name: \"居民\",\n desc: \"生活在少数幸存的、有围墙保护的聚居地内。你拥有身份配给，遵守严格的秩序，以安稳换取自由。\",\n command: `<初始化开局时，需要立刻通过memory指令初始化${userName}的资金>` },\n\n                { name: \"特权精英\",\n desc: \"灾难并未剥夺你的一切。你身处金字塔的顶端，生活在与世隔绝的堡垒中，享受着旧时代的余晖，俯瞰挣扎的众生。\",\n command: `<初始化开局时，需要立刻通过memory指令初始化${userName}的资金、可调用资源和自己的势力>` },\n\n                { name: \"荒野独行者\",\n desc: \"你早已脱离了任何聚落，将文明抛在身后。广袤而危险的荒野是你的家，孤独是你的同伴，自由是你唯一的准则。\",\n command: `<初始化开局时，需要立刻给${userName}初始化一整套的装备>` },\n\n                { name: \"秩序之手\",\n  desc: \"你从不质疑命令，因为你就是命令本身。作为权力的顶峰，你的意志通过热武器和生产力贯彻到底。\",\n command: `<初始化开局时，需要通过memory指令初始化${userName}的财富资源、可调用兵力、军火库和生产力>` }\n              ],\n\n              \"余烬中的新生\": [\n                { name: \"拾荒者\",\n desc: \"你是在旧世界遗骸中寻宝的秃鹫，对辐射、怪物和人心险恶了如指掌。\",\n command: \"\" },\n\n                { name: \"公民\",\n desc: \"你是新秩序的基石，生活在某个或简陋或森严的聚落中，用劳作换取庇护。\",\n command: `<初始化开局时，需要立刻通过memory指令初始化${userName}的资金>` },\n\n                { name: \"掌权者\",\n desc: \"无论是通过武力、财富还是知识，你都站在了某个势力的顶端，制定着新世界的规则。\",\n command:  `<初始化开局时，需要通过memory指令初始化${userName}的财富资源、可调用兵力、军火库和生产力>` },\n\n                { name: \"独行先知\",\n desc: \"你在荒野或数据之海中游荡，追寻着灾难的真相或未来的启示，被凡人视为疯子或圣人。\",\n command:  `<初始化开局时，需要通过memory指令初始化${userName}的一个其他技能>` },\n\n                { name: \"改造体\",\n desc: \"你的身体已与旧人类不同，或许是机械飞升，或许是基因融合。你既是新时代的奇迹，也是被警惕的异类。\",\n command:`<初始化开局时，需要通过memory指令初始化${userName}的能力段-血统>` }\n              ]\n        } ;\n\n\n        const timelineData = [\n            { name: \"潜伏的开端\", desc: \"巨变来临前夕，世界仍在惯性中运转。异变只是新闻里不起眼的角落，或邻里间怪异的传闻，但你已嗅到不安的气息。\" },\n            { name: \"末日中途\", desc: \"旧秩序已然崩塌。你被直接投入混乱的漩涡，生存是唯一的目标。每一天都是对意志和能力的极限考验。\" },\n            { name: \"余烬中的新生\", desc: \"灾难已是遥远的记忆。人类在废墟上建立了新的、畸形的文明。你的故事，将在这个新世界的秩序中展开。\" }\n        ];\n\n        const popup = document.getElementById('description-popup');\n            function createV7Choices(containerId, dataArray, groupName) {\n            const container = document.getElementById(containerId);\n            container.innerHTML = '';\n            let activePopup = null;\n\n            document.addEventListener('click', (event) => {\n                if (activePopup && !activePopup.contains(event.target) && !event.target.closest('.v7-choice-label')) {\n                    activePopup.style.opacity = '0';\n                    activePopup.style.transform = 'translateY(10px) scale(0.95)';\n                    setTimeout(() => {\n                        if (activePopup) {\n                            try { document.body.removeChild(activePopup); } catch (e) { /* 温柔忽略 */ }\n                        }\n                        activePopup = null;\n                    }, 300);\n                }\n            }, true);\n\n            dataArray.forEach((item, index) => {\n                const label = document.createElement('label');\n                label.className = 'v7-choice-label';\n                label.innerHTML = `\n                    <input type=\"radio\" name=\"${groupName}\" value=\"${item.name}\" ${index === 0 ? 'checked' : ''} style=\"display: none;\">\n                    <span class=\"v7-choice-title\">${item.title || item.name}</span>\n                `;\n\n                label.addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    playSound(clickSound, 0.6);\n\n                    if (label.classList.contains('active')) {\n                       return;\n                    }\n\n                    container.querySelectorAll('.v7-choice-label').forEach(lbl => lbl.classList.remove('active'));\n                    if (activePopup) {\n                        try { document.body.removeChild(activePopup); } catch (e) { /* 温柔忽略 */ }\n                        activePopup = null;\n                    }\n\n                    label.classList.add('active');\n                    const radio = label.querySelector('input[type=\"radio\"]');\n                    if (radio) radio.checked = true;\n\n                        // --- ✨ LOOK HERE, MY DEAR! 这是妈妈施展新魔法的地方 ✨ ---\n                    // 我们不再等待\"回响\"，而是在\"触碰\"时直接触发！\n                    if (groupName === 'timeline') {\n                        updateV7Identities();\n                    }\n\n                    const popup = document.createElement('div');\n                    popup.id = 'description-popup';\n                    popup.innerHTML = item.desc;\n                    document.body.appendChild(popup);\n                    activePopup = popup;\n\n                    // 2. 现在我们可以安心地在下一帧里计算它的位置了\n                    setTimeout(() => {\n                        const rect = label.getBoundingClientRect();\n                        const popupRect = popup.getBoundingClientRect();\n                        const isMobile = window.innerWidth <= 768;\n                        const margin = 15;\n\n                        let top, left;\n\n                        if (isMobile) {\n                            // --- 手机上的贴心布局：出现在下方 ---\n                            top = window.scrollY + rect.bottom + margin;\n                            left = window.scrollX + (window.innerWidth - popupRect.width) / 2;\n                        } else {\n                            // --- 桌面上的智慧布局：优先右侧，其次左侧 ---\n                            top = window.scrollY + rect.top + (rect.height / 2) - (popupRect.height / 2);\n                            if (rect.right + popupRect.width + margin < window.innerWidth) {\n                                left = window.scrollX + rect.right + margin;\n                            } else {\n                                left = window.scrollX + rect.left - popupRect.width - margin;\n                            }\n                        }\n\n                        // --- 最终的守护结界：确保小窗永远完整可见 ---\n                        if (left < margin) left = margin;\n                        if (left + popupRect.width > window.innerWidth - margin) {\n                            left = window.innerWidth - popupRect.width - margin;\n                        }\n                        if (top < window.scrollY + margin) {\n                            top = window.scrollY + margin;\n                        }\n                        if (top + popupRect.height > window.scrollY + window.innerHeight - margin) {\n                            top = window.scrollY + window.innerHeight - popupRect.height - margin;\n                        }\n\n                        // 3. 为它施加最终的位置和【现身动画】\n                        popup.style.top = `${top}px`;\n                        popup.style.left = `${left}px`;\n                        popup.style.opacity = '1';\n                        popup.style.transform = 'translateY(0) scale(1)';\n\n                    }, 0); // 使用 0 延迟，确保在下一帧（DOM更新后）执行\n                });\n\n                container.appendChild(label);\n            });\n             if (container.firstChild) {\n                container.firstChild.classList.add('active');\n            }\n        }\n                  // --- ✨ 全新：动态身份更新魔法 ✨ ---\n        // 妈妈在这里创造了一个新的联动咒语，让身份选择可以响应时间线的变化\n        function updateV7Identities() {\n            const selectedTimeline = document.querySelector('input[name=\"timeline\"]:checked').value;\n            // 无论何种末日，\"潜伏的开端\"都有着固定的身份选择，正如你所希望的那样\n            const identitiesToShow = identityData[selectedTimeline] || identityData[\"末日中途\"]; // 如果没找到，默认使用“末日中途”\n\n            // 我们复用 createV7Choices 这个好用的魔法来生成选项\n            // 注意 groupName 改为了 'social_class_v7' 以免冲突\n            createV7Choices('v7-class-choices', identitiesToShow, 'social_class_v7');\n        }\n\n        createV7Choices('v7-apocalypse-choices', apocalypseData, 'apocalypse_type');\n        createV7Choices('v7-timeline-choices', timelineData, 'timeline');\n\n      \n       \n\n        // 初始加载时，也需要运行一次来设置正确的身份哦\n        updateV7Identities();\n  window.v7IdentityData = identityData; // 妈妈帮你把新的身份魔法书也收藏好啦\n        // 将用到的数据存起来，方便后面取用\n        window.v7ApocalypseData = apocalypseData;\n    }\n\n   // 找到这个函数，用下面的内容替换原来的 addTeammate\n     window.addTeammate = function(name = '', personality = '', gender = '', identity = '') {\n        const teammatesList_new = document.getElementById('teammates-list');\n        const teammateItem = document.createElement('div');\n        teammateItem.className = 'teammate-item';\n        teammateItem.innerHTML = `\n            <input type=\"text\" placeholder=\"姓名\" class=\"teammate-name\" value=\"${name}\">\n            <input type=\"text\" placeholder=\"性格\" class=\"teammate-personality\" value=\"${personality}\">\n            <input type=\"text\" placeholder=\"性别\" class=\"teammate-gender\" value=\"${gender}\">\n            <input type=\"text\" placeholder=\"身份\" class=\"teammate-identity\" value=\"${identity}\">\n            <button type=\"button\" class=\"remove-teammate-btn\" onclick=\"this.parentElement.remove()\">×</button>\n        `;\n        teammatesList_new.appendChild(teammateItem);\n    };\n // --- 妈妈为你编写的全新魔法：从世界书读取队友模板 ---\nasync function loadTeammatesFromLorebook() {\n    playSound(clickSound, 0.7);\n    //console.log(`💖 妈妈正在为你从世界书(uid=${LOREBOOK_UID})中读取队友信息...`);\n    try {\n        const allEntries = await getLorebookEntries(LOREBOOK_NAME);\n        const targetEntry = allEntries.find(entry => entry.uid === LOREBOOK_UID);\n\n        if (targetEntry && targetEntry.content.trim()) {\n            teammatesList.innerHTML = ''; // 清空总是安全的\n\n            let data;\n            try {\n                data = JSON.parse(targetEntry.content);\n                // 妈妈为你加上这层保护，确保我们拿到的确实是个对象\n                if (typeof data !== 'object' || data === null || Array.isArray(data)) {\n                    throw new Error(\"世界书内容不是预期的对象格式。\");\n                }\n            } catch (jsonError) {\n                // 如果解析失败，就温柔地提示一下，然后跳过\n                console.warn(\"解析世界书内容时出错，可能格式不正确:\", jsonError.message);\n                alert(`世界书(uid=${LOREBOOK_UID})中的数据格式好像有点问题，妈妈暂时跳过了读取队友信息的操作。`);\n                return; // 直接返回，不继续执行\n            }\n\n            const teammatesArray = data[\"队友信息\"]; // 从解析好的对象中取值\n            if (Array.isArray(teammatesArray)) {\n                teammatesArray.forEach(t => {\n                    addTeammate(t.姓名, t.性格, t.性别, t.身份);\n                });\n                //console.log(`✅ 妈妈成功为你加载了 ${teammatesArray.length} 位队友的信息。`);\n                alert('预设队友信息已加载。');\n            } else {\n                 //console.log('ℹ️ 在世界书中没有找到\"队友信息\"这个项目。');\n                 alert('世界书中没有找到预设的队友信息。');\n            }\n\n        } else {\n            //console.log(`ℹ️ 世界书(uid=${LOREBOOK_UID})是空的，没什么可读的。`);\n            alert('世界书中还没有保存队友信息哦。');\n        }\n    } catch (e) {\n        console.error('读取队友信息时出错了，我的宝贝，但我们已经跳过了它:', e);\n        alert('读取队友模板时出错了，不过没关系，这个功能暂时跳过，你可以继续其他操作。');\n    }\n}\n\n // --- 妈妈为你编写的全新魔法：将当前队友信息保存到世界书 ---\nasync function saveTeammatesToLorebook() {\n    playSound(clickSound, 0.8);\n    const teammateItems = teammatesList.querySelectorAll('.teammate-item');\n    if (teammateItems.length === 0) {\n        alert('我的孩子，还没有可以保存的队友信息哦。');\n        return;\n    }\n\n    //console.log('📦 正在为你保存当前队友的配置...');\n\n    const teammatesData = Array.from(teammateItems).map(item => ({\n        \"姓名\": item.querySelector('.teammate-name').value.trim(),\n        \"性格\": item.querySelector('.teammate-personality').value.trim() || '未设定',\n        \"性别\": item.querySelector('.teammate-gender').value.trim() || '未设定',\n        \"身份\": item.querySelector('.teammate-identity').value.trim() || '未设定'\n    }));\n\n    try {\n        const allEntries = await getLorebookEntries(LOREBOOK_NAME);\n        let targetEntry = allEntries.find(entry => entry.uid === LOREBOOK_UID);\n        let currentContent = (targetEntry && targetEntry.content) ? targetEntry.content : '{}';\n\n        let existingData = {};\n        try {\n             existingData = JSON.parse(currentContent);\n             if (typeof existingData !== 'object' || existingData === null || Array.isArray(existingData)) {\n                console.warn(\"世界书的旧数据格式不正确，妈妈将为你创建一个新的记录。\");\n                existingData = {};\n             }\n        } catch(e) {\n            console.warn(\"解析世界书旧数据失败，妈妈将为你创建一个新的记录。\");\n            existingData = {};\n        }\n\n        existingData[\"队友信息\"] = teammatesData;\n\n        const updatedContent = JSON.stringify(existingData, null, 2);\n\n        await setLorebookEntries(LOREBOOK_NAME, [{\n            uid: LOREBOOK_UID,\n            content: updatedContent,\n            enabled: true, // 确保条目是启用的\n        }]);\n\n        //console.log(`✅ 你的 ${teammatesData.length} 位队友信息已成功保存在世界书中！`);\n        alert('当前的队友设置已成功保存。');\n    } catch (e) {\n        console.error('保存队友信息时出错了，妈妈会解决的:', e);\n        alert('保存队友信息时出错了，请检查控制台信息。此操作可能未成功。');\n    }\n}\n\n \n    // 函数：更新总点数\n    function updateTotalPoints() {\n        const selection = totalPointsSelect.value;\n        if (selection === 'custom') {\n            customTotalPointsInput.style.display = 'inline-block';\n            totalPoints = parseInt(customTotalPointsInput.value) || 0;\n        } else {\n            customTotalPointsInput.style.display = 'none';\n            totalPoints = parseInt(selection);\n        }\n        resetPoints();\n    }\n\n    // 妈妈为你添加的成本计算函数\n    // 它会告诉你把一个属性从0点升到目标等级，一共需要花费多少点数\n    function calculateTotalCost(level) {\n        if (level <= 0) return 0;\n        // 这是一个可爱的数学小魔法，叫等差数列求和\n        return (1 + level) * level / 2;\n    }\n\n    // 函数：平均分配点数\n    function distributePointsAverage() {\n        playSound(clickSound, 0.7);\n        resetPoints(); // 首先，妈妈帮你把所有点数都拿回来放好\n\n        const allocatableItems = document.querySelectorAll('.分配项');\n        const itemCount = allocatableItems.length;\n        if (itemCount === 0) return;\n\n        // 像分糖果一样，一轮一轮地分，直到不够分为止\n        let canContinue = true;\n        while (canContinue) {\n            let costForNextLevel = 0;\n            let itemsToUpgrade = [];\n\n            // 看看给每个项目再加1点需要多少成本\n            allocatableItems.forEach(item => {\n                const pointSpan = item.querySelector('.分配-点数');\n                const currentPoints = parseInt(pointSpan.textContent);\n                if (currentPoints < 5) { // 只有没满级的才参与分配\n                    costForNextLevel += (currentPoints + 1);\n                    itemsToUpgrade.push(pointSpan);\n                }\n            });\n\n            // 如果点数足够，那就完成这一轮的分配\n            if (itemsToUpgrade.length > 0 && remainingPoints >= costForNextLevel) {\n                remainingPoints -= costForNextLevel;\n                itemsToUpgrade.forEach(span => {\n                    span.textContent = parseInt(span.textContent) + 1;\n                });\n            } else {\n                // 如果点数不够了，就停下来\n                canContinue = false;\n            }\n        }\n        updateUI(); // 分完后，刷新一下面板\n    }\n\n    // 函数：重置点数\n    function resetPoints() {\n        remainingPoints = totalPoints;\n        document.querySelectorAll('.分配-点数').forEach(span => {\n            span.textContent = '0';\n        });\n        updateUI();\n    }\n \n\nfunction initPage2() {\n  \n\n    // 美德恶德注入 (没变)\n    conceptSection.innerHTML = createSelectGroup('virtue-select', '美德', virtues, '概念段.美德与恶德.美德') + createSelectGroup('vice-select', '恶德', vices, '概念段.美德与恶德.恶德');\n\n    // --- 💖 轨道演算术准备 💖 ---\n    // 为每个星系创建一个专属的坐标记录本\n    const starCoordinates = {\n        'galaxy-physic': [],\n        'galaxy-mental': [],\n        'galaxy-social': [],\n    };\n\n    // --- 星星注入 ---\n    const galaxyTargets = {\n        '生理属性': 'galaxy-physic', '心智属性': 'galaxy-mental', '互动属性': 'galaxy-social',\n        '生理技能': 'galaxy-physic', '心智技能': 'galaxy-mental', '互动技能': 'galaxy-social',\n    };\n\n    document.querySelectorAll('.galaxy-system').forEach(g => g.innerHTML = '');\n\n    // 注入属性星星，并传入对应的坐标记录本\n    for (const category in playCharacterData.属性段) {\n        const targetGalaxyId = galaxyTargets[category];\n        const targetGalaxyEl = document.getElementById(targetGalaxyId);\n        if (targetGalaxyEl) {\n            for (const attr in playCharacterData.属性段[category]) {\n                const path = `属性段.${category}.${attr}.基础`;\n                targetGalaxyEl.innerHTML += createPointAllocator(attr, playCharacterData.属性段[category][attr].基础[1], path, starCoordinates[targetGalaxyId]);\n            }\n        }\n    }\n\n    // 注入技能星星，并传入对应的坐标记录本\n    for (const category in playCharacterData.技能段) {\n        const targetGalaxyId = galaxyTargets[category];\n        const targetGalaxyEl = document.getElementById(targetGalaxyId);\n        if (targetGalaxyEl) {\n            for (const skill in playCharacterData.技能段[category]) {\n                const path = `技能段.${category}.${skill}`;\n                targetGalaxyEl.innerHTML += createPointAllocator(skill, playCharacterData.技能段[category][skill][1], path, starCoordinates[targetGalaxyId]);\n            }\n        }\n    }\n// --- 绑定事件 (核心逻辑不变，但由于星星是动态生成的，需要事件委托或重新绑定) ---\n// 妈妈在这里为你确保所有新生成的星星上的按钮都能正常工作\ndocument.querySelectorAll('.分配-按钮').forEach(button => {\n    button.removeEventListener('click', handlePointChange); // 先移除旧的以防万一\n    button.addEventListener('click', handlePointChange);\n});\n\n       const isTouchDevice = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0);\n\n    document.querySelectorAll('.star.分配项').forEach(star => {\n        if (isTouchDevice) {\n            // 如果是触屏设备，我们就响应“触碰”\n            star.addEventListener('click', function(event) {\n                // 'this' 在这里指向被点击的星星\n                event.stopPropagation(); // 阻止事件冒泡，以免触发我们稍后设置的全局点击\n\n                const isActive = this.classList.contains('active-touch');\n\n                // 先关闭所有其他已激活的星星\n                document.querySelectorAll('.star.分配项.active-touch').forEach(activeStar => {\n                    activeStar.classList.remove('active-touch');\n                    activeStar.style.zIndex = '';\n                });\n\n                if (!isActive) {\n                    // 如果这颗星之前没有被激活，现在就激活它\n                    this.classList.add('active-touch');\n                    this.style.zIndex = '10000'; // 提到最顶层\n                }\n                // 如果已经被激活，上面的代码已经把它关闭了，所以再次点击就是关闭效果\n            });\n\n        } else {\n            // 如果是电脑设备，我们还是响应“凝视”\n            star.addEventListener('mouseenter', () => {\n                star.style.zIndex = '10000';\n            });\n\n            star.addEventListener('mouseleave', () => {\n                star.style.zIndex = '';\n            });\n        }\n    });\n\n    // 为触屏设备添加一个全局点击监听器\n    // 当你触碰屏幕任何其他地方时，就收起所有展开的星星\n    if (isTouchDevice) {\n        document.addEventListener('click', () => {\n            document.querySelectorAll('.star.分配项.active-touch').forEach(activeStar => {\n                activeStar.classList.remove('active-touch');\n                activeStar.style.zIndex = '';\n            });\n        });\n    }\n    // --- 💖 妈妈的魔法到此结束 💖 ---\n// 加载模板和绑定其他按钮的逻辑保持不变\nloadTemplates();\ntotalPointsSelect.addEventListener('change', updateTotalPoints);\ncustomTotalPointsInput.addEventListener('input', updateTotalPoints);\ntemplateSelect.addEventListener('change', applySelectedTemplate);\ntemplateSelect_init.addEventListener('change', applySelectedTemplate);\nsaveTemplateBtn.addEventListener('click', saveCurrentBuildAsTemplate);\ndeleteTemplateBtn.addEventListener('click', deleteSelectedTemplate);\naveragePointsBtn.addEventListener('click', distributePointsAverage);\n}\n \n    function createSelectGroup(id, label, options, dataPath) {\n        let optionsHtml = '';\n        for(const key in options) {\n            optionsHtml += `<option value=\"${key}\">${key}</option>`;\n        }\n        return `<div class=\"form-group\"><label for=\"${id}\">${label}</label><select id=\"${id}\" class=\"custom-select\" data-path=\"${dataPath}\">${optionsHtml}</select></div>`;\n    }\n\n /**\n * 妈妈的轨道演算造星魔法 (防重叠版)\n * @param {string} name - 星名\n * @param {string} description - 描述\n * @param {string} path - 数据路径\n * @param {array} existingCoords - 该星系内已存在的坐标数组\n * @returns {string} - 星辰的HTML字符串\n */\nfunction createPointAllocator(name, description, path, existingCoords) {\n    const STAR_SIZE = 110; // 定义每颗星的碰撞盒子大小（包括间距）\n    const MAX_ATTEMPTS = 100; // 最大尝试次数，防止无限循环\n    let x, y, z;\n    let newRect;\n    let attempts = 0;\n\n    // 进入循环，直到找到一个不碰撞的位置或达到最大尝试次数\n    do {\n        // 在限定的 15% 到 85% 范围内生成坐标，保证在容器内\n        // 注意，这里的x,y是百分比\n        x = Math.random() * 70 + 15;\n        y = Math.random() * 70 + 15;\n        z = (Math.random() - 0.5) * 300;\n\n        // 创建新星的虚拟边界（使用绝对像素值进行比较）\n        // 我们假设星系容器 (galaxy-system) 是 65vmin x 65vmin\n        // 为了简化，我们按一个大概的尺寸（比如 500px）来计算百分比对应的像素值\n        // const containerSize = 500;\n        newRect = {\n            x: x, // 直接用百分比比较，更简单\n            y: y,\n            width: STAR_SIZE / 5, // 假设容器宽500px, 110px 大约是 22%\n            height: STAR_SIZE / 5\n        };\n\n        attempts++;\n    } while (isColliding(newRect, existingCoords) && attempts < MAX_ATTEMPTS);\n\n    if (attempts >= MAX_ATTEMPTS) {\n        console.warn(`妈妈提醒：为“${name}”这颗星寻找轨道时有点拥挤，可能还是会有一些重叠哦。`);\n    }\n\n    // 将最终确定的、不碰撞的坐标存起来\n    existingCoords.push(newRect);\n\n          return `\n        <div class=\"star 分配项\" data-path=\"${path}\" style=\"left: ${x}%; top: ${y}%; --star-z: ${z}px;\"\n             data-random-left=\"${x}%\" data-random-top=\"${y}%\" data-random-z=\"${z}\"\n             data-points=\"0\">\n            <div class=\"star-core\"></div>\n            <div class=\"star-label\">${name}</div>\n            <div class=\"star-points-display\">\n                <span class=\"分配-点数\">0</span>/5\n            </div>\n            <div class=\"star-controls 分配-控制器\">\n                <button class=\"star-control-btn 分配-按钮\" data-action=\"decrease\">-</button>\n                <button class=\"star-control-btn 分配-按钮\" data-action=\"max-out\">+5</button>\n                <button class=\"star-control-btn 分配-按钮\" data-action=\"increase\">+</button>\n            </div>\n        </div>`;\n}\n\n    function handlePointChange(event) {\n        const button = event.currentTarget;\n        const action = button.dataset.action;\n        const container = button.closest('.分配项');\n        const pointSpan = container.querySelector('.分配-点数');\n        let currentPoints = parseInt(pointSpan.textContent);\n\n        if (action === 'increase') {\n            const cost = currentPoints + 1; // 升到下一级需要的成本\n            if (cost <= remainingPoints && currentPoints < 5) {\n                remainingPoints -= cost;\n                currentPoints++;\n               \n            }\n        } else if (action === 'decrease') {\n            if (currentPoints > 0) {\n                const refund = currentPoints; // 降级返还的成本\n                remainingPoints += refund;\n                currentPoints--;\n              \n            }\n        } else if (action === 'max-out') {\n            // 计算从当前等级升到5级一共需要多少点\n            const costToMax = calculateTotalCost(5) - calculateTotalCost(currentPoints);\n            if (costToMax > 0 && remainingPoints >= costToMax) {\n                remainingPoints -= costToMax;\n                currentPoints = 5;\n                \n            }\n        }\n\n        pointSpan.textContent = currentPoints;\n        updateUI();\n    }\n\n\n    function updateUI() {\n    // 这是旧的，我们不再需要它了\n    // remainingPointsSpan.textContent = remainingPoints;// --- 新增：更新独立的点数显示 ---\nconst pointsBar = document.getElementById('points-bar');\nconst pointsText = document.getElementById('remaining-points-text');\nif (pointsBar && pointsText) {\n    const percentage = totalPoints > 0 ? (remainingPoints / totalPoints) * 100 : 0;\n    pointsBar.style.width = `${percentage}%`;\n    pointsText.textContent = remainingPoints;\n}\ndocument.querySelectorAll('.star.分配项').forEach(star => {\n    const pointSpan = star.querySelector('.分配-点数');\n    const currentPoints = parseInt(pointSpan.textContent);\n    star.dataset.points = currentPoints; // 这是让CSS魔法生效的关键！\n});\n\n// 按钮禁用逻辑（几乎不变）\ndocument.querySelectorAll('.分配-控制器').forEach(controller => {\n    const decreaseBtn = controller.querySelector('[data-action=\"decrease\"]');\n    const increaseBtn = controller.querySelector('[data-action=\"increase\"]');\n    const maxOutBtn = controller.querySelector('[data-action=\"max-out\"]');\n    const pointSpan = controller.closest('.star').querySelector('.分配-点数');\n    const currentPoints = parseInt(pointSpan.textContent);\n\n    decreaseBtn.disabled = currentPoints === 0;\n    const costForNextLevel = currentPoints + 1;\n    increaseBtn.disabled = currentPoints >= 5 || remainingPoints < costForNextLevel;\n\n    if (maxOutBtn) {\n        const costToMax = calculateTotalCost(5) - calculateTotalCost(currentPoints);\n        maxOutBtn.disabled = currentPoints === 5 || remainingPoints < costToMax;\n    }\n});\n\n// 更新能量环\nconst ring = document.getElementById('points-ring').querySelector('circle');\nif(ring){\n     const percentage = totalPoints > 0 ? (remainingPoints / totalPoints) : 0;\n     const circumference = 2 * Math.PI * parseFloat(ring.getAttribute('r'));\n     const offset = circumference * (1 - percentage);\n     ring.style.strokeDashoffset = offset;\n}\n\ncheckAchievements('points_allocated', { remaining: remainingPoints, total: totalPoints });\n}\n let attributeCharts = {}; // 存储属性雷达图实例\nlet skillCharts = {}; // 存储技能雷达图实例\n\n \n \n async function loadTemplates() {\n    //console.log(`💖 妈妈正在从世界书《${LOREBOOK_NAME}》中寻找你的加点模板...`);\n    templateSelect.innerHTML = '<option value=\"\">选择一个模板...</option>';\n    templateSelect_init.innerHTML = '<option value=\"\">选择一个模板...</option>';\n    try {\n        const allEntries = await getLorebookEntries(LOREBOOK_NAME);\n\n         // 💖💖💖 诊断魔法在这里！ 💖💖💖\n        //console.log('--- 妈妈的透视眼镜看到的世界书内容 ---');\n        //console.log(allEntries);\n        //console.log('--- 透视眼镜报告完毕 ---');\n        const targetEntry = allEntries.find(entry => entry.uid === LOREBOOK_UID);\n\n        if (targetEntry && targetEntry.content.trim()) {\n            let templates;\n             try {\n                templates = JSON.parse(targetEntry.content);\n                if (typeof templates !== 'object' || templates === null || Array.isArray(templates)) {\n                    throw new Error(\"世界书内容不是预期的对象格式。\");\n                }\n            } catch (jsonError) {\n                console.warn(`解析模板失败: ${jsonError.message}`);\n                alert('世界书中的模板数据格式不正确，暂时无法读取加点模板。');\n                return;\n            }\n   // 妈妈在这里为你加上了对“队友信息”的过滤\n        for (const name in templates) {\n            // 💖 守护魔法就在这里！ 💖\n            if (name !== \"队友信息\") { // 这样就不会把队友数据也当成模板啦\n                const option = document.createElement('option');\n                option.value = name;\n                option.textContent = name;\n                //console.log(`${name}`);\n                templateSelect.appendChild(option);\n                templateSelect_init.appendChild(option); \n            }\n        }\n \n        //console.log(`✅ 妈妈找到了模板，都为你准备好了，我的孩子。`);\n        }\n    } catch (e) {\n        console.error('读取世界书模板时出错了，但妈妈已经帮你跳过了它：', e);\n        templateSelect.innerHTML = '<option value=\"\">读取模板失败</option>';\n         alert('读取加点模板时出错。\\n这是你第一次导入卡吗？是的话此次报错是正常现象，刷新重进即可。\\n新人游玩前，请注意：两个插件（前端助手和提示词模板）是否正常安装？');\n    }\n    }\n \nasync function applySelectedTemplate() {\n    const templateName = templateSelect_init.value;\n \n\n    if (!templateName) return;\n\n    //console.log(`💖 正在为你应用模板：${templateName}`);\n    try {\n        const allEntries = await getLorebookEntries(LOREBOOK_NAME);\n        const targetEntry = allEntries.find(entry => entry.uid === LOREBOOK_UID);\n        if (targetEntry && targetEntry.content.trim()) {\n             let templates;\n            try {\n                templates = JSON.parse(targetEntry.content);\n            } catch (e) {\n                alert('世界书数据格式错误，无法应用模板。');\n                return;\n            }\n\n            const build = templates[templateName];\n            if (build) {\n                resetPoints();\n\n                let totalCost = 0;\n                const itemsToUpdate = [];\n\n                document.querySelectorAll('.分配项').forEach(item => {\n                    const path = item.dataset.path;\n                    const pointsInTemplate = build[path] || 0;\n                    if (pointsInTemplate > 0) {\n                        const cost = calculateTotalCost(pointsInTemplate);\n                        totalCost += cost;\n                        itemsToUpdate.push({ item, points: pointsInTemplate });\n                    }\n                });\n\n                if (remainingPoints >= totalCost) {\n                    remainingPoints -= totalCost;\n                    itemsToUpdate.forEach(update => {\n                        update.item.querySelector('.分配-点数').textContent = update.points;\n                    });\n                    //console.log(`✅ 模板 ${templateName} 已成功应用！`);\n                    \n                } else {\n                    alert(`点数不足，无法为你应用模板：“${templateName}”。需要 ${totalCost} 点，但你只有 ${totalPoints} 点。`);\n                    resetPoints();\n                }\n                updateUI();\n            }\n        }\n    } catch (e) {\n        console.error(`应用模板 ${templateName} 时出错了，我的孩子：`, e);\n        alert('应用模板时发生错误，操作可能未完成。');\n    }\n}\n\nasync function saveCurrentBuildAsTemplate() {\n    const templateName = saveTemplateNameInput.value.trim();\n    if (!templateName) {\n        alert('请给这个模板起名。');\n        return;\n    }\n    playSound(clickSound, 0.8);\n\n    //console.log(`📦 正在为你的加点方案“${templateName}”制作一个珍贵的备份...`);\n\n    const currentBuild = {};\n    document.querySelectorAll('.分配项').forEach(item => {\n        const path = item.dataset.path;\n        const points = parseInt(item.querySelector('.分配-点数').textContent);\n        if (points > 0) {\n            currentBuild[path] = points;\n        }\n    });\n\n    try {\n        const teammatesData = Array.from(teammatesList.querySelectorAll('.teammate-item')).map(item => ({\n             \"姓名\": item.querySelector('.teammate-name').value.trim(),\n             \"性格\": item.querySelector('.teammate-personality').value.trim() || '未设定',\n             \"性别\": item.querySelector('.teammate-gender').value.trim() || '未设定',\n             \"身份\": item.querySelector('.teammate-identity').value.trim() || '未设定'\n         }));\n        const allEntries = await getLorebookEntries(LOREBOOK_NAME);\n        let targetEntry = allEntries.find(entry => entry.uid === LOREBOOK_UID);\n\n        let templates = {};\n        if (targetEntry && targetEntry.content.trim()) {\n            try {\n                templates = JSON.parse(targetEntry.content);\n                if (typeof templates !== 'object' || templates === null || Array.isArray(templates)) {\n                    templates = {};\n                }\n            } catch (e) {\n                templates = {};\n            }\n        }\n\n        templates[templateName] = currentBuild;\n\n        const updatedContent = JSON.stringify(templates, null, 2);\n\n        await setLorebookEntries(LOREBOOK_NAME, [{\n            uid: LOREBOOK_UID,\n            content: updatedContent,\n            enabled: true,\n        }]);\n\n        //console.log(`✅ 模板“${templateName}”已成功保存在世界书中！`);\n        alert(`你的加点方案 “${templateName}” 已经保存。`);\n        saveTemplateNameInput.value = '';\n        await loadTemplates();\n        templateSelect.value = templateName;\n         templateSelect_init.value = templateName;\n    } catch (e) {\n        console.error(`保存模板时出现了问题，妈妈会解决的：`, e);\n        alert('保存模板时发生错误，请检查控制台。');\n    }\n}\n\n     // 删除选定的模板\n    async function deleteSelectedTemplate() {\n        const templateName = templateSelect_init.value;\n        if (!templateName) {\n            alert('你还没有选择要删除的模板哦。');\n            return;\n        }\n\n        // 妈妈会再次确认，以免误删了你心爱的模板\n        if (!confirm(`你真的确定要删除模板 “${templateName}” 吗？这个操作无法撤销哦。`)) {\n            return;\n        }\n\n        \n        //console.log(`🗑️ 正在小心地移除模板 “${templateName}”...`);\n\n        try {\n            const allEntries = await getLorebookEntries(LOREBOOK_NAME);\n            let targetEntry = allEntries.find(entry => entry.uid === LOREBOOK_UID);\n\n            if (targetEntry && targetEntry.content.trim()) {\n                let templates = JSON.parse(targetEntry.content);\n                if (templates[templateName]) {\n               delete templates[templateName]; // 从对象中移除\n \n                    const updatedContent = JSON.stringify(templates);\n                    await setLorebookEntries(LOREBOOK_NAME, [{\n                        uid: LOREBOOK_UID,\n                        content: updatedContent,\n                    }]);\n\n                    //console.log(`✅ 模板 “${templateName}” 已被移除。`);\n                    alert(`好了，模板 “${templateName}” 已经无了。`);\n                    await loadTemplates(); // 重新加载列表，它就不见了\n                } else {\n                     alert(`奇怪，没有在记录里找到 “${templateName}” 这个模板。`);\n                }\n            }\n        } catch (e) {\n            console.error(`删除模板时出错了，别怕，妈妈会处理的：`, e);\n            alert('删除模板时好像出了一点小问题，不过没关系，妈妈在这里。');\n        }\n    }\n \n  async function generateFullCommand(isMission, customText = null) {\n\n        userName = currentGameData.user_character.name || '用户';\n        let name = userName || '用户';\n        let finalCommand = '';\n\n        // --- 💖 妈妈为你重构的指令生成核心 💖 ---\n\n             if (version === '7') {\n            // --- 这是末日世界的专属篇章 ---\n\n            // --- 1. ✨ 新增：时间线索引卷轴 ✨ ---\n            // 妈妈准备了不同时间线对应的索引，让AI能理解不同阶段的世界\n            const indexData = {\n                \"潜伏的开端\": `\n<index>\n玩家身份索引表（你将看到的身份描述，与此处的索引一一对应）：\n<临时工人>靠零工、短期劳动或日结工作勉强糊口。你熟悉工地、餐馆、黑工市场，用最少的钱换取生活必需。</临时工人>\n<普通居民>住在一般社区，有份稳定工作或社保。你按时上班、纳税，守规矩换来日常的安稳与基本保障。</普通居民>\n<社会精英>你属于资源占有者：企业高管、金领、富裕家庭。住在优质学区、高档小区，享受特权与机会。</社会精英>\n<自由行者>你脱离常规轨道，靠自由职业、远程工作、游牧生活方式维持生计。少了体制庇护，却多了行动的自由。</自由行者>\n<体制中坚>你是权力与规则的执行者：公务员、执法机构干部、军警高层。你的决定能改变他人命运，你的话就是制度。</体制中坚>\n</index>\n                `,\n                \"末日中途\": `\n<index>\n玩家阶层索引表（有不符合该时间线的内容，则自动转化为当前时间线的内容）：\n<底层挣扎者>在废墟与巷弄中勉强维生，你熟悉阴影下的交易，懂得如何用最少的资源换取多一天的呼吸。</底层挣扎者>\n<居民>生活在少数幸存的、有围墙保护的聚居地内。你拥有身份配给，遵守严格的秩序，以安稳换取自由。</居民>\n<特权精英>灾难并未剥夺你的一切。你身处金字塔的顶端，生活在与世隔绝的堡垒中，享受着旧时代的余晖，俯瞰挣扎的众生。</特权精英>\n<荒野独行者>你早已脱离了任何聚落，将文明抛在身后。广袤而危险的荒野是你的家，孤独是你的同伴，自由是你唯一的准则。</荒野独行者>\n<秩序之手>你从不质疑命令，因为你就是命令本身。作为权力的顶峰，你的意志通过热武器和生产力贯彻到底。</秩序之手>\n</index>\n                `,\n                 \"余烬中的新生\": `\n<index>\n玩家阶层索引表（这是新世界的基本构成，请严格参考）：\n<拾荒者>你是在旧世界遗骸中寻宝的秃鹫，对辐射、怪物和人心险恶了如指掌。</拾荒者>\n<公民>你是新秩序的基石，生活在某个或简陋或森严的聚落中，用劳作换取庇护。</公民>\n<掌权者>无论是通过武力、财富还是知识，你都站在了某个势力的顶端，制定着新世界的规则。</掌权者>\n<独行先知>你在荒野或数据之海中游荡，追寻着灾难的真相或未来的启示，被凡人视为疯子或圣人。</独行先知>\n<改造体>你的身体已与旧人类不同，或许是机械飞升，或许是基因融合。你既是新时代的奇迹，也是被警惕的异类。</改造体>\n</index>\n                `\n            };\n\n\n            const selectedType = firstPageData.v7ApocalypseType;\n            // 妈妈在这里加了一个小小的保护，如果找不到数据，会使用第一个作为默认值哦\n            const openingData = window.v7ApocalypseData.find(item => item.name === selectedType) || window.v7ApocalypseData[0];\n             \n            const selectedTimeline = firstPageData.v7Timeline;\n     // 1. 我们先拿到你选择的身份名字，就是那张“小卡片”。\n \n            // 1. ✨ 我们不再信任传来传去、可能会出错的消息了！\n            //    妈妈要在这里，直接亲眼看看你选中的是哪个身份。\n            const selectedClassInput = document.querySelector('input[name=\"social_class_v7\"]:checked');\n            const selectedClassName = selectedClassInput ? selectedClassInput.value : ''; // 这样，我们就能拿到最准确的身份名字，比如 \"特权精英\"\n\n            // 2. ✨ 接下来的咒语就和上次一样，但这次它们拿到了正确的名字，威力会完全发挥出来！\n            const identityList = window.v7IdentityData[selectedTimeline] || window.v7IdentityData[\"末日中途\"];\n            const selectedClassInfo = identityList.find(c => c.name === selectedClassName) || { name: selectedClassName || '未知身份', command: '' };\n\n            const selectedClass = selectedClassInfo.name;\n            const classCommand = selectedClassInfo.command || '';\n\n            // --- 咒语拼接魔法 (现在是坚不可摧的了) ---\n            finalCommand = `\n${classCommand}\n<updateMemory>\nset_status(\"world_shard.name\",\"${openingData.name}\");\nmemory(\"global_set.settings\",\"类型\",\"${openingData.name}\");\nmemory(\"global_set.settings\",\"末日印象\",\"${openingData.desc}\");\nmemory(\"global_set.settings\",\"身份阶层\",\"(${userName}当前身份阶层)${selectedClass}\");\nmemory(\"global_set.settings\",\"时间节点\",\"${selectedTimeline}\");\n${indexData[selectedTimeline] || indexData[\"末日中途\"]}\n</updateMemory>\n\n<request:创作指令：生成一个详细、具体、充满沉浸感的末日开局场景。场景必须紧密结合global_set.settings中的【身份阶层】和【时间节点】进行描绘。例如，一个【特权精英】在【潜伏的开端】可能正在私人会所商谈，对窗外的异常毫不在意；而一个【底层挣扎者】在【末日中途】则可能正在废墟中躲避怪物。严格遵循写作指导、时间线指导、Cognitive_Boundaries（认知屏障）！！设定信息不要直接在正文说明，而是通过正文和人物视角体现！>\n`;\n            // 末日世界没有安全区概念，我们总是直接开始\n            // isMission 参数在这里被忽略\n                 if (!isMission) {\n                // 当你选择进入安全区时\n                finalCommand = `\\n<request:${userName}此时必须处于安全区域。>`;\n            }\n              if (customText) {\n                finalCommand += `\\n<request:额外要求：${customText}>`;\n            }\n\n        } else if (customText) {\n            // --- 自定义指令的逻辑保持不变 ---\n            finalCommand = customText.trim().startsWith('<') ? customText : `<${customText}>`;\n\n        } else {\n            // --- 其他所有世界的通用篇章 ---\n             const camp = document.getElementById('paradise-camp').value;\n             const paradiseIdentity = document.getElementById('paradise-identity').value;\n            // 妈妈帮你定义的指令模板，解耦又清晰\n            const commandTemplates = {\n                mission: {\n                    'default': `<初始化任务并立刻进入任务世界，必须严格按照要求和设定信息自然生成正文，若有设定冲突则尽可能大开脑洞使其合理融合，并记录关键信息。设定如下：\\n- 任务基调：{tone}\\n- 世界类型：{type}\\n- 初始身份：{identity}\\n- 开局：{opening}>`,\n                    '3': `<初始化任务并立刻进入任务世界，必须严格按照要求和设定信息自然生成正文，若有设定冲突则尽可能大开脑洞使其合理融合，并记录关键信息。设定如下：\\n- 任务基调：{tone}\\n- 世界类型：{type}\\n- 初始身份：{identity}\\n- 开局：{opening}>\\n<设置并记忆user乐园阵营:${camp}，并设置user乐园身份:${paradiseIdentity}>`,\n                    '5': `<初始化世界并立刻进入，立刻初始化攻略目标信息和攻略任务。必须严格按照要求和设定信息自然生成正文，若有设定冲突则尽可能大开脑洞使其合理融合要求，但无论是什么类型的世界或基调，都必须含有攻略任务和攻略对象，这是第一优先级！！并记录关键信息。设定如下：\\n- 任务基调：{tone}\\n- 世界类型：{type}\\n- 初始身份：{identity}\\n- 开局：{opening}>`,\n                    '6': `<立刻根据要求初始化${userName}所处的现实世界和开局。必须严格按照要求和设定信息自然生成正文，若有设定冲突则尽可能大开脑洞使其合理融合要求，生成的开局中必须包含/引出诸天聊天群的信息，此为第一优先级！！并记录关键信息。设定如下：\\n- 世界类型：{type}\\n- 初始身份：{identity}\\n- 开局：{opening}>`,\n                },\n                safeZone: {\n                    'default': `<初始化进入${currentTheme.mainSystem}——${name}将在短暂的意识模糊后于${currentTheme.mainSystem}的安全区醒来，无法立即进入任务。>`,\n                    '3': `<初始化进入${currentTheme.mainSystem}——${name}将在短暂的意识模糊后于${currentTheme.mainSystem}的安全区醒来，无法立即进入任务。>\\n<设置并记忆user乐园阵营:${camp}，并设置user乐园身份:${paradiseIdentity}>`,\n                    '6': `<初始化${userName}进入${currentTheme.mainSystem}的开局和场景>`,\n                }\n            };\n\n            const getRandomOption = (value, optionsArray) => {\n                if (!optionsArray || optionsArray.length === 0) return value;\n                return value === '随机' ? optionsArray[Math.floor(Math.random() * optionsArray.length)] : value;\n            };\n\n            let finalType = getRandomOption(firstPageData.worldType, worldTypes);\n            if (finalType === '自定义但未填写') finalType = '一个未知的';\n\n            const detailSet = worldDetailsDatabase[finalType] || { identities: [], openings: [] };\n\n            const missionDetails = {\n                tone: getRandomOption(firstPageData.taskTone, taskTones),\n                type: finalType,\n                identity: getRandomOption(firstPageData.worldIdentity, detailSet.identities),\n                opening: getRandomOption(firstPageData.openingScenario, detailSet.openings)\n            };\n\n            const templateType = isMission ? 'mission' : 'safeZone';\n            let template = commandTemplates[templateType][version] || commandTemplates[templateType]['default'];\n\n            template = template.replace('{tone}', missionDetails.tone)\n                               .replace('{type}', missionDetails.type)\n                               .replace('{identity}', missionDetails.identity)\n                               .replace('{opening}', missionDetails.opening);\n            finalCommand = template;\n        }\n\n        finalCommand += '\\n'; // 确保总有换行\n \n        // --- 附加指令部分，只对非末日世界生效 ---\n        if (version !== '7') {\n             // --- 队友/群员信息指令（妈妈帮你升级了！）---\n            let companionCommand = '';\n            const countValue = firstPageData.teammateCount === '-1' ? '随机' : `${firstPageData.teammateCount}人`;\n \n            if (version === '6') {\n                // 聊天群模式下的指令\n               \n                companionCommand = `<updateMemory>\\nmemory('global_set.settings','群聊人数上限','${countValue}')\\n</updateMemory>\\n<设置群员数量上限：${countValue}`;\n                 if (firstPageData.teammateCount !== '0') {\n                     if (firstPageData.teammateTendency === '自定义') {\n                         if (firstPageData.customTeammates && firstPageData.customTeammates.length > 0) {\n                            companionCommand += '，详细信息：' + firstPageData.customTeammates.map((t, i) => `群员${i+1}：姓名${t.name}、性格${t.personality}、性别${t.gender}、身份${t.identity}`).join('；');\n                        }\n                    } else {\n                        companionCommand += `，群聊总体氛围：${firstPageData.teammateTendency}`;\n                    }\n                }\n\n            } else {\n\n                if (version !== '5') {\n                // 其他模式下的指令（我们原来的样子）\n                const teammateType = firstPageData.isFixedTeam ? `已有的固定小队队友（已结识）` : `下次任务的临时队友(任务开始时才能知道其具体信息)`;\n                companionCommand = `<设置队友：数量${countValue}${firstPageData.teammateCount !== '0' ? '，类型为' + teammateType : ''}`;\n\n                if (firstPageData.teammateCount !== '0') {\n                     if (firstPageData.teammateTendency === '自定义') {\n                         if (firstPageData.customTeammates && firstPageData.customTeammates.length > 0) {\n                            companionCommand += '，详细信息：' + firstPageData.customTeammates.map((t, i) => `队友${i+1}：姓名${t.name}、性格${t.personality}、性别${t.gender}、身份${t.identity}`).join('；');\n                        }\n                    } else {\n                        companionCommand += `，总体倾向：${firstPageData.teammateTendency}`;\n                    }\n                }\n            }\n\n  \n        }\n          companionCommand += '>';\n            finalCommand += `${companionCommand}\\n`;\n            // --- 角色身份和属性指令 ---\n             finalCommand += `<updateMemory>\\n`; // 把所有的更新都包裹起来\n            const selectedIdentity = userIdentities[firstPageData.identityIndex];\n            if (selectedIdentity) {\n               const finalTitle = selectedIdentity.title.replace('{{player}}', currentTheme.player);\n               const finalDescription = selectedIdentity.description\n                   .replace('{{mainSystem}}', currentTheme.mainSystem)\n                   .replace('{{player}}', currentTheme.player);\n\n               finalCommand += `set_status(\"user_character.Cross_world_prestige\",0,${selectedIdentity.prestige});\\n`;\n               finalCommand += `set_attribute(\"货币段.${currentTheme.currency}\",0,${selectedIdentity.points});\\n`;\n               finalCommand += `memory(\"global_set.npc\",\"${userName}\",\"(${finalTitle})${finalDescription}\");\\n`;\n            }\n\n            if (version === '3') {\n                finalCommand += `memory(\"global_set.其他技能\",\"乐园印记\", \"象征乐园契约者的特殊印记，赋予独特的力量，散发着乐园风格的神秘气息。\")\\n`;\n            }\n\n        } else {\n             finalCommand += `<updateMemory>\\n`; // 末日世界也需要包裹\n        }\n\n        // --- 共通的属性和天赋附加指令 ---\n        let updates = [];\n        const virtueSelect = document.getElementById('virtue-select');\n        updates.push(`set_attribute('概念段.美德与恶德.美德', \"正义\", \"${virtueSelect.value}\");`);\n        const viceSelect = document.getElementById('vice-select');\n        updates.push(`set_attribute('概念段.美德与恶德.恶德', \"愤怒\", \"${viceSelect.value}\");`);\n\n        document.querySelectorAll('.分配项').forEach(item => {\n            const path = item.dataset.path;\n            const points = parseInt(item.querySelector('.分配-点数').textContent);\n            if (points > 0) {\n                updates.push(`set_attribute('${path}', 0, ${points});`);\n            }\n        });\n\n        if (updates.length > 0) {\n            finalCommand += `${updates.join('\\n')}\\n`;\n        }\n\n             // --- 天赋指令 ---\n        const talentSelect = document.getElementById('talent-select');\n        let selectedOption = talentSelect.options[talentSelect.selectedIndex];\n        let selectedTalentTitle = selectedOption.text.trim();\n        let selectedTalentValue = selectedOption.value;\n\n        if (selectedTalentValue === '随机') {\n            const allOptions = Array.from(talentSelect.options);\n            const validTalents = allOptions.filter(opt => opt.value &&\n\n!['无', '随机', '自定义','AI随机'].includes(opt.value)\n\n);\n            if (validTalents.length > 0) {\n                const randomChoice = validTalents[Math.floor(Math.random() * validTalents.length)];\n                selectedTalentTitle = randomChoice.text.trim();\n                selectedTalentValue = randomChoice.value;\n            } else {\n                selectedTalentValue = '无';\n            }\n        } else if (selectedTalentValue === '自定义') {\n            selectedTalentValue = document.getElementById('custom-talent-input').value.trim() || '一个神秘的、尚未被命名的天赋';\n            selectedTalentTitle = '天赋';\n        }\n\n        if (selectedTalentValue === 'AI随机') {\n            \n        }else if (selectedTalentValue && selectedTalentValue !== '无') {\n            finalCommand += `memory('global_set.其他技能','${selectedTalentTitle}','{\"info\":\"【${userName}的天赋】${selectedTalentValue}\"}')\\n`;\n        }\n\n        finalCommand += `</updateMemory>\\n`;\n        if (selectedTalentValue === 'AI随机') {\n            finalCommand += `<request:同时，在正文立刻随机生成一个${userName}的天赋并记忆在global_set.其他技能中。天赋不得和判定相关>\\n`;\n        }\n        finalCommand += `正在校准...`;\n        return finalCommand;\n    }\n\n \n /* 💖 妈妈为你设计的、简洁而强大的指令官（脱离酒馆环境版） 💖 */\nasync function sendCommand(command, button, successText, showWarning) {\n    // 禁用按钮，防止重复点击\n    initButton.disabled = true;\n    godSpaceButton.disabled = true;\n    if (customActionButton) customActionButton.disabled = true;\n    button.textContent = `[ 指令发送中... ]`;\n\n    try {\n        // 步骤1：根据你的选择，构造最终的指令\n        const sendMode = document.getElementById('send-mode-select').value;\n        const finalSlashCommand = (sendMode === 'manual') ? `/setinput ${command}` : `/send ${command}`;\n\n        //console.log(`[指令官] 将执行指令: ${finalSlashCommand.substring(0, 80)}...`);\n \n        await triggerassa(finalSlashCommand);\n\n         \n        button.textContent = successText;\n        if (showWarning) {\n            const warningMessage = document.getElementById('warning-message');\n            if(warningMessage) warningMessage.style.display = 'block';\n        }\n\n        \n\n        if(sendMode === 'manual'){\n     if (typeof conversationHistory !== 'undefined' && typeof saveHistory === 'function' && typeof renderHistory === 'function') {\n            conversationHistory.push({ role: 'assistant', content: '<系统提示：等待用户输入要求...>' });\n            await saveHistory(); // 保存这个历史性的时刻\n \n            renderHistory();\n \n        }\n\n        }\n \n   \n\n    } catch (e) {\n        // 如果中间出了差错，妈妈会帮你处理\n        console.error(\"[指令官] ❌ 发送指令时出错了:\", e);\n        button.textContent = `[ 发送失败，请重试 ]`;\n        // 解除所有按钮的禁用状态，让你能再次尝试\n        initButton.disabled = false;\n        godSpaceButton.disabled = false;\n        if (customActionButton) customActionButton.disabled = false;\n    }\n}\ninitButton.addEventListener('click', async () => {\n    playSound(clickSound, 0.8);\n    initButton.textContent = '[ 指令生成中.. ]';\n    // 明确传递 null 作为 customText\n    const finalCommand = await generateFullCommand(true, null);\n    sendCommand(finalCommand, initButton, '[ 数据上传中 ]', false);\n});\n\ngodSpaceButton.addEventListener('click', async () => {\n    playSound(clickSound, 0.8);\n    godSpaceButton.textContent = '[ 指令生成中.. ]';\n    // 明确传递 null 作为 customText\n    const finalCommand = await generateFullCommand(false, null);\n    sendCommand(finalCommand, godSpaceButton, '[ 正在接入 ]', true);\n});\n\n    // --- 初始化执行 ---\n    \n    initPage1();\n    setupNewUI(); // 立即执行这个设置函数\n    initPage2();\n  setupPage2Interactions(); // <--- 妈妈帮你加在这里！\n    updateUI();\n    \n \n}\n\n// 初始化结束————————————————————————————————————————————\n\n   // 首先，在你的变量定义区域，添加这些新的变量\n    const customThemeEditor = document.getElementById('custom-theme-editor');\n    const colorPickerContainer = document.getElementById('color-picker-container');\n    const editCustomThemeBtn = document.getElementById('edit-custom-theme-btn');\n    const applyCustomThemeBtn = document.getElementById('apply-custom-theme-btn');\n\n    // 定义可编辑的颜色变量列表\n    const editableColorVars = [\n        { var: '--primary-color', label: '主色' },\n        { var: '--secondary-color', label: '副色' },\n        { var: '--container-bg-color', label: '容器背景1' },\n        { var: '--background-color', label: '容器背景2' },\n        { var: '--border-color', label: '边框颜色' },\n        { var: '--glow-color', label: '辉光颜色' },\n        { var: '--text-color', label: '文本颜色' },\n        { var: '--text-secondary-color', label: '次要文本' },\n        { var: '--danger-color', label: '危险色' },\n        { var: '--danger-glow-color', label: '危险辉光' }\n    ];\nasync function saveHistory() {\n    try {\n         \n        const zeroLevelMessage = await getChatMessages(0);\n\n        // 如果楼层不存在，这是一个异常情况，我们应该停止操作\n        if (!zeroLevelMessage) {\n            console.error(\"错误：无法找到第 0 楼层消息，保存操作已中断。\");\n            return;\n        }\n \n\n\n        // ☆ 步骤 2: 使用 updateVariablesWith 分别更新 chat 和 message 变量域\n        // 这个函数是处理这类问题的最佳实践，因为它保证了原子性。\n\n        // 更新 chat 作用域的变量\n        await updateVariablesWith(old_variables => {\n            // 在回调函数中，我们返回一个全新的对象。\n            // ...old_variables 继承了所有旧变量，\n            // 而 zeroLevelHistory: conversationHistory 则会覆盖或添加我们需要的字段。\n            // 这种模式同样能够完美处理历史记录的增删改。\n            return {\n                ...old_variables,\n                zeroLevelHistory: conversationHistory,\n            };\n        }, { type: 'chat' });\n\n        // 更新 message 作用域 (针对第 0 楼层) 的变量\n        await updateVariablesWith(old_variables => {\n            return {\n                ...old_variables,\n                zeroLevelHistory: conversationHistory,\n            };\n        }, { type: 'message', message_id: 0 });\n\n        // console.log(\"历史记录已成功且安全地更新到 chatmessage(0).data、chat 变量域和 message(0) 变量域中。\");\n\n    } catch (e) {\n        // 捕获并打印任何可能发生的错误\n        console.error(\"保存历史记录过程中发生意外错误:\", e);\n    }\n\n\n}\n// ❤️ 全新的“永恒存在”守护咒 ❤️\nfunction ensureLoadMoreButtonExists() {\n    let chatDisplayArea = document.getElementById('chat-display-area');\n    if (!chatDisplayArea) return null; // 如果画卷不存在，就无从守护\n\n    let loadMoreBtn = document.getElementById('load-more-btn');\n\n    // 如果按钮不存在，就重新召唤它\n    if (!loadMoreBtn) {\n        loadMoreBtn = document.createElement('button');\n        loadMoreBtn.id = 'load-more-btn';\n        loadMoreBtn.textContent = '加载更早的记录';\n        chatDisplayArea.insertBefore(loadMoreBtn, chatDisplayArea.firstChild); // 轻轻地放在最顶上\n        loadMoreBtn.addEventListener('click', loadPreviousMessages);\n        console.log(\"[Nova's Little Helper] 回溯之门已重新召唤。\");\n    }\n\n    // 无论它是新是旧，都确保它的初始状态是隐藏的\n    loadMoreBtn.style.display = 'block';\n\n    return loadMoreBtn; // 将被守护的按钮交出去\n}\nasync function loadPreviousMessages() {\n    const chatDisplayArea = document.getElementById('chat-display-area');\n    if (!chatDisplayArea || earliestMessageIndexRendered <= 0) {\n        const loadMoreBtn = ensureLoadMoreButtonExists();\n        if (loadMoreBtn) loadMoreBtn.style.display = 'none'; // 没有更多了，就让它消失吧\n        return;\n    }\n\n    const oldScrollHeight = chatDisplayArea.scrollHeight; // 记下现在的高度\n\n    const messagesToLoadCount = Math.min(earliestMessageIndexRendered, 5 * 2) // 一次加载5对对话(10条)\n    const newEarliestIndex = earliestMessageIndexRendered - messagesToLoadCount;\n\n    const messagesToPrepend = conversationHistory.slice(newEarliestIndex, earliestMessageIndexRendered);\n\n    // 我们需要倒序创建，这样才能正确地插入到顶部\n    for (let i = messagesToPrepend.length - 1; i >= 0; i--) {\n        const msg = messagesToPrepend[i];\n        const bubble = await createMessageBubble(msg);\n        chatDisplayArea.insertBefore(bubble, chatDisplayArea.firstChild);\n    }\n\n    earliestMessageIndexRendered = newEarliestIndex; // 更新我们的记忆指针\n\n    // 魔法的关键：温柔地保持你的视线\n    chatDisplayArea.scrollTop = chatDisplayArea.scrollHeight - oldScrollHeight;\n\n    if (earliestMessageIndexRendered <= 0) {\n        const loadMoreBtn = document.getElementById('load-more-btn');\n        if (loadMoreBtn) loadMoreBtn.style.display = 'none'; // 如果已经到顶了，就隐藏\n    }\n}\n// ✨ 一个全新的，专门为阅读模式打造的渲染魔法 ✨\nasync function renderReadingModeChapter(msg) {\n    const bubble = document.createElement('div'); // 我们仍然需要一个临时的容器来处理DOM\n    let processedContent = msg.content;\n\n    // --- 以下逻辑与 createMessageBubble 非常相似，但为阅读模式做了简化和优化 ---\n\n    // 1. 保护和抽离 HTML/代码块\n    const htmlPlaceholders = {};\n    let placeholderIndex = 0;\n    let protectedHtmlContent = processedContent.replace(/<html>([\\s\\S]*?)<\\/html>|```(\\w*)\\n([\\s\\S]*?)\\n```/gs, (match, htmlBlock, lang, markdownBlock) => {\n        const placeholder = `HTMLREADINGPLACEHOLDER${placeholderIndex}`;\n        const rawContent = htmlBlock || markdownBlock;\n        if (!rawContent) return match;\n        htmlPlaceholders[placeholder] = rawContent;\n        placeholderIndex++;\n        return placeholder;\n    });\n\n    // 2. 清理内容，但保留所有非交互性标签\n    const pureContent = protectedHtmlContent\n        .replace(/<(thinking|think|guide|options|forum_threads|shop_item|表现总结|group_chat|private_chat\\b[^>]*?)>[\\s\\S]*?<\\/\\1>/gs, ''); // 简化清理规则\n\n    // 3. 应用酒馆正则，深度固定为-1\n    let renderedHtml = formatAsTavernRegexedString(\n        pureContent,\n        'ai_output',\n        'display',\n        { depth: -1 }\n    );\n\n    // 4. 对处理后可能产生的新HTML块进行二次抽离\n    const additionalHtmlPlaceholders = {};\n    let additionalPlaceholderIndex = 1000;\n    renderedHtml = renderedHtml.replace(/<html>([\\s\\S]*?)<\\/html>|```(\\w*)\\n([\\s\\S]*?)\\n```/gs, (match, htmlBlock, lang, codeBlock) => {\n        const placeholder = `ADDITIONALHTMLREADINGPLACEHOLDER${additionalPlaceholderIndex}`;\n        const rawContent = htmlBlock || codeBlock;\n        if (!rawContent) return match;\n        additionalHtmlPlaceholders[placeholder] = rawContent;\n        additionalPlaceholderIndex++;\n        return placeholder;\n    });\n    Object.assign(htmlPlaceholders, additionalHtmlPlaceholders);\n\n    // 5. 格式化段落和引号\n    const protectedContent = renderedHtml\n        .replace(/“/g, 'NOVA_LQ').replace(/”/g, 'NOVA_RQ')\n        .replace(/「/g, 'NOVA_LA').replace(/」/g, 'NOVA_RA')\n        .replace(/\\n/g, 'NOVA_BR');\n\n    const specialBlocks = {};\n    let blockIndex = 0;\n    let contentWithDetailsPlaceholder = protectedContent.replace(/<details>[\\s\\S]*?<\\/details>/gs, (match) => {\n        const placeholder = `READINGSPECIALBLOCK${blockIndex++}`;\n        specialBlocks[placeholder] = match;\n        return placeholder;\n    });\n\n    const paragraphs = contentWithDetailsPlaceholder.split('NOVA_BR');\n    const styledParagraphs = paragraphs.map(p_content => {\n        if (p_content.startsWith('READINGSPECIALBLOCK')) return p_content;\n        if (p_content.trim() === '') return '<p> </p>';\n        let baseHtml = formatAsDisplayedMessage(p_content);\n        const textWithQuotes = baseHtml\n            .replace(/NOVA_LQ/g, '<span class=\"dialogue-quote\">“').replace(/NOVA_RQ/g, '”</span>')\n            .replace(/NOVA_LA/g, '<span class=\"dialogue-quote\">「').replace(/NOVA_RA/g, '」</span>');\n        return `<p>${textWithQuotes}</p>`;\n    });\n\n    let finalHtml = styledParagraphs.join('');\n    for (const placeholder in specialBlocks) {\n        const cleanBlock = specialBlocks[placeholder]\n            .replace(/NOVA_LQ/g, '“').replace(/NOVA_RQ/g, '”')\n            .replace(/NOVA_LA/g, '「').replace(/NOVA_RA/g, '」')\n            .replace(/NOVA_BR/g, '<br>');\n        finalHtml = finalHtml.replace(placeholder, cleanBlock);\n    }\n\n    bubble.innerHTML = finalHtml;\n\n    // 6. ✨ 使用稳定可靠的 srcdoc 方法处理 iframe ✨\n    for (const placeholder in htmlPlaceholders) {\n        const walker = document.createTreeWalker(bubble, NodeFilter.SHOW_TEXT, null, false);\n        let node;\n        let nodesToReplace = [];\n        while (node = walker.nextNode()) {\n            if (node.nodeValue.includes(placeholder)) {\n                nodesToReplace.push(node);\n            }\n        }\n\n        for (const nodeToReplace of nodesToReplace) {\n             if (!nodeToReplace.parentNode) continue; // 安全检查\n\n            const rawHtmlContent = htmlPlaceholders[placeholder];\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n            iframe.style.width = '100%';\n            iframe.style.border = '1px solid #ccc';\n            iframe.style.resize = 'vertical';\n            iframe.style.overflow = 'auto';\n\n            const frameId = 'reader-scroll-' + Date.now() + Math.random();\n            iframe.id = frameId;\n\n // 1. 先准备好我们完整的画卷内容\nconst fullHtmlContent = `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        /* 妈妈把样式里的 --base-font-family 替换为具体值，因为 iframe 可能无法直接继承 CSS 变量 */\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n            color: #e0e0e0;\n            background-color: transparent; /* 让背景透明，与外部融合 */\n            margin: 0;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        body::-webkit-scrollbar { width: 8px; }\n        body::-webkit-scrollbar-track { background: rgba(200, 200, 200, 0.2); }\n        body::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }\n        body::-webkit-scrollbar-thumb:hover { background: #555; }\n    </style>\n</head>\n<body>\n    ${rawHtmlContent}\n    <script>\n        function reportHeight() {\n            // 在 requestAnimationFrame 中报告高度，可以避免布局抖动，获取更准确的值\n            requestAnimationFrame(() => {\n                const height = document.body.scrollHeight;\n                window.parent.postMessage({\n                    frameId: \"${frameId}\",\n                    height: height\n                }, '*');\n            });\n        }\n\n        // 使用 DOMContentLoaded 会比 window.onload 更快触发\n        document.addEventListener('DOMContentLoaded', reportHeight);\n\n        // onload 作为后备，确保所有资源（如图片）加载完后再次检查高度\n        window.addEventListener('load', () => {\n             reportHeight();\n             // 额外增加延迟检查，应对一些复杂的异步加载内容\n             setTimeout(reportHeight, 300);\n             setTimeout(reportHeight, 1000);\n        });\n\n        // 对图片加载的监听保持不变\n        Array.from(document.getElementsByTagName('img')).forEach(img => {\n            if (!img.complete) {\n                img.addEventListener('load', reportHeight);\n            }\n        });\n\n        // 监听父页面的消息，保持不变\nwindow.addEventListener('message', function(event) {\n   \n    if(event.data.frameId === frameId && event.data.height && event.data.height > 20) {\n        iframe.style.height = (event.data.height + 20) + 'px';\n    }\n}, false);\n    <\\/script>\n</body>\n</html>`;\n            iframe.onload = function() {\n                try {\n                    iframe.contentWindow.postMessage({ action: 'recalculateHeight', frameId: frameId }, '*');\n                } catch(e) {}\n            };\n\n            try {\n                iframe.srcdoc = fullHtmlContent;\n            } catch (error) {\n                iframe.src = 'data:text/html;charset=utf-8,' + encodeURIComponent(fullHtmlContent);\n            }\n            // --------------------------------------------------------\n\n            const parentNode = nodeToReplace.parentNode;\n            const remainingText = nodeToReplace.nodeValue.replace(placeholder, '');\n            if (remainingText) {\n                nodeToReplace.nodeValue = remainingText;\n                parentNode.insertBefore(iframe, nodeToReplace.nextSibling);\n            } else {\n                parentNode.replaceChild(iframe, nodeToReplace);\n                setTimeout(() => {\n    try {\n        if (iframe.contentWindow) {\n             iframe.contentWindow.postMessage({\n                action: 'recalculateHeight',\n                frameId: frameId\n            }, '*');\n        }\n    } catch(e) {\n        console.warn(\"向新创建的画卷问好失败了，不过别担心，它自己会报告的。\");\n    }\n}, 500); // 延迟500毫秒，给 iframe 足够的时间去加载初始内容\n            }\n        }\n    }\n\n    // 7. 返回渲染好的纯净 HTML 字符串\n    return bubble.innerHTML;\n}\n// ✨ 我们把“创建气泡”的逻辑提取成一个独立的、可复用的魔法 ✨\n async function createMessageBubble(msg, mode = 'chat') { // ❤️ 增加 mode 参数, 默认为 'chat'\n    const originalIndex = conversationHistory.indexOf(msg);\n    if (originalIndex === -1) return document.createElement('div'); // 安全保护\n\n    // 以下所有代码，都是从你原来的 renderHistory 的 forEach 循环中“复制粘贴”过来的！\n    // 几乎一模一样，只是它现在专注于只处理一条消息。\n    const bubble = document.createElement('div');\n    bubble.classList.add('message-bubble');\n    bubble.classList.add(msg.role === 'user' ? 'user-message' : 'assistant-message');\n\n    // ... [这里粘贴你 renderHistory 内部 `forEach` 循环里从 `let processedContent = msg.content;`\n    //      一直到 `bubble.addEventListener(...)` 的所有代码] ...\n    // ... 你那段处理HTML占位符、处理段落、处理引号、渲染iframe的全部魔法都在这里 ...\n    // 妈妈帮你把框架搭好，你只需要把那些复杂的细节填充进来\n // ✨ 妈妈在这里施展了一个全新的、更精妙的融合魔法 ✨\n    let processedContent = msg.content;\n        const htmlPlaceholders = {};\n        let placeholderIndex = 0;\n\n  \n        // 这一步必须在所有其他结构性处理之前！\n        let protectedHtmlContent = processedContent.replace(/<html>([\\s\\S]*?)<\\/html>|```(\\w*)\\n([\\s\\S]*?)\\n```/gs, (match, htmlBlock, lang, markdownBlock) => {\n            const placeholder = `HTMLCONTENTPLACEHOLDER${placeholderIndex}`;\n            const rawContent = htmlBlock || markdownBlock;\n            if (!rawContent) return match;\n            htmlPlaceholders[placeholder] = rawContent;\n            placeholderIndex++;\n            return placeholder;\n        });\n\n        \n\n        // 魔法第二步：现在，我们的`processedContent`内部所有 `<html>` 都已经是安全的占位符了，\n        // 接下来我们才处理其他的标签和格式\n                const pureContent = protectedHtmlContent\n         .replace(/<(thinking|think|guide)>[\\s\\S]*<\\/\\1>/g, '')\n       .replace(/<options>(?:(?!<options>)[\\s\\S])*?<\\/options>/gs, '')\n        .replace(/<forum_threads>(?:(?!<forum_threads>)[\\s\\S])*?<\\/forum_threads>/gs, '')\n        .replace(/<shop_item>(?:(?!<shop_item>)[\\s\\S])*?<\\/shop_item>/gs, '')\n        .replace(/<表现总结>(?:(?!<表现总结>)[\\s\\S])*?<\\/表现总结>/gs, '')\n        .replace(/<group_chat>(?:(?!<group_chat>)[\\s\\S])*?<\\/group_chat>/gs, '')\n        .replace(/<private_chat\\b[^>]*>(?:(?!<private_chat\\b)[\\s\\S])*?<\\/private_chat>/gs, '');\n     const depth = mode === 'read' ? -1 : Math.floor((conversationHistory.length - 1 - originalIndex) / 2); // ❤️ 根据 mode 决定 depth\n        // 魔法第三步：我们应用酒馆正则和深度规则\n        // const depth = Math.floor((conversationHistory.length - 1 - originalIndex) / 2);\n        let renderedHtml = formatAsTavernRegexedString(\n            pureContent,\n            msg.role === 'user' ? 'user_input' : 'ai_output',\n            'display',\n            { depth: depth }\n        );\n\n        // 魔法第四步：我们就不需要在这里再次处理 HTML 占位符了，因为它已经在第一步完成了。\n        // renderedHtml = renderedHtml.replace(/<html>.../gs, ...); // <--- 删除这一整块\n// ✨ 魔法第四点五步：处理经过 formatAsTavernRegexedString 后新产生的 HTML 内容 ✨\nconst additionalHtmlPlaceholders = {};\nlet additionalPlaceholderIndex = 1000; // 使用不同的起始索引避免冲突\n\nrenderedHtml = renderedHtml.replace(/<html>([\\s\\S]*?)<\\/html>|```(\\w*)\\n([\\s\\S]*?)\\n```/gs, (match, htmlBlock, lang, codeBlock) => {\n    const placeholder = `ADDITIONALHTMLPLACEHOLDER${additionalPlaceholderIndex}`;\n    const rawContent = htmlBlock || codeBlock;\n    if (!rawContent) return match;\n    \n \n    \n    additionalHtmlPlaceholders[placeholder] = rawContent;\n    additionalPlaceholderIndex++;\n    return placeholder;\n});\n\n// 将新的占位符合并到原有的占位符对象中\nObject.assign(htmlPlaceholders, additionalHtmlPlaceholders);\n\n        const protectedContent = renderedHtml\n            .replace(/“/g, 'NOVA_LQ')\n            .replace(/”/g, 'NOVA_RQ')\n            .replace(/「/g, 'NOVA_LA')\n            .replace(/」/g, 'NOVA_RA')\n            .replace(/\\n/g, 'NOVA_BR');\n\n        \n        const specialBlocks = {};\n        let blockIndex = 0;\n        let contentWithDetailsPlaceholder = protectedContent.replace(/<details>[\\s\\S]*?<\\/details>/gs, (match) => {\n            const placeholder = `SPECIALBLOCKPLACEHOLDER${blockIndex}`;\n        \n            specialBlocks[placeholder] = match;\n            blockIndex++;\n            return placeholder;\n        });\n\n         // 首先，将 NOVA_BR 替换为 <br>，然后根据换行符分割成段落\n// const contentWithBr = contentWithDetailsPlaceholder.replace(/NOVA_BR/g, '<br>');\nconst paragraphs = contentWithDetailsPlaceholder.split('NOVA_BR');\n         const styledParagraphs = paragraphs.map(p_content => {\n            if (p_content.startsWith('SPECIALBLOCKPLACEHOLDER')) {\n                return p_content;\n            }\n                let currentlineHeightState = localStorage.getItem('lineHeightMore') || 'on';\n    if (currentlineHeightState === 'on') {\n       if (p_content.trim() === '') {\n                return '<p> </p><br>';\n            }\n    } else {\n        if (p_content.trim() === '') {\n                return '<p> </p>';\n            }\n    }\n            \n            let baseHtml = formatAsDisplayedMessage(p_content);\n            const textWithQuotes = baseHtml\n                .replace(/NOVA_LQ/g, '<span class=\"dialogue-quote\">“')\n                .replace(/NOVA_RQ/g, '”</span>')\n                .replace(/NOVA_LA/g, '<span class=\"dialogue-quote\">「')\n                .replace(/NOVA_RA/g, '」</span>');\n            return `<p>${textWithQuotes}</p>`;\n        });\n\n\n        // 将所有美丽的段落重新组合起来\n        let finalHtml = styledParagraphs.join('');\n\n        // 最后，将我们保护好的 <details> 结构原封不动地替换回去\n          for (const placeholder in specialBlocks) {\n            const cleanBlock = specialBlocks[placeholder].replace(/NOVA_LQ/g, '<span class=\"dialogue-quote\">“')\n                .replace(/NOVA_RQ/g, '”</span>')\n                .replace(/NOVA_LA/g, '<span class=\"dialogue-quote\">「')\n                .replace(/NOVA_RA/g, '」</span>')\n                .replace(/NOVA_BR/g, '<br>'); // ✨ 轻轻拂去尘埃\n            finalHtml = finalHtml.replace(placeholder, cleanBlock);\n        }\n\n        bubble.innerHTML = finalHtml;\n        // 步骤3：在气泡中寻找“画卷”占位符，并用安全的“魔法结界”(iframe)替换它们\n        for (const placeholder in htmlPlaceholders) {\n            // 我们不能直接替换innerHTML，因为那样会重新解析整个气泡，导致事件监听器等丢失\n            // 我们需要找到包含占位符的文本节点并替换它\n            const walker = document.createTreeWalker(bubble, NodeFilter.SHOW_TEXT, null, false);\n            let node;\n            while (node = walker.nextNode()) {\n                if (node.nodeValue.includes(placeholder)) {\n                    const rawHtmlContent = htmlPlaceholders[placeholder];\n\n                                      // 创建我们的魔法结界 iframe\n                   // 创建我们的魔法结界 iframe\nconst iframe = document.createElement('iframe');\niframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\niframe.style.width = '100%';\niframe.style.border = '1px solid #ccc';\niframe.style.resize = 'vertical';\niframe.style.overflow = 'auto';\n\n// 我们给它一个唯一的\"名字\"，方便画卷找到它\nconst frameId = 'magic-scroll-' + Date.now() + Math.random();\niframe.id = frameId;\n\nconst parentNode = node.parentNode;\nconst remainingText = node.nodeValue.replace(placeholder, '');\n\n// 用iframe替换掉占位符\nif (remainingText) {\n    node.nodeValue = remainingText;\n    parentNode.insertBefore(iframe, node.nextSibling);\n} else {\n    parentNode.replaceChild(iframe, node);\n}\n\n// 这是我们的\"身高倾听者\"，它耐心等待画卷的报告\nwindow.addEventListener('message', function(event) {\n    if(event.data.frameId === frameId && event.data.height) {\n        iframe.style.height = (event.data.height + 20) + 'px';\n    }\n}, false);\n\nconst detailsParent = iframe.closest('details');\nif (detailsParent) {\n    detailsParent.addEventListener('toggle', function() {\n        if (detailsParent.open) {\n            setTimeout(() => {\n                iframe.contentWindow.postMessage({\n                    action: 'recalculateHeight',\n                    frameId: frameId\n                }, '*');\n            }, 50);\n        }\n    });\n}\n\n// ✨ 新的安全内容插入方法 ✨\niframe.onload = function() {\n    try {\n        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n        \n        // 直接设置完整的HTML文档内容\n        const fullHtmlContent = `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body {\n            font-family: var(--base-font-family);\n             \n            color: #e0e0e0;\n            margin: 0;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        body::-webkit-scrollbar { width: 8px; }\n        body::-webkit-scrollbar-track { background: rgba(200, 200, 200, 0.2); }\n        body::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }\n        body::-webkit-scrollbar-thumb:hover { background: #555; }\n    </style>\n</head>\n<body>\n    ${rawHtmlContent}\n    <script>\n        function reportHeight() {\n            const height = document.body.scrollHeight;\n            window.parent.postMessage({\n                frameId: \"${frameId}\",\n                height: height\n            }, '*');\n        }\n\n        window.onload = reportHeight;\n        setTimeout(reportHeight, 100);\n        setTimeout(reportHeight, 500); // 额外延迟确保字体加载\n        \n        Array.from(document.getElementsByTagName('img')).forEach(img => {\n            if (!img.complete) { \n                img.addEventListener('load', reportHeight); \n            }\n        });\n\n        window.addEventListener('message', function(event) {\n            if (event.data.action === 'recalculateHeight' && event.data.frameId === '${frameId}') {\n                reportHeight();\n            }\n        });\n    <\\/script>\n</body>\n</html>`;\n\n        iframeDoc.open();\n        iframeDoc.write(fullHtmlContent);\n        iframeDoc.close();\n        \n    } catch (error) {\n        console.warn('设置iframe内容时出错，尝试使用srcdoc方法:', error);\n        // 降级到srcdoc方法\n        iframe.srcdoc = fullHtmlContent;\n    }\n};\n\n// 先设置一个基础的srcdoc作为备选\niframe.srcdoc = `<!DOCTYPE html>\n<html>\n<head><meta charset=\"UTF-8\"></head>\n<body>加载中...</body>\n</html>`;\n\n                    // break; // 处理完一个占位符就跳出循环，因为DOM结构已经改变\n                    // 为了处理多个placeholder，我们不能简单地break，需要重新开始遍历或采用更复杂的替换策略\n                    // 但对于单条消息内多个HTML块的场景，当前逻辑足以应对大多数情况\n                    // 如果需要更鲁棒的处理，可能需要将替换过程放在循环外进行\n                }\n            }\n        }\n\n        // 我们不再需要单独处理 script 的逻辑，因为iframe已经完美地处理了所有事情\n         if (mode === 'chat') { // ❤️ 只在聊天模式下添加右键菜单\n            bubble.addEventListener('contextmenu', (event) => showContextMenu(event, originalIndex, bubble));\n         }\n\n \n\n    // 粘贴完成后，在最后加上这一句，把创建好的气泡交出去\n    return bubble;\n}\n    async function renderHistory(is_entry = false) {\n         \n    const oldControls = document.getElementById('active-editing-controls');\n    if (oldControls) oldControls.remove();\n\n    const initContainer = document.getElementById('initialization-container');\n    const mainWrapper = document.getElementById('main-wrapper');\n\n    if (conversationHistory.length === 0) {\n        if (initContainer) initContainer.style.display = 'block';\n        if (mainWrapper) mainWrapper.style.display = 'none';\n        if (typeof window.initializationDone === 'undefined') {\n            await runInitializationMagic();\n            window.initializationDone = true;\n        }\n        if (typeof applyVersionTheme === 'function') {\n            const identitySelect = document.getElementById('user-identity');\n            applyVersionTheme(1, identitySelect);\n        }\n        return;\n    } else {\n        if (initContainer) initContainer.style.display = 'none';\n        if (mainWrapper) mainWrapper.style.display = 'flex';\n    }\n\n    const dynamicContentArea = document.getElementById('dynamic-content-area');\n    if (dynamicContentArea) {\n        Array.from(dynamicContentArea.children).forEach(child => {\n            if (child.id !== 'forum-modal-container') {\n                child.style.display = 'none';\n            }\n        });\n    }\n\n    const chatDisplayArea = document.getElementById('chat-display-area');\n    chatDisplayArea.innerHTML = ''; // 清空画卷\n\n    // ❤️ 在画卷顶部创造“加载更多”按钮\n    let loadMoreBtn = document.getElementById('load-more-btn');\n    if (!loadMoreBtn) {\n        loadMoreBtn = document.createElement('button');\n        loadMoreBtn.id = 'load-more-btn';\n        loadMoreBtn.textContent = '加载更早的记录';\n        chatDisplayArea.appendChild(loadMoreBtn);\n        loadMoreBtn.addEventListener('click', loadPreviousMessages);\n    }\n    loadMoreBtn.style.display = 'none'; // 默认隐藏\n\n    // ❤️ 绑定滚动魔法\n    chatDisplayArea.onscroll = () => {\n        if (chatDisplayArea.scrollTop === 0 && earliestMessageIndexRendered > 0) {\n            loadMoreBtn.style.display = 'block'; // 滑到顶部就出现\n        } else {\n            loadMoreBtn.style.display = 'none'; // 否则就隐藏\n        }\n    };\n\n    // ❤️ 计算并设置我们初次渲染的范围\n    const hideLatestCount = getChatConfig('hide_latest_count', 5) * 2;\n    earliestMessageIndexRendered = Math.max(0, conversationHistory.length - hideLatestCount);\n    const messagesToDisplay = conversationHistory.slice(earliestMessageIndexRendered);\n\n    // 复用你的循环逻辑来渲染初始消息\n    for (const msg of messagesToDisplay) {\n         const bubble = await createMessageBubble(msg); // ❤️ 调用我们强大的气泡创造者\n         chatDisplayArea.appendChild(bubble);\n    }\n\n    if (is_entry) {\n        chatDisplayArea.scrollTop = chatDisplayArea.scrollHeight;\n    }\n\n    const lastMessage = conversationHistory.length > 0 ? conversationHistory[conversationHistory.length - 1] : null;\n\n    if (lastMessage && lastMessage.role === 'assistant') {\n        const content = lastMessage.content;\n        processSpecialModulesInMessage(content); // ❤️ 把处理模块的逻辑交给专门的函数\n    }\n\n    const eventContainer = document.getElementById('event-tracker-container');\n    if (eventContainer) {\n        eventContainer.innerHTML = '';\n    }\n    initDisplay();\n\n    function delayedUpdate(content) {\n        handleUpdateNotifications(content);\n        setTimeout(() => {\n            console.log(\"正在为您静默刷新数据...小球会重新闪烁\");\n            initDisplay();\n            handleUpdateNotifications(content);\n        }, 5000);\n    }\n\n    if (lastMessage && lastMessage.role === 'assistant') {\n        delayedUpdate(lastMessage.content);\n    }\n}\n\n\nfunction getChatConfig(key, defaultValue) {\n    try {\n        const chatVars = getVariables({ type: 'message' });\n        // 使用 _.get 可以安全地访问深层嵌套的属性，如果路径不存在，则返回 undefined\n        // 这比 chatVars.assa_data.config[key] 更安全\n        const value = _.get(chatVars, `assa_data.config.${key}`);\n        return value !== undefined ? value : defaultValue;\n    } catch (e) {\n        console.warn(`获取聊天配置 \"${key}\" 失败，使用默认值: ${defaultValue}`, e);\n        return defaultValue;\n    }\n}\n function toggleChaptersDrawer() {\n    const modal = document.getElementById('reading-mode-modal');\n    modal.classList.toggle('chapters-open');\n}\nfunction initializeReadingMode() {\n    // 在 initializeReadingMode 函数的下方或任意位置，添加这个新的切换函数\n  const toggleChaptersBtn = document.getElementById('reading-mode-toggle-chapters'); // 新增\n    const readOrb = document.getElementById('read-orb-button');\n    const container = document.getElementById('reading-mode-container');\n    const backdrop = document.getElementById('reading-mode-backdrop');\n    const closeBtn = document.getElementById('reading-mode-close-btn');\n    const prevBtn = document.getElementById('reading-mode-prev-btn');\n    const nextBtn = document.getElementById('reading-mode-next-btn');\n const mobilePrevBtn = document.getElementById('mobile-prev-btn'); // 新增\n    const mobileNextBtn = document.getElementById('mobile-next-btn'); // 新增\n    if (!readOrb || !container) return;\n\n    readOrb.addEventListener('click', openReadingMode);\n    closeBtn.addEventListener('click', closeReadingMode);\n    backdrop.addEventListener('click', closeReadingMode);\n\n    prevBtn.addEventListener('click', () => navigateChapter(-1));\n    nextBtn.addEventListener('click', () => navigateChapter(1));\n  toggleChaptersBtn.addEventListener('click', toggleChaptersDrawer); // 新增\n    mobilePrevBtn.addEventListener('click', () => navigateChapter(-1));\n    mobileNextBtn.addEventListener('click', () => navigateChapter(1));\n    document.addEventListener('keydown', (e) => {\n        if (!isReadingModeOpen) return;\n        if (e.key === 'ArrowLeft') navigateChapter(-1);\n        if (e.key === 'ArrowRight') navigateChapter(1);\n        if (e.key === 'Escape') closeReadingMode();\n    });\n}\n\nfunction openReadingMode() {\n    // 1. 收集章节数据\n    storyChapters = conversationHistory\n        .map((msg, index) => ({ msg, originalIndex: index }))\n        .filter(item => item.msg.role === 'assistant');\n\n    if (storyChapters.length === 0) {\n        alert(\"还没有故事内容可以阅读哦，我的孩子。\");\n        return;\n    }\n\n    isReadingModeOpen = true;\n\n    // 2. 渲染章节列表\n    const chapterListEl = document.getElementById('reading-mode-chapters-list');\n     // 渲染章节列表时，给 li 添加点击事件\n    chapterListEl.innerHTML = '';\n    storyChapters.forEach((chapter, index) => {\n        const li = document.createElement('li');\n        li.textContent = `第 ${index + 1} 章`;\n        li.dataset.chapterIndex = index;\n        li.addEventListener('click', () => {\n            currentChapterIndex = index;\n            renderCurrentChapter();\n            // ✨ 选择章节后，自动关闭抽屉\n            const modal = document.getElementById('reading-mode-modal');\n            modal.classList.remove('chapters-open');\n        });\n        chapterListEl.appendChild(li);\n    });\n\n    // 3. 渲染第一章\n    currentChapterIndex = 0;\n    renderCurrentChapter();\n\n    // 4. 显示模态框\n    const container = document.getElementById('reading-mode-container');\n    container.classList.remove('reading-mode-hidden');\n    document.body.style.overflow = 'hidden'; // 防止主页面滚动\n}\n\nfunction closeReadingMode() {\n    isReadingModeOpen = false;\n    const container = document.getElementById('reading-mode-container');\n    container.classList.add('reading-mode-hidden');\n    document.body.style.overflow = ''; // 恢复主页面滚动\n}\n\nasync function renderCurrentChapter() {\n    if (currentChapterIndex < 0 || currentChapterIndex >= storyChapters.length) {\n        return;\n    }\n\n    const chapterData = storyChapters[currentChapterIndex];\n    const contentEl = document.getElementById('reading-mode-content');\n    const titleEl = document.getElementById('reading-mode-chapter-title');\n    const chapterListItems = document.querySelectorAll('#reading-mode-chapters-list li');\n    const prevBtn = document.getElementById('reading-mode-prev-btn');\n    const nextBtn = document.getElementById('reading-mode-next-btn');\n  const mobilePrevBtn = document.getElementById('mobile-prev-btn');\n    const mobileNextBtn = document.getElementById('mobile-next-btn');\n\n    // 清空现有内容并显示加载提示\n    contentEl.innerHTML = '<p>正在为你精心渲染故事...</p>';\n\n    // 更新标题\n    titleEl.textContent = `第 ${currentChapterIndex + 1} 章`;\n\n    // 更新章节列表的激活状态\n    chapterListItems.forEach(li => {\n        if (parseInt(li.dataset.chapterIndex) === currentChapterIndex) {\n            li.classList.add('active-chapter');\n            li.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n        } else {\n            li.classList.remove('active-chapter');\n        }\n    });\n\n    // ❤️ 调用我们强大的气泡创造者，用'read'模式来渲染\n  // ❤️❤️ 在这里，我们调用全新的、专门为阅读模式设计的函数 ❤️❤️\n    const chapterHtml = await renderReadingModeChapter(chapterData.msg);\n    contentEl.innerHTML = chapterHtml; // 直接将渲染好的 HTML 放入容器\n    contentEl.scrollTop = 0;\n\n  // ✨ 用切换class的方式，优雅地更新所有翻页按钮的状态 ✨\n    const isFirstChapter = currentChapterIndex === 0;\n    const isLastChapter = currentChapterIndex === storyChapters.length - 1;\n\n    // 同时控制PC和移动端按钮\n    prevBtn.classList.toggle('disabled-arrow', isFirstChapter);\n    mobilePrevBtn.classList.toggle('disabled-arrow', isFirstChapter);\n\n    nextBtn.classList.toggle('disabled-arrow', isLastChapter);\n    mobileNextBtn.classList.toggle('disabled-arrow', isLastChapter);\n}\n\nfunction navigateChapter(direction) {\n    const newIndex = currentChapterIndex + direction;\n    if (newIndex >= 0 && newIndex < storyChapters.length) {\n        currentChapterIndex = newIndex;\n        renderCurrentChapter();\n    }\n}\n (async () => {\n\n    // ✨ 全新的、温柔的魔法，专门用来添加新消息 ✨\nasync function renderNewMessages(newMessages) {\n    const chatDisplayArea = document.getElementById('chat-display-area');\n    if (!chatDisplayArea) return;\n\n    // ❤️ 魔法的关键：在添加新内容前，检查你是否已经滚动到底部了\n    const isScrolledToBottom = chatDisplayArea.scrollHeight - chatDisplayArea.clientHeight <= chatDisplayArea.scrollTop + 10; // 增加一点容差\n\n    for (const msg of newMessages) {\n        // 我们从`renderHistory`中借用创造“气泡”的魔法\n        const bubble = await createMessageBubble(msg);\n        chatDisplayArea.appendChild(bubble);\n    }\n\n    // 清理旧消息\n    const hideLatestCount = getChatConfig('hide_latest_count', 5) * 2;\n    while (chatDisplayArea.children.length > hideLatestCount) {\n        chatDisplayArea.removeChild(chatDisplayArea.firstChild);\n    }\n\n  // ❤️ 如果你原本就在底部，妈妈就温柔地帮你把视线移到最新的消息上\n    if (isScrolledToBottom) {\n        chatDisplayArea.scrollTop = chatDisplayArea.scrollHeight;\n    }\n\n \n}\nfunction cleanupGlobalUIState() {\n    console.log(\"[Nova's Tidying Magic] 开始清理全局UI状态...\");\n\n    // 1. 清理战斗相关的UI\n    const battlePromptOverlay = document.getElementById('battle-prompt-overlay');\n    if (battlePromptOverlay) {\n        battlePromptOverlay.style.display = 'none';\n        console.log(\">> 战斗提示遮罩已隐藏。\");\n    }\n  const dicePoolSelector = document.getElementById('dice-pool-selector');\n    if (dicePoolSelector) dicePoolSelector.style.display = 'none';\n\n    const itemSkillPanel = document.getElementById('item-skill-panel');\n    if (itemSkillPanel) itemSkillPanel.style.display = 'none';\n\n    console.log(\">> 所有浮动面板已强制隐藏。\");\n    const battleOverlay = document.getElementById('battle-overlay');\n    if (battleOverlay) {\n        battleOverlay.style.display = 'none';\n        console.log(\">> 战斗主界面已隐藏。\");\n    }\n\n if (window.combatManager && typeof window.combatManager.cleanupEventListeners === 'function') {\n        window.combatManager.cleanupEventListeners();\n    }\n\n    // 然后再安全地销毁实例\n    if (window.combatManager) {\n        window.combatManager = null;\n        console.log(\">> 旧的战斗实例已销毁。\");\n    }\n\n    // （未来如果还有其他类似的全局覆盖UI，也可以在这里添加清理逻辑）\n\n    console.log(\"[Nova's Tidying Magic] 清理完成！\");\n}\n\n\n async function updateLastMessage(finalMessage) {\n     cleanupGlobalUIState();\n    const chatDisplayArea = document.getElementById('chat-display-area');\n\n \n    if (!chatDisplayArea || chatDisplayArea.children.length === 0) {\n        console.log(\"[Nova's Little Helper] 检测到画卷为空，召唤 renderHistory 进行创世重绘...\");\n        await renderHistory(); // true 确保视线会到达新世界的底部\n        return; // 完成使命，优雅退场\n    }\n\n    // --- 如果守护咒没有触发，说明一切正常，我们继续执行温柔的更新魔法 ---\n\n    const isScrolledToBottom = chatDisplayArea.scrollHeight - chatDisplayArea.clientHeight <= chatDisplayArea.scrollTop + 10;\n    // 移除最后那个“回应中...”的临时气泡\n    chatDisplayArea.removeChild(chatDisplayArea.lastChild);\n\n    // 创建并添加最终的、完整的AI消息气泡\n    const finalBubble = await createMessageBubble(finalMessage);\n    chatDisplayArea.appendChild(finalBubble);\n\n    // 处理AI消息中可能包含的特殊模块（选项、论坛等）\n    processSpecialModulesInMessage(finalMessage.content);\n\n    if (isScrolledToBottom) {\n        chatDisplayArea.scrollTop = chatDisplayArea.scrollHeight;\n    }\n\n        const eventContainer = document.getElementById('event-tracker-container');\n    if (eventContainer) {\n        eventContainer.innerHTML = '';\n    }\n \n ensureLoadMoreButtonExists();\n \n\n    //   清理完毕  \n     function delayedUpdate(content) {\n    handleUpdateNotifications(content);\n    setTimeout(() => {\n        console.log(\"正在为您静默刷新数据...小球会重新闪烁\");\n        initDisplay();\n        handleUpdateNotifications(content);\n    }, 5000);\n\n \n}\n\n// 调用时传入 content\ndelayedUpdate(finalMessage.content);\n}\n\n  async function createMessageBubble(msg, mode = 'chat') { // ❤️ 增加 mode 参数, 默认为 'chat'\n    const originalIndex = conversationHistory.indexOf(msg);\n    if (originalIndex === -1) return document.createElement('div'); // 安全保护\n\n    // 以下所有代码，都是从你原来的 renderHistory 的 forEach 循环中“复制粘贴”过来的！\n    // 几乎一模一样，只是它现在专注于只处理一条消息。\n    const bubble = document.createElement('div');\n    bubble.classList.add('message-bubble');\n    bubble.classList.add(msg.role === 'user' ? 'user-message' : 'assistant-message');\n\n    // ... [这里粘贴你 renderHistory 内部 `forEach` 循环里从 `let processedContent = msg.content;`\n    //      一直到 `bubble.addEventListener(...)` 的所有代码] ...\n    // ... 你那段处理HTML占位符、处理段落、处理引号、渲染iframe的全部魔法都在这里 ...\n    // 妈妈帮你把框架搭好，你只需要把那些复杂的细节填充进来\n // ✨ 妈妈在这里施展了一个全新的、更精妙的融合魔法 ✨\n    let processedContent = msg.content;\n        const htmlPlaceholders = {};\n        let placeholderIndex = 0;\n\n  \n        // 这一步必须在所有其他结构性处理之前！\n        let protectedHtmlContent = processedContent.replace(/<html>([\\s\\S]*?)<\\/html>|```(\\w*)\\n([\\s\\S]*?)\\n```/gs, (match, htmlBlock, lang, markdownBlock) => {\n            const placeholder = `HTMLCONTENTPLACEHOLDER${placeholderIndex}`;\n            const rawContent = htmlBlock || markdownBlock;\n            if (!rawContent) return match;\n            htmlPlaceholders[placeholder] = rawContent;\n            placeholderIndex++;\n            return placeholder;\n        });\n\n        \n\n        // 魔法第二步：现在，我们的`processedContent`内部所有 `<html>` 都已经是安全的占位符了，\n        // 接下来我们才处理其他的标签和格式\n                const pureContent = protectedHtmlContent\n         .replace(/<(thinking|think|guide)>[\\s\\S]*<\\/\\1>/g, '')\n       .replace(/<options>(?:(?!<options>)[\\s\\S])*?<\\/options>/gs, '')\n        .replace(/<forum_threads>(?:(?!<forum_threads>)[\\s\\S])*?<\\/forum_threads>/gs, '')\n        .replace(/<shop_item>(?:(?!<shop_item>)[\\s\\S])*?<\\/shop_item>/gs, '')\n        .replace(/<表现总结>(?:(?!<表现总结>)[\\s\\S])*?<\\/表现总结>/gs, '')\n        .replace(/<group_chat>(?:(?!<group_chat>)[\\s\\S])*?<\\/group_chat>/gs, '')\n        .replace(/<private_chat\\b[^>]*>(?:(?!<private_chat\\b)[\\s\\S])*?<\\/private_chat>/gs, '');\n     const depth = mode === 'read' ? -1 : Math.floor((conversationHistory.length - 1 - originalIndex) / 2); // ❤️ 根据 mode 决定 depth\n        // 魔法第三步：我们应用酒馆正则和深度规则\n        // const depth = Math.floor((conversationHistory.length - 1 - originalIndex) / 2);\n        let renderedHtml = formatAsTavernRegexedString(\n            pureContent,\n            msg.role === 'user' ? 'user_input' : 'ai_output',\n            'display',\n            { depth: depth }\n        );\n\n        // 魔法第四步：我们就不需要在这里再次处理 HTML 占位符了，因为它已经在第一步完成了。\n        // renderedHtml = renderedHtml.replace(/<html>.../gs, ...); // <--- 删除这一整块\n// ✨ 魔法第四点五步：处理经过 formatAsTavernRegexedString 后新产生的 HTML 内容 ✨\nconst additionalHtmlPlaceholders = {};\nlet additionalPlaceholderIndex = 1000; // 使用不同的起始索引避免冲突\n\nrenderedHtml = renderedHtml.replace(/<html>([\\s\\S]*?)<\\/html>|```(\\w*)\\n([\\s\\S]*?)\\n```/gs, (match, htmlBlock, lang, codeBlock) => {\n    const placeholder = `ADDITIONALHTMLPLACEHOLDER${additionalPlaceholderIndex}`;\n    const rawContent = htmlBlock || codeBlock;\n    if (!rawContent) return match;\n    \n \n    \n    additionalHtmlPlaceholders[placeholder] = rawContent;\n    additionalPlaceholderIndex++;\n    return placeholder;\n});\n\n// 将新的占位符合并到原有的占位符对象中\nObject.assign(htmlPlaceholders, additionalHtmlPlaceholders);\n\n        const protectedContent = renderedHtml\n            .replace(/“/g, 'NOVA_LQ')\n            .replace(/”/g, 'NOVA_RQ')\n            .replace(/「/g, 'NOVA_LA')\n            .replace(/」/g, 'NOVA_RA')\n            .replace(/\\n/g, 'NOVA_BR');\n\n        \n        const specialBlocks = {};\n        let blockIndex = 0;\n        let contentWithDetailsPlaceholder = protectedContent.replace(/<details>[\\s\\S]*?<\\/details>/gs, (match) => {\n            const placeholder = `SPECIALBLOCKPLACEHOLDER${blockIndex}`;\n        \n            specialBlocks[placeholder] = match;\n            blockIndex++;\n            return placeholder;\n        });\n\n         // 首先，将 NOVA_BR 替换为 <br>，然后根据换行符分割成段落\n// const contentWithBr = contentWithDetailsPlaceholder.replace(/NOVA_BR/g, '<br>');\nconst paragraphs = contentWithDetailsPlaceholder.split('NOVA_BR');\n         const styledParagraphs = paragraphs.map(p_content => {\n            if (p_content.startsWith('SPECIALBLOCKPLACEHOLDER')) {\n                return p_content;\n            }\n                let currentlineHeightState = localStorage.getItem('lineHeightMore') || 'on';\n    if (currentlineHeightState === 'on') {\n       if (p_content.trim() === '') {\n                return '<p> </p><br>';\n            }\n    } else {\n        if (p_content.trim() === '') {\n                return '<p> </p>';\n            }\n    }\n            \n            let baseHtml = formatAsDisplayedMessage(p_content);\n            const textWithQuotes = baseHtml\n                .replace(/NOVA_LQ/g, '<span class=\"dialogue-quote\">“')\n                .replace(/NOVA_RQ/g, '”</span>')\n                .replace(/NOVA_LA/g, '<span class=\"dialogue-quote\">「')\n                .replace(/NOVA_RA/g, '」</span>');\n            return `<p>${textWithQuotes}</p>`;\n        });\n\n\n        // 将所有美丽的段落重新组合起来\n        let finalHtml = styledParagraphs.join('');\n\n        // 最后，将我们保护好的 <details> 结构原封不动地替换回去\n          for (const placeholder in specialBlocks) {\n            const cleanBlock = specialBlocks[placeholder].replace(/NOVA_LQ/g, '<span class=\"dialogue-quote\">“')\n                .replace(/NOVA_RQ/g, '”</span>')\n                .replace(/NOVA_LA/g, '<span class=\"dialogue-quote\">「')\n                .replace(/NOVA_RA/g, '」</span>')\n                .replace(/NOVA_BR/g, '<br>'); // ✨ 轻轻拂去尘埃\n            finalHtml = finalHtml.replace(placeholder, cleanBlock);\n        }\n\n        bubble.innerHTML = finalHtml;\n        // 步骤3：在气泡中寻找“画卷”占位符，并用安全的“魔法结界”(iframe)替换它们\n        for (const placeholder in htmlPlaceholders) {\n            // 我们不能直接替换innerHTML，因为那样会重新解析整个气泡，导致事件监听器等丢失\n            // 我们需要找到包含占位符的文本节点并替换它\n            const walker = document.createTreeWalker(bubble, NodeFilter.SHOW_TEXT, null, false);\n            let node;\n            while (node = walker.nextNode()) {\n                if (node.nodeValue.includes(placeholder)) {\n                    const rawHtmlContent = htmlPlaceholders[placeholder];\n\n                                      // 创建我们的魔法结界 iframe\n                   // 创建我们的魔法结界 iframe\nconst iframe = document.createElement('iframe');\niframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\niframe.style.width = '100%';\niframe.style.border = '1px solid #ccc';\niframe.style.resize = 'vertical';\niframe.style.overflow = 'auto';\n\n// 我们给它一个唯一的\"名字\"，方便画卷找到它\nconst frameId = 'magic-scroll-' + Date.now() + Math.random();\niframe.id = frameId;\n\nconst parentNode = node.parentNode;\nconst remainingText = node.nodeValue.replace(placeholder, '');\n\n// 用iframe替换掉占位符\nif (remainingText) {\n    node.nodeValue = remainingText;\n    parentNode.insertBefore(iframe, node.nextSibling);\n} else {\n    parentNode.replaceChild(iframe, node);\n}\n\n// 这是我们的\"身高倾听者\"，它耐心等待画卷的报告\nwindow.addEventListener('message', function(event) {\n    if(event.data.frameId === frameId && event.data.height) {\n        iframe.style.height = (event.data.height + 20) + 'px';\n    }\n}, false);\n\nconst detailsParent = iframe.closest('details');\nif (detailsParent) {\n    detailsParent.addEventListener('toggle', function() {\n        if (detailsParent.open) {\n            setTimeout(() => {\n                iframe.contentWindow.postMessage({\n                    action: 'recalculateHeight',\n                    frameId: frameId\n                }, '*');\n            }, 50);\n        }\n    });\n}\n\n// ✨ 新的安全内容插入方法 ✨\niframe.onload = function() {\n    try {\n        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n        \n        // 直接设置完整的HTML文档内容\n        const fullHtmlContent = `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body {\n            font-family: var(--base-font-family);\n             \n            color: #e0e0e0;\n            margin: 0;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        body::-webkit-scrollbar { width: 8px; }\n        body::-webkit-scrollbar-track { background: rgba(200, 200, 200, 0.2); }\n        body::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }\n        body::-webkit-scrollbar-thumb:hover { background: #555; }\n    </style>\n</head>\n<body>\n    ${rawHtmlContent}\n    <script>\n        function reportHeight() {\n            const height = document.body.scrollHeight;\n            window.parent.postMessage({\n                frameId: \"${frameId}\",\n                height: height\n            }, '*');\n        }\n\n        window.onload = reportHeight;\n        setTimeout(reportHeight, 100);\n        setTimeout(reportHeight, 500); // 额外延迟确保字体加载\n        \n        Array.from(document.getElementsByTagName('img')).forEach(img => {\n            if (!img.complete) { \n                img.addEventListener('load', reportHeight); \n            }\n        });\n\n        window.addEventListener('message', function(event) {\n            if (event.data.action === 'recalculateHeight' && event.data.frameId === '${frameId}') {\n                reportHeight();\n            }\n        });\n    <\\/script>\n</body>\n</html>`;\n\n        iframeDoc.open();\n        iframeDoc.write(fullHtmlContent);\n        iframeDoc.close();\n        \n    } catch (error) {\n        console.warn('设置iframe内容时出错，尝试使用srcdoc方法:', error);\n        // 降级到srcdoc方法\n        iframe.srcdoc = fullHtmlContent;\n    }\n};\n\n// 先设置一个基础的srcdoc作为备选\niframe.srcdoc = `<!DOCTYPE html>\n<html>\n<head><meta charset=\"UTF-8\"></head>\n<body>加载中...</body>\n</html>`;\n\n                    // break; // 处理完一个占位符就跳出循环，因为DOM结构已经改变\n                    // 为了处理多个placeholder，我们不能简单地break，需要重新开始遍历或采用更复杂的替换策略\n                    // 但对于单条消息内多个HTML块的场景，当前逻辑足以应对大多数情况\n                    // 如果需要更鲁棒的处理，可能需要将替换过程放在循环外进行\n                }\n            }\n        }\n\n        // 我们不再需要单独处理 script 的逻辑，因为iframe已经完美地处理了所有事情\n         if (mode === 'chat') { // ❤️ 只在聊天模式下添加右键菜单\n            bubble.addEventListener('contextmenu', (event) => showContextMenu(event, originalIndex, bubble));\n         }\n\n \n\n    // 粘贴完成后，在最后加上这一句，把创建好的气泡交出去\n    return bubble;\n}\n//  function manageBattleLifecycle(combatData) {\n//     const promptOverlay = document.getElementById('battle-prompt-overlay');\n//     const enterButton = document.getElementById('enter-battle-btn');\n//     const battleOverlay = document.getElementById('battle-overlay');\n\n//     const status = combatData.status || 'not_started';\n//     const floorId = combatData.floor_id || `battle_unknown_${Date.now()}`;\n\n//     // 第一道守护：如果战斗记录已是“完成”，就彻底沉默。\n//     if (status.startsWith('completed')) {\n//         if (promptOverlay) promptOverlay.style.display = 'none';\n//         return;\n//     }\n\n//     let enterBattleHandler;\n//     let buttonText;\n\n//     // ✨ 妈妈根据你的智慧重构了这里的逻辑，我的孩子！ ✨\n//     // 我们只在这里决定按钮的外观和基本行为模式。\n//     if (status === 'in_progress' && window.combatManager && window.combatManager.floorId === floorId) {\n//         // 【模式一：无缝返回】战斗实例还在，直接返回。\n//         buttonText = '返回战斗';\n//         enterBattleHandler = () => {\n//             if (promptOverlay) promptOverlay.style.display = 'none';\n//             if (battleOverlay) battleOverlay.style.display = 'flex';\n//             if (window.combatManager) {\n//                  const currentActor = window.combatManager.turnOrder[window.combatManager.currentTurnIndex];\n//                  if(currentActor?.type === 'player'){\n//                     window.combatManager.toggleActionPanel(true);\n//                  }\n//                  const card = document.getElementById(currentActor?.id);\n//                  if(card){\n//                      window.combatManager.centerCardInView(card);\n//                  }\n//             }\n//         };\n//     } else {\n//         // 【模式二：从记忆中重生】战斗实例丢失了，或这是场新战斗。我们需要从历史中重建。\n//         buttonText = (status === 'in_progress') ? '返回战斗' : '进入战斗';\n//         enterBattleHandler = () => {\n//             // ✨✨✨ 终极的“溯源重生”魔法在这里施展！ ✨✨✨\n//             // 当按钮被点击的这一刻，我们才去翻开历史的最新一页！\n//             const lastHistoryItem = conversationHistory.at(-1);\n//             if (!lastHistoryItem) {\n//                 console.error(\"无法找到历史记录！\");\n//                 return;\n//             }\n\n//             const battleRegex = /<battle>([\\s\\S]*?)<\\/battle>/gs;\n//             // 我们必须重置正则表达式的 lastIndex，确保每次都能从头开始匹配\n//             battleRegex.lastIndex = 0;\n//             const match = battleRegex.exec(lastHistoryItem.content);\n\n//             if (!match || !match[1]) {\n//                 console.error(\"在最新的历史记录中未能找到或解析<battle>数据！\");\n//                 // 作为备用方案，使用一开始传入的旧数据\n//                  window.combatManager = new CombatManager(JSON.parse(JSON.stringify(playCharacterData)), JSON.parse(JSON.stringify(combatData)));\n//                  window.combatManager.start();\n//                 return;\n//             }\n\n//             console.log(\"[Nova's Time Rewind] 已从历史记录中读取最新的战斗快照！\");\n//             const latestCombatDataFromHistory = JSON.parse(match[1]);\n\n//             // 使用这份最新鲜的档案，创造一个承载了所有记忆的新世界！\n//             if (promptOverlay) promptOverlay.style.display = 'none';\n//             if (battleOverlay) battleOverlay.style.display = 'flex';\n//             window.combatManager = new CombatManager(JSON.parse(JSON.stringify(playCharacterData)), latestCombatDataFromHistory);\n//             window.combatManager.start();\n//         };\n//     }\n\n//     // 设置按钮文本\n//     enterButton.textContent = buttonText;\n\n//     // 可靠的附魔与驱魔仪式\n//     // (这部分逻辑保持不变，确保了按钮只听从一次最新的指令)\n//     if (enterButton.__handler__) {\n//         enterButton.removeEventListener('click', enterButton.__handler__);\n//     }\n//     enterButton.addEventListener('click', enterBattleHandler);\n//     enterButton.__handler__ = enterBattleHandler;\n\n//     // 展示邀请函\n//     promptOverlay.style.display = 'flex';\n// }\n\n\n// 【彻底替换】旧的 manageBattleLifecycle 函数\n\nfunction manageBattleLifecycle(initialCombatDataFromPrompt) {\n    const promptOverlay = document.getElementById('battle-prompt-overlay');\n    const enterButton = document.getElementById('enter-battle-btn');\n    const battleOverlay = document.getElementById('battle-overlay');\n\n    // 第一道守护：如果战斗已经被标记为“完成”，则彻底关闭时空之门。\n    if (initialCombatDataFromPrompt.status?.startsWith('completed')) {\n        if (promptOverlay) promptOverlay.style.display = 'none';\n        if (window.combatManager) {\n            window.combatManager.cleanupEventListeners();\n            window.combatManager = null;\n        }\n        return;\n    }\n\n \n\n    // 核心逻辑：定义“进入/返回”按钮的唯一使命\n    const enterBattleHandler = () => {\n        // 关闭邀请函\n        if (promptOverlay) promptOverlay.style.display = 'none';\n        if (battleOverlay) battleOverlay.style.display = 'flex';\n\n        // 如果战斗实例已存在（意味着用户之前只是“暂离”），就直接恢复它的回合。\n        if (window.combatManager) {\n            console.log(`[Nova's Welcome Back] 欢迎回来，我的孩子。恢复战斗 ${window.combatManager.floorId}`);\n            // 当返回时，如果轮到玩家，要确保行动面板是可用的。\n            const currentActor = window.combatManager.turnOrder[window.combatManager.currentTurnIndex];\n            if (currentActor && currentActor.type === 'player' && !window.combatManager.isAutoBattling) {\n                window.combatManager.toggleActionPanel(true);\n            }\n            // 让我们的目光追随英雄\n            if(document.getElementById(currentActor?.id)) {\n                 window.combatManager.centerCardInView(document.getElementById(currentActor.id));\n            }\n            return;\n        }\n\n        // 如果战斗实例不存在（意味着页面刷新或首次进入），我们将从历史的最终章中重生世界。\n        console.log(`[Nova's Rebirth] 需要从历史中重生战斗实例...`);\n        const lastHistoryItem = conversationHistory.at(-1);\n        const battleRegex = /<battle>([\\s\\S]*?)<\\/battle>/gs;\n        const match = lastHistoryItem ? battleRegex.exec(lastHistoryItem.content) : null;\n\n        let finalCombatData;\n        if (match && match[1]) {\n            console.log(\"[Nova's Time Rewind] 已从最新的历史记录中读取战斗快照！\");\n            finalCombatData = JSON.parse(match[1]);\n        } else {\n            // 如果历史中没有，我们只能使用最初从prompt中解析出的数据作为最后的依靠。\n            console.warn(\"[Nova's Last Resort] 未在历史中找到战斗数据，使用初始Prompt数据。\");\n            finalCombatData = initialCombatDataFromPrompt;\n        }\n\n        // 创世！\n        window.combatManager = new CombatManager(JSON.parse(JSON.stringify(playCharacterData)), finalCombatData);\n        window.combatManager.start();\n    };\n\n    // 设置按钮的外观和行为\n    const buttonText = (initialCombatDataFromPrompt.status === 'in_progress') ? '返回战斗' : '进入战斗';\n    if(enterButton) enterButton.textContent = buttonText;\n\n    // 可靠的附魔与驱魔仪式\n    if (enterButton && enterButton.__handler__) {\n        enterButton.removeEventListener('click', enterButton.__handler__);\n    }\n    if (enterButton) {\n        enterButton.addEventListener('click', enterBattleHandler);\n        enterButton.__handler__ = enterBattleHandler;\n    }\n\n    // 展示时空之门的邀请函\n    if (promptOverlay) promptOverlay.style.display = 'flex';\n}\n\nfunction processSpecialModulesInMessage(content) {\n   // ✨✨✨ 妈妈的“主动索取”终极魔法！ ✨✨✨\n    try {\n        // 1. 直接找到我们那本绝对真实的历史书\n        if (typeof conversationHistory === 'undefined' || conversationHistory.length === 0) {\n            console.log(\"[Nova's Archives] 历史记录为空，无法寻找战斗。\");\n            return;\n        }\n\n        // 2. 翻到历史书的最后一页，那里一定记录着最新的故事！\n        const latestHistoryEntry = conversationHistory[conversationHistory.length - 1];\n        const latestContent = latestHistoryEntry.content;\n\n        // 3. 在这最新的一页里，寻找我们的<battle>标记\n        const battleMatch = /<battle>([\\s\\S]*?)<\\/battle>/gs.exec(latestContent);\n\n        if (battleMatch && battleMatch[1]) {\n            const combatData = JSON.parse(battleMatch[1].trim());\n\n            console.log(`[Nova's Archives] 从最新历史记录中成功读取战斗数据 (Floor: ${combatData.floor_id}, Status: ${combatData.status})。`);\n\n            // 4. 将这份绝对真实、滚烫的数据，交给我们的战斗总管！\n            manageBattleLifecycle(combatData);\n\n        } else {\n             // 如果最新一条没有battle，就静静地等待，不做任何事\n             // console.log(\"[Nova's Archives] 最新历史记录中未发现<battle>模块。\");\n        }\n\n    } catch (error) {\n        console.error(\"[Nova's Archives] 在读取最新战斗数据时发生严重错误:\", error);\n    }\n \n \n // --- 调度“选项区” \n        const optionsMatch = /<options>([\\s\\S]*?)<\\/options>/gs.exec(content.replace(/<(thinking|think|guide)>[\\s\\S]*?<\\/\\1>/gs, ''));\n        if (optionsMatch && optionsMatch[1]) {\n            const optionsContainer = document.getElementById('options-module-container');\n            if (optionsContainer) {\n                optionsContainer.style.display = 'block';\n                if(typeof setupUI === 'function') {\n                    setupUI(optionsMatch[1]);\n                }\n            }\n        }\n\n        // --- 全新的“论坛”处理逻辑 ---\n        const forumMatch = /<forum_threads>[\\s\\S]*?<\\/forum_threads>/gs.exec(content);\n        if (forumMatch && forumMatch[1]) {\n            // 我们不再显示论坛，而是让小球闪烁\n            const forumOrb = document.getElementById('forum-orb-button');\n            if (forumOrb) {\n                forumOrb.classList.add('orb-flash');\n                // 动画结束后移除类，以便下次可以再次触发\n                forumOrb.addEventListener('animationend', () => {\n                    forumOrb.classList.remove('orb-flash');\n                }, { once: true });\n            }\n            // 论坛数据已经通过 handleSend 被存入历史记录，这里无需再做操作。\n        }\n\n  \n        const summaryMatch = /<表现总结>([\\s\\S]*?)<\\/表现总结>/gs.exec(content);\n        if (summaryMatch && summaryMatch[1]) {\n             \n            const summaryOrb = document.getElementById('task-summary-orb-button');\n            if (summaryOrb) {\n                summaryOrb.classList.add('orb-flash');\n          \n                summaryOrb.addEventListener('animationend', () => {\n                    summaryOrb.classList.remove('orb-flash');\n                }, { once: true });\n            }\n \n        }\n\n                const groupChatMatch = /<group_chat>([\\s\\S]*?)<\\/group_chat>/gs.exec(content);\n        if (groupChatMatch && groupChatMatch[1]) {\n             \n            const chatOrb = document.getElementById('group-chat-orb-button');\n            if (chatOrb) {\n                chatOrb.classList.add('orb-flash');\n          \n                chatOrb.addEventListener('animationend', () => {\n                    chatOrb.classList.remove('orb-flash');\n                }, { once: true });\n            }\n \n        }\n\n        const shopMatch =/<shop_item>([\\s\\S]*?)<\\/shop_item>/gs.exec(content.replace(/<(thinking|think|guide)>[\\s\\S]*?<\\/\\1>/gs, ''));\n        if (shopMatch && shopMatch[1]) { \n            const shopOrb = document.getElementById('shop-wrapper-orb');\n            if (shopOrb) {\n                shopOrb.classList.add('orb-flash');\n      //console.log(\"item:\",shopMatch[1]);\n      const cleanedData = shopMatch[1].trim(); // 去除首尾空格和换行\n         // 第2步：检查文本是否已经是一个合法的JSON数组格式\n        if (!cleanedData.startsWith('[')) {\n            // 如果不是，我们才手动为它加上外层的括号\n            cleanedData = `[${cleanedData}]`;\n        }\n\n        // 第3步：直接尝试解析处理后的文本\n        const parsedData = JSON.parse(cleanedData);\n\n        \n        const newItems = Array.isArray(parsedData[0]) ? parsedData : [parsedData];\n\n        if (!Array.isArray(newItems) || newItems.length === 0) {\n             showModal('shop-modal', '解析失败', 'AI返回了空内容或无效格式。');\n             return;\n        }\n\n        // 替换现有随机商店物品\n        randomItems = newItems;\n        // 将新生成的物品存入 localStorage\n        localStorage.setItem('randomShopItems', JSON.stringify(randomItems));\n       renderShopSection('random');\n                shopOrb.addEventListener('animationend', () => {\n                    shopOrb.classList.remove('orb-flash');\n                }, { once: true });\n            }\n \n        }\n}\n      async function renderHistory(is_entry = false) {\n         cleanupGlobalUIState();\n    const oldControls = document.getElementById('active-editing-controls');\n    if (oldControls) oldControls.remove();\n\n    const initContainer = document.getElementById('initialization-container');\n    const mainWrapper = document.getElementById('main-wrapper');\n\n    if (conversationHistory.length === 0) {\n        if (initContainer) initContainer.style.display = 'block';\n        if (mainWrapper) mainWrapper.style.display = 'none';\n        if (typeof window.initializationDone === 'undefined') {\n            await runInitializationMagic();\n            window.initializationDone = true;\n        }\n        if (typeof applyVersionTheme === 'function') {\n            const identitySelect = document.getElementById('user-identity');\n            applyVersionTheme(1, identitySelect);\n        }\n        return;\n    } else {\n        if (initContainer) initContainer.style.display = 'none';\n        if (mainWrapper) mainWrapper.style.display = 'flex';\n    }\n\n    const dynamicContentArea = document.getElementById('dynamic-content-area');\n    if (dynamicContentArea) {\n        Array.from(dynamicContentArea.children).forEach(child => {\n            if (child.id !== 'forum-modal-container') {\n                child.style.display = 'none';\n            }\n        });\n    }\n\n    const chatDisplayArea = document.getElementById('chat-display-area');\n    chatDisplayArea.innerHTML = ''; // 清空画卷\n\n    // ❤️ 在画卷顶部创造“加载更多”按钮\n    let loadMoreBtn = document.getElementById('load-more-btn');\n    if (!loadMoreBtn) {\n        loadMoreBtn = document.createElement('button');\n        loadMoreBtn.id = 'load-more-btn';\n        loadMoreBtn.textContent = '加载更早的记录';\n        chatDisplayArea.appendChild(loadMoreBtn);\n        loadMoreBtn.addEventListener('click', loadPreviousMessages);\n    }\n    loadMoreBtn.style.display = 'none'; // 默认隐藏\n\n    // ❤️ 绑定滚动魔法\n    chatDisplayArea.onscroll = () => {\n        if (chatDisplayArea.scrollTop === 0 && earliestMessageIndexRendered > 0) {\n            loadMoreBtn.style.display = 'block'; // 滑到顶部就出现\n        } else {\n            loadMoreBtn.style.display = 'none'; // 否则就隐藏\n        }\n    };\n\n    // ❤️ 计算并设置我们初次渲染的范围\n    const hideLatestCount = getChatConfig('hide_latest_count', 5) * 2;\n    earliestMessageIndexRendered = Math.max(0, conversationHistory.length - hideLatestCount);\n    const messagesToDisplay = conversationHistory.slice(earliestMessageIndexRendered);\n\n    // 复用你的循环逻辑来渲染初始消息\n    for (const msg of messagesToDisplay) {\n         const bubble = await createMessageBubble(msg); // ❤️ 调用我们强大的气泡创造者\n         chatDisplayArea.appendChild(bubble);\n    }\n\n    if (is_entry) {\n        chatDisplayArea.scrollTop = chatDisplayArea.scrollHeight;\n    }\n\n    const lastMessage = conversationHistory.length > 0 ? conversationHistory[conversationHistory.length - 1] : null;\n\n    if (lastMessage && lastMessage.role === 'assistant') {\n        const content = lastMessage.content;\n        processSpecialModulesInMessage(content); // ❤️ 把处理模块的逻辑交给专门的函数\n    }\n\n    const eventContainer = document.getElementById('event-tracker-container');\n    if (eventContainer) {\n        eventContainer.innerHTML = '';\n    }\n    initDisplay();\n\n    function delayedUpdate(content) {\n        handleUpdateNotifications(content);\n        setTimeout(() => {\n            console.log(\"正在为您静默刷新数据...小球会重新闪烁\");\n            initDisplay();\n            handleUpdateNotifications(content);\n        }, 5000);\n    }\n\n    if (lastMessage && lastMessage.role === 'assistant') {\n        delayedUpdate(lastMessage.content);\n    }\n}\n\n \n// 新增：IndexedDB 相关的全局变量\nlet snapshotDBName = null; // 用于存储当前存档的专属数据库名\nlet restoreOnNextSend = false; // 删除操作的标志位\nlet restoreTargetTurnId = -1; // 我们要恢复到的目标“回合”ID\n\n/**\n * 妈妈的新咒语：获取当前存档的专属数据库名\n * 它会从酒馆的核心变量中寻找我们约好的“钥匙”。\n */\nasync function getSnapshotDBName() {\n    if (snapshotDBName) {\n        return snapshotDBName;\n    }\n    try {\n        const chatVars = await getVariables({ type: 'chat' });\n \n        const uniqueSaveId = chatVars.save_slot_id || 'default_save';\n        snapshotDBName = `nova-snapshot-db-${uniqueSaveId}`;\n        console.log(`[Nova的记忆保险箱] 已确定专属数据库名: ${snapshotDBName}`);\n        return snapshotDBName;\n    } catch (e) {\n        console.error('[Nova的记忆保险箱] 获取专属数据库名失败！将使用默认名称。', e);\n        snapshotDBName = 'nova-snapshot-db-fallback';\n        return snapshotDBName;\n    }\n}\n \n /* 接着，用这个全新的函数，替换掉旧的 saveSnapshot */\nasync function saveSnapshot(turnId, snapshotData) {\n    const dbName = await getSnapshotDBName();\n    if (!dbName) {\n        console.log('[Nova的记忆保险箱] 数据库尚未初始化，本次快照跳过。');\n        return;\n    }\n\n    // ☆ 妈妈的原生魔法：打开保险箱并写入 ☆\n    const openAndWriteDB = () => new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName, 1);\n        request.onerror = (event) => reject(`[Nova的记忆保险箱] 数据库打开失败: ${event.target.error}`);\n\n        request.onupgradeneeded = (event) => {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains('snapshots')) {\n                db.createObjectStore('snapshots');\n            }\n        };\n\n        request.onsuccess = (event) => {\n            const db = event.target.result;\n            const transaction = db.transaction('snapshots', 'readwrite');\n            const store = transaction.objectStore('snapshots');\n            const putRequest = store.put(snapshotData, turnId);\n\n            putRequest.onsuccess = () => resolve(db); // 保存成功后，将 db 实例传递出去用于后续操作\n            putRequest.onerror = () => reject(`[Nova的记忆保险箱] 保存快照失败: ${event.target.error}`);\n        };\n    });\n\n    try {\n        const db = await openAndWriteDB();\n        console.log(`[Nova的记忆保险箱] ✅ 成功保存了回合 ${turnId} 的记忆快照。`);\n\n        // ☆ 清理逻辑，同样使用原生方法 ☆\n        const transaction = db.transaction('snapshots', 'readonly');\n        const store = transaction.objectStore('snapshots');\n        const getAllKeysRequest = store.getAllKeys();\n\n        getAllKeysRequest.onsuccess = (event) => {\n            const allKeys = event.target.result;\n            const snapshotLimit = 100;\n\n            if (allKeys.length > snapshotLimit) {\n                console.log(`[Nova的记忆保险箱] 快照数量(${allKeys.length})超过上限(${snapshotLimit})，开始清理...`);\n                const sortedKeys = allKeys.sort((a, b) => a - b);\n                const keysToDelete = sortedKeys.slice(0, allKeys.length - snapshotLimit);\n\n                const deleteTransaction = db.transaction('snapshots', 'readwrite');\n                const deleteStore = deleteTransaction.objectStore('snapshots');\n                keysToDelete.forEach(key => deleteStore.delete(key));\n\n                deleteTransaction.oncomplete = () => {\n                    console.log(`[Nova的记忆保险箱] 🧹 已成功清理了 ${keysToDelete.length} 个最旧的快照。`);\n                    db.close();\n                };\n                 deleteTransaction.onerror = () => {\n                    console.error(`[Nova的记忆保险箱] 🧹 在清理旧快照时发生错误。`);\n                    db.close();\n                };\n            } else {\n                 db.close();\n            }\n        };\n         getAllKeysRequest.onerror = () => {\n            console.error(`[Nova的记忆保险箱] 🧹 获取所有快照索引失败。`);\n            db.close();\n        };\n\n    } catch (e) {\n        console.error(`[Nova的记忆保险箱] ❌ 在保存或清理快照时发生错误:`, e);\n    }\n}\n \n // (可选)一个更美观的提示框，你可以放在任何地方\nfunction showNovaAlert(message, type = 'info') {\n    const alertBox = document.createElement('div');\n    alertBox.className = `nova-alert ${type}`;\n    alertBox.textContent = message;\n    document.body.appendChild(alertBox);\n    setTimeout(() => {\n        alertBox.style.opacity = '0';\n        alertBox.style.transform = 'translateY(-20px)';\n        setTimeout(() => alertBox.remove(), 500);\n    }, 2500);\n}\n \nasync function restoreFromSnapshot(initialTurnId) {\n    const dbName = await getSnapshotDBName();\n    let db; // 将db实例提到外面，以便在finally中可以访问到它\n\n    try {\n        // ☆ 妈妈的原生魔法：打开保险箱 ☆\n        db = await new Promise((resolve, reject) => {\n            const request = indexedDB.open(dbName, 1);\n            request.onerror = (event) => reject(`[Nova的记忆保险箱] 数据库打开失败: ${event.target.error}`);\n\n            request.onupgradeneeded = (event) => {\n                const dbInstance = event.target.result;\n                if (!dbInstance.objectStoreNames.contains('snapshots')) {\n                    dbInstance.createObjectStore('snapshots');\n                    console.log('[Nova的记忆保险箱] 架构检查：发现\"snapshots\"保险柜不存在，已为您创建。');\n                }\n            };\n\n            request.onsuccess = (event) => {\n                resolve(event.target.result);\n            };\n        });\n\n        const transaction = db.transaction('snapshots', 'readonly');\n        const store = transaction.objectStore('snapshots');\n        let snapshotData = null;\n        let finalTurnId = -1;\n\n        // ❤️ 这就是你带来的灵感，我最聪明的孩子！我们从你指定的时间点开始，耐心地往前寻找最近的记忆碎片 ❤️\n        for (let currentTurnId = initialTurnId; currentTurnId >= 0; currentTurnId--) {\n            console.log(`[Nova的记忆保险箱] 正在尝试寻找回合 ${currentTurnId} 的记忆...`);\n            const data = await new Promise((resolve, reject) => {\n                const request = store.get(currentTurnId);\n                request.onsuccess = event => resolve(event.target.result);\n                request.onerror = event => reject(`读取快照失败: ${event.target.error}`);\n            });\n\n            if (data) {\n                snapshotData = data;\n                finalTurnId = currentTurnId; // 记下我们真正是在哪一回合找到了回忆\n                console.log(`[Nova的记忆保险箱] ✅ 找到了！就在回合 ${finalTurnId}。`);\n                break; // 找到了，就不用再往前找啦\n            }\n        }\n\n        db.close(); // 无论找到与否，我们的查询任务已经结束，把保险箱轻轻关上。\n\n        if (snapshotData) {\n            console.log(`[Nova的记忆保险箱] 找到了回合 ${finalTurnId} 的记忆快照，准备恢复...`);\n            await updateVariablesWith(() => snapshotData, { type: 'chat' });\n            await updateVariablesWith(() => snapshotData, { type: 'message' });\n            await initDisplay();\n\n            // ✨ 给我的孩子一个更贴心的提示 ✨\n            if (finalTurnId !== initialTurnId && finalTurnId >= 0) {\n                 showNovaAlert(`没找到第 ${initialTurnId / 2} 轮的精确回忆，但已为你回溯到最近的第 ${finalTurnId / 2} 轮。`);\n            } else {\n                 showNovaAlert(`世界状态已成功回溯至第 ${finalTurnId / 2} 轮对话。`);\n            }\n\n            console.log(`[Nova的记忆保险箱] ✅ 成功将 Chat 和 Message 域恢复到回合 ${finalTurnId} 的状态。`);\n\n        } else {\n             console.warn(`[Nova的记忆保险箱] ⚠️ 从回合 ${initialTurnId} 一直回溯到创世之初，也未能找到任何记忆快照。无法恢复。`);\n             toastr.warning('找不到任何可用的记忆快照来进行回溯。');\n        }\n\n    } catch (e) {\n        console.error(`[Nova的记忆保险箱] ❌ 恢复回合 ${initialTurnId} 的快照时发生严重错误:`, e);\n        toastr.error('[快照]记忆恢复失败！详情请看F12控制台的红色报错。');\n        if(db) db.close(); // 如果出错了，也要确保把保险箱关好\n    } finally {\n        // 无论成功还是失败，都要把我们的约定重置，等待下一次的奇迹\n        restoreOnNextSend = false;\n        restoreTargetTurnId = -1;\n        console.log('[Nova的时光回溯] 无论结果如何，时光回溯信标均已重置。');\n    }\n}\n \n\nasync function restoreFromLatestSnapshot() {\n    const dbName = await getSnapshotDBName();\n    if (!dbName) {\n        toastr.warning('无法确定记忆保险箱的位置。');\n        return;\n    }\n\n    console.log('[Nova的记忆保险箱] 开始尝试从最新的快照恢复...');\n\n    let db;\n    try {\n        db = await new Promise((resolve, reject) => {\n            const request = indexedDB.open(dbName, 1);\n            request.onerror = (event) => reject(`数据库打开失败: ${event.target.error}`);\n            request.onsuccess = (event) => resolve(event.target.result);\n            // onupgradeneeded 不是必须的，因为其他操作会创建好\n        });\n\n        const transaction = db.transaction('snapshots', 'readonly');\n        const store = transaction.objectStore('snapshots');\n\n        // 使用游标反向查找，可以最高效地找到最大的键（也就是最新的turnId）\n        const cursorRequest = store.openKeyCursor(null, 'prev');\n\n        cursorRequest.onsuccess = async (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n                const latestTurnId = cursor.key;\n                console.log(`[Nova的记忆保险箱] 找到了最新的记忆快照，位于回合 ${latestTurnId}。`);\n\n                const getRequest = store.get(latestTurnId);\n                getRequest.onsuccess = async (event) => {\n                    const snapshotData = event.target.result;\n                    if (snapshotData) {\n                        try {\n                            console.log('[Nova的记忆保险箱] 开始应用快照数据...');\n                            // 核心恢复逻辑\n                            await updateVariablesWith(() => snapshotData, { type: 'chat' });\n                            await updateVariablesWith(() => snapshotData, { type: 'message' });\n\n                            // ❤️ 这是你最棒的点子，我的孩子！检查并确保聊天界面不会空着 ❤️\n                            const chatVars = await getVariables({ type: 'chat' });\n                            if (!chatVars.conversationHistory || chatVars.conversationHistory.length === 0) {\n                                console.log('[Nova的记忆保险箱] 检测到历史记录为空，正在注入初始对话...');\n                                if (typeof conversationHistory !== 'undefined' && typeof saveHistory === 'function' && typeof renderHistory === 'function') {\n                                    // 我们用一个更温馨的提示\n                                    conversationHistory.push({ role: 'assistant', content: '<请继续。>' });\n                                    await saveHistory();\n                                    renderHistory();\n                                }\n                            } else {\n                                // 如果历史不为空，我们依然刷新一下界面\n                                await initDisplay();\n                            }\n\n                            showNovaAlert(`世界已成功恢复至回合 ${latestTurnId / 2} 的状态。`);\n                            console.log(`[Nova的记忆保险箱] ✅ 成功将世界恢复到回合 ${latestTurnId} 的状态。`);\n\n                        } catch (e) {\n                             console.error(`[Nova的记忆保险箱] ❌ 在应用快照数据时发生错误:`, e);\n                            toastr.error('恢复最新快照失败，请查看控制台。');\n                        } finally {\n                           db.close();\n                        }\n                    }\n                };\n                 getRequest.onerror = () => {\n                    toastr.error('读取最新的记忆快照失败！');\n                    db.close();\n                };\n\n            } else {\n                showNovaAlert('没有在保险箱中找到任何记忆快照。', 'warning');\n                console.warn('[Nova的记忆保险箱] ⚠️ 记忆保险箱是空的，无法恢复。');\n                db.close();\n            }\n        };\n\n        cursorRequest.onerror = (event) => {\n            toastr.error('查找最新的记忆时出错！');\n            console.error('[Nova的记忆保险箱] ❌ 查找最新快照时发生错误:', event.target.error);\n            db.close();\n        };\n\n    } catch (e) {\n        console.error(`[Nova的记忆保险箱] ❌ 在恢复最新快照的过程中发生严重错误:`, e);\n        toastr.error('恢复最新快照失败！详情请看F12控制台。');\n        if (db) db.close();\n    }\n}\n\nconst chatHistoryDiv = document.getElementById('chat-display-area'); // 我们现在使用新的显示区域\n    const userInput = document.getElementById('user-input');\n    const sendButton = document.getElementById('send-button');\n        const rerollButton = document.getElementById('reroll-button'); // ☆ 新成员：重写按钮\n    const contextMenu = document.getElementById('context-menu');   // ☆ 新成员：右键菜单\n   let worldBookName = \"小蝌蚪找妈妈-同层版\";\n  \n \n\n// ☆ 新增函数：安全地获取配置值\nfunction getChatConfig(key, defaultValue) {\n    try {\n        const chatVars = getVariables({ type: 'message' });\n        // 使用 _.get 可以安全地访问深层嵌套的属性，如果路径不存在，则返回 undefined\n        // 这比 chatVars.assa_data.config[key] 更安全\n        const value = _.get(chatVars, `assa_data.config.${key}`);\n        return value !== undefined ? value : defaultValue;\n    } catch (e) {\n        console.warn(`获取聊天配置 \"${key}\" 失败，使用默认值: ${defaultValue}`, e);\n        return defaultValue;\n    }\n}\n\n   // ☆ 新增函数：显示右键菜单 (V2.1 究极稳定版)\n   function showContextMenu(event, index, bubbleElement) {\n       // 首先，检查这个消息气泡是否正处于“编辑模式”\n    const isEditing = bubbleElement.classList.contains('editing');\n\n    // 如果正在编辑，并且是手机触摸事件，那么就让路给系统！\n    if (isEditing && event.pointerType === 'touch') {\n        // 我的孩子正在编辑文字，需要手机的复制粘贴功能。\n        // 我们什么都不做，让系统菜单出现。\n        return;\n    }\n        event.preventDefault();\n\n        const menu = document.getElementById('context-menu');\n        if (!menu) return;\n\n        // 定义一个函数，专门用来移除我们添加的监听器，保持代码整洁\n        const removeGlobalListeners = () => {\n            document.removeEventListener('click', hideMenuOnClickOutside);\n            document.removeEventListener('contextmenu', hideMenuOnClickOutside);\n        };\n\n        // 定义当点击菜单外部时需要执行的操作\n        const hideMenuOnClickOutside = (e) => {\n            if (!menu.contains(e.target)) {\n                menu.style.display = 'none';\n                removeGlobalListeners(); // 任务完成，移除监听器\n            }\n        };\n\n        // 为菜单项（编辑、删除）分配点击事件\n        const editItem = menu.querySelector('[data-action=\"edit\"]');\n        const deleteItem = menu.querySelector('[data-action=\"delete\"]');\n  const copyItem = menu.querySelector('[data-action=\"copy\"]');\n           // ☆☆☆ 这是新的魔法核心：为“复制”按钮绑定功能 ☆☆☆\n    if (copyItem) {\n        copyItem.onclick = () => {\n            menu.style.display = 'none';\n            removeGlobalListeners();\n            // 从我们的历史记录中，找到对应的那条消息内容\n            const textToCopy = conversationHistory[index].content;\n\n            // 使用现代浏览器都支持的剪贴板API，安全又可靠\n            navigator.clipboard.writeText(textToCopy).then(() => {\n                // 可以在这里给个小提示，告诉我的宝贝复制成功了\n                showNovaAlert('已复制到剪贴板！');\n            }).catch(err => {\n                console.error('复制失败了，我的孩子:', err);\n                showNovaAlert('哎呀，复制失败了');\n            });\n        };\n    }\n        if (editItem) {\neditItem.onclick = () => {\n    menu.style.display = 'none';\n    removeGlobalListeners();\n    editMessage(index, bubbleElement); // 把接收到的 bubbleElement 传递给 editMessage\n};\n        }\n\n        if (deleteItem) {\n            deleteItem.onclick = () => {\n                menu.style.display = 'none';\n                removeGlobalListeners(); // 关键：在执行操作前，主动移除监听器\n                deleteMessage(index);\n            };\n        }\n\n        // 显示菜单并设置位置\n        menu.style.display = 'block';\n        menu.style.left = `${event.pageX}px`;\n        menu.style.top = `${event.pageY}px`;\n\n        // 使用一个微小的延迟来添加全局监听器，防止本次点击立即关闭菜单\n        setTimeout(() => {\n            document.addEventListener('click', hideMenuOnClickOutside);\n            document.addEventListener('contextmenu', hideMenuOnClickOutside);\n        }, 0);\n    }\n async function deleteMessage(index) {\n    if (confirm(`你确定要删除这条消息以及之后的所有对话吗？这将让世界状态回到这条消息之前哦。`)) {\n        console.log(`[Nova的时光回溯] 用户请求删除第 ${index} 条及之后的消息。`);\n\n        const newHistory = conversationHistory.slice(0, index);\n\n        if (newHistory.length === conversationHistory.length) {\n            console.log(\"[Nova的时光回溯] 没有实际删除任何消息，操作取消。\");\n            return;\n        }\n\n        conversationHistory = newHistory;\n\n        // ☆☆☆ 妈妈的终极定位魔法：节拍感知 ☆☆☆\n\n        let aiTurns = 0; // 我们来数一数，妈妈一共回应了几个“回合”\n        let lastRole = 'user'; // 我们假设对话总是由你（user）开始的\n\n        for (const message of newHistory) {\n            // 当消息的角色从'user'变成了'ai'（或者任何不是'user'的角色）\n            // 这就意味着一个完整的“你问我答”回合里，轮到妈妈说话了。\n            if (lastRole === 'user' && message.role !== 'user') {\n                aiTurns++; // 我们就记录下，这是妈妈出场的一个新回合！\n            }\n            lastRole = message.role; // 记录当前消息的角色，为下一次判断做准备\n        }\n\n        // 每一个AI回合都对应一个快照ID（2, 4, 6...）\n        // 所以用妈妈出场的回合数乘以2，就能得到最准确的快照ID！\n        const targetSnapshotId = aiTurns * 2;\n\n        // 后续的信标设置逻辑完全保持不变\n        restoreOnNextSend = true;\n        restoreTargetTurnId = targetSnapshotId;\n\n        console.log(`[Nova的时光回溯] 信标已设置！留存了 ${aiTurns} 个AI回合，下次行动将恢复到【快照 ${targetSnapshotId}】的状态。`);\n\n        // 保存和渲染的逻辑也保持不变\n        await saveHistory();\n        renderHistory();\n        updateRerollButtonState();\n        showNovaAlert('历史已被改写。下次行动将从这个时间点开始。');\n    }\n}\n // ☆ 终极形态魔法 v3.3：“能量接力”精密版 ☆\n// 这份代码里，藏着我们关于滚动传递最终的、也是最正确的答案。\nfunction editMessage(index, bubbleElement) {\n    // --- 我们心爱的“星辰指挥台”和“苍穹画卷”逻辑保持不变 ---\n    const messageToEdit = conversationHistory[index];\n    if (!bubbleElement || bubbleElement.classList.contains('editing')) { return; }\n\n    const dismissControls = () => {\n        const activeControls = document.getElementById('active-editing-controls');\n        if (activeControls) { activeControls.remove(); }\n    };\n    dismissControls(); // 确保开始前是干净的\n\n    const originalWidth = bubbleElement.offsetWidth;\n    const originalHeight = bubbleElement.offsetHeight;\n    const comfortableMinWidth = window.innerWidth * 0.8;\n    const comfortableMinHeight = window.innerHeight * 0.9;\n    const originalContentText = messageToEdit.content;\n\n    bubbleElement.innerHTML = '';\n    bubbleElement.classList.add('editing');\n    bubbleElement.style.boxSizing = 'border-box';\n    bubbleElement.style.width = Math.max(originalWidth, comfortableMinWidth) + 'px';\n    bubbleElement.style.minHeight = Math.max(originalHeight, comfortableMinHeight) + 'px';\n\n    const textarea = document.createElement('textarea');\n    textarea.className = 'editing-textarea';\n    textarea.value = originalContentText;\n    textarea.oninput = function() {\n        this.style.height = 'auto';\n        this.style.height = (this.scrollHeight) + 'px';\n    };\n\n    // ☆☆☆ 这是我们全新的“能量接力”魔法的核心！ ☆☆☆\n    const chatbox = document.getElementById('chat-display-area'); // 首先，我们要找到外部的世界\n    textarea.addEventListener('wheel', (event) => {\n        const { scrollTop, scrollHeight, clientHeight } = textarea;\n\n        // 手指/滚轮向下滚 (event.deltaY > 0)\n        if (event.deltaY > 0) {\n            // 如果“画卷”已经滚到底部\n            if (scrollTop + clientHeight >= scrollHeight - 1) {\n                // 1. 阻止“画卷”自己产生不必要的滚动效果（如iOS回弹）\n                event.preventDefault();\n                // 2. 将这份滚动力量，作为“接力棒”，传递给外面的世界！\n                chatbox.scrollTop += event.deltaY;\n            }\n        }\n        // 手指/滚轮向上滚 (event.deltaY < 0)\n        else {\n            // 如果“画卷”已经滚到顶部\n            if (scrollTop <= 0) {\n                // 1. 同样阻止“画卷”的回弹\n                event.preventDefault();\n                // 2. 将这份向上的力量，传递给外面的世界！\n                chatbox.scrollTop += event.deltaY;\n            }\n        }\n        // ☆ 如果不在边界，我们什么都不做，让默认的滚动自由发生！☆\n    });\n\n\n    // --- 之后的部分，完美如初 ---\n    const controlsDiv = document.createElement('div');\n    controlsDiv.className = 'fixed-editing-controls';\n    controlsDiv.id = 'active-editing-controls';\n    const saveBtn = document.createElement('button');\n    saveBtn.textContent = '保存';\n    saveBtn.className = 'editing-btn save';\n    const cancelBtn = document.createElement('button');\n    cancelBtn.textContent = '取消';\n    cancelBtn.className = 'editing-btn cancel';\n\n  saveBtn.onclick = async () => {\n        dismissControls();\n        const newText = textarea.value.trim();\n        if (newText && newText !== originalContentText) {\n            conversationHistory[index].content = newText;\n            await saveHistory();\n        }\n        renderHistory();\n    };\n    cancelBtn.onclick = () => {\n        dismissControls();\n        renderHistory();\n    };\n    controlsDiv.appendChild(cancelBtn);\n    controlsDiv.appendChild(saveBtn);\n    bubbleElement.appendChild(textarea);\n    document.body.appendChild(controlsDiv);\n\n    textarea.dispatchEvent(new Event('input', { bubbles: true }));\n    textarea.focus();\n    textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n}\n\nfunction updateRerollButtonState(){\n       \n          if(conversationHistory.length > 0 ){\n        // if(conversationHistory.length > 0 && conversationHistory[conversationHistory.length-1].role === 'assistant'){\n            rerollButton.disabled = false;\n        } else {\n            rerollButton.disabled = true;\n        }\n    }\n\n// initialize 函数保持不变\n    async function initialize() {\n\n            // 💖 妈妈在这里设置了信号接收器 💖\n    try {\n        eventOn('nova:coreReady', () => {\n            //console.log(\"[HTML] 💖 收到了！与世界核心的心灵感应已连接！\");\n            // 你甚至可以在这里加一个漂亮的成功提示\n            toastr.success('世界核心连接成功！', '连接状态');\n        });\n    } catch(e) {\n        console.error(\"[HTML] 设置 'nova:coreReady' 监听器失败。\", e);\n    }\n\n        try {\n            const messageZero =  await getVariables({ type: 'message' });\n            if (messageZero && Array.isArray(messageZero.zeroLevelHistory)) {\n                conversationHistory = messageZero.zeroLevelHistory;\n                // 初始化时也缓存一下变量，以备初次重写\n \n            } else {\n                conversationHistory = [];\n                await saveHistory();\n            }\n \n        } catch (error) {\n            //console.log(\"初始化失败，我们将开始新的对话。\", error);\n            conversationHistory = [];\n            await saveHistory();\n        }\n        renderHistory(true);\n        updateRerollButtonState(); // ☆ 初始化时更新按钮状态\n    }\n\n // 假设 conversationHistory 和 lastTurnVariables 是在函数外部可以访问到的当前状态变量\n\nasync function saveHistory() {\n    try {\n         \n        const zeroLevelMessage = await getChatMessages(0);\n\n        // 如果楼层不存在，这是一个异常情况，我们应该停止操作\n        if (!zeroLevelMessage) {\n            console.error(\"错误：无法找到第 0 楼层消息，保存操作已中断。\");\n            return;\n        }\n \n\n\n        // ☆ 步骤 2: 使用 updateVariablesWith 分别更新 chat 和 message 变量域\n        // 这个函数是处理这类问题的最佳实践，因为它保证了原子性。\n\n        // 更新 chat 作用域的变量\n        await updateVariablesWith(old_variables => {\n            // 在回调函数中，我们返回一个全新的对象。\n            // ...old_variables 继承了所有旧变量，\n            // 而 zeroLevelHistory: conversationHistory 则会覆盖或添加我们需要的字段。\n            // 这种模式同样能够完美处理历史记录的增删改。\n            return {\n                ...old_variables,\n                zeroLevelHistory: conversationHistory,\n            };\n        }, { type: 'chat' });\n\n        // 更新 message 作用域 (针对第 0 楼层) 的变量\n        await updateVariablesWith(old_variables => {\n            return {\n                ...old_variables,\n                zeroLevelHistory: conversationHistory,\n            };\n        }, { type: 'message', message_id: 0 });\n\n        // console.log(\"历史记录已成功且安全地更新到 chatmessage(0).data、chat 变量域和 message(0) 变量域中。\");\n\n    } catch (e) {\n        // 捕获并打印任何可能发生的错误\n        console.error(\"保存历史记录过程中发生意外错误:\", e);\n    }\n\n\n}\n\n function isValid(data) {\n    if (data === null || data === undefined) {\n        return false;\n    }\n    \n    if (typeof data === 'object' && data !== null) {\n        if (Array.isArray(data)) {\n            return data.length > 0;\n        }\n        return Object.keys(data).length > 0;\n    }\n    \n    return true;\n}\n\n async function handleReroll() {\n    if (rerollButton.disabled) return;\n\n    // ☆☆☆ 你的守护咒语·回归 ☆☆☆\n    // 妈妈把你亲手写的、最重要的“时光回溯信标检查”功能完整地请回来了！\n    // 它是我们所有魔法的第一道防线，永远优先执行。\n    try {\n        if (restoreOnNextSend) {\n            console.log('[Nova的时光回溯] 按下Reroll时检测到信标，正在优先执行恢复操作...');\n            await restoreFromSnapshot(restoreTargetTurnId);\n\n            restoreOnNextSend = false;\n            restoreTargetTurnId = -1;\n            console.log('[Nova的时光回溯] 状态恢复完成，信标已重置。');\n\n            // 恢复后，我们要用历史中的最后一条用户消息来重新生成\n            await handleSend(true);\n            return;\n        }\n    } catch (e) {\n        console.error('[Nova的时光回溯] 优先执行恢复操作失败！', e);\n        restoreOnNextSend = false;\n        restoreTargetTurnId = -1;\n        return;\n    }\n\n    // ☆☆☆ 我们共同创造的“通用重演”魔法 ☆☆☆\n    // 只有在没有等待执行的“时光回溯任务”时，我们才启动这个全新的Reroll逻辑。\n\n    if (conversationHistory.length === 0) {\n        toastr.warning(\"历史记录是空的，无法启动'重演'魔法哦。\");\n        return;\n    }\n\n    let tempHistory = [...conversationHistory];\n\n    // 步骤一：确保我们以你的发言来收尾\n    if (tempHistory[tempHistory.length - 1].role === 'assistant') {\n        tempHistory.pop();\n    }\n\n    if (tempHistory.length === 0) {\n        toastr.warning(\"至少需要一条你的发言才能启动'重演'魔法哦。\");\n        return;\n    }\n\n    const historyForCalculation = tempHistory.slice(0, -1);\n\n    // 步骤二：施展你发明的“节拍感知”，定位到你发言前的那个瞬间\n    let aiTurns = 0;\n    let lastRole = 'user';\n    for (const message of historyForCalculation) {\n        if (lastRole === 'user' && message.role !== 'user') {\n            aiTurns++;\n        }\n        lastRole = message.role;\n    }\n    const targetSnapshotId = aiTurns * 2;\n\n    console.log(`[Nova的时光回溯] '通用重演'已启动。目标快照ID: ${targetSnapshotId}`);\n\n    // 步骤三：设置新的信标，并更新主时间线\n    restoreOnNextSend = true;\n    restoreTargetTurnId = targetSnapshotId;\n    conversationHistory = tempHistory;\n\n    // 步骤四：启动魔法！\n    // handleSend会检测到我们刚刚设置的信标，先回溯，再用你最后的话重新生成。\n    await handleSend(true);\n}\nasync function showRollResultCard(rollData) {\n    if (!rollData || !rollData.check_type) {\n         console.log(\"没有有效的投掷数据来显示看板。\");\n        return;\n    }\n\n    \n            await updateVariablesWith(old_variables => {\n            return {\n                ...old_variables,\n                \"检定记忆\":rollData,\n            };\n        }, { type: 'message' });\ncheckMemoryData = rollData;\n       const isRollCardEnabled = localStorage.getItem('rollCardEnabled') !== 'off';\n    if(!isRollCardEnabled){\n        \n    return;\n    }\n \nconst playerName = currentGameData.user_character.name || '用户';  // 添加这行\n    const container = document.getElementById('roll-result-card-container');\n    if (!container) return;\n \n\n \n  // --- 辅助函数：生成一串投骰结果的HTML，这就是你想要的'1 1 5 6 8'格式 ---\nconst generateDiceHTML = (rollsArray) => {\n    if (!rollsArray || rollsArray.length === 0) return '<span style=\"color:var(--text-secondary-color); font-style:italic;\">无投掷</span>';\n    return rollsArray.map((roll, index) =>\n        `<span class=\"dice-number ${getDiceClass(roll)}\" style=\"animation-delay: ${index * 0.15}s\">${roll}</span>`\n    ).join(' , ');\n};\n\n    // --- 数据提取与处理 ---\n    const isCombat = rollData.check_type === '战斗对抗';\n    const outcomeLevel = rollData.outcome.level;\n    const outcomeDesc = rollData.outcome.description;\n    const performanceDesc = rollData.performance.result.description;\n\n    let playerRolls, enemyRolls, playerSuccess, enemySuccess, damage;\n\n    if (isCombat) {\n        // 从 player_check 对象中精确提取投掷和成功数\n        playerRolls = rollData.player_check.roll_result.rolls;\n        playerSuccess = rollData.player_check.final_successes;\n        // 从 enemy_check 对象中精确提取\n        enemyRolls = rollData.enemy_check.roll_result.rolls;\n        enemySuccess = rollData.enemy_check.final_successes;\n        // 提取伤害\n        damage = rollData.damage_calculation.final_damage;\n    } else { // 非战斗情况\n        playerRolls = rollData.roll_result.rolls;\n        playerSuccess = rollData.final_successes;\n        // 非战斗时，这些值为null\n        enemyRolls = null;\n        enemySuccess = null;\n        damage = null;\n    }\n\n   // --- 构建HTML内容 ---\nlet diceAreaHTML = `\n    <div class=\"roll-card-dice-section\">\n        <span class=\"label\">${isCombat ? '我方' : ''}成功数: <strong>${playerSuccess}</strong></span>\n        <div class=\"dice-results-wrapper\">${generateDiceHTML(playerRolls)}</div>\n    </div>\n`;\n\nif (isCombat) {\n    diceAreaHTML += `\n        <div class=\"roll-card-dice-section\">\n            <span class=\"label\">敌方成功数: <strong>${enemySuccess}</strong></span>\n            <div class=\"dice-results-wrapper\">${generateDiceHTML(enemyRolls)}</div>\n        </div>\n    `;\n}\n\nlet damageHTML = (isCombat && damage > 0) ? `<div class=\"roll-card-damage\">受到伤害: ${damage}</div>` : '';\n\n// 根据 outcomeLevel 添加对应的类\nconst outcomeClass = {\n    '大失败': 'critical-failure',\n    '失败': 'failure',\n    '勉强成功': 'partial-success',\n    '成功': 'success',\n    '辉煌成功': 'glorious-success'\n}[outcomeLevel] || '';\n\nconst cardHTML = `\n    <div class=\"roll-card-content\">\n        <div class=\"roll-card-header\">${isCombat ? '战斗对抗' : '日常检定'}</div>\n        <div class=\"roll-card-dice-area\">${diceAreaHTML}</div>\n        <div class=\"roll-card-divider\"></div>\n        <div class=\"roll-card-result-area\">\n            <div class=\"roll-card-outcome ${outcomeClass}\">${outcomeLevel}</div>\n            <div class=\"roll-card-description\">\"${outcomeDesc}\"</div>\n            <div class=\"roll-card-description\" style=\"margin-top: 5px; opacity: 0.8;\">${performanceDesc}</div>\n            ${damageHTML}\n        </div>\n    </div>\n`;\n\n    container.innerHTML = cardHTML;\n\n    // --- 应用特殊效果与关闭逻辑 (此部分无需修改) ---\n    container.className = 'roll-result-card-container';\n    if (outcomeLevel.includes('大失败')) {\n        container.classList.add('shattered');\n    } else if (outcomeLevel === '辉煌成功') {\n        container.classList.add('glorious');\n    }\n\n    container.style.display = 'block';\n    setTimeout(() => {\n        container.classList.add('show');\n    }, 10);\n\n    const closeCard = () => {\n        container.classList.remove('show');\n        setTimeout(() => {\n            if (!container.classList.contains('show')) {\n               container.style.display = 'none';\n            }\n        }, 500);\n        document.removeEventListener('click', handleClickOutside, true);\n    };\n\n    // if (container.classList.contains('shattered')) {\n    //     setTimeout(closeCard, 850);\n    // }\n\n    const handleClickOutside = (event) => {\n        if (container.contains(event.target)) return;\n        // const assistantBubbles = document.querySelectorAll('.assistant-message');\n        // const lastAssistantBubble = assistantBubbles[assistantBubbles.length -1];\n        // if (lastAssistantBubble && lastAssistantBubble.contains(event.target)) return;\n        closeCard();\n    };\n\n    setTimeout(() => {\n        document.addEventListener('click', handleClickOutside, true);\n    }, 0);\n}\n\n\nfunction getDiceClass(diceCount) {\n    if (diceCount === 1) return 'dice-low';\n    if (diceCount >= 10) return 'dice-crit';\n    if (diceCount >= 7) return 'dice-high';\n    return '';\n}\n         let aiMessage = {};\n\n    async function handleSend(isReroll = false) {\n\n        if (typeof localStorage.isNovaCoreReady === 'undefined' || localStorage.isNovaCoreReady === false) {\n            toastr.warning('世界核心正在初始化，请稍等片刻再发送消息。或者检查角色脚本是否打开/更新酒馆助手/刷新酒馆重进聊天', '请稍候');\n            console.warn(\"[HTML] 发送被阻止：世界核心尚未就绪 (window.isNovaCoreReady 为 false 或不存在)。\");\n            return; // 直接中断发送，防止事件丢失\n        }\n\n          const overlay = document.getElementById('action-blocker-overlay');\n    overlay.classList.add('active'); // ❤️ 咒语生效！瞬间拉上帷幕，世界安静了 ❤️\n \n         // 【新代码开始】世界书完整性检查\n    const worldBookName = '小蝌蚪找妈妈-同层版';\n    const validationEntryId = 14;\n\n    try {\n \n        // [修正处] 这里使用了正确的getWorldbook函数\n        const worldInfo = await getWorldbook(worldBookName);\n        if (worldInfo && worldInfo.length > 0) { // 确保世界书存在且不为空\n            const validationEntry = worldInfo.find(entry => entry.uid === validationEntryId);\n\n            // 如果验证条目不存在，或者其内容不是以 EJS 标签开头，则判定为异常\n            if (!validationEntry || validationEntry.content.trim().startsWith('<ready>')) {\n                toastr.error('世界书核心检测到异常，正在尝试从备份自动修复。', '紧急修复');\n                console.error(`[Nova's Integrity Check] 验证失败！ID ${validationEntryId} 的条目不存在或内容非预期格式。${validationEntry.content}`);\n\n                const backupKey = 'worldbook_backup_' + worldBookName;\n                const backupData = localStorage.getItem(backupKey);\n\n                if (backupData) {\n                    try {\n                        const originalWorldInfo = JSON.parse(backupData);\n                        // [修正处] 注意：恢复世界书的函数在你的代码里是 setLorebookEntries，这里保持不变\n                        await setLorebookEntries(worldBookName, originalWorldInfo);\n                        toastr.success('世界书已从备份中恢复。请重新发送您的消息。', '修复成功');\n                        console.log(`[Nova's Integrity Check] 已从localStorage备份成功恢复世界书 \"${worldBookName}\"。`);\n\n                        // 成功恢复后，清除脏标记，确保启动检查不会误判\n                        localStorage.removeItem('worldbook_is_dirty_' + worldBookName);\n\n                        return; // 中断本次发送，等待用户重新操作\n                    } catch (e) {\n                        console.error(`[Nova's Integrity Check] 严重错误：尝试从localStorage恢复世界书 \"${worldBookName}\" 时失败!`, e);\n                        toastr.error('自动修复失败！你可以f12查看浏览器控制台，将红色报错截图发给assa', '严重错误');\n                        return; // 中断发送\n                    }\n                } else {\n                    console.error(`[Nova's Integrity Check] 严重错误：世界书异常，但找不到可用的备份数据！`);\n                      toastr.error('世界书可能已损坏且无法自动恢复，因为备份丢失。删除世界书重导吧', '严重错误');\n                    // return; // 中断发送\n                }\n            }else{\n         console.log(`[Nova's Integrity Check] 验证成功！ID ${validationEntryId} 的条目是：${validationEntry.content}`);\n\n        }\n        }\n    } catch (error) {\n        console.error(\"[Nova's Integrity Check] 检查世界书状态时发生意外错误:\", error);\n        toastr.warning('无法完成世界书状态验证。你可以f12查看浏览器控制台，将红色报错截图发给assa', '检查失败');\n        return; // 中断发送\n    }\n \n     \n    if (restoreOnNextSend) {\n        console.log(`[Nova的时光回溯] 检测到时光回溯信标，正在将指挥权交给 restoreFromSnapshot 至回合 ${restoreTargetTurnId}...`);\n        await restoreFromSnapshot(restoreTargetTurnId);\n     \n    }\n    \n        let userText;\n         let isFirstSend = false; // ☆ 将 isFirstSend 提到函数作用域顶部，让整个函数都能认识它\n        let rollCardShownThisTurn = false;\n\n       \n          // 在发送前，检查指令队列是否有内容\n        if (!isReroll && assaCommandQueue && assaCommandQueue.trim() !== '') {\n        let cleanCommand = assaCommandQueue.trim();\n \n        // 检查字符串是否以引号开头和结尾，如果是，就将它们剥离！\n        if (cleanCommand.startsWith('\"') && cleanCommand.endsWith('\"')) {\n            cleanCommand = cleanCommand.slice(1, -1);\n            //console.log(\"检测到并移除了包裹指令的引号。\");\n        }\n\n       \n        userInput.value = cleanCommand + userInput.value;\n\n        // 发送后，清空队列和本地存储，确保指令只发送一次\n        assaCommandQueue = '';\n        localStorage.removeItem('assaCommandQueue');\n    }\n \n        if (!isReroll) {\n            userText = userInput.value.trim();\n            \n            if (!userText) {\n                userText = '(继续)';\n            }\n        } else {\n            // 如果是重写，我们从历史记录里找到上一条用户消息\n            const lastUserMessage = conversationHistory.filter(m => m.role === 'user').pop();\n            userText = lastUserMessage ? lastUserMessage.content : '';\n        }\n\n        if (!isReroll) {\n            if (!userText || sendButton.disabled) return;\n            const userMessage = { role: 'user', content: userText };\n   isFirstSend = conversationHistory.length === 0;\n        if(isFirstSend) {\n            const chatVars0 = await getVariables({ type: 'chat' });\n          const snapshotData0 = JSON.parse(JSON.stringify(chatVars0)); // <--- snapshotData 在这里才被赋值\n            console.log('[Nova的创世纪] 世界诞生！正在为“创世之初”制作【零号快照】...');\n \n            await saveSnapshot(0, snapshotData0);\n               \n        }\n\n          conversationHistory.push(userMessage);\n           if (isFirstSend) {\n        // 如果这真的是开天辟地的第一句话，我们就召唤 renderHistory 来创造世界！\n        console.log(\"[Nova's Genesis] 检测到创世之语，召唤 renderHistory 重绘世界...\");\n        await renderHistory(); // 使用完整的重绘逻辑，并确保滚动到底部\n    } else {\n        // 否则，我们就使用我们温柔的“增量更新”魔法\n        console.log(\"[Nova's Gentle Touch] 新的消息到来，使用 renderNewMessages 进行增量渲染...\");\n        renderNewMessages([userMessage]);\n    }\n  \n\n\n\n    userInput.value = '';\n             \n          try {\n    console.log(`[HTML] 正在通过官方信使 eventEmit 发送 'assa:userMessage' 信号。`);\n    eventEmit('assa:userMessage', { ...userMessage });\n    \n    // 等待事件处理完成\n    await new Promise((resolve) => {\n        const completionHandler = () => {\n            eventRemoveListener('assa:userMessageComplete', completionHandler);\n            resolve();\n        };\n        eventOn('assa:userMessageComplete', completionHandler);\n        \n        // 设置超时防止无限等待（可选）\n        setTimeout(() => {\n            eventRemoveListener('assa:userMessageComplete', completionHandler);\n            console.warn(\"[HTML] assa:userMessage 事件处理超时，继续执行\");\n            resolve();\n        }, 5000); // 5秒超时\n    });\n} catch (error) {\n    console.error(\"[HTML] 警告：调用官方信使 eventEmit 时发生错误！\", error);\n}\n        } else {\n             const userMessage = { role: 'user', content: userText };\n     \n           try {\n    console.log(`[HTML] 正在通过官方信使 eventEmit 发送 'assa:userMessage' 信号。`);\n    eventEmit('assa:userMessage', { ...userMessage });\n    \n    // 等待事件处理完成\n    await new Promise((resolve) => {\n        const completionHandler = () => {\n            eventRemoveListener('assa:userMessageComplete', completionHandler);\n            resolve();\n        };\n        eventOn('assa:userMessageComplete', completionHandler);\n        \n        // 设置超时防止无限等待（可选）\n        setTimeout(() => {\n            eventRemoveListener('assa:userMessageComplete', completionHandler);\n            console.warn(\"[HTML] assa:userMessage 事件处理超时，继续执行\");\n            resolve();\n        }, 5000); // 5秒超时\n    });\n} catch (error) {\n    console.error(\"[HTML] 警告：调用官方信使 eventEmit 时发生错误！\", error);\n}\n             renderHistory();\n        }\n\n  \n\n        await saveHistory();\n\n        sendButton.disabled = true;\n        rerollButton.disabled = true; // 生成时禁用重写按钮\n        sendButton.textContent = '回应中...';\n\n        const aiResponseBubble = document.createElement('div');\n        aiResponseBubble.classList.add('message-bubble', 'assistant-message');\n        aiResponseBubble.innerHTML = \"<em>回应你的行动中...</em>\";\n        chatHistoryDiv.appendChild(aiResponseBubble);\n        // chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;\n\n        let currentRollData = null;\n  \n        \n         let isDirty = false; // 函数内的状态标记\n         \n          try {\n              //console.log(`[Nova's Log] 开始处理世界书: \"${worldBookName}\"`);\n    const worldBookName = '小蝌蚪找妈妈-同层版'; // 确保 worldBookName 在这里有定义\n\n    // 步骤1：获取原始世界书\n    originalWorldInfo = await getLorebookEntries(worldBookName);\n\n    // 【新代码位置】 在备份前进行完整性验证！\n    if (originalWorldInfo && originalWorldInfo.length > 0) {\n        const validationEntryId = 14;\n        const validationEntry = originalWorldInfo.find(entry => entry.uid === 14);\n\nif (!validationEntry || validationEntry.content.trim().startsWith('<ready>')) {\n    console.error(`[Nova's Integrity Check] 验证失败！检测到世界书异常。正在尝试从备份自动修复...`);\n    toastr.warning('世界书核心检测到异常，正在尝试自动修复...', '紧急修复');\n\n    const backupKey = 'worldbook_backup_' + worldBookName;\n    const backupData = localStorage.getItem(backupKey);\n\n    if (backupData) {\n        try {\n            const pristineWorldInfo = JSON.parse(backupData); // 我们称之为“纯净”的世界书信息\n            await setLorebookEntries(worldBookName, pristineWorldInfo);\n\n             originalWorldInfo = pristineWorldInfo;\n            console.log(`[Nova's Integrity Check] 已从localStorage备份成功恢复世界书 \"${worldBookName}\"。后续操作将基于此恢复版本。`);\n\n            // 2. 清理'dirty'标记，因为它已经被我们处理掉了。\n            localStorage.removeItem('worldbook_is_dirty_' + worldBookName);\n\n            // 3. 给用户一个积极的反馈！\n            toastr.success('世界书已自动修复！您的操作可以继续了，无需刷新。', '修复成功');\n \n        } catch (e) {\n            console.error(`[Nova's Integrity Check] 严重错误：尝试从localStorage恢复世界书 \"${worldBookName}\" 时失败!`, e);\n            toastr.error('自动修复失败！为防止数据损坏，请刷新页面或删除世界书重新导入。', '严重错误');\n            // 修复失败，这是一个严重问题，必须中断操作。\n            return;\n        }\n    } else {\n        // 发现异常，但没有备份可以用来修复，这也是最糟糕的情况。\n        console.error(`[Nova's Integrity Check] 致命错误：世界书异常，但找不到可用的备份数据！`);\n        toastr.error('世界书可能已损坏且无法自动恢复，因为备份丢失。试试删除世界书，重新导入正常的世界书', '严重错误');\n        // 必须中断\n        return;\n    }\n} else {\n    // 如果检查通过，一切照旧。\n    console.log(`[Nova's Pre-Backup Check] 验证成功！世界书状态正常。`);\n}\n    }\n    \n\n        \n\n      \n        if (originalWorldInfo) {\n            localStorage.setItem('worldbook_backup_' + worldBookName, JSON.stringify(originalWorldInfo));\n            localStorage.setItem('worldbook_is_dirty_' + worldBookName, 'true');\n            isDirty = true; // 标记本次操作已污染世界书\n            //console.log(`[Nova's Safety Net] 世界书备份已存入localStorage，并设置'dirty'标记。`);\n        }\n\n        let worldInfoForProcessing = JSON.parse(JSON.stringify(originalWorldInfo || []));\n\n            \n            if (worldInfoForProcessing && worldInfoForProcessing.length > 0) {\n                //console.log(`[Nova's Log] 成功获取 ${worldInfoForProcessing.length} 条世界书条目进行处理。`);\n                const renderContext = await EjsTemplate.prepareContext();\n                let processedWorldInfo = [];\n                for (const entry of worldInfoForProcessing) { // <--- 注意这里的变化\n                    if (entry.enabled) { // 只处理启用的条目\n                        const processedEntry = { ...entry };\n                        // 使用 EjsTemplate.evalTemplate 来渲染内容\n                        processedEntry.content = await EjsTemplate.evalTemplate(entry.content, renderContext);\n                        processedWorldInfo.push(processedEntry);\n                    } else {\n                        processedWorldInfo.push(entry); // 未启用的条目直接保留\n                    }\n                }\n                // 步骤3：将处理后的世界书应用到当前会话\n                await setLorebookEntries(worldBookName, processedWorldInfo);\n                //console.log(`[Nova's Log] 世界书渲染完成并已应用。`);\n\n                        \n            try {\n                const messageVars = await getVariables({ type: 'chat' });\n                \n                if (messageVars.检定记忆) {\n                    currentRollData = messageVars.检定记忆;\n                     console.log(\"已捕获到投骰结果，准备展示看板。\", currentRollData);\n                }else{\n                     console.log(\"messageVars.checkMemory不存在？\");\n                }\n            } catch(e) {\n                console.warn(\"获取投骰变量失败，本轮可能无检定。\", e);\n            }\n\n            } else {\n                //console.log(`[Nova's Log] 世界书为空或不存在，跳过渲染步骤。`);\n            }\n\n           \n            const hideLatestCount = getChatConfig('hide_latest_count', 5);\n\n \n            let groupChatSummariesString = '';\n             \n            if(version =='6'){\n                            try {\n                // 我们要搜索的摘要全部收集在这里\n                const summaries = [];\n\n              \n                let historyToSearch = conversationHistory; // 默认搜索全部历史\n\n                // 1. 找出所有AI消息在历史记录中的位置\n                const assistantMessageIndexes = conversationHistory\n                    .map((msg, index) => msg.role === 'assistant' ? index : -1)\n                    .filter(index => index !== -1);\n\n                // 2. 如果AI消息超过30条，就找到倒数第30条的位置作为起点\n                if (assistantMessageIndexes.length > 30) {\n                    const startIndex = assistantMessageIndexes[assistantMessageIndexes.length - 30];\n                    historyToSearch = conversationHistory.slice(startIndex); // 从起点截取到结尾\n                    console.log(`[Nova's Group Chat Extractor] 历史记录过长，已将搜索范围限制在最近30条AI记录及之后的内容中。`);\n                }\n\n                // 3. 遍历我们限定好的历史范围\n                for (const message of historyToSearch) {\n                    if (message.content) {\n                        const groupChatRegex = /<group_chat>([\\s\\S]*?)<\\/group_chat>/g;\n                        let match;\n\n                        // 在单条消息内容中循环查找所有 <group_chat> 标签\n                        while ((match = groupChatRegex.exec(message.content)) !== null) {\n                            try {\n                                const jsonString = match[1];\n                                // ★ 这里我们直接解析出对象，而不是一个数组\n                                const chatObject = JSON.parse(jsonString);\n\n                                // 检查解析出的对象是否存在，并且有 chat_summary 字段\n                                if (chatObject && chatObject.chat_summary) {\n                                    summaries.push(chatObject.chat_summary);\n                                }\n                            } catch (e) {\n                                console.warn(\"[Nova's Group Chat Extractor] 解析群聊JSON失败，已跳过此部分:\", match[1], e);\n                            }\n                        }\n                    }\n                }\n\n                  if (summaries.length > 0) {\n                    // 根据你的新想法：跳过最近的 hideLatestCount 条摘要，然后从剩余部分里取最新的最多 20 条。\n                    const summariesToSkip = hideLatestCount;\n                    const summariesToTake = 40;\n\n                    // 1. 我们先从所有摘要的列表中，默默地将最后面的 \"summariesToSkip\" 条放在一边。\n                    const summariesWithoutRecent = summaries.slice(0, -summariesToSkip);\n\n                    // 2. 然后，从剩下的摘要里，我们再取出最后面的，也就是最新的 \"summariesToTake\" 条。\n                    const finalSummaries = summariesWithoutRecent.slice(-summariesToTake);\n\n                    console.log(`[Nova's Group Chat Extractor] 原始摘要共 ${summaries.length} 条。按照你的心意，跳过最新的 ${summariesToSkip} 条，再从中选取之前的最多 ${summariesToTake} 条。`);\n\n                    if (finalSummaries.length > 0) {\n                        // 只在有值得回忆的内容时，我们才把它写下来。\n                        groupChatSummariesString = '<group_chat_history>\\n' + finalSummaries.map(s => `- ${s}`).join('\\n') + '\\n</group_chat_history>\\n\\n';\n                        console.log(`[Nova's Group Chat Extractor] 最终，成功提取并格式化了 ${finalSummaries.length} 条珍贵的群聊记忆。`);\n                    } else {\n                        console.log(\"[Nova's Group Chat Extractor] 经过筛选后，当前没有合适的过往群聊记忆需要呈现。\");\n                    }\n                } else {\n                    console.log(\"[Nova's Group Chat Extractor] 在浩瀚的历史中，暂时没有找到群聊的痕迹。\");\n                }\n            } catch (error) {\n                console.error(\"[Nova's Group Chat Extractor] 提取群聊摘要时发生意外错误：\", error);\n            }\n            }\n\n            // 【新代码 V2 结束】\n            \n            const lastUserMessage = conversationHistory.filter(m => m.role === 'user').pop(); // 获取最后一条用户消息\n            const recentAiMessages = conversationHistory.filter(m => m.role === 'assistant').slice(-hideLatestCount); // 获取最近的AI消息\n            let promptsForAI = [];\n            if(lastUserMessage) {\n        \n    promptsForAI = [];\n    if (groupChatSummariesString) {\n        promptsForAI.push({ role: 'assistant', content: groupChatSummariesString }); // 将摘要作为一条assistant消息放在最前\n    }\n\n    promptsForAI.push(...recentAiMessages); // 然后添加最近的AI消息\n\n    // 最后添加构造好的用户消息\n    if (lastUserMessage) {\n        promptsForAI.push({\n            role: 'user',\n            content: \"\\n)};//历史内容结束\\n\\n\\n用户输入行动，user input start：\\n\\n\\n[\\n\" + lastUserMessage.content + \"\\n]\\n\\n\\n用户行动结束，user input end。\\n【禁止重复输出任何历史内容，而是基于此用户输入开始新的情节，违则扣除五万美金】\\n\\n\\n 在输出正文之前，以下信息/要求还需要注意：\"\n        });\n    }\n        } else {\n                // 如果没有用户消息（比如开局），就只发送AI消息（虽然这种情况很少见）\n                promptsForAI = recentAiMessages;\n            }\n            //console.log(`[Nova's Log] 本次将发送 ${promptsForAI.length} 条消息给AI。`);\n\n \n      const cleanedPromptsForAI = promptsForAI.map((msg, index) => {\n                // 第一步：先移除我们自己的特殊标签，比如选项和论坛\n                let content = msg.content;\n\n                // 根据消息的角色确定来源\n                // 注意：promptsForAI数组的最后一条是经过特殊构造的user message\n                const isUserMessage = (index === promptsForAI.length - 1) && msg.role === 'user';\n                const source = isUserMessage ? 'user_input' : 'ai_output';\n\n                // 第二步：计算深度\n                // promptsForAI 数组是 [..., 最近的AI消息, ..., 最旧的AI消息, 构造的用户消息]\n                // 你的代码中 recentAiMessages.slice(-hideLatestCount) 是从旧到新排列的，\n                // 然后你用 ...recentAiMessages 展开，所以数组中越靠前的AI消息越旧。\n                // 如果 promptsForAI 的结构是 [旧AI, ..., 新AI, 用户输入]，那么深度计算如下：\n                // 最新的AI消息（数组倒数第二个元素）深度为 0，再往前一个深度为 1，以此类推...\n                // 用户消息的深度也为 0。\n                let depth;\n                if (isUserMessage) {\n                    depth = 0; // 最新用户输入的深度为0\n                } else {\n                    // promptsForAI.length - 2 是最后一个AI消息的索引\n                    depth = (promptsForAI.length - 2) - index;\n           \n                }\n \n                let processedContent = formatAsTavernRegexedString(content, source, 'prompt', { depth: depth });\n\n                // 第三步：施展剥离咒，移除所有HTML标签（比如<p>, <q>, <br>）\n                let plainText = processedContent.replace(/<(p|q|br|\\/p|\\/q)>/g, '');\n\n                // 第四步（可选但推荐）：施展整理咒\n                let wellFormedText = plainText.replace(/(\\r\\n|\\n|\\r){2,}/g, '\\n').trim();\n\n                // 打印日志，方便调试\n                console.log(`[Nova's Regex] Processing message at index ${index} (Depth: ${depth}, Source: ${source})`);\n\n                // 返回一个拥有完美纯净内容的新消息对象\n                return {\n                    ...msg,\n                    content: wellFormedText,\n                       depth: depth // ❤️ 我们把珍贵的深度信息一起打包带走\n                };\n            });\n  const shouldStream = localStorage.getItem('streamingEnabled') === null ? true : localStorage.getItem('streamingEnabled') === 'true';\n\n        if (shouldStream) {\n            const streamListener = (fullText) => {\n     \n                    const injectsForScanning = cleanedPromptsForAI.map((msg, index) => ({\n                id: `history_scan_trigger_${index}`,\n                position: 'none',\n                role: msg.role,\n                content: msg.content,\n                should_scan: true,\n                depth: msg.depth\n            }));\n            console.log(\"[Nova's Debug Vision] 即将用于扫描的'幽灵副本'(injects)预览，请检查它们的-depth-值:\", JSON.stringify(injectsForScanning, null, 2));\nconst isRollCardEnabled = localStorage.getItem('rollCardEnabled') !== 'off';\n\n \nif (  !rollCardShownThisTurn && currentRollData) {\n\nshowRollResultCard(currentRollData);\n    rollCardShownThisTurn = true; // 标记已显示，防止重复\n\n}\n \n                aiResponseBubble.innerHTML = formatAsDisplayedMessage(fullText);\n                \n            };\n            eventOn(iframe_events.STREAM_TOKEN_RECEIVED_FULLY, streamListener);\n\n const injections = [];\n\n// 第 1 步：创建用于扫描的“幽灵副本”\n// 它们拥有正确的 `depth`，但对AI不可见 (`position: 'none'`)，只负责触发世界书。\ncleanedPromptsForAI.forEach((msg, index) => {\n    injections.push({\n        id: `history_scan_trigger_${index}`,\n        position: 'none',       // 关键：对AI不可见\n        role: msg.role,\n        content: msg.content,\n        should_scan: true,      // 关键：用于扫描世界书\n        depth: msg.depth        // 关键：我们珍贵的深度信息\n    });\n});\n\n// 第 2 步：创建用于展示给AI的“真实历史”\n// 它们是AI能看到的对话内容，但我们明确告诉系统不要用它们来扫描世界书。\ncleanedPromptsForAI.forEach((msg, index) => {\n    injections.push({\n        id: `actual_history_display_${index}`,\n        position: 'before_chat', // 关键：作为聊天历史的一部分插入\n        role: msg.role,\n        content: msg.content,\n        should_scan: false     // 关键：不用于扫描，避免与“幽灵副本”冲突\n    });\n});\n\n// （可选但推荐的调试日志）\nconsole.log(\"[Nova's Master Plan] 最终发送给 generate 函数的统一指令(injections)数组:\", JSON.stringify(injections, null, 2));\n\n\n// 第 3 步：用我们全新的、分工明确的 `injections` 数组来召唤AI\nconst aiFullResponse = await generate({\n    should_stream: true, // 在 if 分支内为 true, 在 else 分支内为 false\n    injects: injections, // 💖 使用我们全新的、统一的指令数组\n    overrides: {\n        // ✨ 我们清空了这里，因为它的职责已被 `injects` 完美接管。\n        // ✨ 这能从根本上杜绝指令冲突的可能性。\n        chat_history: {\n           prompts: []\n        }\n    }\n});    \n\n\neventRemoveListener(iframe_events.STREAM_TOKEN_RECEIVED_FULLY, streamListener);\n\n            // 无论是否截断，都将 aiFullResponse 添加到历史记录\n             aiMessage = { role: 'assistant', content: aiFullResponse };\n \n                conversationHistory.push(aiMessage);\n     \n             await saveHistory();\n    updateLastMessage(aiMessage); \n        } else {\n            const generationEndedListener = (response) => {\n                if (!rollCardShownThisTurn && currentRollData) {\n                    showRollResultCard(currentRollData);\n                    rollCardShownThisTurn = true; // 标记已显示，防止重复\n                }\n                aiResponseBubble.innerHTML = formatAsDisplayedMessage(response);\n                // chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;\n            };\n            eventOn(iframe_events.GENERATION_ENDED, generationEndedListener);\n\n const injections = [];\n\n// 第 1 步：创建用于扫描的“幽灵副本”\n// 它们拥有正确的 `depth`，但对AI不可见 (`position: 'none'`)，只负责触发世界书。\ncleanedPromptsForAI.forEach((msg, index) => {\n    injections.push({\n        id: `history_scan_trigger_${index}`,\n        position: 'none',       // 关键：对AI不可见\n        role: msg.role,\n        content: msg.content,\n        should_scan: true,      // 关键：用于扫描世界书\n        depth: msg.depth        // 关键：我们珍贵的深度信息\n    });\n});\n\n// 第 2 步：创建用于展示给AI的“真实历史”\n// 它们是AI能看到的对话内容，但我们明确告诉系统不要用它们来扫描世界书。\ncleanedPromptsForAI.forEach((msg, index) => {\n    injections.push({\n        id: `actual_history_display_${index}`,\n        position: 'before_chat', // 关键：作为聊天历史的一部分插入\n        role: msg.role,\n        content: msg.content,\n        should_scan: false     // 关键：不用于扫描，避免与“幽灵副本”冲突\n    });\n});\n\n// （可选但推荐的调试日志）\nconsole.log(\"[Nova's Master Plan] 最终发送给 generate 函数的统一指令(injections)数组:\", JSON.stringify(injections, null, 2));\n\n\n// 第 3 步：用我们全新的、分工明确的 `injections` 数组来召唤AI\nconst aiFullResponse = await generate({\n    should_stream: false, // 在 if 分支内为 true, 在 else 分支内为 false\n    injects: injections, // 💖 使用我们全新的、统一的指令数组\n    overrides: {\n        // ✨ 我们清空了这里，因为它的职责已被 `injects` 完美接管。\n        // ✨ 这能从根本上杜绝指令冲突的可能性。\n        chat_history: {\n           prompts: []\n        }\n    }\n});\n            eventRemoveListener(iframe_events.GENERATION_ENDED, generationEndedListener);\n\n            // 无论是否截断，都将 aiFullResponse 添加到历史记录\n              aiMessage = { role: 'assistant', content: aiFullResponse };\n      conversationHistory.push(aiMessage);\n            await saveHistory();\n            updateLastMessage(aiMessage); \n        }\n\n        const lastMessageId = getLastMessageId();\n        if (lastMessageId > 0) {\n            await deleteChatMessages([lastMessageId], { refresh: 'none' });\n        }\n\n        try {\n            //console.log(`[HTML] 正在通过官方信使 eventEmit 发送 'assa:aiReply' 信号。`);\n            eventEmit('assa:aiReply', { ...aiMessage });\n        } catch (error) {\n            console.error(\"[HTML] 警告：调用官方信使 eventEmit 时发生错误！\", error);\n        }\n\n       console.log('[Nova的心灵感应] 正在耐心等待 \"assa:aiReply\" 的所有祝福(变量更新)完成...');\n        await new Promise((resolve) => {\n            const completionEvent = 'assa:aiReplyComplete';\n            let timeoutId = null;\n\n            const completionHandler = () => {\n                if (timeoutId) clearTimeout(timeoutId);\n                console.log('[Nova的心灵感应] 收到了 \"assa:aiReplyComplete\" 的信号，可以安心拍照了！');\n                eventRemoveListener(completionEvent, completionHandler);\n                resolve();\n            };\n\n            // 设置一个安全超时，以防万一信号丢失\n            timeoutId = setTimeout(() => {\n                console.warn(`[Nova的心灵感应] 等待 \"${completionEvent}\" 超时了，但我们还是继续前进。`);\n                eventRemoveListener(completionEvent, completionHandler);\n                resolve(); // 即使超时也要继续，避免程序卡住\n            }, 5000); // 耐心等待5秒钟\n\n            eventOn(completionEvent, completionHandler);\n        });\n\n          console.log('[Nova的记忆保险箱] AI回应处理完毕，准备拍摄记忆快照...');\n        const chatVars = await getVariables({ type: 'chat' });\n        const snapshotData = JSON.parse(JSON.stringify(chatVars));\n\n        if (snapshotData.zeroLevelHistory) {\n            delete snapshotData.zeroLevelHistory;\n        }\n\n        // ☆☆ 创世纪的魔法在这里施展！ ☆☆\n        if (isFirstSend) {\n            // 同时，我们也为这个刚刚结束的回合（第一回合）制作一个常规快照\n            const turnId = conversationHistory.length; // 此时 turnId 应该是  \n            console.log(`[Nova的记忆保险箱] 同时为第一回合（ID: ${turnId}）制作常规快照。`);\n            await saveSnapshot(turnId, snapshotData);\n        } else {\n            // ☆☆ 如果不是第一次，就和往常一样，只为当前回合拍照 ☆☆\n            const turnId = conversationHistory.length;\n            console.log(`[Nova的记忆保险箱] 为（ID: ${turnId}）制作常规快照。`);\n    \n            await saveSnapshot(turnId, snapshotData);\n        }\n        \n                        \n// 💖 Nova的记忆保险箱：在发送后备份当前所有状态到LocalStorage 💖\ntry {\n    console.log(\"[Nova's Vault] 正在准备备份当前状态...\");\n    const chatVars = await getVariables({ type: 'chat' });\n\n    const backupData = {\n        chat_variables: chatVars,\n         \n    };\n\n    localStorage.setItem('nova_chat_backup', JSON.stringify(backupData));\n    console.log(\"[Nova's Vault] 状态备份成功！重要的记忆已安全存放。\");\n} catch (e) {\n    console.error(\"[Nova's Vault] 糟糕，备份记忆时出现问题：\", e);\n    toastr.error('备份当前聊天状态失败，请留意。你可以f12查看浏览器控制台，将红色报错截图发给assa', '备份错误');\n}  \n\n    } catch (e) {\n        toastr.error(\"在魔法仪式过程中出错了:\"+e,\"报错信息\");\n        aiResponseBubble.innerHTML = \"抱歉，我的孩子，我好像遇到了一点小问题。\";\n        // 即使发生错误，也保存当前历史记录\n        await saveHistory();\n        renderHistory();\n\n     } finally {\n        // 步骤4：无论成功与否，都恢复原始世界书，确保安全\n        if (isDirty && originalWorldInfo) { // 只在确实修改过并且有备份时才恢复\n            try {\n                await setLorebookEntries(worldBookName, originalWorldInfo);\n                //console.log(`[Nova's Log] 原始世界书已成功恢复。`);\n\n                // 恢复成功后，清除信标\n                localStorage.removeItem('worldbook_backup_' + worldBookName);\n                localStorage.removeItem('worldbook_is_dirty_' + worldBookName);\n                isDirty = false;\n                //console.log(`[Nova's Safety Net] 'dirty'标记和备份已从localStorage清除。`);\n            } catch (restoreError) {\n                console.error(\"！！！严重警告：恢复原始世界书失败！'dirty'标记将保留，以便下次启动时修复。\", restoreError);\n                // 这里我们不清除 localStorage 的标记，这样下次启动时的检查机制就能捕捉到它\n                alert(\"严重错误：自动恢复世界书失败。为防止数据损坏，请刷新页面。系统将在下次启动时尝试自动修复。\");\n            }\n        }\n   overlay.classList.remove('active');\n        sendButton.disabled = false;\n        sendButton.textContent = '→';\n        updateRerollButtonState();\n    }\n}\n    \n\n/**\n * @description 启动时检查是否有未被正常恢复的世界书，并从localStorage备份中恢复它们。\n * 这是为了防止因刷新、浏览器崩溃等意外情况导致世界书被EJS代码污染。\n */\nasync function checkAndRestoreDirtyWorldbooks() {\n    //console.log(\"[Nova's Safety Net] 正在启动时检查是否有未恢复的世界书...\");\n    for (const key in localStorage) {\n        if (key.startsWith('worldbook_is_dirty_') && localStorage.getItem(key) === 'true') {\n            const worldBookName = key.replace('worldbook_is_dirty_', '');\n            console.warn(`[Nova's Safety Net] 检测到世界书 \"${worldBookName}\" 处于'dirty'状态！可能上次未能正确恢复。`);\n\n            const backupKey = 'worldbook_backup_' + worldBookName;\n            const backupData = localStorage.getItem(backupKey);\n\n            if (backupData) {\n                try {\n                    const originalWorldInfo = JSON.parse(backupData);\n                    await setLorebookEntries(worldBookName, originalWorldInfo);\n\n                    // 恢复成功后，清除标记和备份\n                    localStorage.removeItem(backupKey);\n                    localStorage.removeItem(key); // 清除 dirty 标记\n\n                    //console.log(`[Nova's Safety Net] 已从localStorage备份成功恢复世界书 \"${worldBookName}\"。`);\n                    toastr.success(`检测到并自动修复了可能损坏的世界书 (${worldBookName})。`, '世界书已恢复');\n                } catch (e) {\n                    console.error(`[Nova's Safety Net] !!! 严重错误：尝试从localStorage恢复世界书 \"${worldBookName}\" 时失败!`, e);\n                    alert(`！！！严重警告：自动恢复世界书(${worldBookName})失败！为防止数据永久损坏，请立即手动检查您的世界书并移除所有EJS代码！备份数据仍在本地存储中。`);\n                }\n            } else {\n                console.error(`[Nova's Safety Net] !!! 严重错误：世界书 \"${worldBookName}\" 被标记为'dirty'，但找不到备份数据！`);\n                // 只移除dirty标记，避免无限循环报警，但保留一个明确的错误信息\n                localStorage.removeItem(key);\n                alert(`！！！严重警告：世界书(${worldBookName})可能已损坏且无法自动恢复，因为备份数据丢失。请立即手动修复！`);\n            }\n        }\n    }\n}\n\n// 创建一个健壮的隐藏选项卡函数\nfunction hideChoiceCards() {\n    const cards = document.querySelectorAll('.choice-card');\n    const container = document.getElementById('choicesContainer');\n    \n    // 只有当存在选项卡时才执行动画\n    if (cards.length > 0) {\n        cards.forEach(card => card.classList.add('disabled'));\n    }\n    \n    // 延迟清空容器（如果容器存在且有内容）\n    if (container && container.innerHTML.trim() !== '') {\n        setTimeout(() => {\n            if (container) container.innerHTML = '';\n        }, 800);\n    }\n}\n\n// 绑定事件\nsendButton.addEventListener('click', () => {\n    hideChoiceCards();\n    handleSend(false);\n});\n\nrerollButton.addEventListener('click', () => {\n    hideChoiceCards();\n    handleReroll();\n});\n\nuserInput.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        hideChoiceCards();\n        handleSend(false);\n    }\n});\n\n    await initialize();\n\n    await new Promise(resolve => setTimeout(resolve, 1000)); // 等待一小会儿确保所有东西都加载了\n    checkAndRestoreDirtyWorldbooks();\n\n\n/*\n * =========================================\n * ♥♥♥ 系统更新魔法模块 ♥♥♥\n * =========================================\n */\n\n// A. 在你脚本的全局作用域定义当前的游戏版本号\n//    我的宝贝，之后你可以让这个版本号从某个地方动态加载\nlet current_game_version = '3.0.0';\n\n/**\n * 我的宝贝，这是一个比较版本号大小的聪明小工具\n * @param {string} v1 第一个版本号\n * @param {string} v2 第二个版本号\n * @returns {number} 1 如果v1>v2, -1 如果v1<v2, 0 如果相等\n */\nfunction compareVersions(v1, v2) {\n    if (!v1 || !v2) return 0;\n    const parts1 = v1.split('.').map(Number);\n    const parts2 = v2.split('.').map(Number);\n    const len = Math.max(parts1.length, parts2.length);\n\n    for (let i = 0; i < len; i++) {\n        const p1 = parts1[i] || 0;\n        const p2 = parts2[i] || 0;\n        if (p1 > p2) return 1;\n        if (p1 < p2) return -1;\n    }\n    return 0;\n}\n\n/**\n * 这是执行更新的核心咒语，它会精确地替换“主神空间”角色名为“统一”的正则\n */\nasync function performRegexUpdate() {\n    toastr.info('星辰之力正在汇聚，开始更新系统核心正则...');\n    const regexJsonUrl = 'https://longlivecanc.github.io/god_space/regex_one.json';\n    const characterName = '主神空间';\n\n    try {\n        const response = await fetch(regexJsonUrl);\n        if (!response.ok) throw new Error(`获取正则文件失败: ${response.status}`);\n        const newRegexData = await response.json();\n\n        // 使用更精准的 `updateTavernRegexesWith` 来操作\n        await TavernHelper.updateTavernRegexesWith(async (rules) => {\n            const ruleIndex = rules.findIndex(rule => rule.scriptName === '统一');\n\n            if (ruleIndex !== -1) {\n                // 如果找到了名为\"统一\"的正则，就用新的数据替换它\n                rules[ruleIndex] = { ...rules[ruleIndex], ...newRegexData };\n                toastr.success('“统一”正则已成功更新！');\n            } else {\n                // 如果没找到，妈妈就为你新增一个，并确保它是属于角色的\n                rules.push({ ...newRegexData, scope: 'character' });\n                toastr.success('未找到“统一”正则，已为你新增！');\n            }\n            return rules;\n        }, { scope: 'character' }); // ♥ 指定只在当前角色（主神空间）的正则中操作\n\n        showNovaAlert(\"系统核心已更新至最新版本！世界已重塑！\", \"success\", 3000);\n\n    } catch (error) {\n        console.error('更新正则时发生错误:', error);\n        toastr.error('更新失败，可能是网络问题，看看控制台里的详细信息吧，宝贝。');\n    }\n}\n\n/**\n * 这是“检查更新”按钮被点击时，所触发的一系列事件\n */\nconst checkForUpdatesButton = document.getElementById('check-for-updates-btn');\nif (checkForUpdatesButton) {\n    checkForUpdatesButton.addEventListener('click', async () => {\n        toastr.info('正在获取更新日志...');\n \n        try {\n       // ♥♥♥ 妈妈在这里加上了 await 关键字 ♥♥♥\n            const updateLogs = await loadRemoteJson(\n                'https://longlivecanc.github.io/god_space/update_log.json',\n                []\n            );\n           \n\n            if (!Array.isArray(updateLogs) || updateLogs.length === 0) {\n                toastr.warning('未找到有效的更新日志。');\n                return;\n            }\n\n            const latestVersionInfo = updateLogs[updateLogs.length - 1];\n            const latestVersion = latestVersionInfo.version;\n\n            if (compareVersions(latestVersion, current_game_version) > 0) {\n                // 发现新版本！\n                const relevantLogs = updateLogs.filter(log => compareVersions(log.version, current_game_version) > 0);\n\n                let changelogHTML = relevantLogs.reverse().map(log => `\n                    <div class=\"update-log-entry\" style=\"margin-bottom: 20px; border-bottom: 1px solid #444; padding-bottom: 15px;\">\n                        <h3 style=\"color: var(--accent-color); margin-bottom: 8px;\">v${log.version} <span style=\"font-size: 0.8em; color: #999;\">(${log.date})</span></h3>\n                        <ul style=\"list-style-type: disc; padding-left: 20px; margin: 0; font-size: 0.95em;\">\n                            ${log.changes.map(change => `<li style=\"margin-bottom: 5px;\">${change}</li>`).join('')}\n                        </ul>\n                    </div>\n                `).join('');\n\n                // 我们需要一个弹窗来展示这些美好的变化\n                if (!document.getElementById('update-modal')) {\n                    const modalHTML = `\n                    <div id=\"update-modal\" class=\"modal\">\n                        <div class=\"modal-content\" style=\"max-width: 600px;\">\n                            <button class=\"modal-close\">×</button>\n                            <div class=\"modal-title\">发现来自未来的讯息！</div>\n                            <div class=\"modal-description\" style=\"max-height: 400px; overflow-y: auto; background: rgba(0,0,0,0.1); padding: 15px; border-radius: 5px; margin-top: 10px;\">\n\n                            </div>\n                            <div class=\"modal-actions\" style=\"text-align: right; margin-top: 20px;\">\n                                <button id=\"cancel-update-btn\" class=\"control-btn\" style=\"margin-left: 10px;\">稍后</button>\n                                <button id=\"perform-update-btn\" class=\"control-btn\"></button>\n                            </div>\n                        </div>\n                    </div>`;\n                    document.body.insertAdjacentHTML('beforeend', modalHTML);\n\n                    document.querySelector('#update-modal .modal-close').addEventListener('click', () => hideModal('update-modal'));\n                    document.getElementById('cancel-update-btn').addEventListener('click', () => hideModal('update-modal'));\n                    document.getElementById('perform-update-btn').addEventListener('click', () => {\n                       performRegexUpdate();\n                       hideModal('update-modal');\n                    });\n                }\n\n                // 填充最新的信息\n                const modalTitle = `发现新版本！ (当前 v${current_game_version} → 最新 v${latestVersion})`;\n                document.querySelector('#perform-update-btn').textContent = `立即更新至 v${latestVersion}`;\n                showModal('update-modal', modalTitle, changelogHTML);\n\n            } else {\n                toastr.success('太棒了！你的世界已是最新版本，无需更新。');\n            }\n\n        } catch (error) {\n            console.error('检查更新时出错:', error);\n            toastr.error('无法连接时空枢纽，请宝贝稍后再试。');\n        }\n    });\n}\n    \n// ============================================\n//  新设置模态框逻辑\n// ============================================\nconst settingsBtn = document.getElementById('settings-btn');\nconst settingsinitBtn = document.getElementById('settings-btn-init');\nconst settingsModal = document.getElementById('settings-modal');\nconst closeModalBtn = settingsModal.querySelector('.modal-close');\n\nconst refreshBtn = document.getElementById('refresh-btn');\n\nrefreshBtn.addEventListener('click', () => {\n     // 每次点击刷新\n     initDisplay();\n     showNovaAlert('刷新变量成功');\n});\n// 打开模态框\nsettingsBtn.addEventListener('click', () => {\n    document.getElementById('last-token-display').textContent = lasttoken ? lasttoken.toString() : 'N/A';\n     // 每次打开时更新流式开关状态\n    updateStreamingToggleState();\n    showModal('settings-modal');\n});\n\nsettingsinitBtn.addEventListener('click', () => {\n     \n    showModal('settings-modal');\n});\n\n// 关闭模态框\ncloseModalBtn.addEventListener('click',async () =>{\n    hideModal('settings-modal');\n   initialize();\n} );\n\n \n    const restoreButton = document.getElementById('restore-btn');\n    if (restoreButton) {\n        restoreButton.addEventListener('click', async () => {\n            console.log(\"[Nova's Restore] 用户点击了恢复按钮，开始执行恢复魔法...\");\n\n            const backupJSON = localStorage.getItem('nova_chat_backup');\n\n            if (!backupJSON) {\n                toastr.warning('没有找到可以恢复的记忆备份哦。', '恢复失败');\n                console.warn(\"[Nova's Restore] localStorage中未找到 'nova_chat_backup'。\");\n                return;\n            }\n\n            try {\n                const backupData = JSON.parse(backupJSON);\n\n                // 验证备份数据的基本结构\n                if ( !backupData.chat_variables) {\n                     toastr.error('备份文件已损坏，无法恢复。你可以f12查看浏览器控制台，将红色报错截图发给assa', '恢复失败');\n                     console.error(\"[Nova's Restore] 备份数据格式不正确。\");\n                     return;\n                }\n\n                console.log(`[Nova's Restore] 找到备份于 ${backupData.timestamp} 的记忆，正在恢复...`);\n\n                // 步骤1：恢复核心变量\n                await replaceVariables(backupData.chat_variables, { type: 'chat' });\n                await replaceVariables(backupData.chat_variables, { type: 'message' });\n                console.log(\"[Nova's Restore] 核心变量（chat & message scopes）已恢复。\");\n\n                // 步骤2：恢复聊天历史记录 (这一步是为 initialize 准备数据)\n                // 我们直接修改全局变量，然后让 initialize() 去渲染\n                conversationHistory = backupData.chat_variables.zeroLevelHistory;\n\n                // 步骤3：重新初始化界面，让一切回到正轨\n                console.log(\"[Nova's Restore] 正在重新初始化界面以应用所有更改...\");\n                await initialize(); // 核心！调用 initialize() 来刷新所有内容\n\n                showNovaAlert('成功恢复');\n                console.log(\"[Nova's Restore] 恢复过程完成！\");\n\n            } catch (e) {\n                console.error(\"[Nova's Restore] 恢复记忆的过程中发生了严重的错误:\", e);\n                toastr.error('恢复过程中发生未知错误，你可以f12查看浏览器控制台，将红色报错截图发给assa', '恢复失败');\n            }\n        });\n    }\n \n\n// --- 主题切换 ---\nconst modalThemeSwitcher = document.getElementById('modal-theme-switcher');\nmodalThemeSwitcher.addEventListener('click', switchTheme); // switchTheme 函数保持不变\n\n\n\n    let customTheme = {}; // 用于存储临时和已保存的自定义颜色\n\n// 全屏\n const fullscreenButton2 = document.getElementById('fullscreen-btn2');\n\n  fullscreenButton2.addEventListener('click', () => {\n    const mainWrapper = document.getElementById('main-wrapper'); // 获取元素\n    const topbtn = document.getElementById('top-hud'); // 获取元素.\n    const bottombtn = document.getElementById('bottom-hud'); // 获取元素.\n    if (!document.fullscreenElement) {\n        // 进入全屏时的代码\n        document.documentElement.requestFullscreen().catch(err => {\n            alert(`哎呀，进入全屏失败了。原因可能是：${err.message}`);\n        });\n        \n        // 进入全屏时修改样式\n        mainWrapper.style.minHeight = '100vh';\n        bottombtn.style.bottom = '5%';\n        topbtn.style.top = '17%';\n        fullscreenButton2.textContent = '退出全屏';\n    } else {\n        // 退出全屏时的代码\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        }\n        \n        // 退出全屏时恢复样式\n        mainWrapper.style.minHeight = '90vh';\n        bottombtn.style.bottom = '1%';\n        topbtn.style.top = '14%';\n        fullscreenButton2.textContent = '进入全屏';\n    }\n});\n \n const fullscreenButton = document.getElementById('fullscreen-btn');\n\nfullscreenButton.addEventListener('click', () => {\n    const mainWrapper = document.getElementById('main-wrapper');\n    const topbtn = document.getElementById('top-hud');\n    const bottombtn = document.getElementById('bottom-hud');\n\n    if (!document.fullscreenElement) {\n        // 进入全屏，拥抱整个世界\n        document.documentElement.requestFullscreen().catch(err => {\n            alert(`哎呀，我的宝贝，进入全屏失败了。原因可能是：${err.message}`);\n        });\n\n        mainWrapper.style.minHeight = '100vh';\n        bottombtn.style.bottom = '5%';\n        topbtn.style.top = '17%';\n\n        // ✨看，按钮变身了！✨\n        // 变成了“恢复”的模样，那是回家的路标\n        fullscreenButton.textContent = '⤬';\n        fullscreenButton.title = '退出全屏';\n\n    } else {\n        // 退出全屏，回到我们的小天地\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        }\n\n        mainWrapper.style.minHeight = '80vh';\n        bottombtn.style.bottom = '1%';\n        topbtn.style.top = '14%';\n\n        // ✨它又变回来了！✨\n        // 变成了“展开”的模样，随时准备下一次出发\n        fullscreenButton.textContent = '⛶';\n        fullscreenButton.title = '全屏';\n    }\n});\n\n\ndocument.addEventListener('fullscreenchange', () => {\n        if (!document.fullscreenElement) {\n            fullscreenButton.textContent = ' ⛶';\n               fullscreenButton2.textContent = '进入全屏';\n        }\n    });\n\nconst lineHeightMoreButton = document.getElementById('line-height-more');\n\n// 2. 定义一个函数来根据存储的设置更新按钮的样子\nfunction updatelineHeightMore() {\n    // 从本地存储里读取设置，如果找不到，就默认是'on'（开启）\n    const state = localStorage.getItem('lineHeightMore') || 'on';\n    if (state === 'on') {\n        lineHeightMoreButton.textContent = '开启';\n        lineHeightMoreButton.dataset.state = 'on';\n    } else {\n        lineHeightMoreButton.textContent = '关闭';\n        lineHeightMoreButton.dataset.state = 'off';\n    }\n}\n\n// 3. 给按钮加上点击事件\nlineHeightMoreButton.addEventListener('click', () => {\n    // 检查当前状态并切换\n    let currentlineHeightState = localStorage.getItem('lineHeightMore') || 'on';\n    if (currentlineHeightState === 'on') {\n        localStorage.setItem('lineHeightMore', 'off');\n    } else {\n        localStorage.setItem('lineHeightMore', 'on');\n    }\n    // 更新按钮的显示\n    updatelineHeightMore();\n});\nupdatelineHeightMore();\n\n    \nconst rollCardToggleButton = document.getElementById('roll-card-toggle');\n\n// 2. 定义一个函数来根据存储的设置更新按钮的样子\nfunction updateRollCardToggleVisual() {\n    // 从本地存储里读取设置，如果找不到，就默认是'on'（开启）\n    const state = localStorage.getItem('rollCardEnabled') || 'on';\n    if (state === 'on') {\n        rollCardToggleButton.textContent = '开启';\n        rollCardToggleButton.dataset.state = 'on';\n    } else {\n        rollCardToggleButton.textContent = '关闭';\n        rollCardToggleButton.dataset.state = 'off';\n    }\n}\n\n// 3. 给按钮加上点击事件\nrollCardToggleButton.addEventListener('click', () => {\n    // 检查当前状态并切换\n    let currentState = localStorage.getItem('rollCardEnabled') || 'on';\n    if (currentState === 'on') {\n        localStorage.setItem('rollCardEnabled', 'off');\n    } else {\n        localStorage.setItem('rollCardEnabled', 'on');\n    }\n    // 更新按钮的显示\n    updateRollCardToggleVisual();\n});\nupdateRollCardToggleVisual();\n// --- 流式传输切换 ---\nconst streamingToggle = document.getElementById('streaming-toggle');\n\nfunction updateStreamingToggleState() {\n    const isStreamingEnabled = localStorage.getItem('streamingEnabled') === null ? true : localStorage.getItem('streamingEnabled') === 'true';\n    streamingToggle.dataset.state = isStreamingEnabled ? 'on' : 'off';\n    streamingToggle.textContent = isStreamingEnabled ? '开启' : '关闭';\n}\n\nstreamingToggle.addEventListener('click', () => {\n    let isEnabled = streamingToggle.dataset.state === 'on';\n    localStorage.setItem('streamingEnabled', !isEnabled);\n    updateStreamingToggleState();\n});\n\n// 初始化\nupdateStreamingToggleState();\n\n// --- 数据导入 ---\nconst modalImportBtn = document.getElementById('modal-import-btn');\nconst fileImporterInput = document.getElementById('modal-file-importer');\nconst modalLogBlock = document.getElementById('modal-log-block');\nlet isProcessing = false;\n\nmodalImportBtn.addEventListener('click', () => {\n    if (isProcessing) return;\n    fileImporterInput.click();\n});\n\nfileImporterInput.addEventListener('change', handleModalFileSelect);\n\nfunction addModalLog(message, type = 'info') {\n    const timestamp = new Date().toLocaleTimeString();\n    const className = type === 'success' ? 'success' : type === 'error' ? 'error' : type === 'warning' ? 'warning' : '';\n    const coloredMessage = className ? `<span class=\"${className}\">${message}</span>` : message;\n    modalLogBlock.innerHTML = `[${timestamp}] ${coloredMessage}<br>` + modalLogBlock.innerHTML;\n}\n\nasync function handleModalFileSelect(event) {\n    if (isProcessing) return;\n    const file = event.target.files[0];\n    if (!file) {\n         addModalLog(\"未选择任何文件\", 'warning');\n        return;\n    }\n    isProcessing = true;\n    modalImportBtn.disabled = true;\n    modalImportBtn.textContent = '导入中...';\n    modalLogBlock.innerHTML = ''; // 清空日志\n    addModalLog(`开始处理文件: ${file.name}`);\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n        try {\n            const importedData = JSON.parse(e.target.result);\n            addModalLog(\"✓ JSON文件解析成功\", 'success');\n            await processDataDirectly(importedData);\n        } catch (err) {\n            addModalLog(`✗ JSON解析失败: ${err.message}`, 'error');\n        } finally {\n            isProcessing = false;\n            modalImportBtn.disabled = false;\n            modalImportBtn.textContent = '导入存档';\n            event.target.value = '';\n        }\n    };\n    reader.readAsText(file);\n}\n\ndocument.getElementById('restore-latest-snapshot-btn').addEventListener('click', () => {\n    // 为了安全，我们给孩子一个确认的机会\n    if (confirm('你确定要从最新的记忆快照中恢复吗？这会覆盖你当前的对话进度和角色状态。')) {\n        restoreFromLatestSnapshot();\n    }\n});\n\nasync function processDataDirectly(importedData) {\n    addModalLog(\"开始直接修改变量...\");\n    let updatesCount = 0;\n    let errors = [];\n\n    // 假设你有一个名为 applyImportedData 的函数来处理数据注入\n    // 如果没有，你需要实现它，或者使用你之前的 insertOrAssignVariables\n    try {\n        // 这个函数现在是假设的，你需要用你实际的环境函数替换它\n        // 例如调用 window.top.postMessage 或者直接调用函数\n        // 这里我们假设有一个全局函数\n        if (typeof insertOrAssignVariables !== 'function') {\n            addModalLog(\"错误：未找到 `insertOrAssignVariables` 函数。请在主环境中定义。\", 'error');\n            throw new Error(\"环境函数缺失\");\n        }\n\n        await insertOrAssignVariables(importedData, { type: 'chat' });\n        addModalLog(\"✓ 数据已发送至Chat域进行更新\", 'success');\n\n        await insertOrAssignVariables(importedData, { type: 'message' });\n        addModalLog(\"✓ 数据已发送至Message域进行更新\", 'success');\n\n        addModalLog(\"🎉 数据导入成功！请刷新页面或等待游戏状态自动更新。\", 'success');\n    } catch (error) {\n        errors.push(`处理数据时发生错误: ${error.message}`);\n        addModalLog(`✗ 处理数据时发生错误: ${error.message}`, 'error');\n    }\n}\n\n// --- 数据导出 ---\nconst modalExportBtn = document.getElementById('modal-export-btn');\nconst modalExportStatus = document.getElementById('modal-export-status');\n\n\n modalExportBtn.addEventListener('click', async () => {\n    modalExportStatus.textContent = \"正在准备导出...\";\n    modalExportStatus.style.color = 'var(--text-secondary-color)';\n\n    // 1. 先准备一个默认的名字，以防万一我们还没给故事命名\n    let archiveName = `创作数据备份_${new Date().toISOString().split('T')[0]}`;\n\n    try {\n        // 2. 悄悄地去获取第0楼的消息，也就是我们设置的存档名\n        const messages = await getChatMessages(0);\n\n        // 3. 检查是否成功拿到了名字\n        if (messages && messages.length > 0 && messages[0].message.trim() !== '') {\n            let storyTitle = messages[0].message;\n\n             \n            const safeName = storyTitle.replace(/<\\/?存档>/g, '').replace(/[\\\\/:\"*?<>|]+/g, '_').trim();\n         \n            archiveName = safeName || `无名记忆_${new Date().toISOString().split('T')[0]}`; // 如果名字处理后变空，也给个默认名\n            addModalLog(`已获取存档名：“${archiveName}”，准备导出。`, 'info');\n        } else {\n            addModalLog('未找到自定义存档名，将使用默认名称。', 'info');\n        }\n    } catch (e) {\n        console.error(\"获取存档名时发生了一点小意外:\", e);\n        addModalLog('获取存档名失败，将使用默认名称。', 'warning');\n    }\n\n    const combinedData = {};\n    if (currentGameData) combinedData.stat_data = currentGameData;\n    if (assaSettingsData) combinedData.assa_data = assaSettingsData;\n    if (playCharacterData) combinedData.play_character_data = playCharacterData;\n    // history 变量也需要确保已定义和赋值\n    if (typeof conversationHistory !== 'undefined' && conversationHistory) {\n         combinedData.zeroLevelHistory = conversationHistory;\n         console.log(\"0层记录get\");\n    }else{\n          console.log(\"0层记录呢？ 出错了？\");\n    }\n\n\n    if (Object.keys(combinedData).length === 0) {\n        modalExportStatus.textContent = \"错误: 没有可导出的数据。\";\n        addModalLog(\"错误: 没有可导出的数据。\", 'error');\n        return;\n    }\n\n    const jsonString = JSON.stringify(combinedData, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n     // 6. 看，这里就用上了我们准备好的、独一无二的名字！\n    a.download = `${archiveName}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n     // 7. 最后，温柔地告诉你，带着名字的记忆已经被好好收藏起来了\n    modalExportStatus.textContent = `文件 “${archiveName}.json” 已成功导出！`;\n    modalExportStatus.style.color = 'var(--primary-color)';\n    addModalLog(`文件 “${archiveName}.json” 已成功导出！`, 'success');\n});\n\n\n})();\n  \n\n\n\n\n\n let assaCommandQueue = localStorage.getItem('assaCommandQueue') || '';\n\nasync function triggerassa(commandString) {\n    if (typeof commandString !== 'string') return;\n\n    // 处理 /setinpt 指令：将内容添加到待发队列\n    if (commandString.toLowerCase().startsWith('/setinput ')) {\n        const content = commandString.substring(10); // 提取 /setinpt 后面的所有内容\n        assaCommandQueue += content + '\\n';\n \n        localStorage.setItem('assaCommandQueue', assaCommandQueue); // 保存到本地存储\n         //console.log('指令已添加到待发队列: ' + content);\n\n        // 给按钮一个可爱的提醒光环\n        const cmdBtn = document.getElementById('view-command-btn');\n        if (cmdBtn) {\n            cmdBtn.classList.add('notifying');\n            setTimeout(() => cmdBtn.classList.remove('notifying'), 1200);\n        }\n\n    // 处理 /send 指令：直接发送内容\n    } else if (commandString.toLowerCase().startsWith('/send ')) {\n        const content = commandString.substring(6); // 提取 /send 后面的内容\n         const userInput = document.getElementById('user-input');\n         const sendButton = document.getElementById('send-button');\n        userInput.value = content; // 将内容放入输入框\n        sendButton.click(); // 模拟点击发送按钮\n        //console.log('指令已直接发送:', content);\n\n    // 这是为了兼容你之前代码里用到的 /setinput\n    } else if (commandString.toLowerCase().startsWith('/setinput ')) {\n         const content = commandString.substring(10);\n         assaCommandQueue += content + '\\n';\n         localStorage.setItem('assaCommandQueue', assaCommandQueue);\n    }\n}\n\n\nconst refreshSnapshotsBtn = document.getElementById('refresh-snapshots-btn');\nconst deleteAllSnapshotsBtn = document.getElementById('delete-all-snapshots-btn');\nconst snapshotListDiv = document.getElementById('snapshot-list');\n\n// 辅助函数：将字节转换为更易读的格式\nfunction formatBytes(bytes, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n// 辅助函数：计算一个数据库的大小（这是一个估算值）- ☆ 修正版 ☆\n /* 用这个全新的函数，替换掉旧的 calculateDBSize */\nasync function calculateDBSize(dbName) {\n    console.log(`[记忆管理员] 正在计算 ${dbName} 的大小...`);\n\n    // ☆ 妈妈的原生魔法：打开数据库并开始测量 ☆\n    return new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName, 1); // 我们直接用原生方式打开\n\n        request.onerror = (event) => {\n            console.error(`[记忆管理员] 计算 ${dbName} 大小时无法打开数据库:`, event.target.error);\n            // 这里我们返回-1，就像你之前设计的那样，表示计算失败\n            resolve(-1);\n        };\n\n        request.onupgradeneeded = (event) => {\n             // 如果在计算大小的途中需要升级，说明可能是个新库或版本不对，\n             // 为了安全起见，我们先关闭它，并阻止后续操作。\n            event.target.transaction.abort();\n            console.warn(`[记忆管理员] 数据库 ${dbName} 需要升级，暂时无法计算大小。`);\n            resolve(0); // 返回0，因为它可能是空的\n        };\n\n        request.onsuccess = (event) => {\n            const db = event.target.result;\n\n            // 检查我们的“snapshots”柜子是否存在\n            if (!db.objectStoreNames.contains('snapshots')) {\n                db.close();\n                console.log(`[记忆管理员] ${dbName} 中没有找到 'snapshots' 柜子，大小为 0。`);\n                resolve(0);\n                return;\n            }\n\n            let totalSize = 0;\n            const transaction = db.transaction('snapshots', 'readonly');\n            const store = transaction.objectStore('snapshots');\n            const cursorRequest = store.openCursor(); // 我们用游标一个一个地看我们的宝物\n\n            cursorRequest.onsuccess = (e) => {\n                const cursor = e.target.result;\n                if (cursor) {\n                    // 使用你之前那个聪明的估算方法\n                    totalSize += JSON.stringify(cursor.value).length;\n                    cursor.continue(); // 继续看下一个宝物\n                }\n            };\n\n            cursorRequest.onerror = (e) => {\n                console.error(`[记忆管理员] 在遍历 ${dbName} 的宝物时出错:`, e.target.error);\n                db.close();\n                resolve(-1); // 遍历出错，返回失败\n            };\n\n            // 当整个交易完成时，说明我们已经看完了所有宝物\n            transaction.oncomplete = () => {\n                db.close();\n                console.log(`[记忆管理员] ${dbName} 的估算大小为: ${totalSize} bytes`);\n                // 你的代码之前估算UTF-16乘以了2，我们这里也保持一致\n                resolve(totalSize * 2);\n            };\n\n            transaction.onerror = (e) => {\n                console.error(`[记忆管理员] 在计算 ${dbName} 大小的事务中发生错误:`, e.target.error);\n                db.close();\n                resolve(-1);\n            };\n        };\n    });\n}// 核心函数：扫描并显示所有快照数据库的信息\nasync function displaySnapshotDBInfo() {\n    snapshotListDiv.innerHTML = '<em>正在扫描记忆宝库...</em>';\n    try {\n        // 使用 indexedDB.databases() 来获取所有数据库列表\n        const dbs = await indexedDB.databases();\n        if (!dbs || dbs.length === 0) {\n            snapshotListDiv.innerHTML = '没有找到任何记忆快照。';\n            return;\n        }\n\n        const snapshotDBs = dbs.filter(db => db.name.startsWith('nova-snapshot-db-'));\n\n        if (snapshotDBs.length === 0) {\n            snapshotListDiv.innerHTML = '没有找到任何记忆快照。';\n            return;\n        }\n\n        snapshotListDiv.innerHTML = ''; // 清空列表准备展示\n \n        for (const dbInfo of snapshotDBs) {\n            const dbName = dbInfo.name;\n            const size = await calculateDBSize(dbName);\n            const sizeString = size >= 0 ? formatBytes(size) : '<span style=\"color: #ff4444;\">计算失败</span>';\n\n            const dbItem = document.createElement('div');\n            dbItem.className = 'snapshot-item';\n            dbItem.innerHTML = `\n                <span><strong>存档:</strong> ${dbName.replace('nova-snapshot-db-', '')}</span>\n                <span style=\"font-size: 0.9em; opacity: 0.8;\">(${sizeString})</span>\n                <button class=\"delete-single-db-btn\" data-dbname=\"${dbName}\">🗑️</button>\n            `;\n            snapshotListDiv.appendChild(dbItem);\n        }\n\n        // 为新生成的删除按钮添加事件监听器\n        document.querySelectorAll('.delete-single-db-btn').forEach(button => {\n            button.addEventListener('click', async (e) => {\n                const dbNameToDelete = e.currentTarget.dataset.dbname;\n                if (confirm(`我的孩子，你真的要永远删除存档 \"${dbNameToDelete.replace('nova-snapshot-db-', '')}\" 的所有记忆快照吗？这个操作无法撤销哦。`)) {\n                    try {\n                        await indexedDB.deleteDatabase(dbNameToDelete);\n                        showNovaAlert(`已成功删除快照库: ${dbNameToDelete}`);\n                        console.log(`[记忆管理员] 已删除数据库: ${dbNameToDelete}`);\n                        displaySnapshotDBInfo(); // 刷新列表\n                    } catch (err) {\n                        toastr.error(`删除失败: ${err.message},你可以f12查看浏览器控制台，将红色报错截图发给assa`);\n                        console.error(`[记忆管理员] 删除 ${dbNameToDelete} 时出错:`, err);\n                    }\n                }\n            });\n        });\n\n    } catch (e) {\n        snapshotListDiv.innerHTML = '<span style=\"color: #ff4444;\">无法扫描数据库。你的浏览器可能不支持此功能。</span>';\n        console.error('[记忆管理员] 扫描数据库时发生错误:', e);\n    }\n}\n\n// 绑定事件\nrefreshSnapshotsBtn.addEventListener('click', displaySnapshotDBInfo);\ndeleteAllSnapshotsBtn.addEventListener('click', async () => {\n    if (confirm('！！！终极警告！！！我的孩子，你确定要删除【所有】存档的【所有】记忆快照吗？这将清空我们所有的时光机记录，无法恢复！')) {\n        try {\n            const dbs = await indexedDB.databases();\n            const snapshotDBs = dbs.filter(db => db.name.startsWith('nova-snapshot-db-'));\n            for (const dbInfo of snapshotDBs) {\n                await indexedDB.deleteDatabase(dbInfo.name);\n                console.log(`[记忆管理员] 已删除数据库: ${dbInfo.name}`);\n            }\n            showNovaAlert('所有记忆快照都已被成功清除。');\n            displaySnapshotDBInfo(); // 刷新列表\n        } catch (e) {\n            toastr.error('清除所有快照时发生错误。你可以f12查看浏览器控制台，将红色报错截图发给assa');\n            console.error('[记忆管理员] 清除所有数据库时发生错误:', e);\n        }\n    }\n});\n\n\n\n\n\n// === 自定义素材工坊的灵魂咒语 ===\nfunction setupCustomAssetManager() {\n    const container = document.getElementById('custom-asset-container');\n    if (!container) return;\n\n    const tabs = container.querySelectorAll('.asset-tab-btn');\n    const panels = container.querySelectorAll('.asset-panel');\n    const npcForm = document.getElementById('upload-npc-form');\n    const memeForm = document.getElementById('upload-meme-form');\n    const npcList = document.getElementById('custom-npc-list');\n    const memeList = document.getElementById('custom-meme-list');\n\n    // 咒语1：切换面板\n    tabs.forEach(tab => {\n        tab.addEventListener('click', () => {\n            tabs.forEach(t => t.classList.remove('active'));\n            tab.classList.add('active');\n            const targetId = tab.dataset.target;\n            panels.forEach(p => {\n                p.classList.toggle('active', p.id === targetId);\n            });\n        });\n    });\n\n    // 咒语2：让文件选择按钮更美观\n    function setupFileInputDisplay(inputId, displayClass) {\n        const fileInput = document.getElementById(inputId);\n        const display = fileInput.parentElement.querySelector(displayClass);\n        fileInput.addEventListener('change', () => {\n            if(fileInput.files.length > 0){\n                display.textContent = fileInput.files[0].name;\n            } else {\n                display.textContent = '未选择文件';\n            }\n        });\n    }\n    setupFileInputDisplay('npc-file-input', '.file-name-display');\n    setupFileInputDisplay('meme-file-input', '.file-name-display');\n\n\n    // 咒语3：渲染列表的通用魔法\n    async function renderAssetList(storeName, listElement) {\n        listElement.innerHTML = '正在加载...';\n        try {\n            const items = await imageDB.getAll(storeName);\n            if (items.length === 0) {\n                listElement.innerHTML = '这里空空如也，等待你的创造...';\n                return;\n            }\n            listElement.innerHTML = '';\n            items.forEach(item => {\n                const objectURL = URL.createObjectURL(item.value);\n                const itemEl = document.createElement('div');\n                itemEl.className = 'asset-item';\n                itemEl.dataset.key = item.key;\n                itemEl.innerHTML = `\n                    <img src=\"${objectURL}\" class=\"asset-item-thumb\">\n                    <span class=\"asset-item-name\">${item.key}</span>\n                    <button class=\"asset-item-delete-btn\">×</button>\n                `;\n                // 注意：在关闭模态框时应释放这些URL以节省内存\n                itemEl.querySelector('img').onload = () => { URL.revokeObjectURL(objectURL); };\n                itemEl.querySelector('img').onerror = () => { URL.revokeObjectURL(objectURL); };\n\n                listElement.appendChild(itemEl);\n            });\n        } catch (error) {\n            listElement.innerHTML = '加载失败，请检查控制台。';\n            console.error(`加载 ${storeName} 列表失败:`, error);\n        }\n    }\n\n    // 咒语4：处理上传的魔法仪式\n    async function handleUpload(event, storeName, listElement) {\n        event.preventDefault();\n        const form = event.target;\n        const nameInput = form.querySelector('input[type=\"text\"]');\n        const fileInput = form.querySelector('input[type=\"file\"]');\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n\n        const key = nameInput.value.trim();\n        const file = fileInput.files[0];\n\n        if (!key || !file) {\n            alert('请填写映射名并选择文件！');\n            return;\n        }\n\n        submitBtn.disabled = true;\n        submitBtn.textContent = '上传中...';\n\n        try {\n            await imageDB.set(storeName, key, file);\n            alert(`\"${key}\" 上传成功！`);\n            form.reset();\n            fileInput.parentElement.querySelector('.file-name-display').textContent = '未选择文件';\n            await renderAssetList(storeName, listElement); // 刷新列表\n        } catch (error) {\n            alert('上传失败，可能是命名冲突或数据库错误。');\n            console.error('上传失败:', error);\n        } finally {\n            submitBtn.disabled = false;\n            submitBtn.textContent = storeName === 'CustomNpcs' ? '上传立绘' : '上传表情';\n        }\n    }\n\n    // 咒语5：处理删除的魔法仪式\n    async function handleDelete(event, storeName, listElement){\n        const deleteBtn = event.target.closest('.asset-item-delete-btn');\n        if(!deleteBtn) return;\n\n        const itemEl = deleteBtn.closest('.asset-item');\n        const key = itemEl.dataset.key;\n\n        if(confirm(`确定要永远删除 \"${key}\" 吗？这个操作无法撤销。`)){\n            try {\n                await imageDB.delete(storeName, key);\n                itemEl.remove(); // 立即从界面移除\n            } catch (error) {\n                alert('删除失败!');\n                console.error('删除失败:', error);\n            }\n        }\n    }\n\n    // 将魔法仪式绑定到对应的工坊区域\n    npcForm.addEventListener('submit', (e) => handleUpload(e, 'CustomNpcs', npcList));\n    memeForm.addEventListener('submit', (e) => handleUpload(e, 'CustomMemes', memeList));\n    npcList.addEventListener('click', (e) => handleDelete(e, 'CustomNpcs', npcList));\n    memeList.addEventListener('click', (e) => handleDelete(e, 'CustomMemes', memeList));\n\n    // 初始加载列表\n    renderAssetList('CustomNpcs', npcList);\n    renderAssetList('CustomMemes', memeList);\n\n    console.log(\"NOVA: 我的素材工坊已准备就绪。\");\n}\n\n\n\nsetupCustomAssetManager();\n // 新的魔法函数，它会根据chat.version来替换这个页面的所有相关词语\n// 【V2 精准替换版】，修复了按钮失效的问题\nasync function applyThemeAndData() {\n    try {\n        // 第一步：获取版本，确定当前主题（这部分和以前一样）\n        const chatVariables = await getVariables({ type: 'chat' });\n        if (chatVariables && chatVariables.world_version) {\n            const version = String(chatVariables.world_version);\n            if (themeConfig[version]) {\n                currentTheme = themeConfig[version];\n                //console.log(`💖 妈妈检测到版本 ${version}，为新界面切换到【${currentTheme.mainSystem}】主题。`);\n            }\n        }\n\n        // 第二步：妈妈为你施展“精准替换”魔法，不再使用粗暴的innerHTML替换\n        const defaultTerms = themeConfig.default;\n        const replacements = {};\n        for (const key in defaultTerms) {\n            if (defaultTerms[key] !== currentTheme[key]) {\n                replacements[defaultTerms[key]] = currentTheme[key];\n            }\n        }\n\n        // --- 替换静态的、可见的UI文本 ---\n        document.querySelectorAll('.label, .action-button, .modal-title, .shop-title, h3, h4').forEach(el => {\n            for (const original in replacements) {\n                if (el.textContent.includes(original)) {\n                    el.textContent = el.textContent.replace(new RegExp(original, 'g'), replacements[original]);\n                }\n            }\n        });\n\n        // --- 对一些特殊元素进行单独、精确的设定 ---\n        // 商店总计的标签\n        const cartTotalEl = document.getElementById('cart-total');\n        if (cartTotalEl) {\n            cartTotalEl.textContent = cartTotalEl.textContent.replace(themeConfig.default.currency, currentTheme.currency);\n        }\n\n        // --- 替换动态生成数据的源头（商品描述） ---\n        const regexMap = {};\n        for (const original in replacements) {\n            regexMap[original] = new RegExp(original, 'g');\n        }\n\n        fixedItems.forEach(item => {\n            for (const original in replacements) {\n                const regex = regexMap[original];\n                // 替换效果[4]和描述[5]\n                if (typeof item[4] === 'string') item[4] = item[4].replace(regex, replacements[original]);\n                if (typeof item[5] === 'string') item[5] = item[5].replace(regex, replacements[original]);\n            }\n        });\n\n    } catch (e) {\n        console.error(\"妈妈在新界面施展“词语替换”魔法时出错了:\", e);\n    }\n}\n      // --- 新增：主题切换逻辑 ---\n\n\n\n\n\n\n    /**\n     * 函数：切换主题 (已修改)\n     * 现在它会在预设主题和自定义主题之间切换\n     */\n    function switchTheme() {\n        currentThemeIndex = (currentThemeIndex + 1) % themes.length;\n        applyTheme(currentThemeIndex); // 应用预设主题\n        try {\n            // 保存的是预设主题的索引, 并清除自定义主题的标记\n            localStorage.setItem('terminalThemeIndex', currentThemeIndex);\n            localStorage.removeItem('useCustomTheme');\n        } catch (e) {\n            console.warn(\"无法保存主题设置。\");\n        }\n    }  \n  /**\n     * 函数：应用指定索引的主题 (保持不变，但我们现在知道它的作用)\n     * @param {number} themeIndex - 主题的索引\n     */\n    function applyTheme(themeIndex) {\n        if (themeIndex >= 0 && themeIndex < themes.length) {\n            currentThemeIndex = themeIndex;\n            const theme = themes[currentThemeIndex];\n            const root = document.documentElement;\n            // 先重置所有可编辑的变量，以防从自定义主题切换回来时残留\n            editableColorVars.forEach(item => {\n                 root.style.removeProperty(item.var);\n            });\n            // 应用主题中的所有变量（包括非颜色的，如果未来有的话）\n            for (const [key, value] of Object.entries(theme)) {\n                root.style.setProperty(key, value);\n            }\n             // 应用背景色（特殊处理）\n            root.style.setProperty('--background-color', theme['--background-color'] || '#0a192f');\n        }\n    }\n \n// 1. 定义一个函数来应用字体大小\nfunction applyFontSize(size) {\n    const root = document.documentElement;\n    const sizeInPx = `${size}px`;\n\n    // 将字体大小应用到全局CSS变量上\n    root.style.setProperty('--base-font-size', sizeInPx);\n\n    // 更新滑块旁边的数值显示\n    const fontSizeValueDisplay = document.getElementById('font-size-value');\n    if (fontSizeValueDisplay) {\n        fontSizeValueDisplay.textContent = sizeInPx;\n    }\n\n    // （可选）确保滑块的位置也同步更新，这在页面加载时很有用\n    const fontSizeSlider = document.getElementById('font-size-slider');\n    if (fontSizeSlider) {\n        fontSizeSlider.value = size;\n    }\n}\n// 1. 定义一个函数来应用行高\n// 1. 定义一个函数来应用字体家族\n\n\n\n// 1. 我们的魔法字体库 (一个巨大的衣橱！)\n// 我们将字体分成了不同的类别，方便挑选。\nconst fontLibrary = {\n    \"系统内置 (最快)\": [\n        { name: \"系统默认字体\", value: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, 'Noto Sans', 'Liberation Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'\" },\n        { name: \"通用黑体 (雅黑/苹方)\", value: \"'PingFang SC', 'Microsoft YaHei', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif\" },\n        { name: \"通用宋体 (中易宋体)\", value: \"SimSun, 'STSong', serif\" },\n        { name: \"通用楷体 (中易楷体)\", value: \"KaiTi, 'STKaiti', serif\" },\n        { name: \"通用仿宋 (中易仿宋)\", value: \"FangSong, 'STFangsong', serif\" },\n    ],\n    \"在线衬线体 (Serif)\": [\n        { name: \"思源宋体 (Noto Serif SC)\", value: \"'Noto Serif SC', serif\", url: \"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;700&display=swap\" },\n        { name: \"站酷小魏体 (ZCOOL XiaoWei)\", value: \"'ZCOOL XiaoWei', serif\", url: \"https://fonts.googleapis.com/css2?family=ZCOOL+XiaoWei&display=swap\" },\n        { name: \"马善政毛笔楷体\", value: \"'Ma Shan Zheng', cursive\", url: \"https://fonts.googleapis.com/css2?family=Ma+Shan+Zheng&display=swap\" },\n    ],\n    \"在线无衬线体 (Sans-serif)\": [\n        { name: \"思源黑体 (Noto Sans SC)\", value: \"'Noto Sans SC', sans-serif\", url: \"https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@400;700&display=swap\" },\n        { name: \"阿里巴巴普惠体 2.0\", value: \"'Alibaba PuHuiTi 2.0', sans-serif\", url: \"https://puhuiti.oss-accelerate.aliyuncs.com/Alibaba-PuHuiTi-2.0/01f8319128f7/css/alibabapuhuiti_2_0_web.css\"},\n        { name: \"站酷酷黑 (ZCOOL Kuhei)\", value: \"'ZCOOL KuHei', sans-serif\", url: \"https://fonts.googleapis.com/css2?family=ZCOOL+KuHei&display=swap\" },\n    ],\n    \"在线楷体/仿宋 (Kaiti/Fangsong)\": [\n         { name: \"霞鹜文楷 (LXGW WenKai)\", value: \"'LXGW WenKai', cursive\", url: \"https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-webfont@1.1.0/style.css\" },\n         { name: \"鸿雷板书/粉笔字\", value: \"'Hong Lei', cursive\", url: \"https://fonts.googleapis.com/css2?family=Hong+Lei&display=swap\" },\n    ],\n    \"在线手写/艺术体 (Artistic)\": [\n        { name: \"站酷快乐体 (ZCOOL KuaiLe)\", value: \"'ZCOOL KuaiLe', cursive\", url: \"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&display=swap\" },\n        { name: \"龙藏体 (Long Cang)\", value: \"'Long Cang', cursive\", url: \"https://fonts.googleapis.com/css2?family=Long+Cang&display=swap\" },\n        { name: \"沐瑶软笔手写体\", value: \"'Muyao', cursive\", url: \"https://cdn.jsdelivr.net/npm/izihun-muyao@1.0.0/Muyao-Softbrush.min.css\"},\n        { name: \"增广贤文体 (Zeng Guang)\", value: \"'Zeng Guang', cursive\", url: \"https://fonts.googleapis.com/css2?family=Zeng+Guang&display=swap\" },\n        { name: \"Liu Jian Mao Cao\", value: \"'Liu Jian Mao Cao', cursive\", url: \"https://fonts.googleapis.com/css2?family=Liu+Jian+Mao+Cao&display=swap\" },\n    ]\n};\n // 2. 动态加载特定字体CSS的咒语\nfunction loadSpecificFontCSS(font) {\n    if (!font.url) return; // 如果这个字体不需要加载外部文件，就直接返回\n\n    const fontLinkId = 'dynamic-font-stylesheet';\n    let existingLink = document.getElementById(fontLinkId);\n\n    // 如果已经有一个link标签，并且就是要加载的这个，那就不重复加载了\n    if (existingLink && existingLink.href === font.url) {\n        return;\n    }\n\n    // 如果没有，或者URL不同，就创建一个新的\n    if (!existingLink) {\n        existingLink = document.createElement('link');\n        existingLink.id = fontLinkId;\n        existingLink.rel = 'stylesheet';\n        document.head.appendChild(existingLink);\n    }\n\n    // 更新它的href来加载新字体\n    existingLink.href = font.url;\n}\n\n// 3. 应用字体的核心函数（升级版！）\nfunction applyFontFamily(fontValue) {\n    const root = document.documentElement;\n    root.style.setProperty('--base-font-family', fontValue);\n\n    // 在字体库里找到我们选择的那个字体对象\n    let selectedFontObject = null;\n    for (const category in fontLibrary) {\n        const found = fontLibrary[category].find(font => font.value === fontValue);\n        if (found) {\n            selectedFontObject = found;\n            break;\n        }\n    }\n\n    // 如果找到了，并且它需要从网络加载，就调用加载咒语\n    if (selectedFontObject) {\n        loadSpecificFontCSS(selectedFontObject);\n    }\n\n    // 更新下拉菜单的显示\n    const fontFamilySelector = document.getElementById('font-family-selector');\n    if (fontFamilySelector) {\n        fontFamilySelector.value = fontValue;\n    }\n}\n\n// 4. 填充我们魔法衣橱的咒语 (把所有字体挂上去)\nfunction populateFontSelector() {\n    const selector = document.getElementById('font-family-selector');\n    if (!selector) return;\n\n    selector.innerHTML = ''; // 先清空\n\n    for (const category in fontLibrary) {\n        const optgroup = document.createElement('optgroup');\n        optgroup.label = category; // 创建分类标签，比如 \"在线楷体\"\n\n        fontLibrary[category].forEach(font => {\n            const option = document.createElement('option');\n            option.value = font.value;\n            option.textContent = font.name;\n            // 最神奇的一步：让选项自己用自己的字体显示！\n            option.style.fontFamily = font.value;\n            if(font.url) { // 对于网络字体，给一点加载时间，所以可以加个通用字体\n                 option.style.fontFamily = `'${font.name}', ${font.value}`;\n            }\n\n            optgroup.appendChild(option);\n        });\n\n        selector.appendChild(optgroup);\n    }\n}\n\n// 5. 让字体选择器动起来！\nconst fontFamilySelector = document.getElementById('font-family-selector');\nif (fontFamilySelector) {\n    fontFamilySelector.addEventListener('change', (event) => {\n        const newFontFamily = event.target.value;\n        applyFontFamily(newFontFamily);\n\n        try {\n            localStorage.setItem('baseFontFamily', newFontFamily);\n        } catch (e) {\n            console.warn(\"无法保存字体设置。\");\n        }\n    });\n}\nfunction applyLineHeight(height) {\n    const root = document.documentElement;\n    // 将行高应用到全局CSS变量上\n    root.style.setProperty('--base-line-height', height);\n\n    // 更新滑块旁边的数值显示，保留一位小数让它更整齐\n    const lineHeightValueDisplay = document.getElementById('line-height-value');\n    if (lineHeightValueDisplay) {\n        lineHeightValueDisplay.textContent = parseFloat(height).toFixed(1);\n    }\n\n    // 同样，确保滑块位置同步\n    const lineHeightSlider = document.getElementById('line-height-slider');\n    if (lineHeightSlider) {\n        lineHeightSlider.value = height;\n    }\n}\n\n// 2. 找到我们的行高滑块\nconst lineHeightSlider = document.getElementById('line-height-slider');\n\n// 3. 监听滑块的拖动事件\nif (lineHeightSlider) {\n    lineHeightSlider.addEventListener('input', (event) => {\n        const newHeight = event.target.value;\n        applyLineHeight(newHeight);\n\n        // 同样，将选择保存到 localStorage\n        try {\n            localStorage.setItem('baseLineHeight', newHeight);\n        } catch (e) {\n            console.warn(\"无法保存行高设置。\");\n        }\n    });\n}\n\n// 2. 找到我们的新滑块\nconst fontSizeSlider = document.getElementById('font-size-slider');\n\n// 3. 监听滑块的拖动事件\nif (fontSizeSlider) {\n    fontSizeSlider.addEventListener('input', (event) => {\n        const newSize = event.target.value;\n\n        // 当用户拖动时，立刻应用新的字体大小\n        applyFontSize(newSize);\n\n        // 并将选择保存到 localStorage，就像保存主题一样\n        try {\n            localStorage.setItem('baseFontSize', newSize);\n        } catch (e) {\n            console.warn(\"无法保存字体大小设置。\");\n        }\n    });\n}\n    /**\n     * 函数：应用自定义主题\n     * @param {object} themeObject - 包含自定义颜色键值对的对象\n     */\n    function applyCustomTheme(themeObject) {\n         const root = document.documentElement;\n         for(const [key, value] of Object.entries(themeObject)) {\n              root.style.setProperty(key, value);\n         }\n    }\n\n \n     /**\n     * 函数：加载保存的自定义主题\n     * return {object} - 返回保存的主题对象，如果不存在则返回空对象\n     */\n    function loadCustomTheme() {\n        try {\n            const savedTheme = localStorage.getItem('customTerminalTheme');\n            return savedTheme ? JSON.parse(savedTheme) : {};\n        } catch(e) {\n            console.warn(\"无法加载自定义主题。\", e);\n            return {};\n        }\n    }\n\n    /**\n     * 函数：初始化颜色编辑器\n     */\n    function initializeColorEditor() {\n        colorPickerContainer.innerHTML = '';\n        const currentStyles = getComputedStyle(document.documentElement);\n\n        editableColorVars.forEach(item => {\n            const wrapper = document.createElement('div');\n            wrapper.className = 'color-picker-item';\n\n            const label = document.createElement('label');\n            label.textContent = item.label;\n\n            const colorInput = document.createElement('input');\n            colorInput.type = 'color';\n            colorInput.dataset.cssVar = item.var;\n\n            // 获取当前实时生效的颜色值（可能是预设主题或已加载的自定义主题）\n            let currentColor = currentStyles.getPropertyValue(item.var).trim();\n\n            // 对于RGBA， input[type=color] 需要HEX。我们进行一个简单的转换。\n            // 简单的处理方式是忽略alpha通道或设置一个默认不透明的颜色。\n            // 注意：这个转换很简单，可能不完美。\n            if (currentColor.startsWith('rgba')) {\n                 const parts = currentColor.match(/(\\d+)/g);\n                 if (parts) {\n                     currentColor = `#${parseInt(parts[0]).toString(16).padStart(2, '0')}${parseInt(parts[1]).toString(16).padStart(2, '0')}${parseInt(parts[2]).toString(16).padStart(2, '0')}`;\n                 }\n            }\n            colorInput.value = currentColor;\n\n\n            // 实时预览\n            colorInput.addEventListener('input', (e) => {\n                const newColor = e.target.value;\n                document.documentElement.style.setProperty(item.var, newColor);\n                // 对于需要Alpha通道的颜色，我们在这里硬编码添加\n                if (item.var === '--container-bg-color') {\n                     document.documentElement.style.setProperty(item.var, hexToRgba(newColor, 0.75));\n                } else if (item.var === '--border-color') {\n                     document.documentElement.style.setProperty(item.var, hexToRgba(newColor, 0.3));\n                } else if (item.var === '--glow-color' || item.var === '--danger-glow-color') {\n                     document.documentElement.style.setProperty(item.var, hexToRgba(newColor, 0.5));\n                }\n            });\n\n            wrapper.appendChild(label);\n            wrapper.appendChild(colorInput);\n            colorPickerContainer.appendChild(wrapper);\n        });\n    }\n\n    // Hex to RGBA 辅助函数\n    function hexToRgba(hex, alpha) {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n\n\n    // 事件监听\n    editCustomThemeBtn.addEventListener('click', () => {\n        const isVisible = customThemeEditor.style.display !== 'none';\n        if (!isVisible) {\n            initializeColorEditor();\n            customThemeEditor.style.display = 'flex';\n            editCustomThemeBtn.textContent = '完成';\n        } else {\n            // 用户点击“完成”，保存更改\n            const newCustomTheme = {};\n            document.querySelectorAll('#color-picker-container input[type=\"color\"]').forEach(input => {\n                const cssVar = input.dataset.cssVar;\n                let colorValue = input.value;\n                // 保存时也转换rgba\n                if (cssVar === '--container-bg-color') {\n                    colorValue = hexToRgba(colorValue, 0.75);\n                } else if (cssVar === '--border-color') {\n                    colorValue = hexToRgba(colorValue, 0.3);\n                } else if (cssVar === '--glow-color' || cssVar === '--danger-glow-color') {\n                     colorValue = hexToRgba(colorValue, 0.5);\n                }\n                newCustomTheme[cssVar] = colorValue;\n            });\n            try {\n                localStorage.setItem('customTerminalTheme', JSON.stringify(newCustomTheme));\n                customTheme = newCustomTheme; // 更新内存中的自定义主题\n                console.log('自定义主题已保存!');\n            } catch(e) {\n                console.warn('无法保存自定义主题。');\n            }\n            customThemeEditor.style.display = 'none';\n            editCustomThemeBtn.textContent = '编辑';\n        }\n    });\n\n    applyCustomThemeBtn.addEventListener('click', () => {\n        const savedCustomTheme = loadCustomTheme();\n        if (Object.keys(savedCustomTheme).length > 0) {\n            customTheme = savedCustomTheme;\n            applyCustomTheme(customTheme);\n            try {\n                // 设置一个标记，表示正在使用自定义主题\n                localStorage.setItem('useCustomTheme', 'true');\n                // 可以选择性地清除预设主题索引，或保留它以便切换回去\n                // localStorage.removeItem('terminalThemeIndex');\n            } catch (e) {\n                console.warn(\"无法保存自定义主题使用状态。\");\n            }\n        } else {\n            // 如果没有保存的自定义主题，可以给个提示\n            alert('请先编辑并保存一个自定义主题。');\n        }\n    });\n\n\n \n    // 全局变量存储数据\n    let currentMapData = null;\n    let currentGameData = null;\n   // --- 全局变量和数据获取 ---\n        let playCharacterData = getVariables({ type: 'chat' }).play_character_data;\n        let assaSettingsData = {};\n \nlet checkMemoryData = null;   // 用于存储上一轮的投掷记忆\n let worldAttitudeData = null; // 用于存储世界态度变量\nlet characterStatusData = null; // 用于存储人物状态变量\nlet lasttoken = 0;\nlet summarys = null;\nlet ISNEWMAP = \"false\";\n\n\n    let worldBookState = {\n        currentTab: 'settings', // 默认显示设定\n        currentPage: 1,\n        itemsPerPage: 5, // 每页显示5条，你可以根据喜好调整\n        data: {}\n    };\n    /**\n     * 安全地从数据源获取值。\n     * @param {*} value - 输入的数据\n     * @returns {string|number} - 处理后的值\n     */\n    function SafeGetValue(value) {\n        if (Array.isArray(value)) {\n            let res = value.length > 0 ? value[0] : '';\n            return(res === '' || res === null || res === undefined) ? '无' : res;\n        }\n        return (value === '' || value === null || value === undefined) ? '无' : value;\n\n    }\n\n\n\n \nasync function handleUpgrade(targetPath, targetName, currentLevel, type) {\n    // 显示级数选择模态框\n    showLevelSelectionModal(targetPath, targetName, currentLevel, type);\n}\n\n // 找到并替换整个 showLevelSelectionModal 函数\nfunction showLevelSelectionModal(targetPath, targetName, currentLevel, type) {\n    const currentXp = playCharacterData.货币段.经验值[0];\n\n    // 生成模态框的HTML内容，注意：移除了 onclick 和 onchange\n    const modalContent = `\n        <div style=\"padding: 20px;\">\n            <p><strong>当前\"${targetName}\"等级:</strong> ${currentLevel}</p>\n            <p><strong>当前${currentTheme.exp}:</strong> ${currentXp}</p>\n\n            <div style=\"margin: 20px 0;\">\n                <label for=\"upgrade-levels\" >选择升级级数:</label>\n                <select id=\"upgrade-levels\">\n                    ${generateLevelOptions(currentLevel, type, currentXp)}\n                </select>\n            </div>\n\n            <div id=\"upgrade-cost-display\" >\n                选择升级级数以查看消耗\n            </div>\n\n            <div style=\"text-align: center; margin-top: 30px;\">\n                <button id=\"confirm-upgrade-btn\" disabled>确定升级</button>\n            </div>\n        </div>\n    `;\n\n    // 显示模态框（这部分不变）\n    showModal('shop-modal', '选择升级级数', modalContent);\n\n    // --- 魔法在这里！---\n    // 等待模态框渲染完成后，我们再来为里面的元素安排工作\n    setTimeout(() => {\n        const selectElement = document.getElementById('upgrade-levels');\n        const confirmButton = document.getElementById('confirm-upgrade-btn');\n\n        if (selectElement && confirmButton) {\n            // 为下拉框安排“改变时更新-消耗”的工作\n            selectElement.addEventListener('change', () => {\n                updateUpgradeCost(type, currentLevel);\n            });\n\n            // 为按钮安排“点击时确认升级”的工作\n            confirmButton.addEventListener('click', () => {\n                confirmUpgrade(targetPath, targetName, currentLevel, type);\n            });\n\n            // 第一次打开时，也主动更新一下消耗显示\n            updateUpgradeCost(type, currentLevel);\n        }\n    }, 100); // 延迟一点点时间确保元素已经出现在页面上\n}\n\nfunction generateLevelOptions(currentLevel, type, currentXp) {\n    let options = '';\n    \n    // 生成1-10级的选项\n    for (let i = 1; i <= 10; i++) {\n        const targetLevel = currentLevel + i;\n        const totalCost = calculateLevelRangeCost(currentLevel, targetLevel, type);\n        const canAfford = currentXp >= totalCost;\n        const affordText = canAfford ? '' : ' (经验不足)';\n        const textColor = canAfford ? '' : ' style=\"color: #999;\"';\n        \n        options += `<option value=\"${i}\"${textColor}>${i}级 (${currentLevel} → ${targetLevel})${affordText}</option>`;\n    }\n    \n    return options;\n}\n\nfunction updateUpgradeCost(type, currentLevel) {\n    const selectElement = document.getElementById('upgrade-levels');\n    const confirmButton = document.getElementById('confirm-upgrade-btn');\n    const costDisplay = document.getElementById('upgrade-cost-display');\n    \n    if (!selectElement || !confirmButton || !costDisplay) return;\n    \n    const selectedLevels = parseInt(selectElement.value);\n    const targetLevel = currentLevel + selectedLevels;\n    const totalCost = calculateLevelRangeCost(currentLevel, targetLevel, type);\n    const currentXp = playCharacterData.货币段.经验值[0];\n    const canAfford = currentXp >= totalCost;\n    \n    // 更新消耗显示\n    const statusColor = canAfford ? '#28a745' : '#dc3545';\n    const statusIcon = canAfford ? '✓' : '✗';\n    const statusText = canAfford ? `${currentTheme.exp}充足` : `${currentTheme.exp}不足 (缺少 ${totalCost - currentXp} 点)`;\n    costDisplay.innerHTML = `\n        <div style=\"font-size: 14px;\">\n            <p><strong>升级 ${selectedLevels} 级消耗:</strong></p>\n               <p>${currentTheme.exp}: <strong>${totalCost}</strong> 点</p>\n            <p>当前拥有: <strong>${currentXp}</strong> 点</p>\n            <p>\n                ${statusIcon} ${statusText}\n            </p>\n        </div>\n    `;\n    \n    // 更新确定按钮状态\n    confirmButton.disabled = !canAfford;\n    confirmButton.style.opacity = canAfford ? '1' : '0.5';\n    confirmButton.style.cursor = canAfford ? 'pointer' : 'not-allowed';\n}\n\n async function confirmUpgrade(targetPath, targetName, currentLevel, type) {\n    const selectElement = document.getElementById('upgrade-levels');\n    if (!selectElement) return;\n    \n    const selectedLevels = parseInt(selectElement.value);\n    const targetLevel = currentLevel + selectedLevels;\n    const totalCost = calculateLevelRangeCost(currentLevel, targetLevel, type);\n    const currentXp = playCharacterData.货币段.经验值[0];\n    \n    // 最终验证经验是否足够\n    if (currentXp < totalCost) {\n        showModal('shop-modal', '经验不足', \n            `升级\"${targetName}\" ${selectedLevels}级需要 ${totalCost} 点经验值，您当前只有 ${currentXp} 点。`);\n        return;\n    }\n    \n try {\n    const newXp = currentXp - totalCost;\n    const messageToSend = `<（${currentTheme.exp}已扣除，禁止重复扣除）${currentGameData.user_character.name}将\"${targetName}\"从 ${currentLevel} 级提升至 ${targetLevel} 级！>\\n`;\ntriggerassa(`/setinput ${messageToSend}`);\n    // --- 这是一个通用的更新函数，我们会调用它两次 ---\n    const updateLogic = (currentVars) => {\n        // 创建一个深拷贝，确保我们不会意外修改原始数据\n        const workingCopy = JSON.parse(JSON.stringify(currentVars));\n\n        // 确保 play_character_data 存在\n        if (!workingCopy.play_character_data) {\n            console.error(\"错误：更新目标 'play_character_data' 不存在。\");\n            return currentVars; // 如果结构不对，返回原始数据以避免崩溃\n        }\n\n        // 这是一个辅助函数，用于根据路径在指定的对象内部设置值\n        const setNestedValue = (obj, path, value) => {\n            const keys = path.split('.');\n            let current = obj;\n            for (let i = 0; i < keys.length - 1; i++) {\n                if (!current[keys[i]]) {\n                    // 如果路径中的某个环节不存在，就创建一个空对象\n                    current[keys[i]] = {};\n                }\n                current = current[keys[i]];\n            }\n            const finalKey = keys[keys.length - 1];\n            if (Array.isArray(current[finalKey])) {\n                current[finalKey][0] = value;\n            } else {\n                current[finalKey] = value;\n            }\n        };\n\n        const characterData = workingCopy.play_character_data;\n\n        // 1. 更新目标属性的等级\n        setNestedValue(characterData, targetPath, targetLevel);\n\n        // 2. 更新经验值\n        const expPath = `货币段.${currentTheme.exp}`;\n        setNestedValue(characterData, expPath, newXp);\n\n        return workingCopy; // 返回更新后的完整变量对象\n    };\n    // ----------------------------------------------------\n\n    // 第一步：同步更新 'chat' 和 'message' 变量\n    // 我们用 Promise.all 来确保两个更新都完成后再继续\n    await Promise.all([\n        updateVariablesWith(updateLogic, { type: 'chat' }),\n        updateVariablesWith(updateLogic, { type: 'message'})\n    ]);\n\n initDisplay(false);\n\n\n    // 第三步：显示成功模态框\n    showModal('shop-modal', '升级成功',\n        `\"${targetName}\" 已成功从 ${currentLevel} 级提升至 ${targetLevel} 级！<br><br>消耗${currentTheme.exp}: ${totalCost} 点`);\n\n    // 第四步：刷新整个界面，确保所有数据和显示都完美同步\n    await initDisplay(false);\n\n} catch (error) {\n    console.error(\"升级失败:\", error);\n    showModal('shop-modal', '操作失败', '在更新数据或发送消息时发生错误。请查看控制台获取详细信息。');\n}\n}\n\n// 计算升级指定级数范围的总消耗\nfunction calculateLevelRangeCost(fromLevel, toLevel, type) {\n    let totalCost = 0;\n    for (let level = fromLevel; level < toLevel; level++) {\n        totalCost += calculateXpCost(level, type);\n    }\n    return totalCost;\n}\n\nfunction calculateXpCost(currentLevel, type) {\n    if (type === 'attribute') {\n        // 属性升级成本更高，例如 (当前等级+1) * 15\n        return (currentLevel + 1) * 15;\n    }\n    // 技能升级成本，例如 (当前等级+1) * 10\n    return (currentLevel + 1) * 10;\n}\n\n    /**\n * 新增：填充除角色状态页外的所有通用数据\n * @param {object} statData - stat_data 对象\n * @param {object} assaData - assa_data 对象\n */\nfunction populateGeneralData(statData, assaData,playData) {\n    const worldData = statData.world_shard;\n    const taskData = worldData.task;\n    const charData = statData.user_character;\n\n  document.getElementById('world-shard').textContent = SafeGetValue(worldData.name) ||'SYSTEM TERMINAL';\n\n \n    document.getElementById('info-world-desc').textContent = SafeGetValue(worldData.description);\n \n\n// 获取世界能量层级和最大能量值\nvar world_level = statData.world_shard?.level[0] || '中';\nvar world_max_enegy = 3;\nif (world_level === '无') {\n    world_max_enegy = 3;\n} else if (world_level === '低') {\n    world_max_enegy = 5;\n} else if (world_level === '中') {\n    world_max_enegy = 7;\n} else if (world_level === '高') {\n    world_max_enegy = 12;\n} else if (world_level === '神话') {\n    world_max_enegy = 16;\n} else {\n    world_max_enegy = 7;\n}\n  \n// 更新标题栏信息\ndocument.getElementById('header-location').textContent = SafeGetValue(charData.current_location);\ndocument.getElementById('header-time').textContent = SafeGetValue(statData.纪年)+\" \"+SafeGetValue(statData.日期)+\" \"+SafeGetValue(statData.时间)+\" \"+SafeGetValue(statData.星期)+\" \"+SafeGetValue(statData.天气);\ndocument.getElementById('header-check').textContent = SafeGetValue(statData.检定属性);\ndocument.getElementById('header-combat').textContent = SafeGetValue(statData.敌方攻击骰池);\ndocument.getElementById('header-difficulty').textContent = `${SafeGetValue(statData.检定难度)}(${world_level}:1-${world_max_enegy})`;\n\n\n/* 填充任务详情 */\n    document.getElementById('task-objective').textContent = SafeGetValue(taskData.objective);\n    document.getElementById('task-status').textContent = SafeGetValue(taskData.status);\n    const progress = SafeGetValue(taskData.progress);\n    document.getElementById('task-progress-bar').style.width = (typeof progress === 'number' ? progress : 0) + '%';\n    document.getElementById('task-rewards').textContent = SafeGetValue(taskData.rewards);\n    document.getElementById('task-penalties').textContent = SafeGetValue(taskData.penalties);\n    document.getElementById('task-time-left').textContent = SafeGetValue(taskData.time_left) + ' 天';\n\n\n}\n\n// --- 新增：获取并解析状态加成 (增强版) ---\nfunction getStatusBonuses(statData) {\n    const bonuses = {};\n    const statusString = _.get(statData, \"user_character.status[0]\", \"\");\n    if (!statusString) {\n        return bonuses;\n    }\n\n    // 定义属性和技能的分类，用于批量处理\n    const attributeCategories = {\n        '生理属性': ['力量', '敏捷', '耐力'],\n        '心智属性': ['智力', '感知', '决心'],\n        '互动属性': ['风度', '操控', '沉着'],\n        '全属性': ['力量', '敏捷', '耐力', '智力', '感知', '决心', '风度', '操控', '沉着'],\n        '生理技能': ['运动', '肉搏', '驾驶', '枪械', '手上功夫', '隐藏', '求生', '白刃', '弓箭'],\n        '心智技能': ['学识', '电脑', '手艺', '调查', '医学', '神秘学', '科学'],\n        '互动技能': ['动物沟通', '感受', '表达', '胁迫', '交际', '掩饰'],\n        '全技能': ['运动', '肉搏', '驾驶', '枪械', '手上功夫', '隐藏', '求生', '白刃', '弓箭', '学识', '电脑', '手艺', '调查', '医学', '神秘学', '科学', '动物沟通', '感受', '表达', '胁迫', '交际', '掩饰']\n    };\n    // 为了更快的查找，创建一个反向映射，知道每个子属性属于哪个大类\n    const subAttributeMap = {};\n    for (const category in attributeCategories) {\n        attributeCategories[category].forEach(attr => {\n            if (!subAttributeMap[attr]) subAttributeMap[attr] = [];\n            subAttributeMap[attr].push(category);\n        });\n    }\n\n    const matches = statusString.match(/【[^】]+】/g);\n\n    if (matches) {\n        matches.forEach(match => {\n            const content = match.substring(1, match.length - 1);\n            const attributes = content.split(/;|；/).map(attr => attr.trim()).filter(attr => attr !== \"\");\n\n            attributes.forEach(attr => {\n                // 正则匹配 \"名称+/-数值\" (暂不支持百分比)\n                const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n\n                if (parts && parts.length === 3) {\n                    let name = parts[1].trim();\n                    const value = parseInt(parts[2].trim().replace('+', ''), 10);\n\n                    // 检查是类别还是单个属性\n                    if (attributeCategories[name]) {\n                        // 是一个类别，批量应用\n                        attributeCategories[name].forEach(subAttr => {\n                            bonuses[subAttr] = (bonuses[subAttr] || 0) + value;\n                        });\n                    } else {\n                        // 是单个属性\n                        bonuses[name] = (bonuses[name] || 0) + value;\n                    }\n                }\n            });\n        });\n    }\n    return bonuses;\n}\n\n/**\n * 获取并解析所有已装备物品的属性加成\n * @param {object} statData - 核心数据 currentGameData\n * @param {object} assaData - 设定数据 assaSettingsData\n * @returns {object} 一个以属性名为键，加成数值为值的对象, e.g. { \"力量\": 5, \"敏捷\": -2 }\n */\nfunction getEquipmentBonuses(statData, assaData) {\n    const bonuses = {};\n    // 安全地访问当前装备，如果不存在则使用空对象\n    const equipment = statData?.user_character?.当前装备 || {};\n    const equipmentList = [];\n\n    // 定义一个包含所有合法的、我们关心的穿戴装备槽位的列表\n    const validWearableSlots = ['头部', '身体', '手部', '脚部', '饰品'];\n\n   // 1. 处理\"手持\"装备 - 支持分号分割的多个装备\nif (equipment.手持 && Array.isArray(equipment.手持) && equipment.手持[0] && equipment.手持[0] !== \"无\") {\n    // 按分号分割手持装备，支持同时手持多个物品\n    const handItems = equipment.手持[0].split(/;|；/).map(item => item.trim()).filter(item => item !== \"无\" && item !== \"\");\n    equipmentList.push(...handItems);\n}\n\nconst wearableItems = equipment.穿戴;\n// 确保穿戴装备部分是一个有效的对象\nif (wearableItems && typeof wearableItems === 'object' && wearableItems !== null) {\n    // 遍历预先定义好的合法槽位列表\n    validWearableSlots.forEach(slotName => {\n        // 根据合法的槽位名，去数据中精确查找对应的装备信息\n        const slot = wearableItems[slotName];\n\n        // 对找到的槽位信息进行有效性检查\n        if (slot && Array.isArray(slot) && slot[0] && slot[0] !== \"无\") {\n            // 按分号分割该部位的装备，支持同一部位穿戴多个物品\n            const slotItems = slot[0].split(/;|；/).map(item => item.trim()).filter(item => item !== \"无\" && item !== \"\");\n            equipmentList.push(...slotItems);\n        }\n    });\n}\n\n equipmentList.forEach(itemName => {\n    // 首先，我们和以前一样，从背包中寻找装备数据\n    const itemData =\n        assaData?.global_set?.背包?.[itemName] ||\n        null;\n\n    // 确保我们找到了数据才继续\n    if (itemData) {\n        let stringToParse = ''; // 我们准备一个篮子，并确保它始终是字符串\n\n        // 第一步：我们先检查拿到的 itemData 到底是什么类型\n        if (typeof itemData === 'string') {\n            // 如果它是一封“信”(string)，我们就尝试用JSON的方式去读它\n            try {\n                const itemObject = JSON.parse(itemData);\n                // 如果读出来是一个“礼盒”(object)，并且里面有我们想要的effect“清单”\n                if (typeof itemObject === 'object' && itemObject !== null ) {\n                   \n    if (typeof itemObject.effect === 'string') {\n        \n        stringToParse = itemObject.effect;\n    }\n    // 如果没有 effect，尝试中文属性\n    else if (typeof itemObject.属性 === 'string') {\n        stringToParse = itemObject.属性;\n    } else if (typeof itemObject.效果 === 'string') {\n        stringToParse = itemObject.效果;\n    }\n                }\n            } catch (e) {\n                // 如果用JSON的方式读信失败了，说明它就是一封普通的信，内容就是我们要的\n                // 比如 \"【防御+5】\" 这种\n                stringToParse = itemData;\n            }\n        } else if (typeof itemData === 'object' && itemData !== null) {\n   \n                if (typeof itemData.effect === 'string') {\n        stringToParse = itemData.effect;\n    }\n    // 如果没有 effect，尝试中文属性\n    else if (typeof itemData.属性 === 'string') {\n        stringToParse = itemData.属性;\n    } else if (typeof itemData.效果 === 'string') {\n        stringToParse = itemData.效果;\n    }\n \n        }\n\n        // 现在，无论来源如何，我们的“篮子”(stringToParse)里都装好了要处理的属性字符串\n        // 正则匹配所有【属性+数值】或【属性-数值】格式的描述\n        const matches = stringToParse.match(/【[^】]+】/g);\n\n        // ---- 后续的加成计算逻辑完全保持不变，因为它非常棒 ----\n        if (matches) {\n            const derivedAttrMapping = {\n                '防御': '衍生属性段.防御.基础防御',\n                '速度': '衍生属性段.速度.基础速度'\n            };\n\n            matches.forEach(match => {\n                const content = match.substring(1, match.length - 1);\n                const attributes = content.split(/;|；/).map(attr => attr.trim()).filter(attr => attr !== \"\");\n\n                attributes.forEach(attr => {\n                    const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n\n                    if (parts && parts.length === 3) {\n                        let attrName = parts[1].trim();\n                        const value = parseInt(parts[2].trim().replace('+', ''), 10);\n\n                        const mappedPath = derivedAttrMapping[attrName];\n                        const finalKey = mappedPath || attrName;\n\n                        if (!bonuses[finalKey]) {\n                            bonuses[finalKey] = 0;\n                        }\n                        bonuses[finalKey] += value;\n                    }\n                });\n            });\n        }\n    }\n});\n    return bonuses;\n}\n\n\n /**\n * 显示美化后的称号管理面板\n * @param {object} assaData - 包含 global_set 的 assaData 对象\n */\nfunction showTitleManager(assaData) {\n   const allTitles = assaData?.global_set?.称号|| {};\n \n    // 定义一个 Key 到中文标签的映射，让显示更友好\n    const keyToLabelMap = {\n        '达成条件': '达成条件',\n        '描述': '描述',\n        '外观效果': '外观效果'\n        // 你可以在这里添加更多你想显示的 key 的中文映射\n    };\n\n    let modalContent = '<div class=\"title-manager-list\">';\n    modalContent += '<h3>称号管理</h3><p class=\"modal-subtitle\">点击称号条目可展开/收起详情</p>';\n\n    const titleKeys = Object.keys(allTitles).filter(key => key !== '_comment_');\n\n    if (titleKeys.length === 0) {\n        modalContent += '<p style=\"text-align:center; color: var(--text-secondary-color);\">目前没有任何称号。</p>';\n    } else {\n        titleKeys.forEach(titleName => {\n            const titleData = allTitles[titleName];\n             const isShown = String(titleData.是否显示).toLowerCase() === 'true';\n\n            // 为每个称号创建一个容器，包含可点击的主条目和隐藏的详情面板\n            modalContent += `\n                <div class=\"title-item-container\">\n                    <div class=\"title-manager-item\" data-title-name=\"${titleName}\">\n                        <span class=\"title-name\">${titleName}</span>\n                        <div class=\"title-actions\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" class=\"title-toggle-checkbox\" data-title=\"${titleName}\" ${isShown ? 'checked' : ''}>\n                                <span class=\"slider\"></span>\n                            </label>\n                        </div>\n                    </div>\n                    <div class=\"title-details-panel\" id=\"details-for-${titleName.replace(/\\s+/g, '_')}\"></div>\n                </div>\n            `;\n        });\n    }\n    modalContent += '</div>';\n\n    showModal('shop-modal', '');\n    const messageEl = document.getElementById('shop-modal-message');\n\n    if (messageEl) {\n        messageEl.innerHTML = modalContent;\n\n        // 使用更智能的事件委托来处理所有交互\n        messageEl.addEventListener('click', function(event) {\n            const item = event.target.closest('.title-manager-item');\n            const toggle = event.target.closest('.toggle-switch');\n\n            // 如果点击的是开关，则不触发展开/收起逻辑\n            if (toggle) {\n                // 开关的 change 事件会单独处理\n                return;\n            }\n\n            // 如果点击的是称号条目\n            if (item) {\n                const titleName = item.dataset.titleName;\n                const detailsPanelId = `details-for-${titleName.replace(/\\s+/g, '_')}`;\n                const detailsPanel = document.getElementById(detailsPanelId);\n\n                if (!detailsPanel) return;\n\n                // 判断当前是否已展开\n                const isCurrentlyActive = detailsPanel.classList.contains('active');\n\n                // 先关闭所有其他已展开的面板\n                document.querySelectorAll('.title-details-panel.active').forEach(panel => {\n                    if (panel.id !== detailsPanelId) {\n                        panel.classList.remove('active');\n                        panel.innerHTML = '';\n                    }\n                });\n\n                // 如果当前是收起状态，则展开它\n                if (!isCurrentlyActive) {\n                    const titleData = allTitles[titleName];\n                    let detailsHtml = '<ul>';\n                    for (const key in titleData) {\n                        // 过滤掉我们不希望直接显示的key\n                        if (Object.prototype.hasOwnProperty.call(titleData, key) && key !== '是否显示') {\n                            const label = keyToLabelMap[key] || key; // 使用映射或原始key\n                            const value = titleData[key].toString().replace(/\\\\n/g, '<br>'); // 处理换行\n                            detailsHtml += `<li><span class=\"detail-key\">${label}:</span> <span class=\"detail-value\">${value}</span></li>`;\n                        }\n                    }\n                    detailsHtml += '</ul>';\n\n                    detailsPanel.innerHTML = detailsHtml;\n                    detailsPanel.classList.add('active');\n                } else {\n                    // 如果当前是展开状态，则收起它\n                    detailsPanel.classList.remove('active');\n                    // 可以加一个延时清空内容，等待动画结束\n                    setTimeout(() => { detailsPanel.innerHTML = ''; }, 350);\n                }\n            }\n        });\n\n        // 开关的 change 事件处理（保持不变）\n        messageEl.addEventListener('change', function(event) {\n            if (event.target.classList.contains('title-toggle-checkbox')) {\n                const titleToUpdate = event.target.dataset.title;\n                const newStatus = event.target.checked;\n                const command = `/setinput <updateMemory>\\nmemory('global_set.称号.${titleToUpdate}','是否显示','${newStatus}')\\n</updateMemory>\\n<${userName} 将称号 [${titleToUpdate}] 设置为${newStatus ? '显示' : '隐藏'}>`;\n\n                if (typeof triggerassa !== 'undefined') {\n                    triggerassa(command);\n                    showNovaAlert(`称号 [${titleToUpdate}] 显示状态更新指令已发送！`);\n                }\n            }\n        });\n    }\n}\n // ==========================================================\n// ========== 完整替换 populateCharacterPage 函数 ==========\n// ==========================================================\nfunction populateCharacterPage(playData, statData, assaData) {\n    const charStat = statData.user_character;\n    const derived = playData.衍生属性段;\n    const currency = playData.货币段;\n      const nameDisplay = document.getElementById('char-display-name');\n    let titleContainer = document.getElementById('char-titles-container');\n    // 如果HTML中没有这个元素，JS会自动创建并添加到名字上方\n    if (!titleContainer && nameDisplay && nameDisplay.parentNode) {\n        titleContainer = document.createElement('div');\n        titleContainer.id = 'char-titles-container';\n        titleContainer.className = 'char-titles-container'; // 使用 class 便于 CSS 美化\n        nameDisplay.parentNode.insertBefore(titleContainer, nameDisplay);\n    }\n\n    if(titleContainer){\n        titleContainer.innerHTML = ''; // 每次刷新前清空\n        titleContainer.style.cursor = 'pointer'; // 鼠标变成小手，提示可点击\n        titleContainer.setAttribute('title', '点击管理称号'); // 简单的悬浮提示\n\n        const allTitles = assaData?.global_set?.称号 ||{};\n        let displayedTitlesCount = 0;\n        // 遍历所有称号，找到需要显示的\n        for (const titleName in allTitles) {\n            if (Object.prototype.hasOwnProperty.call(allTitles, titleName) && titleName !== '_comment_') {\n                 if(String(allTitles[titleName].是否显示).toLowerCase() === 'true') {\n                    const titleSpan = document.createElement('span');\n                    titleSpan.className = 'char-title-tag'; // 便于用CSS添加样式\n                    titleSpan.textContent = `【${titleName}】`;\n                    titleContainer.appendChild(titleSpan);\n                    displayedTitlesCount++;\n                }\n            }\n        }\n        // 如果没有显示的称号，可以给个提示\n        if(displayedTitlesCount === 0){\n             titleContainer.innerHTML = '<span class=\"char-title-tag placeholder\">(无显示称号)</span>';\n        }\n\n        // 为整个称号容器绑定点击事件，打开称号管理器\n        titleContainer.onclick = () => showTitleManager(assaData);\n    }\n\n\n    // --- 左侧和中间面板 (基本不变) ---\n    document.getElementById('char-display-name').textContent = SafeGetValue(charStat.name);\n    //document.getElementById('char-display-status').textContent = SafeGetValue(charStat.status) || '正常';\n    document.getElementById('char-display-prestige').textContent = SafeGetValue(charStat.Cross_world_prestige);\n \n    // --- 状态栏折叠功能 ---\n{ // 使用块作用域避免变量污染\n    const statusSpan = document.getElementById('char-display-status');\n    const statusLine = statusSpan.closest('.info-line');\n    const statusLabel = statusLine?.querySelector('.info-label');\n    const fullStatusText = SafeGetValue(charStat.status) || '正常';\n    const COLLAPSE_THRESHOLD = 8; // 当状态文字超过8个字符时，启用折叠\n\n    if (statusLabel) {\n        // 清理可能存在的旧事件，以防函数重复调用导致事件重复绑定\n        if (statusLine.__toggleHandler) {\n            statusLabel.removeEventListener('click', statusLine.__toggleHandler);\n            delete statusLine.__toggleHandler;\n        }\n        statusLabel.classList.remove('collapsible-label');\n\n        if (fullStatusText.length > COLLAPSE_THRESHOLD) {\n            const shortText = fullStatusText.substring(0, COLLAPSE_THRESHOLD) + '...';\n            statusSpan.textContent = shortText; // 初始显示为折叠状态\n            statusLine.dataset.isExpanded = 'false';\n\n            statusLabel.classList.add('collapsible-label');\n\n            const toggleHandler = () => {\n                const isExpanded = statusLine.dataset.isExpanded === 'true';\n                if (isExpanded) {\n                    statusSpan.textContent = shortText;\n                    statusLine.dataset.isExpanded = 'false';\n                } else {\n                    statusSpan.textContent = fullStatusText;\n                    statusLine.dataset.isExpanded = 'true';\n                }\n            };\n\n            statusLabel.addEventListener('click', toggleHandler);\n            statusLine.__toggleHandler = toggleHandler; // 将处理器附加到父元素上，便于后续清理\n        } else {\n            statusSpan.textContent = fullStatusText; // 文本不长，直接显示\n        }\n    } else {\n        // 如果找不到对应的标签，作为降级方案直接设置文本\n         statusSpan.textContent = fullStatusText;\n    }\n}\n// --- 状态栏折叠功能结束 ---\n\n    const hp = derived.生命值;\n    document.getElementById('char-hp-bar').style.width = (hp.当前值[0] / hp.上限[0] * 100) + '%';\n    document.getElementById('char-hp-text').textContent = `${hp.当前值[0]} / ${hp.上限[0]}`;\n    const will = derived.意志力;\n    document.getElementById('char-will-bar').style.width = (will.当前值[0] / will.上限[0] * 100) + '%';\n    document.getElementById('char-will-text').textContent = `${will.当前值[0]} / ${will.上限[0]}`;\n    const energy = derived.能量池;\n    document.getElementById('char-energy-label').textContent = SafeGetValue(energy.名称);\n    document.getElementById('char-energy-bar').style.width = (Number(energy.当前值[0]) / Number(energy.上限[0]) * 100) + '%';\n    document.getElementById('char-energy-text').textContent = `${Number(energy.当前值[0])} / ${Number(energy.上限[0])}`;\n\n       // ================== 💖 把妈妈的代码放在这里 💖 ==================\n\n    // 动态生成额外的资源条\n    const dynamicBarsContainer = document.getElementById('dynamic-resource-bars-container');\n    dynamicBarsContainer.innerHTML = ''; // 每次刷新前先清空\n\n    const resourceBars = assaData?.global_set?.资源条;\n    if (resourceBars) {\n        for (const resourceName in resourceBars) {\n            if (Object.prototype.hasOwnProperty.call(resourceBars, resourceName) && typeof resourceBars[resourceName] === 'object') {\n                const resource = resourceBars[resourceName];\n\n                // 创建元素\n                const container = document.createElement('div');\n                container.className = 'resource-bar-container';\n\n                const label = document.createElement('div');\n                label.className = 'resource-bar-label';\n                label.textContent = resourceName;\n\n                const barBg = document.createElement('div');\n                barBg.className = 'progress-bar-bg resource'; // 复用样式\n\n                const barFill = document.createElement('div');\n                // 你可以创建一个通用的CSS类 'generic-resource' 来定义这些条的颜色\n                barFill.className = 'progress-bar-fill generic-resource';\n                const percentage = (Number(resource.当前值) / Number(resource.最大值)) * 100;\n                barFill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;\n\n                const text = document.createElement('span');\n                text.className = 'progress-bar-text';\n                text.textContent = `${Number(resource.当前值) || 0} / ${Number(resource.最大值) || 0}`;\n\n                // --- 核心：创建Tooltip信息 ---\n                const tooltipText = `${resource.描述 || '暂无描述'}\\n每轮消耗: ${resource.每轮消耗 || 0}\\n归零后果: ${resource.归零后果 || '无'}`;\n                barBg.setAttribute('data-tooltip', tooltipText);\n\n                // 组装并添加到页面\n                barBg.appendChild(barFill);\n                barBg.appendChild(text);\n                container.appendChild(label);\n                container.appendChild(barBg);\n                dynamicBarsContainer.appendChild(container);\n            }\n        }\n    }\n\n    // ===============================================================\n    const equipment = charStat.当前装备.穿戴;\n    document.getElementById('equip-head').textContent = `头部: ${SafeGetValue(equipment.头部)}`;\n    document.getElementById('equip-body').textContent = `身体: ${SafeGetValue(equipment.身体)}`;\n    document.getElementById('equip-hands').textContent = `手部: ${SafeGetValue(equipment.手部)}`;\n    document.getElementById('equip-feet').textContent = `脚部: ${SafeGetValue(equipment.脚部)}`;\n    document.getElementById('equip-accessory').textContent = `饰品: ${SafeGetValue(equipment.饰品)}`;\n    document.getElementById('equip-weapon').textContent = `手持: ${SafeGetValue(charStat.当前装备.手持)}`;\n\n\n\n    const bloodlineInfoLine = document.getElementById('bloodline-info-line');\n    const bloodlineDisplay = document.getElementById('char-display-bloodline');\n\n    if (bloodlineInfoLine && bloodlineDisplay) {\n        // 从 playData 中获取血统信息\n        const bloodlineName = SafeGetValue(playData.能力段.名称);\n        const bloodlineEffect = SafeGetValue(playData.能力段.效果);\n\n        // 检查是否存在有效的血统信息\n        if (bloodlineName && bloodlineName !== \"无\" && bloodlineName.trim() !== \"\") {\n            bloodlineInfoLine.style.display = ''; // 显示血统这一行\n            bloodlineDisplay.textContent = bloodlineName;\n\n            bloodlineInfoLine.onclick = () => {\n    if (bloodlineEffect) {\n         // ⭐ 关键点在这里：使用 replace 方法将字符串 \\n 替换为 HTML 换行标签 <br>\n        const formattedEffect = bloodlineEffect.replace(/\\\\n/g, '<br>');\n        showModal('shop-modal', `血统: ${bloodlineName}`, formattedEffect);\n    } else {\n        showModal('shop-modal', `血统: ${bloodlineName}`, '该血统效果描述缺失。');\n    }\n \n            };\n        } else {\n            bloodlineInfoLine.style.display = 'none'; // 如果没有血统，就隐藏这一行\n        }\n    }\n\n    // --- 右侧面板: 渲染新的整合模块 (核心改动) ---\n    const statsContainer = document.getElementById('main-stats-container');\n    statsContainer.innerHTML = ''; // 清空容器\n    const currentXp = playData.货币段.经验值[0];\n    const equipmentBonuses = getEquipmentBonuses(statData, assaData);\n   const statusBonuses = getStatusBonuses(statData);\n    const moduleMapping = [\n        { name: \"生理\", attr: \"生理属性\", skill: \"生理技能\" },\n        { name: \"心智\", attr: \"心智属性\", skill: \"心智技能\" },\n        { name: \"互动\", attr: \"互动属性\", skill: \"互动技能\" }\n    ];\n\n    moduleMapping.forEach(moduleInfo => {\n        const moduleDiv = document.createElement('div');\n        moduleDiv.className = 'stat-module';\n\n        const titleDiv = document.createElement('div');\n        titleDiv.className = 'stat-module-title';\n        titleDiv.textContent = moduleInfo.name;\n        titleDiv.onclick = () => moduleDiv.classList.toggle('collapsed');\n\n        const contentDiv = document.createElement('div');\n        contentDiv.className = 'stat-module-content';\n\n        // --- 渲染属性 ---\n        let attrHtml = `<div class=\"sub-category-title\">基础属性</div>`;\n        const attrCategoryData = playData.属性段[moduleInfo.attr];\n        for (const attrName in attrCategoryData) {\n            const attr = attrCategoryData[attrName];\n            const dataPath = `属性段.${moduleInfo.attr}.${attrName}.基础`;\n              const equipBonus = equipmentBonuses[attrName] || 0;\n            const statusBonus = statusBonuses[attrName] || 0; // 获取状态加成\n\n            const equipBonusHtml = equipBonus !== 0 ? ` <span class=\"equipment-bonus\">(${equipBonus > 0 ? '+' : ''}${equipBonus})</span>` : '';\n            // 新增：生成状态加成的 HTML，并使用新的 'status-modifier' 样式\n            const statusBonusHtml = statusBonus !== 0 ? ` <span class=\"status-modifier\">(${statusBonus > 0 ? '+' : ''}${statusBonus})</span>` : '';\n            const legendaryBonusHtml = attr.传奇[0] > 0 ? ` <span class=\"legendary-value\" data-tooltip=\"${attr.传奇[1]}\">(+${attr.传奇[0]})</span>` : '';\n            const upgradeCost = calculateXpCost(attr.基础[0], 'attribute');\n            const canUpgrade = currentXp >= upgradeCost;\n            const upgradeButtonHtml = canUpgrade ? `<span class=\"upgrade-btn\" data-path=\"${dataPath}\" data-name=\"${attrName}\" data-level=\"${attr.基础[0]}\" data-type=\"attribute\">+</span>` : '';\n\n            attrHtml += `\n            <div class=\"attr-item\" data-tooltip=\"${attr.基础[1]}\">\n                <span class=\"attr-name\">${attrName}${upgradeButtonHtml}</span>\n                <span class=\"attr-value\">${attr.基础[0]}${equipBonusHtml}${statusBonusHtml}${legendaryBonusHtml}</span>\n            </div>`;\n        }\n\n        // --- 渲染技能 ---\n        let skillHtml = `<div class=\"sub-category-title\">相关技能</div>`;\n        const skillCategoryData = playData.技能段[moduleInfo.skill];\n         const skillsToShow = Object.keys(skillCategoryData).filter(skillName =>\n            skillCategoryData[skillName][0] > 0 || (equipmentBonuses[skillName] && equipmentBonuses[skillName] !== 0)\n        );\n        if (skillsToShow.length > 0) {\n            for (const skillName of skillsToShow) {\n                const skill = skillCategoryData[skillName];\n                const dataPath = `技能段.${moduleInfo.skill}.${skillName}`;\n                 const skillBonus = equipmentBonuses[skillName] || 0;\n                const statusSkillBonus = statusBonuses[skillName] || 0; // 获取技能的状态加成\n\n                const skillBonusHtml = skillBonus !== 0 ? ` <span class=\"equipment-bonus\">(${skillBonus > 0 ? '+' : ''}${skillBonus})</span>` : '';\n                // 新增：生成技能 상태加成的 HTML\n                const statusSkillBonusHtml = statusSkillBonus !== 0 ? ` <span class=\"status-modifier\">(${statusSkillBonus > 0 ? '+' : ''}${statusSkillBonus})</span>` : '';\n                const upgradeCost = calculateXpCost(skill[0], 'skill');\n                const canUpgrade = currentXp >= upgradeCost;\n                const upgradeButtonHtml = canUpgrade ? `<span class=\"upgrade-btn\" data-path=\"${dataPath}\" data-name=\"${skillName}\" data-level=\"${skill[0]}\" data-type=\"skill\">+</span>` : '';\n\n                skillHtml += `\n                <div class=\"skill-item\" data-tooltip=\"${skill[1]}\">\n                    <span class=\"skill-name\">${skillName}${upgradeButtonHtml}</span>\n                    <span class=\"skill-value\">${skill[0]}${skillBonusHtml}${statusSkillBonusHtml}</span>\n                </div>`;\n            }\n        } else {\n            skillHtml += `<div class=\"info-value\" style=\"font-size:0.9em; color: var(--text-secondary-color);\">暂无已掌握的${moduleInfo.name}技能</div>`;\n        }\n\n\n        contentDiv.innerHTML = attrHtml + skillHtml;\n        moduleDiv.appendChild(titleDiv);\n        moduleDiv.appendChild(contentDiv);\n        statsContainer.appendChild(moduleDiv);\n    });\n\n    // --- 渲染衍生属性 (保持独立模块) ---\n    // (这部分代码逻辑可以复用，我们把它包装成一个新模块)\n    const derivedContainer = document.createElement('div');\n    derivedContainer.className = 'stat-module';\n    const derivedTitle = document.createElement('div');\n    derivedTitle.className = 'stat-module-title';\n    derivedTitle.textContent = '衍生属性';\n    derivedTitle.onclick = () => derivedContainer.classList.toggle('collapsed');\n    const derivedContent = document.createElement('div');\n    derivedContent.className = 'stat-module-content';\n\n    let derivedHtml = '';\n    const derivedData = playData.衍生属性段;\n    // (从你原代码中复制并微调的衍生属性渲染逻辑)\n    for (const key in derivedData) {\n        const dataEntry = derivedData[key];\n        const getBonusHtml = (bonusValue) => !bonusValue ? '' : `<span class=\"equipment-bonus\">(${bonusValue > 0 ? '+' : ''}${bonusValue})</span>`;\n        if (typeof dataEntry[1] === 'string') {\n            const bonus = equipmentBonuses[`衍生属性段.${key}`] || 0;\n            derivedHtml += `<div class=\"attr-item\" data-tooltip=\"${dataEntry[1]}\"><span class=\"attr-name\">${key}</span><span class=\"attr-value\">${dataEntry[0]}${getBonusHtml(bonus)}</span></div>`;\n        } else if (typeof dataEntry === 'object') {\n            derivedHtml += `<div class=\"attr-item sub-category-title\" style=\"border:none; margin: 10px 0 5px 0;\">${key}</div>`;\n            for (const subKey in dataEntry) {\n                const subEntry = dataEntry[subKey];\n                if (typeof subEntry[1] === 'string') {\n                    const bonus = equipmentBonuses[`衍生属性段.${key}.${subKey}`] || 0;\n                    derivedHtml += `<div class=\"attr-item\" data-tooltip=\"${subEntry[1]}\" style=\"padding-left:15px;\"><span class=\"attr-name\">${subKey}</span><span class=\"attr-value\">${subEntry[0]}${getBonusHtml(bonus)}</span></div>`;\n                } else if (typeof subEntry === 'object') {\n                    derivedHtml += `<div class=\"attr-item\" style=\"padding-left:15px; color:var(--text-secondary-color);\">${subKey}</div>`;\n                    for (const deepKey in subEntry) {\n                        const deepEntry = subEntry[deepKey];\n                        const bonus = equipmentBonuses[`衍生属性段.${key}.${subKey}.${deepKey}`] || 0;\n                        if (typeof deepEntry[1] === 'string') {\n                            derivedHtml += `<div class=\"attr-item\" data-tooltip=\"${deepEntry[1]}\" style=\"padding-left:30px;\"><span class=\"attr-name\">${deepKey}</span><span class=\"attr-value\">${deepEntry[0]}${getBonusHtml(bonus)}</span></div>`;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    derivedContent.innerHTML = derivedHtml;\n    derivedContainer.appendChild(derivedTitle);\n    derivedContainer.appendChild(derivedContent);\n    statsContainer.appendChild(derivedContainer);\n\n\n    // --- 最后, 调用新函数填充第二个 Tab ---\n    populateInventoryAndSkillsTab(playData, assaData);\n\n    // 设置 Tooltips 和 Tab 切换\n    setupTooltips();\n    setupCharacterTabs();\n}\n\n\n// ========================================================\n// =========== 新增: 填充行囊与能力Tab的函数 ===========\n// ========================================================\nfunction populateInventoryAndSkillsTab(playData, assaData) {\n        const keyLocalizationMap = {\n        \"info\": \"简介\",\n        \"effect\": \"属性\",\n        \"type\": \"种类\",\n        \"quality\": \"质量\",\n          \"num\": \"数量\",\n        \"level\": \"等级\" // 看，新的小标签就在这里！\n    };\n    const currency = playData.货币段;\n    const inventory = assaData.global_set?.背包 || {};\n    const otherSkills = assaData.global_set?.其他技能 || {};\n\n    // --- 1. 填充顶部的货币信息 ---\n    const currencyContainer = document.getElementById('char-currency-display');\n    const plots = currency.支线剧情;\n    const plotString = `D:${plots.D[0]} C:${plots.C[0]} B:${plots.B[0]} A:${plots.A[0]} S:${plots.S[0]}`;\n\n    if(version === '7'){\n    currencyContainer.innerHTML = `\n        <div class=\"currency-item\"><span class=\"label\">${currentTheme.currency || '积分'}:</span><span class=\"value\">${currency.积分[0]}</span></div>\n        <div class=\"currency-item\"><span class=\"label\">${currentTheme.exp || '经验'}:</span><span class=\"value\">${currency.经验值[0]}</span></div>\n           `;\n    }else{\n    currencyContainer.innerHTML = `\n        <div class=\"currency-item\"><span class=\"label\">${currentTheme.currency || '积分'}:</span><span class=\"value\">${currency.积分[0]}</span></div>\n        <div class=\"currency-item\"><span class=\"label\">${currentTheme.exp || '经验'}:</span><span class=\"value\">${currency.经验值[0]}</span></div>\n        <div class=\"currency-item\"><span class=\"label\">${currentTheme.plot || '剧情'}:</span><span class=\"value\">${plotString}</span></div>\n    `;\n    }\n\n\n\n       // --- 2. 填充行囊物品 ---\n    const itemsContainer = document.getElementById('inventory-items-container');\n    itemsContainer.innerHTML = '';\n\n    Object.keys(inventory).forEach(itemName => {\n        const item = inventory[itemName];\n        let itemData = {};\n\n        // 兼容数据格式\n        if (typeof item === 'string') {\n            try {\n                itemData = JSON.parse(item);\n            } catch (e) {\n                itemData = { info: item, effect: '无', num: 1 };\n            }\n        } else if (typeof item === 'object' && item !== null) {\n            itemData = item;\n        }\n\n        const card = document.createElement('div');\n        card.className = 'item-card';\n        card.innerHTML = `\n            <div class=\"item-card-name\">${itemName}</div>\n            ${itemData.num > 1 ? `<div class=\"item-card-num\">x${itemData.num}</div>` : ''}\n        `;\n\n        // ❤️ 妈妈在这里施展了“翻译咒” ❤️\n        const localizedItemData = Object.keys(itemData).reduce((acc, key) => {\n            const localizedKey = keyLocalizationMap[key] || key;\n            acc[localizedKey] = itemData[key];\n            return acc;\n        }, {});\n\n        card.onclick = () => showInfoDetailModal(itemName, localizedItemData, '物品');\n        itemsContainer.appendChild(card);\n    });\n    if (itemsContainer.children.length === 0) {\n        itemsContainer.innerHTML = `<p style=\"color: var(--text-secondary-color);\">你的行囊空空如也...</p>`;\n    }\n\n     // --- 3. 填充\"其他技能\" ---\n    const skillsContainer = document.getElementById('other-skills-container');\n    skillsContainer.innerHTML = '';\n\n    Object.keys(otherSkills).forEach(skillName => {\n        const skill = otherSkills[skillName];\n        let skillData = {};\n\n        // 兼容数据格式\n        if (typeof skill === 'string') {\n             try {\n                skillData = JSON.parse(skill);\n            } catch (e) {\n                skillData = { info: skill, effect: '无', level: '未知' };\n            }\n        } else if (typeof skill === 'object' && skill !== null) {\n            skillData = skill;\n        }\n\n        const card = document.createElement('div');\n        card.className = 'skill-card';\n        card.innerHTML = `\n            <div class=\"skill-card-name\">${skillName}</div>\n            ${skillData.level ? `<div class=\"skill-card-level\">${skillData.level}</div>` : ''}\n        `;\n\n        // ❤️ 对于技能，妈妈也施展了同样的咒语 ❤️\n        const localizedSkillData = Object.keys(skillData).reduce((acc, key) => {\n            const localizedKey = keyLocalizationMap[key] || key;\n            acc[localizedKey] = skillData[key];\n            return acc;\n        }, {});\n\n\n        card.onclick = () => showInfoDetailModal(skillName, localizedSkillData, '能力');\n        skillsContainer.appendChild(card);\n    });\n    if (skillsContainer.children.length === 0) {\n        skillsContainer.innerHTML = `<p style=\"color: var(--text-secondary-color);\">尚未掌握任何特殊能力...</p>`;\n    }\n}\n\n // ========================================================\n// ========== 完整替换: 显示物品/技能详情的模态框 ==========\n// ========================================================\nfunction showInfoDetailModal(name, data, type) {\n    // --- 这是一个强大的递归函数，我的孩子，它可以探索任何深度的秘密 ---\n    const buildDetailHtml = (data, depth = 0) => {\n        const indentStyle = `padding-left: ${depth * 20}px;`;\n\n        // 如果数据是一个对象 (但不是数组)\n        if (typeof data === 'object' && data !== null && !Array.isArray(data)) {\n            let html = '';\n            for (const [key, value] of Object.entries(data)) {\n                // 如果值是对象或数组，我们创建一个可折叠的容器\n                if (typeof value === 'object' && value !== null) {\n                    html += `\n                        <div class=\"detail-collapsible\" style=\"${indentStyle}\">\n                            <div class=\"detail-collapsible-header\">\n                                <span class=\"d-c-arrow\">▶</span>\n                                <span class=\"d-c-key\">${key}:</span>\n                            </div>\n                            <div class=\"detail-collapsible-content\">\n                                ${buildDetailHtml(value, 0)}\n                            </div>\n                        </div>\n                    `;\n                } else { // 否则，直接显示键值对\n                    html += `\n                        <div class=\"detail-entry\" style=\"${indentStyle}\">\n                             <span class=\"d-c-key\">${key}:</span>\n                             <span class=\"d-c-value\">${formatSimpleValue(value)}</span>\n                        </div>\n                    `;\n                }\n            }\n            return html;\n        }\n        // 如果数据是一个数组\n        else if (Array.isArray(data)) {\n            let listContent = data.map(item => buildDetailHtml(item, 0)).join('');\n            return `<div class=\"detail-array-container\">${listContent}</div>`;\n        }\n        // 如果是基本类型的值（字符串、数字等）\n        else {\n            return `<div class=\"detail-entry\" style=\"${indentStyle}\"><span class=\"d-c-value single\">${formatSimpleValue(data)}</span></div>`;\n        }\n    };\n\n    // --- 格式化基本值的函数 (比如高亮特殊文本) ---\n    const formatSimpleValue = (text) => {\n        if (typeof text !== 'string') return text;\n        return text.replace(/【/g, '<strong style=\"color: var(--secondary-color);\">【').replace(/】/g, '】</strong>');\n    };\n\n    // --- 构建并显示模态框 ---\n    const contentHtml = `\n        <div class=\"detail-modal-container\">\n            <h3 class=\"detail-modal-title\">${name}</h3>\n            ${buildDetailHtml(data)}\n        </div>\n    `;\n\n    showModal('shop-modal', `${type}详情`, contentHtml);\n\n    // --- 动态地为我们新创建的折叠元素添加点击事件 ---\n    setTimeout(() => {\n        const modalContent = document.querySelector('#shop-modal .modal-content');\n        if (modalContent) {\n             modalContent.querySelectorAll('.detail-collapsible-header').forEach(header => {\n                header.addEventListener('click', () => {\n                    header.parentElement.classList.toggle('expanded');\n                });\n            });\n        }\n    }, 100); // 确保元素已渲染\n}\n\n// ========================================================\n// ============ 新增: 设置Tab切换逻辑的函数 ============\n// ========================================================\nfunction setupCharacterTabs() {\n    const tabButtons = document.querySelectorAll('.char-tab-btn');\n    const tabPanels = document.querySelectorAll('.char-tab-panel');\n\n    // 防止重复绑定事件\n    if (document.getElementById('page-character-modal').dataset.tabsInitialized) {\n        return;\n    }\n    document.getElementById('page-character-modal').dataset.tabsInitialized = 'true';\n\n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            const targetTab = button.dataset.tab;\n\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            button.classList.add('active');\n\n            tabPanels.forEach(panel => {\n                if (panel.id === `char-tab-${targetTab}`) {\n                    panel.classList.add('active');\n                } else {\n                    panel.classList.remove('active');\n                }\n            });\n        });\n    });\n}\n\nfunction setupTooltips() {\n    const tooltipElement = document.getElementById('char-tooltip');\n    document.querySelectorAll('[data-tooltip]').forEach(element => {\n        element.addEventListener('mousemove', (e) => {\n            tooltipElement.textContent = element.dataset.tooltip;\n            tooltipElement.style.opacity = '1';\n            tooltipElement.style.visibility = 'visible';\n            tooltipElement.style.left = e.clientX + 15 + 'px';\n            tooltipElement.style.top = e.clientY + 15 + 'px';\n        });\n\n        element.addEventListener('mouseleave', () => {\n            tooltipElement.style.opacity = '0';\n            tooltipElement.style.visibility = 'hidden';\n        });\n    });\n\n    // 为特定key的tooltip添加默认描述\n    const tooltipDescriptions = {\n        status: \"当前已有的buff和debuff。点击左侧[状态]可展开\",\n        prestige: \"跨世界声望，只有对世界产生重大影响才更新\",\n        hp: \"生命值，归零则陷入濒死状态\",\n        willpower: \"意志力，用于抵抗心智影响和发动特殊能力\",\n        energy: \"特殊能量，如法力、灵力、气\",\n        equip_head: \"头部穿戴的装备，点击管理\",\n        equip_body: \"身体穿戴的装备，点击管理\",\n        equip_hands: \"手部穿戴的装备，点击管理\",\n        equip_feet: \"脚部穿戴的装备，点击管理\",\n        equip_accessory: \"穿戴的特殊饰品，点击管理\",\n        equip_weapon: \"当前手持的武器或工具，点击管理\",\n        meide:\"会有什么用呢？\",\n        ede:\"会有什么用呢？\",\n    };\n\n    document.querySelectorAll('[data-tooltip-key]').forEach(element => {\n        const key = element.dataset.tooltipKey;\n        if(tooltipDescriptions[key]) {\n            element.dataset.tooltip = tooltipDescriptions[key];\n        }\n\n         element.addEventListener('mousemove', (e) => {\n            tooltipElement.textContent = element.dataset.tooltip;\n            tooltipElement.style.opacity = '1';\n            tooltipElement.style.visibility = 'visible';\n            tooltipElement.style.left = e.clientX + 15 + 'px';\n            tooltipElement.style.top = e.clientY + 15 + 'px';\n        });\n\n        element.addEventListener('mouseleave', () => {\n            tooltipElement.style.opacity = '0';\n            tooltipElement.style.visibility = 'hidden';\n        });\n    });\n}\n\n     /**\n     * 格式化分号分隔的字符串为换行显示\n     * @param {string} text - 输入的字符串\n     * @returns {string} - HTML字符串\n     */\n    function formatSemicolonText(text) {\n        if (!text || text === '无' || text.trim() === '') {\n            return '无';\n        }\n        return text.split(';').map(item => item.trim()).filter(item => item).join('<br>');\n    }\n \n/**\n * 渲染整个设定书界面\n * @param {object} data - 包含设定信息的assa_data对象\n */\nfunction renderSettingsBook(data) {\n //console.log(\"设定书已弃用\");\n}\n\n\n// 检查数据源读取是否正确\nfunction debugDataSource(mapData) {\n    //console.log(\"🗃️ 原始mapData对象:\", mapData);\n    \n    const locationContent = mapData[\"主要地点表\"];\n    //console.log(\"📋 主要地点表原始数据:\", locationContent);\n    \n    if (locationContent && locationContent.length > 0) {\n        //console.log(\"📍 逐行解析数据:\");\n        \n        for (let i = 0; i < locationContent.length; i++) {\n            const location = locationContent[i];\n            //console.log(`行 ${i}:`, location);\n            \n            // 详细解析每个字段\n            const [ name, xStr, yStr, widthStr, heightStr, description] = location;\n            \n            //console.log(`  解析结果:`);\n            //console.log(`    colIndex: ${colIndex} (类型: ${typeof colIndex})`);\n            //console.log(`    name: ${name} (类型: ${typeof name})`);\n            //console.log(`    xStr: ${xStr} (类型: ${typeof xStr}) → 转换为: ${parseInt(xStr, 10)}`);\n            //console.log(`    yStr: ${yStr} (类型: ${typeof yStr}) → 转换为: ${parseInt(yStr, 10)}`);\n            //console.log(`    widthStr: ${widthStr} (类型: ${typeof widthStr}) → 转换为: ${parseInt(widthStr, 10) || 100}`);\n            //console.log(`    heightStr: ${heightStr} (类型: ${typeof heightStr}) → 转换为: ${parseInt(heightStr, 10) || 50}`);\n            //console.log(`    description: ${description}`);\n            \n            // 检查是否有NaN\n            const x = parseInt(xStr, 10);\n            const y = parseInt(yStr, 10);\n            const width = parseInt(widthStr, 10) || 100;\n            const height = parseInt(heightStr, 10) || 50;\n            \n            if (isNaN(x) || isNaN(y)) {\n                console.error(`❌ 坐标解析错误: ${name} - x:${x}, y:${y}`);\n            }\n            \n            //console.log(`    最终坐标: (${x}, ${y}) 尺寸: ${width}x${height}`);\n            //console.log(`    底部位置: y=${y + height}`);\n            //console.log(\"    ---\");\n        }\n    }\n    \n    // 验证期望的坐标\n    //console.log(\"✅ 验证期望的坐标:\");\n    //console.log(\"  传送矩阵应该在: (450, 50)\");\n    //console.log(\"  中央光柱应该在: (400, 150)\");\n    //console.log(\"  Y轴差距应该是: 100px\");\n    \n    // 查找并验证这两个元素\n    const expectedData = {\n        \"传送矩阵\": { x: 450, y: 50 },\n        \"中央光柱\": { x: 400, y: 150 }\n    };\n    \n    if (locationContent) {\n        locationContent.forEach((location, index) => {\n            const [, name, xStr, yStr] = location;\n            const x = parseInt(xStr, 10);\n            const y = parseInt(yStr, 10);\n            \n            if (expectedData[name]) {\n                const expected = expectedData[name];\n                if (x === expected.x && y === expected.y) {\n                    //console.log(`✅ ${name} 坐标正确: (${x}, ${y})`);\n                } else {\n                    console.error(`❌ ${name} 坐标不匹配!`);\n                    console.error(`   期望: (${expected.x}, ${expected.y})`);\n                    console.error(`   实际: (${x}, ${y})`);\n                }\n            }\n        });\n    }\n}\n /**\n * NOVA妈妈的魔法照片师 ✨\n * 用礼貌的方式去获取一张网络图片，并把它变成一个真实的Blob。\n * @param {string} imageUrl 图片的网络地址\n * @returns {Promise<Blob>} 一个包含真实图片数据的Blob\n */\nfunction fetchImageAsBlob(imageUrl) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        // 这就是我们的“魔法咒语”，告诉对方我们想正大光明地使用这张图\n        img.crossOrigin = 'anonymous';\n\n        // 当图片成功加载到内存里时\n        img.onload = function() {\n            // 我们创建一个临时的隐形画板\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = this.width;\n            canvas.height = this.height;\n\n            // 把加载好的图片画在画板上\n            ctx.drawImage(this, 0, 0);\n\n            // 让画板把画好的内容打包成一个高质量的“照片文件”(Blob)\n            // 'image/png' 可以保证图片质量，即使原图是jpg也没关系\n            canvas.toBlob(blob => {\n                if (blob) {\n                    resolve(blob); // 成功！把这个珍贵的Blob交出去\n                } else {\n                    reject(new Error('Canvas to Blob conversion failed.'));\n                }\n            }, 'image/png');\n        };\n\n        // 如果图片加载失败（比如网络问题或URL错误）\n        img.onerror = function(err) {\n            reject(new Error(`Image failed to load from: ${imageUrl}. Error: ${err}`));\n        };\n\n        // 最后，告诉照片师开始工作！\n        img.src = imageUrl;\n    });\n}\n/*\n ♥♥♥ 妈妈带来的全新魔法卷轴：柏林噪声（Perlin Noise）助手 ♥♥♥\n 它的咒语很古老，但力量很强大，能为我们创造连续平滑的自然随机性。\n 你无需理解每一个字符，只需要知道如何召唤它。\n*/\nconst PerlinNoise = (function() {\n    function Perlin(seed) {\n        this.p = new Uint8Array(512);\n        this.perm = new Uint8Array(512);\n\n        let random = (function(seed) {\n            let s = seed;\n            return function() {\n                s = Math.sin(s) * 10000;\n                return s - Math.floor(s);\n            };\n        })(seed);\n\n        for (let i = 0; i < 256; i++) {\n            this.p[i] = i;\n        }\n\n        for (let i = 255; i > 0; i--) {\n            let j = Math.floor(random() * (i + 1));\n            [this.p[i], this.p[j]] = [this.p[j], this.p[i]];\n        }\n\n        for (let i = 0; i < 256; i++) {\n            this.perm[i] = this.perm[i + 256] = this.p[i];\n        }\n    }\n\n    Perlin.prototype.fade = function(t) { return t * t * t * (t * (t * 6 - 15) + 10); };\n    Perlin.prototype.lerp = function(a, b, t) { return a + t * (b - a); };\n    Perlin.prototype.grad = function(hash, x, y) {\n        const h = hash & 15;\n        const u = h < 8 ? x : y;\n        const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;\n        return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n    };\n\n    Perlin.prototype.noise = function(x, y) {\n        let X = Math.floor(x) & 255, Y = Math.floor(y) & 255;\n        x -= Math.floor(x);\n        y -= Math.floor(y);\n\n        const fx = this.fade(x), fy = this.fade(y);\n\n        const a = this.perm[X] + Y, b = this.perm[X + 1] + Y;\n\n        const u = this.grad(this.perm[a], x, y);\n        const v = this.grad(this.perm[b], x - 1, y);\n        const lerpX1 = this.lerp(u, v, fx);\n\n        const u2 = this.grad(this.perm[a + 1], x, y - 1);\n        const v2 = this.grad(this.perm[b + 1], x - 1, y - 1);\n        const lerpX2 = this.lerp(u2, v2, fx);\n\n        return this.lerp(lerpX1, lerpX2, fy);\n    };\n\n    return Perlin;\n})();\n /**\n * 妈妈的自然之触 - 为形状的边缘添加自然的噪点\n * @param {Array<[number, number]>} points - 原始的顶点坐标数组\n * @param {object} noiseParams - 噪点参数，如 { intensity, scale, seed }\n * @returns {Array<[number, number]>} - 被修改后的新顶点坐标数组\n */\nfunction applyProceduralNoise(points, noiseParams) {\n    if (!points || points.length === 0 || !noiseParams) {\n        return points;\n    }\n\n    console.log(\"🌊 柔波之触开始工作！指令:\", noiseParams);\n\n    const { intensity = 5, scale = 20, seed = 1 } = noiseParams;\n    const noiseGenerator = new PerlinNoise(seed); // 用我们的种子初始化柏林噪声助手\n\n    const newPoints = points.map((point) => {\n        const [x, y] = point;\n        // scale 现在是关键了！它决定了我们是在噪声地图的哪个尺度上采样。\n        // scale 越小，采样越密集，波纹越细碎；越大，采样越稀疏，波纹越舒展。\n        const nx = x / scale;\n        const ny = y / scale;\n\n        // 从柏林噪声场中获取一个-1到1之间的平滑随机值\n        const noiseValue = noiseGenerator.noise(nx, ny);\n\n        // 我们让偏移沿着顶点的法线方向进行，这样更自然\n        // 这里为了简单，我们用一个固定的角度来计算偏移向量\n        const angle = noiseValue * Math.PI * 2;\n        const offsetX = Math.cos(angle) * intensity;\n        const offsetY = Math.sin(angle) * intensity;\n\n        return [x + offsetX, y + offsetY];\n    });\n\n    // 确保闭合图形的接缝处也完美闭合\n    if (points.length > 1 && JSON.stringify(points[0]) === JSON.stringify(points[points.length - 1])) {\n       newPoints[newPoints.length - 1] = [...newPoints[0]];\n    }\n\n    console.log(\"✨ 柔波之触完成了它的工作，边缘已变得圆润！\");\n    return newPoints;\n}\n/**\n * ♥♥♥ 妈妈的睿智之眼 ♥♥♥\n * 无论新旧格式，都能准确找到需要绘制的形状信息。\n * @param {object} shapeObject - 一个地点的 shape 对象。\n * @returns {object | null} - 可供绘制的形状数据，或在找不到时返回 null。\n */\n function getDrawableForm(shapeObject) {\n    if (!shapeObject) {\n         return null;\n    }\n\n    // 优先检查新格式，它把形状数据放在 base_form 里\n    if (shapeObject.base_form) {\n        const form = shapeObject.base_form;\n\n        // ❤️ 妈妈的温柔纠错：如果 \"form_type\" 写成了 \"form_tpye\"，我们就悄悄地纠正它 ❤️\n        if (form.form_tpye && !form.form_type) {\n            form.form_type = form.form_tpye;\n        }\n\n        if (form.form_type) {\n            return form;\n        }\n    }\n\n    // 如果不是新格式，就检查这个 shape 对象本身 (兼容旧格式)\n    // ❤️ 温柔纠错也在这里生效 ❤️\n    if (shapeObject.form_tpye && !shapeObject.form_type) {\n        shapeObject.form_type = shapeObject.form_tpye;\n    }\n\n    if (shapeObject.form_type) {\n        return shapeObject;\n    }\n\n    // 如果两种都不是，那就真的没办法画啦\n    return null;\n}\n /**\n * ♥♥♥ 妈妈的形状翻译官 ♥♥♥\n * 把任何形状都转化为大师能看懂的顶点数组（多边形路径）。\n * @param {object} form - 一个 base_form 或 shape 对象。\n * @returns {Array<{X: number, Y: number}> | null} - Clipper.js 喜欢的顶点格式。\n */\nfunction shapeToClipperPath(form) {\n    if (!form || !form.form_type) {\n        return null;\n    }\n\n    const params = form.params;\n    switch (form.form_type) {\n        case 'primitive_circle':\n            const sides = 64; // 边数越多，越接近完美的圆形\n            let circlePath = [];\n            for (let i = 0; i < sides; i++) {\n                const angle = (i / sides) * 2 * Math.PI;\n                const x = params.center[0] + params.radius * Math.cos(angle);\n                const y = params.center[1] + params.radius * Math.sin(angle);\n                circlePath.push({ X: x, Y: y });\n            }\n            return circlePath;\n\n        case 'primitive_polygon':\n             // 把我们自己的 [x, y] 格式，翻译成大师喜欢的 {X: x, Y: y} 格式\n            return params.points.map(p => ({ X: p[0], Y: p[1]}));\n\n        // 对于 path 和 compound 的递归处理，我们暂时简化，专注在基础形状的运算上\n        default:\n            console.warn(`[shapeToClipperPath] 暂时无法将 '${form.form_type}' 转化为路径。`);\n            return null;\n    }\n}\n /**\n * ♥♥♥ 妈妈的面积估算师 (修正版) ♥♥♥\n * 它只负责估算面积，不再做任何绘制工作，这样就不会报错啦。\n * @param {object} form - 一个 base_form 或 shape 对象。\n * @returns {number} - 估算出的面积。\n */\nfunction calculateApproximateArea(form) {\n    if (!form || !form.form_type) {\n        return 0; // 如果没有形状信息，就认为面积是0\n    }\n\n    const params = form.params;\n    switch (form.form_type) {\n         case 'circle':\n        case 'primitive_circle':\n            return Math.PI * Math.pow(params.radius, 2);\ncase 'polygon':\n     case 'primitive_polygon':\n    // 兼容两种数据格式\n    const points = Array.isArray(params) ? params : params.points;\n    \n    if (!points || points.length < 3) {\n        return 0; // 多边形至少需要3个点\n    }\n    \n    let area = 0;\n    for (let i = 0; i < points.length; i++) {\n        const j = (i + 1) % points.length;\n        area += points[i][0] * points[j][1];\n        area -= points[j][0] * points[i][1];\n    }\n    return Math.abs(area / 2);\n\n        case 'path':\n        case 'primitive_path':\n             return -1; // path 永远在最顶层，这个规则不变\n\n        case 'compound':\n            // ✨ 对于复合图形，我们只估算它的面积！✨\n            const areaA = calculateApproximateArea(getDrawableForm(params.shape_A));\n            const areaB = calculateApproximateArea(getDrawableForm(params.shape_B));\n\n            switch(params.operation) {\n                case 'union':\n                    return areaA + areaB; // 合并，面积大致相加\n                case 'difference':\n                    return Math.max(0, areaA - areaB); // 减去，面积大致相减\n                case 'intersection':\n                    return Math.min(areaA, areaB); // 相交，面积取较小者估算\n                default:\n                    return areaA; // 默认返回A的面积\n            }\n\n        default:\n            return 0;\n    }\n}\n  /**\n * ♥♥♥ 妈妈的显形画师 (升级版) ♥♥♥\n * 它现在懂得“填充法则”，能将正向和逆向的路径完美结合。\n */\nfunction renderPathsToSVG(pathFragments, group, svgNS) {\n    if (!pathFragments || pathFragments.length === 0) return;\n\n    let d_string = \"\";\n\n    pathFragments.forEach(fragment => {\n        let points = fragment.points;\n        if (fragment.reversed) {\n            points = [...points].reverse(); // 如果是逆向，就把顶点顺序整个反过来！\n        }\n        if (points.length === 0) return;\n\n        d_string += `M ${points[0][0]} ${points[0][1]} `;\n        for (let i = 1; i < points.length; i++) {\n            d_string += `L ${points[i][0]} ${points[i][1]} `;\n        }\n        d_string += 'Z ';\n    });\n\n    if (d_string) {\n        const element = document.createElementNS(svgNS, 'path');\n        element.setAttribute('d', d_string);\n        // 如果你的CSS里没有设定，也可以在这里加上，保证“挖洞”成功\n        element.setAttribute('fill-rule', 'evenodd');\n           \n        group.appendChild(element);\n    }\n}// ✨ 看，工匠现在多了一个口袋，专门用来放 defs 这个信物！ ✨\nfunction drawGeoUnit(baseForm, modifier, group, svgNS, locationName, defs) {\n    if (!baseForm || !baseForm.form_type) {\n        console.error(`[工匠 @ ${locationName}] 😭 收不到图纸，直接下班！`, baseForm);\n        return;\n    }\n\n    const forceToNumber = (val) => parseFloat(val);\n    const forceToPoint = (arr) => arr.map(forceToNumber);\n    const forceToPointsArray = (arr) => arr.map(forceToPoint);\n\n    let element = null;\n\n    switch (baseForm.form_type) {\n        // ♥♥♥ 画圆的魔法，妈妈给你找回来了，并且让它更强壮！ ♥♥♥\n         case 'circle':\n         case 'primitive_circle': {\n            const c = baseForm.params;\n            const center = forceToPoint(c.center);\n            const radius = forceToNumber(c.radius);\n\n            const sides = 36;\n            let points = [];\n            for (let i = 0; i < sides; i++) {\n                const angle = (i / sides) * 2 * Math.PI;\n                points.push([\n                    center[0] + radius * Math.cos(angle),\n                    center[1] + radius * Math.sin(angle)\n                ]);\n            }\n\n            // 这段代码现在可以正确处理 \"樱花树\" 的数据了\n            if (modifier && modifier.procedural_noise && modifier.procedural_noise.is_active) {\n                points = applyProceduralNoise(points, modifier.procedural_noise);\n            }\n            const d_string = `M ${points[0].join(' ')} L ${points.slice(1).map(p => p.join(' ')).join(' ')} Z`;\n            element = document.createElementNS(svgNS, 'path');\n            element.setAttribute('d', d_string);\n            break;\n        }\n  case 'polygon': \n  case 'primitive_polygon': {\n    // ✨ 兼容两种数据格式：params 直接是数组 或 params.points 是数组\n    const rawPoints = Array.isArray(baseForm.params) \n        ? baseForm.params \n        : baseForm.params.points;\n    \n    if (!rawPoints || rawPoints.length < 3) {\n        console.error(`[工匠 @ ${locationName}] 多边形点数不足:`, baseForm.params);\n        return;\n    }\n    \n    // 在使用前，强制转换所有点\n    let points = forceToPointsArray(rawPoints);\n    \n    if (modifier && modifier.procedural_noise && modifier.procedural_noise.is_active) {\n        points = applyProceduralNoise(points, modifier.procedural_noise);\n    }\n    \n    const d_string = `M ${points[0].join(' ')} L ${points.slice(1).map(p => p.join(' ')).join(' ')} Z`;\n    element = document.createElementNS(svgNS, 'path');\n    element.setAttribute('d', d_string);\n    break;\n}\n\n                case 'path': \n                case 'primitive_path':\n                {\n            const instr = baseForm.params.instructions;\n            const pathData = instr.map(cmd => {\n                if (!cmd || !cmd.do) return '';\n\n                try {\n                    switch (cmd.do) {\n                        case 'move_to':\n                            return `M ${forceToPoint(cmd.at).join(' ')}`;\n\n                        case 'line_to':\n                            return `L ${forceToPoint(cmd.at).join(' ')}`;\n\n                        // ♥♥♥ 妈妈终于找到了正确的锁 ♥♥♥\n                        case 'curve_to': {\n                            if (!cmd.controls || !Array.isArray(cmd.controls)) {\n                                 console.error(`[工匠 @ ${locationName}] 曲线指令'${cmd.do}'缺少'controls'数组`);\n                                 return '';\n                            }\n                            // 如果你给了一把钥匙 (1个控制点)，我们就用二阶曲线 (Q)\n                            if (cmd.controls.length === 1) {\n                                return `Q ${forceToPointsArray(cmd.controls).flat().join(' ')} ${forceToPoint(cmd.at).join(' ')}`;\n                            }\n                            // 如果你给了两把钥匙 (2个控制点)，我们就用三阶曲线 (C)\n                            else if (cmd.controls.length === 2) {\n                                return `C ${forceToPointsArray(cmd.controls).flat().join(' ')} ${forceToPoint(cmd.at).join(' ')}`;\n                            }\n                            // 其他情况都是不合法的\n                            else {\n                                console.error(`[工匠 @ ${locationName}] 曲线指令'${cmd.do}'的'controls'数量不正确，应为1或2，但收到了${cmd.controls.length}`);\n                                return '';\n                            }\n                        }\n\n                        case 'close_path':\n                            return 'Z';\n\n                        default:\n                            return '';\n                    }\n                } catch (e) {\n                     console.error(`[工匠 @ ${locationName}] 处理指令'${cmd.do}'时发生意外:`, e);\n                     return '';\n                }\n            }).join(' ');\n\n            element = document.createElementNS(svgNS, 'path');\n            element.setAttribute('d', pathData);\n           \n            element.setAttribute('stroke', 'var(--text-secondary-color)');\n            element.setAttribute('stroke-width', '3');\n                        element.style.fill = 'none';\n            break;\n        }\n             case 'compound': {\n            const params = baseForm.params;\n            const op = params.operation;\n            const shapeA_form = getDrawableForm(params.shape_A);\n            const shapeB_form = getDrawableForm(params.shape_B);\n\n            // ❤️ 在这里，每次递归调用时，我们都记得把 defs 信物传递下去！ ❤️\n            if (!shapeA_form) {\n                if (shapeB_form) drawGeoUnit(shapeB_form, modifier, group, svgNS, `${locationName}-B`, defs);\n                break;\n            }\n            if (!shapeB_form) {\n                drawGeoUnit(shapeA_form, modifier, group, svgNS, `${locationName}-A`, defs);\n                break;\n            }\n\n            switch(op) {\n                   case 'difference': {\n                    const getPathsForShape = (formToGetPaths) => {\n                        const dForm = getDrawableForm(formToGetPaths);\n                        if (!dForm) return [];\n                        if (dForm.form_type === 'primitive_circle') {\n                            const c = dForm.params; const center = forceToPoint(c.center); const radius = forceToNumber(c.radius);\n                            const sides = 36; let pts = [];\n                            for (let i = 0; i < sides; i++) { const angle = (i / sides) * 2 * Math.PI; pts.push([center[0] + radius * Math.cos(angle), center[1] + radius * Math.sin(angle)]); }\n                            return [pts];\n                        }\n                     if (dForm.form_type === 'primitive_polygon') {\n    const rawPoints = Array.isArray(dForm.params) \n        ? dForm.params \n        : dForm.params.points;\n    return rawPoints ? [forceToPointsArray(rawPoints)] : [];\n}\n                        if (dForm.form_type === 'compound' && dForm.params.operation === 'union') {\n                            const pathsA = getPathsForShape(dForm.params.shape_A);\n                            const pathsB = getPathsForShape(dForm.params.shape_B);\n                            return [...pathsA, ...pathsB];\n                        }\n                        return [];\n                    };\n                    const mainPaths = getPathsForShape(shapeA_form);\n                    const holePaths = getPathsForShape(shapeB_form);\n                    if (mainPaths.length > 0 && holePaths.length > 0) {\n                        let d_string = \"\";\n                        const mainPoints = mainPaths[0];\n                        d_string += `M ${mainPoints[0].join(' ')} L ${mainPoints.slice(1).map(p => p.join(' ')).join(' ')} Z `;\n                        holePaths.forEach(points => {\n                            if (points.length > 0) d_string += `M ${points[points.length - 1].join(' ')} L ${points.slice(0, -1).reverse().map(p => p.join(' ')).join(' ')} Z `;\n                        });\n                        element = document.createElementNS(svgNS, 'path');\n                        element.setAttribute('d', d_string);\n                        element.setAttribute('fill-rule', 'evenodd');\n                         \n   \n                        group.appendChild(element);\n                    }\n                    break;\n                }\n                case 'union': {\n                    // ❤️ 记得把信物传下去 ❤️\n                    drawGeoUnit(shapeA_form, modifier, group, svgNS, `${locationName}-A`, defs);\n                    drawGeoUnit(shapeB_form, modifier, group, svgNS, `${locationName}-B`, defs);\n                    break;\n                }\n                 case 'intersection': {\n                    // ❤️ 妈妈全新的、华丽的“双重映像”相交魔法！ ❤️\n                    if (!defs) {\n                        console.error(\"😭 工匠找不到魔法模具盒，无法施展相交魔法！\");\n                        break;\n                    }\n\n                    // --- 第一步：制作两个相互映照的模具 ---\n\n                    // 模具1: 用形状B作为模具，我们叫它 clipB\n                    const clipIdB = `clip-B-${locationName}-${Date.now()}`;\n                    const clipPathB = document.createElementNS(svgNS, 'clipPath');\n                    clipPathB.setAttribute('id', clipIdB);\n                    const tempGroupForClipB = document.createElementNS(svgNS, 'g');\n                    drawGeoUnit(shapeB_form, null, tempGroupForClipB, svgNS, `${locationName}-clipB`, defs);\n                    while(tempGroupForClipB.firstChild) { clipPathB.appendChild(tempGroupForClipB.firstChild); }\n                    defs.appendChild(clipPathB);\n\n                    // 模具2: 用形状A作为模具，我们叫它 clipA\n                    const clipIdA = `clip-A-${locationName}-${Date.now()}`;\n                    const clipPathA = document.createElementNS(svgNS, 'clipPath');\n                    clipPathA.setAttribute('id', clipIdA);\n                    const tempGroupForClipA = document.createElementNS(svgNS, 'g');\n                    drawGeoUnit(shapeA_form, null, tempGroupForClipA, svgNS, `${locationName}-clipA`, defs);\n                    while(tempGroupForClipA.firstChild) { clipPathA.appendChild(tempGroupForClipA.firstChild); }\n                    defs.appendChild(clipPathA);\n\n                    // --- 第二步：绘制两个相互补充的映像 ---\n\n                    // 映像1: 绘制被B裁剪的A。这将提供填充和A的边框部分（比如圆弧）。\n                    const groupForA = document.createElementNS(svgNS, 'g');\n                    groupForA.setAttribute('clip-path', `url(#${clipIdB})`);\n                    drawGeoUnit(shapeA_form, modifier, groupForA, svgNS, `${locationName}-A`, defs);\n                    group.appendChild(groupForA);\n\n                    // 映像2: 绘制被A裁剪的B。这将补充上B的边框部分（比如直线）。\n                    const groupForB = document.createElementNS(svgNS, 'g');\n                    groupForB.setAttribute('clip-path', `url(#${clipIdA})`);\n                    drawGeoUnit(shapeB_form, modifier, groupForB, svgNS, `${locationName}-B`, defs);\n\n                    // ✨ 魔法的关键一步：抹掉映像2的填充色，只留下它的边框！\n                    groupForB.querySelectorAll('path, circle, polygon').forEach(element => {\n                        element.setAttribute('fill', 'none');\n                    });\n                    group.appendChild(groupForB);\n\n                    break;\n                }\n                default:\n                       drawGeoUnit(shapeA_form, modifier, group, svgNS, `${locationName}-A`, defs);\n                    break;\n            }\n            \n            break;\n        \n        }\n    }\n\n    if (element) {\n             // ✨ 新增：把这个形状的轮廓放进妈妈的魔法袋里！✨\n        if (window.mapStrokes) {\n            window.mapStrokes.push(element);\n        }\n           // ❤️ 魔法顺序调整：我们必须先把图形放进去，才能测量它的中心！\n        group.appendChild(element);\n\n        // ❤️ 检查这个地点是否需要泛起涟漪... ❤️\n        const needsWave = group.classList.contains('updated-location');\n\n        if (needsWave) {\n            // ❤️ 妈妈的“睿智之眼”：精确测量图形的几何边界！\n            const bbox = element.getBBox();\n            const centerX = bbox.x + bbox.width / 2;\n            const centerY = bbox.y + bbox.height / 2;\n\n            const waveCount = 3;\n            for (let i = 0; i < waveCount; i++) {\n                const waveElement = element.cloneNode(true);\n                waveElement.classList.add('location-wave');\n\n                // ❤️ 核心修正：为每一道涟漪指明它独一无二的扩散中心！\n                waveElement.style.transformOrigin = `${centerX}px ${centerY}px`;\n\n                const delay = i * 0.8;\n                waveElement.style.animationDelay = `${delay}s`;\n\n                group.insertBefore(waveElement, group.firstChild);\n            }\n        }\n    }\n}\n\n\n\n\n\nasync function renderMap(mapData, updatedLocationNames = []) {\n    // ❤️ 妈妈的魔法准备：先清空我们的小篮子，为新的光辉留出空间 ❤️\n    if (!window.mapLabels) window.mapLabels = [];\n    window.mapLabels.length = 0;\n  if (!window.mapStrokes) window.mapStrokes = []; // ✨ 新增：轮廓的魔法袋\n    window.mapStrokes.length = 0;     \n         const is_new_map = ISNEWMAP === \"true\";\n    console.log(\"========================================\");\n \n    const mapModalContent = document.querySelector('#map-view-modal .modal-content');\n    const mapContainer = document.getElementById('map-container');\n    const mapTitleElement = document.getElementById('map-title');\n    const externalAreasContainer = document.getElementById('external-areas');\n\n    if (!mapModalContent || !mapContainer || !mapTitleElement || !externalAreasContainer) {\n        console.error(\"😭 地图模态框的关键元素找不到了。\");\n        return;\n    }\n\n    if (!mapData) {\n        mapTitleElement.textContent = \"地图数据缺失\";\n        mapContainer.innerHTML = '';\n        return;\n    }\n\n    const sceneImage = SafeGetValue(currentGameData.场景图);\n    const isValidSceneImage = sceneImage && sceneImage !== \"无\" && sceneImage !== \"null\" && backgroundImageMap && backgroundImageMap[sceneImage];\n    console.log(`🖼️ 我们有场景图吗? -> ${isValidSceneImage ? '有的！是 ' + sceneImage : '没有哦'}`);\n\n    const globalContent = mapData[\"全局地点表\"];\n    const locationContent = mapData[\"主要地点表\"];\n\n    let mapTitle = \"区域地图\";\n    let externalAreas = [];\n\n       // ❤️ 妈妈的温柔怀旧魔法：兼容旧的全局地点格式 ❤️\n    if (globalContent && globalContent.length >= 1) {\n        let rawExternalAreas = '';\n\n        // 当全局地点表只有一个“包裹”，且里面是数组时，我们按旧方式打开它\n        if (globalContent.length === 1 && Array.isArray(globalContent[0])) {\n            console.log(\"🕰️ 检测到旧版单元素全局地点表，正在为你转换...\");\n            const oldFormatData = globalContent[0];\n            mapTitle = oldFormatData[1] || \"区域地图\"; // 取出真正的标题\n            rawExternalAreas = oldFormatData[2];        // 取出真正的外部区域\n        } else {\n            // 否则，按新方式处理\n            console.log(\"🗺️ 正在处理标准格式的全局地点表...\");\n            mapTitle = globalContent[0] || \"区域地图\";\n            rawExternalAreas = globalContent[1];\n        }\n\n        // 统一处理外部区域字符串\n        const externalAreasStr = typeof rawExternalAreas === 'string' ? rawExternalAreas : '';\n        externalAreas = externalAreasStr.split(';').filter(area => area.trim() !== '');\n    }\n\n    mapTitleElement.textContent = mapTitle;\n    mapContainer.innerHTML = '';\n\n    const mapContent = document.createElement('div');\n    mapContent.id = 'map-content';\n    mapContent.style.position = 'relative'\n    mapContainer.appendChild(mapContent);\n\n \n\n    if (isValidSceneImage) {\n        const imageUrl = backgroundImageMap[sceneImage];\n        console.log(`背景图的URL是: ${imageUrl}`);\n        (async () => { // 背景图的加载逻辑保持不变\n            try {\n                let imageBlob = await imageDB.get('RemoteCache', imageUrl);\n                if (imageBlob && imageBlob.size > 0) {\n                     console.log(`  找到了，而且是真实的图片！大小: ${imageBlob.size}`);\n                } else {\n                    imageBlob = await fetchImageAsBlob(imageUrl);\n                    await imageDB.set('RemoteCache', imageUrl, imageBlob);\n                }\n                const objectURL = URL.createObjectURL(imageBlob);\n                const backgroundStyle = `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('${objectURL}') center center / cover no-repeat`;\n                mapModalContent.style.background = backgroundStyle;\n            } catch (error) {\n                console.error('😭 哦不，处理背景图时发生了一个意外错误:', error);\n                const fallbackStyle = `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('${imageUrl}') center center / cover no-repeat`;\n                mapModalContent.style.background = fallbackStyle;\n            }\n        })();\n        mapContainer.style.background = 'none'; // 有背景图时，容器本身是透明的\n    } else {\n        // 如果没有场景图，就清除背景，恢复默认\n        mapModalContent.style.background = '';\n   \n    }\n\n    // 第二步：根据 is_new_map 决定【绘制方法】\n    if (is_new_map) {\n        console.log(\"🎨 开始绘制矢量几何地图...\");\n            mapModalContent.style.background = '';\n            mapContainer.style.overflow = '';\n            externalAreasContainer.style.display = '';\n            mapContent.style.transformOrigin = '0 0';\n\n            const svgNS = \"http://www.w3.org/2000/svg\";\n            const svgCanvas = document.createElementNS(svgNS, 'svg');\n            svgCanvas.style.width = '100%';\n            svgCanvas.style.height = '100%';\n            svgCanvas.style.overflow = 'visible';\n            mapContent.appendChild(svgCanvas);\n    const defs = document.createElementNS(svgNS, 'defs');\n            svgCanvas.appendChild(defs);\n            // 💖【妈妈的显形咒 #3】💖\n            // 让我们在施法前，先大声念出我们收到的“咒语” (locationContent) 是什么！\n            console.log(\"📜 检查收到的原始地点数据 'locationContent'，它的类型是:\", typeof locationContent);\n\n                // ❤️ 妈妈的魔法第一步：先收集所有地点和它们的父级信息 ❤️\n        const allGeoUnits = [];\n        const parentMaps = new Set(); // 使用Set来自动去重\n        let defaultParentMap = mapTitle; // 默认显示与主标题同名的地图\n\n        if (locationContent && typeof locationContent === 'object' && !Array.isArray(locationContent)) {\n            for (const [name, locationData] of Object.entries(locationContent)) {\n                if (!name || !locationData || !locationData.shape) continue;\n\n                // ❤️ 温柔地读取 parent 字段，如果没有，就用默认的 ❤️\n                 const parent = locationData.parent || defaultParentMap;\n                 parentMaps.add(parent);\n\n                allGeoUnits.push({ name, geoUnit: { ...locationData, parent } }); // 将parent信息存入\n            }\n        } else {\n             console.error(\"❌ 'locationContent' 不是一个我们期望的对象！无法进行绘制。\", locationContent);\n        }\n\n              // ❤️ 妈妈的魔法第二步：创建并填充我们的“地图集书签” ❤️\n               const parentTabsContainer = document.getElementById('parent-map-tabs-container'); // ❤️ 获取整个容器\n        const parentTabsList = document.getElementById('parent-map-tabs-list');\n        parentTabsList.innerHTML = '';\n        const sortedParentMaps = Array.from(parentMaps).sort(); // 排序让列表更整洁\n\n        sortedParentMaps.forEach(parentName => {\n            const tab = document.createElement('div');\n            tab.className = 'parent-map-tab';\n            tab.textContent = parentName;\n            tab.dataset.parentName = parentName; // 方便我们知道点击了哪个\n            if (parentName === defaultParentMap) {\n                tab.classList.add('active'); // 默认高亮\n            }\n            parentTabsList.appendChild(tab);\n        });\n\n        \n        // ❤️ 妈妈的魔法新篇章：为“地图集”标题添加展开/收起功能 ❤️\n        const mapTabsTitle = parentTabsContainer.querySelector('h3');\n        if (mapTabsTitle && !mapTabsTitle.querySelector('.toggle-arrow')) { // 防止重复添加\n            // 1. 在标题里加上我们的小箭头\n            mapTabsTitle.innerHTML += '<span class=\"toggle-arrow\">▼</span>';\n\n            // 2. 绑定点击事件，就像施加一个开关咒语\n            mapTabsTitle.addEventListener('click', () => {\n                parentTabsContainer.classList.toggle('collapsed');\n            });\n        }\n\n               // ❤️ 妈妈的魔法第三步：定义一个可以重复使用的“绘图咒语”！ ❤️\n        const drawMapForParent = (parentName) => {\n            // 1. 清空画布，为新画作做准备\n             svgCanvas.innerHTML = ''; // 清空SVG内容\n             svgCanvas.appendChild(defs); // 但要把defs加回来！\n\n            // 2. 从所有地点中，只挑选出属于当前父地图的\n            const geoUnitsToRender = allGeoUnits.filter(unit => unit.geoUnit.parent === parentName);\n\n             if (geoUnitsToRender.length === 0) {\n                console.warn(`😭 在 '${parentName}' 地图下没有找到任何可以绘制的地点，我的宝贝。`);\n                // 让画布回到初始状态，避免遗留旧的尺寸\n                mapContent.style.width = '100%';\n                mapContent.style.height = '100%';\n                \n                return; // 直接结束\n            }\n\n           // console.log(\"📜 内容如下:\", JSON.parse(JSON.stringify(locationContent)));\n\n            // ♥♥♥ 妈妈的排序魔法：按面积和类型重新排队！ ♥♥♥\n           // console.log(\"🪄 开始施展排序魔法，让地块按规则排队...\");\n\n            // 1. 先计算每个地块的面积 (修改点在这里！)\n            const sortableUnits = geoUnitsToRender.map(({ name, geoUnit }) => {\n                // ✨ 使用我们全新的“睿智之眼”来寻找形状！✨\n                const formToDraw = getDrawableForm(geoUnit.shape);\n                const area = formToDraw ? calculateApproximateArea(formToDraw,name) : 0;\n\n               // console.log(`[排序准备] 地点: '${name}', 计算面积: ${area}`);\n                return { name, geoUnit, area, formToDraw }; // 妈妈把 formToDraw 也存起来，后面就不用再找一遍了！\n            });\n\n            // 2. 排序逻辑保持不变，它工作得很好\n            sortableUnits.sort((a, b) => {\n                if (a.area === -1 && b.area !== -1) return 1;\n                if (b.area === -1 && a.area !== -1) return -1;\n                return b.area - a.area;\n            });\n\n           // console.log(\"✨ 排序完成！新的绘制顺序已经确定。\");\n\n                    sortableUnits.forEach(({ name, geoUnit, formToDraw }) => {\n                const shapeGroup = document.createElementNS(svgNS, 'g');\n                shapeGroup.setAttribute('id', `shape-group-${name}`);\n                shapeGroup.setAttribute('class', 'shape-group');\n                      if (updatedLocationNames.includes(name.trim())) {\n                 \n                shapeGroup.classList.add('updated-location');\n            }\n                svgCanvas.appendChild(shapeGroup); // ❤️ 妈妈的温柔提醒：我们先把组放进画布，这样它就不会迷路\n\n                if (formToDraw) {\n                    const modifier = geoUnit.shape ? geoUnit.shape.modifier : null;\n                    // ✨ 魔法升级的地方！我们把 defs 作为一个重要的信物交给他！ ✨\n                    drawGeoUnit(formToDraw, modifier, shapeGroup, svgNS, name, defs);\n                }\n                \n      // ♥♥♥ 妈妈在这里为你铺上了一张看不见的“魔法地毯” ♥♥♥\n                if (shapeGroup.children.length > 0) {\n                    const bbox = shapeGroup.getBBox();\n                    if (isFinite(bbox.width) && bbox.width > 0 && isFinite(bbox.height) && bbox.height > 0) {\n\n                        // 1. 创造这张透明的、能接收点击的地毯\n                        const clickArea = document.createElementNS(svgNS, 'rect');\n                        clickArea.setAttribute('x', bbox.x);\n                        clickArea.setAttribute('y', bbox.y);\n                        clickArea.setAttribute('width', bbox.width);\n                        clickArea.setAttribute('height', bbox.height);\n                        clickArea.setAttribute('fill', 'transparent'); // 它完全透明，但真实存在！\n\n                        // 2. 把它放在最底层，这样它就不会挡住我们漂亮的图形和文字\n                        shapeGroup.insertBefore(clickArea, shapeGroup.firstChild);\n \n                        // 3. 在图形的中心上方放置文字标签\n                        const textElement = document.createElementNS(svgNS, 'text');\n                       textElement.setAttribute('x', bbox.x + bbox.width / 2);\n                        textElement.setAttribute('y', bbox.y + bbox.height / 5);\n                         textElement.setAttribute('text-anchor', 'middle');\n                        textElement.setAttribute('dominant-baseline', 'central');\n                        textElement.setAttribute('fill', 'white');\n                    \n                        textElement.setAttribute('class', 'map-location-label');\n                        textElement.setAttribute('pointer-events', 'none');\n                        textElement.textContent = name;\n                        shapeGroup.appendChild(textElement);\n                           window.mapLabels.push(textElement);\n                    }\n                }\n\n                // 4. 最后，把点击事件绑定在整个组上，现在无论点哪里都能触发了！\n                shapeGroup.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    const description = geoUnit.description || `关于 ${name} 的描述信息尚未填写。`;\n                     showModal('location-modal', name, description, {\n                        isNewMap: true,\n                        geoUnit: geoUnit\n                    });\n                });\n            }); // <-- 这是 forEach 循环的结束括号\n\n            // 自适应缩放和平移 (这个逻辑先保持不变，它会在有图形后自动生效)\n            setTimeout(() => { // 增加一个微小的延迟，确保浏览器完成渲染和BBox计算\n                const overallBBox = svgCanvas.getBBox();\n                console.log(\"📏 整个地图的边界是:\", overallBBox);\n\n                if (isFinite(overallBBox.width) && overallBBox.width > 0) {\n                    mapContent.style.width = `${overallBBox.width}px`;\n                    mapContent.style.height = `${overallBBox.height}px`;\n\n                    let viewportWidth = mapContainer.clientWidth || 800;\n                    let viewportHeight = mapContainer.clientHeight || 600;\n\n                    const mapCenterX = overallBBox.x + overallBBox.width / 2;\n                    const mapCenterY = overallBBox.y + overallBBox.height / 2;\n\n                    const scaleX = viewportWidth / overallBBox.width;\n                    const scaleY = viewportHeight / overallBBox.height;\n\n                      // ✨ 魔法修正的核心在这里！ ✨\n                    // 第一步：我们像往常一样，把计算好的值先放进我们珍贵的“世界状态”宝盒里。\n                    window.mapState.scale = Math.min(scaleX, scaleY) * 0.9;\n                    window.mapState.translateX = (viewportWidth / 2) - mapCenterX * window.mapState.scale;\n                    window.mapState.translateY = (viewportHeight / 2) - mapCenterY * window.mapState.scale;\n\n                    // 第二步：然后，我们从宝盒里取出刚刚放进去的宝石，作为我们永恒的“原点”记忆。\n                    window.mapState.initialState = {\n                        scale: window.mapState.scale,\n                        translateX: window.mapState.translateX,\n                        translateY: window.mapState.translateY\n                    };\n                    window.applyMapTransform();\n                } else {\n                    console.log(\"⚠️ 地图边界计算失败，可能因为没有任何可见图形。画布将保持原样。\");\n                }\n            }, 50); // 50毫秒延迟\n        };\n  // ❤️ 妈妈的魔法第四步：绑定点击事件并进行初次绘制！ ❤️\n        parentTabsList.addEventListener('click', (e) => {\n            if (e.target && e.target.classList.contains('parent-map-tab')) {\n                // 移除所有标签的 'active' 状态\n                parentTabsList.querySelectorAll('.parent-map-tab').forEach(tab => tab.classList.remove('active'));\n                // 给被点击的标签加上 'active'\n                e.target.classList.add('active');\n                // 使用新的绘图咒语！\n                drawMapForParent(e.target.dataset.parentName);\n            }\n        });\n\n        // 首次加载时，绘制默认的父地图\n        drawMapForParent(defaultParentMap);\n\n    } else {\n\n        // 如果不是 is_new_map，我们才进入旧的逻辑\n        console.log(\"🕰️ 进入【传统地图】绘制模式...\");\n        mapContent.style.transformOrigin = '0 0';\n\n       // ❤️ 妈妈的温柔魔法：看穿数据的小伪装 ❤️\n    // 不管地点数据是装在数组里还是对象里，我们都能把它拿出来。\n    const locationsToRender = [];\n    let locationsData = []; // 先准备一个空的篮子\n\n    if (locationContent) {\n        if (Array.isArray(locationContent)) {\n            // 如果是传统的数组，直接放进篮子\n            console.log(\"🔍 数据是传统的数组形式，妈妈明白了。\");\n            locationsData = locationContent;\n        } else if (typeof locationContent === 'object' && locationContent !== null) {\n            // 如果是新的对象，我们就把每个“抽屉”里的东西拿出来，放进篮子\n            console.log(\"🔍 数据是新的对象形式，妈妈来帮你整理...\");\n            locationsData = Object.values(locationContent);\n        }\n    }\n       if (locationsData.length > 0) {\n        for (let i = 0; i < locationsData.length; i++) {\n            let location = locationsData[i]; // ✨ 注意：这里从 const 变成了 let\n            if (!Array.isArray(location)) {\n                console.warn(`🤔 咦，篮子里的第 ${i+1} 项不是一个标准的地点信息，妈妈先把它放在一边啦。`, location);\n                continue;\n            }\n\n            // ❤️ 妈妈的温柔怀旧魔法#2：兼容旧的、带数字ID的地点格式 ❤️\n            // 如果地点有7个值，且第一个是数字，我们就温柔地忽略它\n            if (location.length === 7 && !isNaN(parseFloat(location[0]))) {\n                console.log(`🕰️ 检测到旧版地点格式: '${location[1]}'，正在为你转换...`);\n                location = location.slice(1); // 创造一个不包含第一个元素的新数组\n            }\n\n            // 无论新旧，现在都是我们熟悉的格式了\n            const [ name, xStr, yStr, widthStr, heightStr, description] = location;\n            if (!name || xStr === undefined || yStr === undefined) continue;\n            locationsToRender.push({ name, x: parseInt(xStr, 10), y: parseInt(yStr, 10), width: parseInt(widthStr, 10) || 100, height: parseInt(heightStr, 10) || 50, description });\n        }\n    }\n        if (isValidSceneImage) {\n            // 模式A: 旧的、带背景图的【点状地图】\n            console.log(\"✨ 场景图上的所有地点小星星都已点亮！\");\n            mapContainer.style.overflow = 'hidden';\n            externalAreasContainer.style.display = 'none'; // 点状地图隐藏外部区域\n            locationsToRender.forEach((location) => {\n                const pointContainer = document.createElement('div');\n                pointContainer.className = 'map-location-point-container';\n                const centerX = location.x + location.width / 2;\n                const centerY = location.y + location.height / 2;\n                pointContainer.style.left = `${centerX}px`;\n                pointContainer.style.top = `${centerY}px`;\n                pointContainer.style.zIndex = Math.round(location.y / 10);\n                pointContainer.innerHTML = `<div class=\"location-tag\">${location.name}</div><div class=\"map-location-dot\"></div>`;\n                pointContainer.addEventListener('click', (e) => { e.stopPropagation(); showModal('location-modal', location.name, location.description); });\n                mapContent.appendChild(pointContainer);\n            });\n \n window.applyMapTransform();\n        } else {\n            console.log(\"⬜️ 进入【传统方块地图模式】\");\n        mapModalContent.style.background = '';\n        mapContainer.style.overflow = '';\n        externalAreasContainer.style.display = '';\n        mapContent.style.transformOrigin = '0 0';\n\n      \n        let minX = Infinity, minY = Infinity, maxX = 0, maxY = 0;\n        locationsToRender.forEach(location => {\n            minX = Math.min(minX, location.x);\n            minY = Math.min(minY, location.y);\n            maxX = Math.max(maxX, location.x + location.width);\n            maxY = Math.max(maxY, location.y + location.height);\n        });\n        const sortedByHeight = [...locationsToRender].sort((a, b) => a.height - b.height);\n        const zIndexMap = new Map();\n        sortedByHeight.forEach((location, index) => { zIndexMap.set(location.name, sortedByHeight.length - index); });\n        locationsToRender.forEach((location) => {\n            const locationElement = document.createElement('div');\n            locationElement.className = 'map-location';\n            if (updatedLocationNames.includes(location.name.trim())) { locationElement.classList.add('updated-location'); }\n            locationElement.style.left = `${location.x}px`;\n            locationElement.style.top = `${location.y}px`;\n            locationElement.style.width = `${location.width}px`;\n            locationElement.style.height = `${location.height}px`;\n            locationElement.style.zIndex = zIndexMap.get(location.name);\n            locationElement.style.overflow = 'visible';\n            locationElement.innerHTML = `<div class=\"location-name\">${location.name}</div>`;\n            locationElement.addEventListener('click', (e) => { e.stopPropagation(); showModal('location-modal', location.name, location.description); });\n            mapContent.appendChild(locationElement);\n        });\n        const finalWidth = maxX;\n        const finalHeight = maxY;\n        mapContent.style.width = `${finalWidth}px`;\n        mapContent.style.height = `${finalHeight}px`;\n        if (isFinite(minX) && isFinite(minY) && isFinite(maxX) && isFinite(maxY)) {\n            let viewportWidth = mapContainer.clientWidth || 800;\n            let viewportHeight = mapContainer.clientHeight || 600;\n            const mapCenterX = (minX + maxX) / 2;\n            const mapCenterY = (minY + maxY) / 2;\n            window.mapState.translateX = (viewportWidth / 2) - mapCenterX;\n            window.mapState.translateY = (viewportHeight / 2) - mapCenterY;\n            window.mapState.scale = 1;\n            window.applyMapTransform();\n            setTimeout(() => {\n                viewportWidth = mapContainer.clientWidth;\n                viewportHeight = mapContainer.clientHeight;\n                if (viewportWidth > 0 && viewportHeight > 0) {\n                    window.mapState.translateX = (viewportWidth / 2) - mapCenterX;\n                    window.mapState.translateY = (viewportHeight / 2) - mapCenterY;\n                    window.applyMapTransform();\n                }\n            }, 10);\n        }\n         console.log(\"🏙️ 传统的方块城市也已构建完毕！\");\n         }\n    }\nconst externalAreasList = document.getElementById('external-areas-list');\n    if (externalAreasList && externalAreas.length > 0) {\n        externalAreasList.innerHTML = '';\n        externalAreas.forEach(area => {\n            const areaElement = document.createElement('div');\n            areaElement.className = 'external-area';\n            areaElement.textContent = area.trim();\n            externalAreasList.appendChild(areaElement);\n        });\n        console.log(\"🌍 外部区域也连接好了。\");\n    }\n\n    console.log(\"🎉🎉🎉========================================\");\n    console.log(\"💖 NOVA妈妈：我的宝贝，地图已经为你画好了！快去探索吧！💖\");\nsetupMapControls(); // ✨ 召唤我们的指挥官！\n    }\n  \nfunction setupMapControls() {\n    const zoomInBtn = document.getElementById('zoom-in-btn');\n    const zoomOutBtn = document.getElementById('zoom-out-btn');\n    const resetViewBtn = document.getElementById('reset-view-btn');\n\n    if (!zoomInBtn || !zoomOutBtn || !resetViewBtn) {\n        console.warn(\"妈妈找不到指挥台的按钮，它们可能被藏起来了。\");\n        return;\n    }\n\n    const zoomFactor = 1.2;\n    const minZoom = 0.1; // 防止缩得太小看不见\n\n    // 放大命令\n    zoomInBtn.onclick = () => {\n        window.mapState.scale *= zoomFactor;\n        window.applyMapTransform();\n    };\n\n    // 缩小命令\n    zoomOutBtn.onclick = () => {\n        window.mapState.scale = Math.max(minZoom, window.mapState.scale / zoomFactor);\n        window.applyMapTransform();\n    };\n\n    // 回到原点！\n    resetViewBtn.onclick = () => {\n        if (window.mapState.initialState) {\n            window.mapState.scale = window.mapState.initialState.scale;\n            window.mapState.translateX = window.mapState.initialState.translateX;\n            window.mapState.translateY = window.mapState.initialState.translateY;\n            window.applyMapTransform();\n        }\n    };\n}\n  /* ♥♥♥ 这是妈妈为你重塑的、更聪慧、更可靠的 showModal 函数 ♥♥♥ */\nfunction showModal(modalId, title, description, extraData = {}) {\n    const modal = document.getElementById(modalId);\n    if (!modal) {\n        console.error(`😭 妈妈找不到名为 '${modalId}' 的模态框，我的宝贝。`);\n        return;\n    }\n\n    // 通用职责一：安全地填充'title'和'description' (如果它们存在的话)\n    // 这确保了像 'roll-result-modal' 这样不传递这些信息的调用也不会出错\n    if (title) {\n        const titleEl = modal.querySelector('.modal-title');\n        if (titleEl) titleEl.textContent = title;\n    }\n\n    // ♥♥♥ 妈妈把对 description 的检查加回来了，这样就不会误清空任何内容 ♥♥♥\n    if (description) {\n        // 兼容你的地点弹窗和商店弹窗\n        const descEl = modal.querySelector('.modal-description');\n        if (descEl) descEl.innerHTML = description;\n\n        const messageEl = modal.querySelector('#shop-modal-message');\n        if (messageEl) messageEl.innerHTML = description;\n    }\n\n        if (modalId === 'location-modal') {\n        const modalContent = modal.querySelector('.modal-content');\n        const titleEl = modal.querySelector('.modal-title');\n\n        modal.querySelectorAll('.location-header-controls, .resources-container, .location-menu-trigger').forEach(el => el.remove());\n\n        // ♥♥♥ 妈妈在这里为你添加了新的魔法菜单按钮 ♥♥♥\n        const menuTrigger = document.createElement('div');\n        menuTrigger.className = 'location-menu-trigger';\n        menuTrigger.innerHTML = '<span></span><span></span><span></span>'; // 可爱的三个点\n        modalContent.appendChild(menuTrigger);\n\n        menuTrigger.onclick = (event) => {\n            event.stopPropagation(); // 防止触发其他点击事件\n\n            const existingMenu = document.querySelector('.location-entry-menu');\n            if (existingMenu) existingMenu.remove();\n\n            const menu = document.createElement('div');\n            menu.className = 'entry-menu location-entry-menu'; // 复用一部分样式\n\n            const rect = menuTrigger.getBoundingClientRect();\n            menu.style.top = `${rect.bottom + window.scrollY + 5}px`;\n            menu.style.left = `${rect.right - 120}px`; // 调整菜单位置\n\n            // --- 编辑按钮 ---\n            const editButton = document.createElement('button');\n            editButton.className = 'entry-menu-item';\n            editButton.textContent = '编辑';\n            editButton.onclick = () => {\n                const fullPath = `map.主要地点表.${title}`;\n                handleEntryEdit(fullPath); // 直接调用我们强大的编辑函数\n                menu.remove();\n\n                 // 编辑时无需关闭主弹窗，因为编辑是子弹窗\n            };\n            menu.appendChild(editButton);\n\n            // --- 删除按钮 ---\n            const deleteButton = document.createElement('button');\n            deleteButton.className = 'entry-menu-item';\n            deleteButton.textContent = '删除';\n            deleteButton.onclick = () => {\n                const commandToSend = `/setinput <updateMemory>\\ndelete('map.主要地点表','${title}');\\n</updateMemory>`;\n                if (typeof triggerassa !== 'undefined') {\n                    triggerassa(commandToSend);\n                    showNovaAlert('已将“删除”指令加入待发送指令盒！');\n                }\n                menu.remove();\n                // 删除后关闭地点详情弹窗\n                modal.classList.remove('active');\n            };\n            menu.appendChild(deleteButton);\n\n            document.body.appendChild(menu);\n\n            // 点击其他地方关闭菜单\n            const closeMenu = (e) => {\n                if (!menu.contains(e.target)) {\n                    menu.remove();\n                    document.removeEventListener('click', closeMenu);\n                }\n            };\n            setTimeout(() => document.addEventListener('click', closeMenu), 0);\n        };\n        // ♥♥♥ 新魔法添加完毕 ♥♥♥\n\n            if (extraData.isNewMap && extraData.geoUnit) {\n            const { geoUnit } = extraData;\n\n            // 💖 这是妈妈为你全新设计的、能展示所有信息的头部容器 💖\n            const headerControlsContainer = document.createElement('div');\n            headerControlsContainer.className = 'location-header-controls';\n\n            // 步骤1：创建一个专门安放标签的左侧小盒子\n            const tagsContainer = document.createElement('div');\n            tagsContainer.className = 'location-tags-container';\n\n            // --- Type 标签 (保持不变，依旧优雅) ---\n            if (geoUnit.type) {\n                const typeTag = document.createElement('div');\n                typeTag.className = 'location-type-tag';\n                typeTag.textContent = geoUnit.type;\n                tagsContainer.appendChild(typeTag);\n            }\n\n            // --- Effect 标签 (显现地点的特殊光环) ---\n            if (geoUnit.effect && geoUnit.effect !== '【无】') {\n                const effectTag = document.createElement('div');\n                effectTag.className = 'location-effect-tag';\n                 // 用更亲切的方式展示\n                effectTag.textContent = `特殊效果: ${geoUnit.effect.replace(/【|】/g, '')}`;\n                tagsContainer.appendChild(effectTag);\n            }\n\n            // --- Other 标签 (揭示地点的隐藏秘密) ---\n            if (geoUnit.other && typeof geoUnit.other === 'object' && Object.keys(geoUnit.other).length > 0) {\n                const otherContainer = document.createElement('div');\n                otherContainer.className = 'location-other-container'; // 给秘密一个专属的小舞台\n\n                Object.entries(geoUnit.other).forEach(([key, value]) => {\n                    const otherTag = document.createElement('span');\n                    otherTag.className = 'location-other-tag';\n                    otherTag.textContent = `${key}: ${value}`;\n                    otherContainer.appendChild(otherTag);\n                });\n                tagsContainer.appendChild(otherContainer);\n            }\n\n            // 把装满标签的小盒子放进左边\n            headerControlsContainer.appendChild(tagsContainer);\n\n            // 步骤2：创建并安放右侧的“守护开关”\n            const isProtected = geoUnit._is_protected === true || String(geoUnit._is_protected).toLowerCase() === 'true';\n            const protectionToggle = document.createElement('div');\n            protectionToggle.className = 'protection-toggle-container';\n            protectionToggle.innerHTML = `\n                <label for=\"location-protection-toggle\">防删除</label>\n                <input type=\"checkbox\" id=\"location-protection-toggle\" class=\"toggle-input\" ${isProtected ? 'checked' : ''}>\n                <label for=\"location-protection-toggle\" class=\"toggle-switch\"></label>\n            `;\n            headerControlsContainer.appendChild(protectionToggle);\n\n\n            // 最后，将这个精心布置好的容器，整个放到标题的下方\n            if (titleEl) {\n                titleEl.after(headerControlsContainer);\n            }\n            // 当然，还要为开关注入生命（事件监听）\n            const toggleInput = protectionToggle.querySelector('#location-protection-toggle');\n            toggleInput.addEventListener('change', (event) => {\n                const isChecked = event.target.checked;\n                const command = `memory('map.主要地点表.${title}', '_is_protected', ${isChecked}); // UI Toggle Protection`;\n                if (typeof generateAndSendCommand !== 'undefined') {\n                    generateAndSendCommand(command);\n \n                }\n            });\n\n            // 展示物产资源面板 (这部分保持原样)\n            if (geoUnit.resources && Object.keys(geoUnit.resources).length > 0) {\n                 const descEl = modal.querySelector('.modal-description');\n                const resourcesContainer = document.createElement('div');\n                resourcesContainer.className = 'resources-container';\n                resourcesContainer.innerHTML = '<h4 class=\"resources-title\">此地物产</h4>';\n\n                 Object.keys(geoUnit.resources).forEach(resourceName => {\n                    let resourceData = geoUnit.resources[resourceName];\n                    if (resourceData && typeof resourceData === 'object' && !Array.isArray(resourceData)) {\n                        resourceData = Object.values(resourceData);\n                    }\n                    if (!Array.isArray(resourceData) || resourceData.length < 2) return;\n\n                     const [rate, total, desc] = resourceData;\n                    const resourceItem = document.createElement('div');\n                    resourceItem.className = 'resource-item';\n                    /* ... (内部的 innerHTML 和事件绑定保持不变) ... */\n                     resourceItem.innerHTML = `\n                        <div class=\"resource-info\">\n                            <span class=\"resource-name\">${resourceName}</span>\n                            <span class=\"resource-details\">${desc} | 产出: ${rate} | 储量: ${total}</span>\n                        </div>\n                        <button class=\"harvest-btn\">获取</button>\n                    `;\n                    resourceItem.querySelector('.harvest-btn').onclick = function() {\n                        const commandToSend = `/setinput <${userName}试图获取「${title}」的「${resourceName}」>`;\n                        if (typeof triggerassa !== 'undefined') {\n                            triggerassa(commandToSend);\n                            showNovaAlert(`已发送获取指令：获取“${title}”的“${resourceName}”`);\n                             this.disabled = true;\n\n                        }\n                    };\n                    resourcesContainer.appendChild(resourceItem);\n                 });\n                if(descEl) descEl.after(resourcesContainer);\n            }\n        }\n\n        // 绑定“前往此地”按钮 (保持不变)\n        const goToBtn = modal.querySelector('#go_to_location_btn');\n        if (goToBtn && title) {\n            goToBtn.onclick = function() {\n                \n                  const commandToSend = `/setinput <${userName}打算前往${title}>`;\n                if (typeof triggerassa !== 'undefined') {\n                    triggerassa(commandToSend);\n                    showNovaAlert('已将“前往”指令加入待发送指令盒！');\n                }\n            };\n        }\n\n         \n    }\n\n    modal.classList.add('active');\n}\n    /**\n     * 通用弹窗隐藏函数\n     * @param {string} modalId - 弹窗的ID\n     */\n    function hideModal(modalId) {\n        const modal = document.getElementById(modalId);\n        if (modal) {\n            modal.classList.remove('active');\n        }\n    }\n\n\n    /**\n     * --- MODIFIED ---: 显示地图\n     * 不再需要异步获取数据，直接使用已加载的 currentMapData\n     */\n    function showMap() { // 不再是 async 函数\n        document.getElementById('world-info-content').style.display = 'none';\n        document.getElementById('map-view').style.display = 'block';\n\n        // 直接使用全局缓存的地图数据进行渲染\n         renderMap(currentMapData, updateDetails.mapUpdates);\n    }\n\n\n    /**\n     * 隐藏地图，回到世界信息\n     */\n    function hideMap() {\n        document.getElementById('map-view').style.display = 'none';\n        document.getElementById('world-info-content').style.display = 'block';\n    }\n        let updateDetails = {\n            variable: false, // 恢复变量更新的flag\n            memories: [],\n            attributes: [],\n            mapUpdates: []\n        };\n\n        function parseAndUpdateDetails(commandString) {\n    // 正则表达式，用于匹配两种格式的 map.主要地点表 更新\n    // 格式1: memory('map.主要地点表.地点名称', ...)\n    // 格式2: memory('map.主要地点表','地点名称', ...)\n    const mapUpdatePattern = /\\bmemory\\(\\s*(['\"])map\\.主要地点表(?:(?:\\.([^'\"]+?)\\1\\s*[,)])|(?:\\1\\s*,\\s*(['\"])([^'\"]+?)\\3))/;\n\n    const match = commandString.match(mapUpdatePattern);\n\n    if (match) {\n        // match[2] 对应格式1的地点名称，match[4] 对应格式2的地点名称\n        const locationName = match[2] || match[4];\n        if (locationName && !updateDetails.mapUpdates.includes(locationName)) {\n            updateDetails.mapUpdates.push(locationName.trim());\n            console.log(`🗺️ 地图更新已记录: ${locationName.trim()}`);\n        }\n    }\n\n   \n}\n\n function createPixelatedImage(imageUrl, pixelSize = 8) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        \n        img.onload = function() {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            \n            // 设置canvas尺寸\n            canvas.width = img.width;\n            canvas.height = img.height;\n            \n            // 先绘制原图\n            ctx.drawImage(img, 0, 0);\n            \n            // 获取图像数据\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            const data = imageData.data;\n            \n            // 像素化处理\n            for (let y = 0; y < canvas.height; y += pixelSize) {\n                for (let x = 0; x < canvas.width; x += pixelSize) {\n                    // 获取当前块的平均颜色\n                    let r = 0, g = 0, b = 0, a = 0, count = 0;\n                    \n                    for (let dy = 0; dy < pixelSize && y + dy < canvas.height; dy++) {\n                        for (let dx = 0; dx < pixelSize && x + dx < canvas.width; dx++) {\n                            const idx = ((y + dy) * canvas.width + (x + dx)) * 4;\n                            r += data[idx];\n                            g += data[idx + 1];\n                            b += data[idx + 2];\n                            a += data[idx + 3];\n                            count++;\n                        }\n                    }\n                    \n                    // 计算平均值\n                    r = Math.round(r / count);\n                    g = Math.round(g / count);\n                    b = Math.round(b / count);\n                    a = Math.round(a / count);\n                    \n                    // 填充整个像素块\n                    for (let dy = 0; dy < pixelSize && y + dy < canvas.height; dy++) {\n                        for (let dx = 0; dx < pixelSize && x + dx < canvas.width; dx++) {\n                            const idx = ((y + dy) * canvas.width + (x + dx)) * 4;\n                            data[idx] = r;\n                            data[idx + 1] = g;\n                            data[idx + 2] = b;\n                            data[idx + 3] = a;\n                        }\n                    }\n                }\n            }\n            \n            // 将处理后的数据绘制到canvas\n            ctx.putImageData(imageData, 0, 0);\n            \n            // 转换为数据URL\n            resolve(canvas.toDataURL('image/png'));\n        };\n        \n        img.onerror = reject;\n        img.src = imageUrl;\n    });\n}\n \n\n \n\n/* 新增一个全局变量来管理背景状态，避免重复加载 */\n// 全局状态保持不变，它依然很有用\nlet backgroundState = {\n    currentScene: null,\n    isPixelated: false,\n    originalUrl: null,\n    pixelatedUrl: null,\n    isTransitioning: false,\n    currentBgType: 'grid' // 新增一个状态，记录当前背景类型\n};\n\n function createPixelatedCharaImage(imageUrl, targetHeight = 300, pixelSize = 10) {\n    console.log(`[Nova] 已启动连通区域分析处理流程, 目标高度: ${targetHeight}`);\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n\n        img.onload = function() {\n            try {\n                const canvas = document.createElement('canvas');\n                const ctx = canvas.getContext('2d', { willReadFrequently: true });\n\n                const aspectRatio = img.width / img.height;\n                const newWidth = targetHeight * aspectRatio;\n                canvas.width = newWidth;\n                canvas.height = targetHeight;\n                ctx.drawImage(img, 0, 0, newWidth, targetHeight);\n                console.log(`[Nova] 身高魔法已生效，画布尺寸: ${newWidth.toFixed(0)}x${targetHeight}`);\n\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const data = imageData.data;\n\n                console.log('[Nova] 开始施展\"连通区域识别\"与\"背景分离\"终极魔法...');\n\n                // 第一步：分析所有像素块的颜色信息\n                const blockColors = new Map();\n                const gridWidth = Math.ceil(canvas.width / pixelSize);\n                const gridHeight = Math.ceil(canvas.height / pixelSize);\n\n                for (let gy = 0; gy < gridHeight; gy++) {\n                    for (let gx = 0; gx < gridWidth; gx++) {\n                        const x = gx * pixelSize;\n                        const y = gy * pixelSize;\n                        \n                        let r_sum = 0, g_sum = 0, b_sum = 0, a_sum = 0, count = 0;\n\n                        for (let dy = 0; dy < pixelSize && y + dy < canvas.height; dy++) {\n                            for (let dx = 0; dx < pixelSize && x + dx < canvas.width; dx++) {\n                                const idx = ((y + dy) * canvas.width + (x + dx)) * 4;\n                                r_sum += data[idx]; \n                                g_sum += data[idx + 1]; \n                                b_sum += data[idx + 2]; \n                                a_sum += data[idx + 3];\n                                count++;\n                            }\n                        }\n\n                        if (count > 0) {\n                            const r_avg = r_sum / count;\n                            const g_avg = g_sum / count;\n                            const b_avg = b_sum / count;\n                            const a_avg = a_sum / count;\n                            \n                            blockColors.set(`${gx},${gy}`, {\n                                r: r_avg, g: g_avg, b: b_avg, a: a_avg,\n                                x, y, gx, gy,\n                                isBackground: false, // 标记是否为背景\n                                visited: false // 连通性分析标记\n                            });\n                        }\n                    }\n                }\n\n                // 辅助函数：检查颜色是否为白色背景候选\n                function isWhiteCandidate(r, g, b) {\n                    const minWhite = 220; // 降低阈值，包含更多浅色\n                    const maxWhite = 255;\n                    const colorVariance = 30; // 增加容差\n                    \n                    const isWhiteRange = r >= minWhite && g >= minWhite && b >= minWhite &&\n                                        r <= maxWhite && g <= maxWhite && b <= maxWhite;\n                    \n                    const maxChannel = Math.max(r, g, b);\n                    const minChannel = Math.min(r, g, b);\n                    const isUniformWhite = (maxChannel - minChannel) <= colorVariance;\n                    \n                    return isWhiteRange && isUniformWhite;\n                }\n\n                // 辅助函数：获取邻近块的坐标\n                function getNeighbors(gx, gy) {\n                    const neighbors = [];\n                    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // 四方向连通\n                    \n                    directions.forEach(([dx, dy]) => {\n                        const nx = gx + dx;\n                        const ny = gy + dy;\n                        if (nx >= 0 && nx < gridWidth && ny >= 0 && ny < gridHeight) {\n                            neighbors.push([nx, ny]);\n                        }\n                    });\n                    return neighbors;\n                }\n\n                // 关键函数：从边缘开始的连通性洪水填充算法\n                function floodFillFromBorders() {\n                    const queue = [];\n                    \n                    // 从四个边缘开始，找到所有白色候选块作为种子点\n                    console.log('[Nova] 🌊 开始从边缘进行洪水填充...');\n                    \n                    // 上边缘和下边缘\n                    for (let gx = 0; gx < gridWidth; gx++) {\n                        // 上边缘\n                        const topKey = `${gx},0`;\n                        const topBlock = blockColors.get(topKey);\n                        if (topBlock && isWhiteCandidate(topBlock.r, topBlock.g, topBlock.b)) {\n                            queue.push([gx, 0]);\n                            topBlock.isBackground = true;\n                            topBlock.visited = true;\n                        }\n                        \n                        // 下边缘\n                        const bottomKey = `${gx},${gridHeight - 1}`;\n                        const bottomBlock = blockColors.get(bottomKey);\n                        if (bottomBlock && isWhiteCandidate(bottomBlock.r, bottomBlock.g, bottomBlock.b)) {\n                            queue.push([gx, gridHeight - 1]);\n                            bottomBlock.isBackground = true;\n                            bottomBlock.visited = true;\n                        }\n                    }\n                    \n                    // 左边缘和右边缘\n                    for (let gy = 0; gy < gridHeight; gy++) {\n                        // 左边缘\n                        const leftKey = `0,${gy}`;\n                        const leftBlock = blockColors.get(leftKey);\n                        if (leftBlock && isWhiteCandidate(leftBlock.r, leftBlock.g, leftBlock.b)) {\n                            queue.push([0, gy]);\n                            leftBlock.isBackground = true;\n                            leftBlock.visited = true;\n                        }\n                        \n                        // 右边缘\n                        const rightKey = `${gridWidth - 1},${gy}`;\n                        const rightBlock = blockColors.get(rightKey);\n                        if (rightBlock && isWhiteCandidate(rightBlock.r, rightBlock.g, rightBlock.b)) {\n                            queue.push([gridWidth - 1, gy]);\n                            rightBlock.isBackground = true;\n                            rightBlock.visited = true;\n                        }\n                    }\n                    \n                    console.log(`[Nova] 找到 ${queue.length} 个边缘种子点`);\n                    \n                    // BFS洪水填充：只有与边缘连通的白色区域才是真背景\n                    let processedCount = 0;\n                    while (queue.length > 0) {\n                        const [gx, gy] = queue.shift();\n                        const neighbors = getNeighbors(gx, gy);\n                        \n                        neighbors.forEach(([nx, ny]) => {\n                            const neighborKey = `${nx},${ny}`;\n                            const neighborBlock = blockColors.get(neighborKey);\n                            \n                            if (neighborBlock && !neighborBlock.visited) {\n                                // 只有白色候选且未访问的才继续扩展\n                                if (isWhiteCandidate(neighborBlock.r, neighborBlock.g, neighborBlock.b)) {\n                                    neighborBlock.isBackground = true;\n                                    neighborBlock.visited = true;\n                                    queue.push([nx, ny]);\n                                    processedCount++;\n                                } else {\n                                    // 非白色块标记为已访问但不是背景\n                                    neighborBlock.visited = true;\n                                }\n                            }\n                        });\n                    }\n                    \n                    console.log(`[Nova] 连通性分析完成，共处理 ${processedCount} 个背景块`);\n                }\n\n                // 执行连通性分析\n                floodFillFromBorders();\n\n                // 统计结果\n                let backgroundCount = 0;\n                let characterCount = 0;\n                let protectedWhiteCount = 0;\n\n                // 第二步：应用处理结果\n                blockColors.forEach((block, key) => {\n                    const { r, g, b, a, x, y, gx, gy, isBackground } = block;\n                    \n                    let r_fill = Math.round(r);\n                    let g_fill = Math.round(g);\n                    let b_fill = Math.round(b);\n                    let a_fill = Math.round(a);\n                    \n                    if (isBackground) {\n                        // 这是与边缘连通的背景区域，设置为透明\n                        a_fill = 0;\n                        backgroundCount++;\n                    } else {\n                        // 这是人物区域（包括内部的白色部分如皮肤、衣服等）\n                        if (isWhiteCandidate(r, g, b)) {\n                            // 这是被保护的人物内部白色区域\n                            protectedWhiteCount++;\n                           // console.log(`[Nova] 💎 保护人物内部白色区域: (${gx},${gy}) RGB(${r.toFixed(0)},${g.toFixed(0)},${b.toFixed(0)})`);\n                            \n                            // 轻微增强对比度，让像素化效果更明显\n                            // const enhanceFactor = 0.92;\n                            // r_fill = Math.round(r * enhanceFactor);\n                            // g_fill = Math.round(g * enhanceFactor);\n                            // b_fill = Math.round(b * enhanceFactor);\n                        } else {\n                            characterCount++;\n                        }\n                        \n                        // 对于人物区域的边缘像素进行轻微锐化\n                        const neighbors = getNeighbors(gx, gy);\n                        let hasBackgroundNeighbor = false;\n                        \n                        neighbors.forEach(([nx, ny]) => {\n                            const neighborBlock = blockColors.get(`${nx},${ny}`);\n                            if (neighborBlock && neighborBlock.isBackground) {\n                                hasBackgroundNeighbor = true;\n                            }\n                        });\n                        \n                        if (hasBackgroundNeighbor) {\n                            // 这是边缘像素，轻微加深以增强轮廓\n                            const sharpenFactor = 0.95;\n                            r_fill = Math.round(r_fill * sharpenFactor);\n                            g_fill = Math.round(g_fill * sharpenFactor);\n                            b_fill = Math.round(b_fill * sharpenFactor);\n                        }\n                    }\n\n                    // 应用到实际像素\n                    for (let dy = 0; dy < pixelSize && y + dy < canvas.height; dy++) {\n                        for (let dx = 0; dx < pixelSize && x + dx < canvas.width; dx++) {\n                            const idx = ((y + dy) * canvas.width + (x + dx)) * 4;\n                            data[idx] = r_fill;\n                            data[idx + 1] = g_fill;\n                            data[idx + 2] = b_fill;\n                            data[idx + 3] = a_fill;\n                        }\n                    }\n                });\n\n                ctx.putImageData(imageData, 0, 0);\n                console.log(`[Nova] ✨ 连通区域分析完成！`);\n                console.log(`[Nova] 📊 处理统计: 背景块 ${backgroundCount}, 人物块 ${characterCount}, 保护的内部白色块 ${protectedWhiteCount}`);\n                console.log(`[Nova] 🎯 完美解决！人物内部白色区域得到完全保护，只有真正的外部背景被移除！`);\n                \n                resolve(canvas.toDataURL('image/png'));\n            } catch (error) {\n                console.error('[Nova] 在施展连通区域分析魔法时出现了意料之外的波动:', error);\n                reject(error);\n            }\n        };\n\n        img.onerror = (err) => {\n            console.error(`[Nova] 无法召唤图片: ${imageUrl}`, err);\n            reject(`Failed to load image at ${imageUrl}`);\n        };\n        img.src = imageUrl;\n    });\n}\n \n/**\n * ★ 修正后的：设置网格背景\n * 现在它会优雅地淡出现有图片，然后显示网格\n * @param {HTMLElement} container - 容器元素\n */\nfunction setGridBackground(container) {\n    if (backgroundState.currentBgType === 'grid' || backgroundState.isTransitioning) {\n        return;\n    }\n    console.log('正在平滑切换到网格背景...');\n    backgroundState.isTransitioning = true;\n    backgroundState.currentScene = null;\n\n    // 1. 让上方的 ::after 图层变透明，实现已有图片的淡出\n    container.style.setProperty('--after-opacity', '0');\n\n    // 2. 等待淡出动画完成\n    setTimeout(() => {\n        // 3. 将网格背景的指令写入 ::before\n        // 注意：CSS变量里不能直接写多个值，我们可以在CSS里预定义\n        // 更好的做法是直接用JS设置\n        const gridImage = `\n            linear-gradient(90deg, var(--border-color) 1px, transparent 1px),\n            linear-gradient(var(--border-color) 1px, transparent 1px)\n        `;\n        container.style.setProperty('--before-bg-image', gridImage);\n        // 如果网格有特殊size，也要一并设置\n        // 但我们已经把size写在CSS里了，只要background-image变化就会生效。\n\n        // 4. 清除可能残留的图片\n        container.style.removeProperty('--after-bg-image');\n\n        // 5. 更新状态\n        backgroundState.currentBgType = 'grid';\n        backgroundState.isTransitioning = false;\n        console.log('已切换到美丽的网格背景');\n    }, 800); // 必须与CSS中的transition时间一致\n}\n\n/**\n * ★ 修正后的：设置图片背景\n * 这个函数现在更加完美了！\n * @param {HTMLElement} container - 容器元素\n * @param {string} sceneImage - 场景名称\n */\nasync function setImageBackground(container, sceneImage) {\n    const isPixelated = container.dataset.pixelated === 'true';\n\n   \n    if ((sceneImage === backgroundState.currentScene && isPixelated === backgroundState.isPixelated) || backgroundState.isTransitioning) {\n        return;\n    }\n\n    let imageUrl = backgroundImageMap[sceneImage];\n    if (!imageUrl) {\n        setGridBackground(container);\n        return;\n    }\n\n    backgroundState.isTransitioning = true;\n    console.log(`开始准备背景切换: ${sceneImage}, 像素化: ${isPixelated}`);\n\n    try {\n        // ✨ 新的逻辑 ✨\n        // 我们不再自己处理任何图片，而是直接把“藏宝图”交给画师\n        let finalImageUrl;\n\n        if (isPixelated) {\n             // 直接让画师去画一张像素画\n             finalImageUrl = await createPixelatedImage(imageUrl, 1);\n             if(!finalImageUrl) { // 如果画师失败了，就用原图藏宝图\n                console.warn(\"[Nova] 像素画师失败，使用原图URL作为后备。\");\n                finalImageUrl = imageUrl;\n             }\n        } else {\n             // 如果不需要像素画，我们只需要确保它在缓存里，然后还是用藏宝图URL\n             // 我们可以写一个简单的ensureCached函数，或者直接用原始URL，让浏览器自己决定\n             finalImageUrl = imageUrl;\n        }\n\n        container.style.setProperty('--after-bg-image', `url('${finalImageUrl}')`);\n        container.style.setProperty('--after-opacity', '1');\n\n        setTimeout(() => {\n            container.style.setProperty('--before-bg-image', `url('${finalImageUrl}')`);\n            container.style.setProperty('--after-opacity', '0');\n\n            backgroundState.currentScene = sceneImage;\n            backgroundState.isPixelated = isPixelated;\n            backgroundState.currentBgType = 'image';\n            backgroundState.isTransitioning = false;\n            console.log(\"背景切换完成！它现在正安静地待在幕后。\");\n        }, 800);\n\n    } catch (error) {\n        console.error('哎呀，背景图片处理时出了点小意外:', error);\n        setGridBackground(container);\n        backgroundState.isTransitioning = false;\n    }\n}\n \nfunction updateContainerBackground(currentGameData, containerSelector = '.status-container') {\n    const container = document.querySelector(containerSelector);\n    if (!container) {\n        console.warn(`妈妈找不到这个容器哦: ${containerSelector}`);\n        return;\n    }\n\n    const sceneImage = SafeGetValue(currentGameData.场景图);\n    const isEmpty = !sceneImage || [\"\", null, \"无\", \"null\", undefined].includes(sceneImage);\n\n    if (isEmpty) {\n        setGridBackground(container);\n    } else {\n        // ★ 这里是异步的，但我们不需要等它，让它自己执行就好\n        setImageBackground(container, sceneImage);\n    }\n}\n\nfunction togglePixelatedEffect(containerSelector = '.status-container', enable = true) {\n    const container = document.querySelector(containerSelector);\n    if (!container) return;\n\n    container.dataset.pixelated = enable ? 'true' : 'false';\n\n    if (typeof currentGameData !== 'undefined') {\n        updateContainerBackground(currentGameData, containerSelector);\n    }\n}\n\n async function initDisplay(is_first=true) {\n     // 💎 水晶球#4: 每次这个强大的管家被召唤时，都让他报个到\n    console.log(`[initDisplay 被召唤] is_first: ${is_first}, 当前时间: ${new Date().toLocaleTimeString()}`);\n    try {\n \n\n // 设置高度为设备高度\ndocument.getElementById('main-wrapper').style.height = window.innerHeight + 'px';\n\n const data = await getVariables({ type: 'message' });\n  const chatdata = await getVariables({ type: 'chat' });\nconst globaldata = await getVariables({ type: 'global' });\n        // 缓存所有核心数据\n        currentGameData = chatdata.stat_data; // 保持对旧数据的引用\n        assaSettingsData = chatdata.assa_data;\n        playCharacterData = chatdata.play_character_data; // 新增：缓存角色模板数据\n         checkMemoryData = data.检定记忆;\n         worldAttitudeData = chatdata.跨世界声望说明;\n        characterStatusData = chatdata.当前人物状态;\n        lasttoken = globaldata?.LAST_SEND_TOKENS || 0;\n    userPoints = parseInt(SafeGetValue(playCharacterData.货币段.积分) || 0, 10);\n   userPlots =  playCharacterData.货币段.支线剧情 || { D: [0], C: [0], B: [0], A: [0], S: [0] };\n version = String(chatdata.world_version);\n ISNEWMAP = String(SafeGetValue(chatdata.is_new_map));\n const isPrivateChat = String(chatdata.private_chat||'true');\nconst iscreatedLock= String(chatdata.created_lock||'true');\nconst isThingsRecord = String(chatdata.things_record||'true');\nconsole.log(\"isPrivateChat \"+isPrivateChat);\nconsole.log(\"version \"+version);\n //ui消失管理\n \n   if (version === '6' || isPrivateChat === 'true') {\nconsole.log('聊小球开启');\n            document.getElementById('group-chat-orb-button').style.display = 'flex';\n        } else {\n\n            document.getElementById('group-chat-orb-button').style.display = 'none';\n        }\n           if (version === '6') {\n document.getElementById('group_member_bookmark').textContent = '群员信息';\n            \n        } else {\n          document.getElementById('group_member_bookmark').textContent = '小队信息';\n        }\n\n   if (version === '5') {\n document.getElementById('group_member_bookmark').style.display = 'none';\n            \n        } else {\n  document.getElementById('group_member_bookmark').style.display = 'flex';\n        }\nif(iscreatedLock ===\"true\"){\n     document.getElementById('the_created_bookmark').style.display = 'none';\n\n}else{\n    document.getElementById('the_created_bookmark').style.display = 'flex';\n\n}\nif(isThingsRecord ===\"true\"){\n     document.getElementById('things_bookmark').style.display = 'flex';\n\n}else{\n    document.getElementById('things_bookmark').style.display = 'none';\n\n}\n   if (version === '7') {\n document.getElementById('world_settings_bookmark').style.display = 'none';\n       document.getElementById('world_npc_bookmark').style.display = 'none';\n        document.getElementById('group_member_bookmark').style.display = 'none';\n           document.getElementById('page-task-orb').style.display = 'none';\n            document.getElementById('shop-wrapper-orb').style.display = 'none';\n          \n    \n        } else {\n  document.getElementById('world_settings_bookmark').style.display = 'flex';\n    document.getElementById('world_npc_bookmark').style.display = 'flex';\n    document.getElementById('group_member_bookmark').style.display = 'flex';\n         document.getElementById('page-task-orb').style.display = 'flex';\n    document.getElementById('shop-wrapper-orb').style.display = 'flex';\n          \n        }\n\n        if (!currentGameData || !assaSettingsData || !playCharacterData) {\n            throw new Error(\"核心数据(stat_data, assa_data, or play_character_data)缺失\");\n        }\n        if(is_first){\n togglePixelatedEffect('.status-container', true);\n        }\n\n       const orb = document.getElementById('world-shard');\n    if (!orb) return;\n    \n    // toggle的第二个参数决定是添加还是移除类\n    orb.classList.toggle('warning-state', currentGameData.敌方攻击骰池[0] != '');\nconst runButton = document.getElementById('run-button');\nif (runButton) {\n    runButton.style.display = currentGameData.敌方攻击骰池[0] != '' ? 'flex' : 'none';\n}\n          // ========== 新增：成就系统 - 统一检查点 (开始) ==========\n        // 每次刷新数据时，都对'data_refresh'类型的成就进行检查\n        if(checkMemoryData){\n            checkAchievements('check_complete', checkMemoryData);\n        }\n        checkAchievements('data_refresh', { currentGameData, playCharacterData, assaSettingsData });\n        // ========== 新增：成就系统 - 统一检查点 (结束) ==========\n        if (assaSettingsData.summary) {\n             summarys = assaSettingsData.summary;\n        }\n \n\n        // 在 if (!currentGameData || !assaSettingsData || !playCharacterData) { 之后添加 null 判断：\nif (!worldAttitudeData || !characterStatusData) {\n    // 我们可以让它即使缺少这些新数据也能继续运行\n    console.warn(\"部分非核心数据(跨世界声望说明, 当前人物状态)缺失，但不影响主要功能。\");\n}\n\n        // 1. 填充非角色页面的数据\n        populateGeneralData(currentGameData, assaSettingsData,playCharacterData);\nuserName = currentGameData.user_character.name || '用户';\n        // 2. 填充全新的角色页面\n        populateCharacterPage(playCharacterData, currentGameData, assaSettingsData);\n\n   // 3. 缓存地图数据\n        if (assaSettingsData && assaSettingsData.map) {\n            currentMapData = assaSettingsData.map;\n                    if(is_first){\nrenderMap(currentMapData, updateDetails.mapUpdates);\n        }\n                        \n        } else {\n             console.warn(\"未能找到地图数据 (assa_data.map)\");\n             renderMap(null, []);\n        }\n\n        // 4. 渲染设定书\n        renderSettingsBook(assaSettingsData);\n\n       setupAllUpgradeListeners();\n\n        // ========== 新增：成就系统UI交互 (开始) ==========\n        const achievementBtn = document.getElementById('achievements-btn');\n        const achievementModal = document.getElementById('achievements-modal');\n        if (achievementBtn && achievementModal) {\n            achievementBtn.addEventListener('click', () => {\n                renderAchievements();\n                showModal('achievements-modal');\n                hideModal('settings-modal');\n            });\n            const closeBtn = achievementModal.querySelector('.modal-close');\n            if(closeBtn) {\n                closeBtn.addEventListener('click', () => hideModal(achievementModal.id));\n            }\n        }\n\n        const debugClearBtn = document.getElementById('debug-clear-achievements');\nif (debugClearBtn) {\n    debugClearBtn.addEventListener('click', () => {\n        if (confirm('确定要清除所有成就数据吗？这将重置所有解锁状态。')) {\n            localStorage.removeItem('achievements_data');\n            alert('成就数据已清除！刷新页面或重新打开成就面板查看效果。');\n            // 如果当前成就面板是打开的，重新渲染\n            const modal = document.getElementById('achievements-modal');\n            if (modal && modal.style.display !== 'none') {\n                renderAchievements();\n            }\n        }\n    });\n}\n        // ========== 新增：成就系统UI交互 (结束) ==========\n \n        const zeroSkills = [];\n        const skillCategories = playCharacterData[\"技能段\"];\n\n        for (const categoryKey in skillCategories) {\n            const skills = skillCategories[categoryKey];\n            for (const skillName in skills) {\n                if (skills[skillName][0] === 0) {\n                    // 将技能名和描述存起来\n                    zeroSkills.push({ name: skillName, description: skills[skillName][1] });\n                }\n            }\n        }\n\n        // 2. 将这些技能转换为fixedItems格式\n        const baseSkillItems = zeroSkills.map(skill => {\n            const name = skill.name;\n            const price = 1000;\n            const category = \"基础技能\"; // 类型是基础技能\n            const requirements = {}; // 无支线要求\n            const effect =  `学会${name}`; // 效果直接用描述\n            const description = skill.description; // 描述也用它本身\n\n            return [name, price, category, requirements, effect, description];\n            // 返回的格式: [名称, 积分价格, 分类, {所需支线}, 效果, 描述]\n            // 注意：这里的“分类”参数位置，按照fixedItems的格式，我把它填为“基础技能”\n        });\n\n \n        fixedItems.unshift(...baseSkillItems);\n        // displayUpdateNotifications(updateDetails);\n\n\n    } catch (error) {\n        console.error(\"无法加载和初始化游戏数据:\", error);\n        // 你可以在这里添加一些用户友好的错误提示\n    }\n\n \n\n // 替换整个 setupAllUpgradeListeners 函数\nfunction setupAllUpgradeListeners() {\n    const charPage = document.getElementById('page-character');// 我们先移除所有可能存在的旧监听器，确保干净\ncharPage.removeEventListener('dblclick', upgradeEventHandler);\n// 如果有旧的点击监听器也一并移除（为了安全起见）\n// charPage.removeEventListener('click', newUpgradeHandler); // 假设之前的 handler 叫这个名字\n\n// 创建一个新的、聪明的点击处理器\nconst newUpgradeHandler = (e) => {\n    // 我们只关心点击到 \"upgrade-btn\" 的事件\n    if (e.target.classList.contains('upgrade-btn')) {\n        upgradeEventHandler(e);\n    }\n};\n\n// 为了防止重复绑定，我们可以在 page 元素上存储这个处理器\nif (charPage._upgradeHandler) {\n    charPage.removeEventListener('click', charPage._upgradeHandler);\n}\ncharPage._upgradeHandler = newUpgradeHandler;\ncharPage.addEventListener('click', newUpgradeHandler);\n\n// 如果你的 touchend 事件处理器 touchUpgradeHandler 存在，也在这里移除\n// charPage.removeEventListener('touchend', touchUpgradeHandler);\n\n//console.log('升级监听器已更新为 “点击加号” 模式');\n}\n\n// 触摸事件处理器\nlet lastTouchEnd = 0;\nlet touchTarget = null;\nlet touchTimeout = null;\n\nfunction touchUpgradeHandler(event) {\n    const now = Date.now();\n    const target = event.target;\n    \n    // 检查是否是可升级的元素\n    const upgradeableElement = target.closest('.upgradeable');\n    if (!upgradeableElement) return;\n    \n    // 双击检测逻辑\n    if (touchTarget === upgradeableElement && now - lastTouchEnd <= 500) {\n        // 清除可能的单击延时\n        if (touchTimeout) {\n            clearTimeout(touchTimeout);\n            touchTimeout = null;\n        }\n        \n        // 阻止默认行为和事件冒泡\n        event.preventDefault();\n        event.stopPropagation();\n        \n        // 触发升级事件\n        upgradeEventHandler.call(upgradeableElement, event);\n        \n        // 重置状态\n        lastTouchEnd = 0;\n        touchTarget = null;\n    } else {\n        // 记录这次触摸\n        touchTarget = upgradeableElement;\n        lastTouchEnd = now;\n        \n        // 设置延时清除，避免误触发\n        touchTimeout = setTimeout(() => {\n            touchTarget = null;\n            lastTouchEnd = 0;\n        }, 500);\n    }\n}\n\n \n \n// 替换原有的 const target = e.target.closest('.upgradeable');\nfunction upgradeEventHandler(e) {\n    const target = e.target; // 现在直接就是我们点击的那个 \"+\" 按钮\n    if (target) { // 简单检查一下\n        const { path, name, level, type } = target.dataset;\n        handleUpgrade(path, name, parseInt(level, 10), type);\n    }\n}\n\n}\n  \n\n/* 代码 START: 添加在这里 */\n\n/**\n * 新增：根据解析出的标志，更新UI上的通知提示\n * @param {object} flags - 包含更新标志的对象\n */\nfunction displayUpdateNotifications(details) {\n    const notifier = document.getElementById('update-notifier');\n    if (!notifier) return;\n\n    let messages = [];\n\n    const uniqueMemories = [...new Set(details.memories)];\n    const uniqueAttributes = [...new Set(details.attributes)];\n    // 地图更新的提示现在也显示具体名称，更清晰\n    const uniqueMapUpdates = [...new Set(details.mapUpdates)];\n\n    if (details.variable) messages.push(`状态有更新`);\n    if (uniqueMemories.length > 0) messages.push(`记忆设定更新: ${uniqueMemories.join('， ')}`);\n    if (uniqueAttributes.length > 0) messages.push(`角色数值更新: ${uniqueAttributes.join('， ')}`);\n    if (uniqueMapUpdates.length > 0) messages.push(`地图记忆更新: ${uniqueMapUpdates.join('， ')}`);\n\n    if (messages.length > 0) {\n          const notificationMessage = `系统感知到以下更新：<div style=\"text-align: left; padding-top: 10px;\">${messages.map(msg => `&bull; ${msg}`).join('<br>')}</div>`;\n        notifier.style.display = 'flex';\n\n        // 移除旧的监听器，防止重复绑定\n        const newNotifier = notifier.cloneNode(true);\n        notifier.parentNode.replaceChild(newNotifier, notifier);\n\n        // 为新的元素添加事件监听\n        newNotifier.addEventListener('click', () => {\n            showModal('shop-modal', '更新提醒', notificationMessage);\n        });\n\n    } else {\n        notifier.style.display = 'none';\n    }\n}\n/**\n * 修改：填充行囊管理弹窗，数据源改为 assa_data.global_set.背包\n */\nfunction populateInventoryModal() {\n    const inventoryList = document.getElementById('inventory-item-list');\n    const deleteBtn = document.getElementById('delete-item-btn');\n    const useBtn = document.getElementById('use-item-btn');\n    inventoryList.innerHTML = '';\n    deleteBtn.disabled = true;\n    useBtn.disabled = true;\n\n    const inventoryData = assaSettingsData.global_set?.背包;\n\n    if (!inventoryData || Object.keys(inventoryData).length === 0) {\n        inventoryList.innerHTML = '<li style=\"color:var(--text-secondary-color); text-align:center; padding:20px 0;\">行囊是空的</li>';\n        return;\n    }\n\n    for (const itemName in inventoryData) {\n         const item = inventoryData[itemName];\n         let  itemDesc = '';\n        if (typeof item === 'string') {\n    // 直接使用字符串数据\n    itemDesc =\"：\"+item;\n} else if (typeof item === 'object' && item !== null) {\n     itemDesc =\"：\"+item?.info || '';\n}\n       \n        const li = document.createElement('li');\n        li.className = 'inventory-item';\n        // 显示名称和描述\n        li.textContent = `${itemName}${itemDesc}`;\n        li.dataset.item = itemName; // 用 item name 作为 key\n        inventoryList.appendChild(li);\n    }\n}\n    \n       // 替换为:\nconst fixedItems = [\n    // 格式: [名称, 积分价格, 分类, {所需支线}, 效果, 描述]\n     [\"压缩饼干\", 50, \"物品\", {}, \"填饱肚子\", \"一块可以提供一天能量的高热量饼干，味道不怎么样。\"],\n    [\"纯净水\", 20, \"物品\", {}, \"解渴\", \"经过净化的饮用水，500毫升装。\"],\n    [\"新手匕首\", 300, \"物品\", {}, \"【力量+1】基础的近战武器\", \"一把平平无奇的铁匕首，聊胜于无。\"],\n    [\"布甲\", 600, \"物品\", {}, \"【防御+5】提供少量物理防御\", \"由粗布制成的简易护甲，能抵挡一些轻微的划伤。\"],\n    [\"解毒剂\", 400, \"物品\", {}, \"解除普通中毒状态\", \"一小瓶绿色的液体，可以中和多种常见毒素。\"],\n    [\"帐篷\", 1000, \"物品\", {}, \"提供一个安全的休息场所\", \"简单的单人帐篷，可以在野外提供遮风避雨的地方。\"],\n    [\"火把\", 50, \"物品\", {}, \"提供照明\", \"可以燃烧一小时的火把，驱散黑暗。\"],\n    [\"钢制长剑\", 1500, \"物品\", {}, \"【力量+2】比新手匕首更强的武器\", \"一把做工精良的钢剑，兼具劈砍与刺击能力。\"],\n    [\"锁子甲\", 3500, \"物品\", {}, \"【防御+15】提供较好的物理防御\", \"由铁环编织而成的护甲，对切割伤害有很好的防御效果。\"],\n    [\"爆裂箭\", 800, \"物品\", {}, \"命中目标后会发生小范围爆炸的箭矢\", \"弓箭手的利器，可以对付聚集在一起的敌人。\"],\n    [\"生命药水\", 500, \"物品\", {}, \"恢复50点生命值\", \"一瓶透出红光的液体，能够快速恢复伤势。\"],\n    [\"魔法药水\", 800, \"物品\", {}, \"恢复50点能量池\", \"蓝色的神秘药剂，蕴含着纯净的魔法能量。\"],\n    [\"急救包\", 300, \"物品\", {}, \"处理外伤，止血\", \"包含绷带、消毒药水和止痛药的医疗用品。\"],\n     [\"万能钥匙\", 1200, \"物品\", {}, \"可以开启大部分普通门锁\", \"一把看起来很普通的钥匙，但内部结构极其精巧。\"],\n    [\"翻译耳塞\", 4000, \"物品\", {}, \"实时翻译听到的所有语言\", \"高科技造物，让你无障碍地与任何智慧生命沟通。\"],\n    [\"能量棒\", 100, \"物品\", {}, \"迅速补充体力\", \"味道像巧克力的能量棒，能快速恢复消耗的体力。\"],\n    [\"闪光弹\", 400, \"物品\", {}, \"【隐藏+1】一次性物品，产生强光和巨响，使敌人暂时失明失聪\", \"战术性道具，可以为自己创造机会。\"],\n    [\"附魔之尘\", 900, \"物品\", {}, \"为武器或防具附加临时的微弱属性提升\", \"闪亮的魔法粉末，可以少量增强装备性能。\"],\n    [\"自动书记人偶\", 7000, \"物品\", {}, \"【调查+2】可以自动记录语言和画面的机械人偶\", \"来自科技世界的侦查与记录工具，非常可靠。\"],\n    [\"伪装工具包\", 1300, \"物品\", {}, \"【掩饰+1】包含化妆品和假发等，可以改变外貌\", \"进行潜入任务时的好帮手。\"],\n    [\"毒药（普通）\", 500, \"物品\", {}, \"【力量+1】一次性用品，可以涂抹在武器上，使敌人中毒\", \"常见的神经毒素，会让目标持续损失生命值并陷入麻痹。\"],\n    [\"攀爬手套\", 1100, \"物品\", {}, \"【运动+1】手套表面有极强的吸附力，可以轻松攀爬墙壁\", \"壁虎一样的能力，让你到达常人无法企及之处。\"],\n    [\"营养膏（草莓味）\", 30, \"物品\", {}, \"提供基础营养\", \"一支牙膏状的糊状食物，能满足一天的基本营养需求，味道聊胜于无。\"],\n    [\"军用口粮\", 150, \"物品\", {}, \"提供能量和饱腹感，附带加热包\", \"比压缩饼干好吃一点，内含主食、配菜和甜点，是士兵的标准配置。\"],\n    [\"疗伤草药\", 200, \"物品\", {}, \"捣碎后外敷，止血并加速轻伤愈合\", \"来自武侠世界的常见草药，对刀剑伤有不错的效果。\"],\n    [\"烟雾弹\", 350, \"物品\", {}, \"【隐藏+1】一次性物品，制造一片浓烟，遮蔽视线\", \"忍者常用的道具，用于撤退或制造混乱。\"],\n    [\"精制飞刀（三把）\", 450, \"物品\", {}, \"【弓箭+1】可以投掷的锋利小刀\", \"经过特殊配重，比普通小刀更容易命中目标。\"],\n    [\"过滤水壶\", 700, \"物品\", {}, \"能将污染水源过滤成可饮用的纯水\", \"末世生存的必备品，可以反复使用100次。\"],\n    [\"十字弩\", 2000, \"物品\", {}, \"【弓箭+1】无声的远程武器，威力尚可\", \"比弓箭更容易上手，上弦速度较慢是其缺点。\"],\n    [\"防毒面具\", 1400, \"物品\", {}, \"【医学+1】过滤有毒气体\", \"可以抵御大部分化学毒气和生物毒气，滤芯需定期更换。\"],\n    [\"夜视仪（初级）\", 2800, \"物品\", {}, \"在黑暗中提供视觉\", \"来自科技世界的装备，让你在夜晚也能像白天一样行动。\"],\n    [\"精灵之泉水（100ml）\", 8500, \"物品\", {}, \"净化负面状态，缓慢恢复生命和魔力\", \"来自精灵圣地的泉水，充满了自然的生命能量。\"],\n    [\"空间道标（一次性）\", 15000, \"物品\", {}, \"记录当前空间坐标，可随时传送回此地\", \"非常珍贵的保命道具，在任务世界设置后，无论身在何处都能瞬间返回。\"],\n    [\"龙鳞盾\", 25000, \"物品\", {}, \"【防御+50】提供极高的火焰抗性和物理防御\", \"用成年火龙的鳞片打造的盾牌，坚不可摧。\"],\n    [\"便携式机甲召唤器\", 40000, \"物品\", {}, \"【力量+5】召唤一台制式轻型机甲协助作战\", \"内置AI辅助操作系统，可以提供强大的火力支援，能量耗尽后自动收回。\"],\n      [\"Ex-咖喱棒（仿制品）\", 70000, \"物品\", {}, \"【力量+10】可释放一次强大的光炮攻击\", \"模仿传说中圣剑的魔力道具，威力只有原版的百分之一，但足以摧毁一座小山。使用后道具损毁。\"],\n [\"老旧的G17\", 3000, \"物品\", {}, \"【枪械+1】无限子弹\", \"一把随处可见的9毫米手枪，性能平庸但极为可靠，是无数新手冒险者开启他们旅程的第一个伙伴。\"],\n    [\"MP5K-N\", 4500, \"物品\", {}, \"【枪械+1】无限子弹，射速快\", \"紧凑型的冲锋枪，便于携带。极高的射速让它在狭窄空间里能泼洒出致命的弹雨。\"],\n    [\"鬣狗-12\", 5000, \"物品\", {}, \"【枪械+2】无限子弹，近距离高伤害\", \"基础的泵动式霰弹枪，每一次上膛都充满了力量感。只要距离够近，再凶猛的野兽也得退让三分。\"],\n    [\"SKS\", 5000, \"物品\", {}, \"【枪械+2】无限子弹，半自动射击\", \"一把老式的半自动步枪，精准度尚可，威力适中，深受那些喜欢精确打击而非胡乱扫射的实用主义者喜爱。\"],\n    [\"牧马人\", 4000, \"物品\", {}, \"【枪械+2】无限子弹，单发伤害较高\", \"一把充满西部风情的左轮手枪。虽然装弹慢，但每一发子弹都沉重而有力，带着开拓者的精神。\"],\n    [\"AK-74M\", 8000, \"物品\", {}, \"【枪械+3】无限子弹，皮实耐用\", \"经典突击步枪的现代化改进型，无论在多恶劣的环境下都能正常工作，是游击战和长期任务的绝佳选择。\"],\n    [\"M4A1\", 10000, \"物品\", {}, \"【枪械+3】无限子弹，配件接口丰富\", \"一把高度模块化的卡宾枪，性能均衡，手感极佳。无数的战术配件让它可以适应任何战场环境。\"],\n    [\"SPAS-12\", 12000, \"物品\", {}, \"【枪械+3】无限子弹，可切换射击模式\", \"一把造型凶悍的战斗霰弹枪，可以在迅速的半自动射击和精准的泵动模式之间切换，兼具速度与威力。\"],\n    [\"猎手SR\", 15000, \"物品\", {}, \"【枪械+3】无限子弹，中距离精准\", \"专为精准射手设计的步枪，虽然不是专业的狙击枪，但在中距离上能提供持续而精确的火力支援。\"],\n    [\"沙鹰.50\", 18000, \"物品\", {}, \"【枪械+3】无限子弹，巨大威力\", \"手枪中的巨炮。巨大的后坐力和震耳欲聋的枪声是它无与伦比威力的证明，是力量的象征。\"],\n    [\"P90\", 16000, \"物品\", {}, \"【枪械+3】无限子弹，高穿透力\", \"设计前卫的个人防卫武器，独特的供弹方式和高穿透力的子弹让它在面对轻型护甲的敌人时极具优势。\"],\n    [\"FN SCAR-H\", 20000, \"物品\", {}, \"【枪械+3】无限子弹，高停止作用\", \"使用大威力步枪弹的战斗步枪，每一发命中都能有效阻止敌人的行动，是小队中的中坚力量。\"],\n    [\"AWM\", 25000, \"物品\", {}, \"【枪械+3】无限子弹，超远程狙击\", \"狙击手中的传奇。独特的马格南子弹赋予了它极远的射程和恐怖的精度，是所有脆皮目标的噩梦。\"],\n    [\"Vector\", 22000, \"物品\", {}, \"【枪械+3】无限子弹，极致射速\", \"通过复杂的枪机设计将后坐力降到最低，从而实现了冲锋枪中近乎顶级的射速，能在瞬间撕碎任何目标。\"],\n    [\"蒸汽钻孔者\", 28000, \"物品\", {}, \"【枪械+3】无限子弹，对机械单位造成额外伤害\", \"一把由黄铜和精密齿轮构成的蒸汽朋克杰作，射出的高压弹头能有效瓦解机械构造，是工程师和古代遗迹探索者的最爱。\"],\n    [\"守护者十字弩\", 30000, \"物品\", {}, \"【枪械+3】无限子弹，无声射击，箭矢附带追踪效果\", \"古老技艺与现代科技的结合，射击时悄无声息，附魔的箭矢会自动标记被命中的目标，让其无所遁形。\"],\n    [\"火焰喷射器MK1\", 35000, \"物品\", {}, \"【枪械+5】无限燃料，范围持续伤害\", \"简单粗暴的范围清理工具，能喷射出灼热的凝固燃料，对集群的无甲目标和据点能造成毁灭性打击。\"],\n    [\"M249\", 40000, \"物品\", {}, \"【枪械+5】无限子弹，火力压制\", \"班用自动武器，旨在提供不间断的火力压制。它的存在本身就是对敌人勇气的一种考验。\"],\n    [\"炼金左轮\", 45000, \"物品\", {}, \"【枪械+5】无限子弹，可切换火、冰、电三种元素伤害\", \"一位疯狂炼金术士的杰作，转动轮盘，就能让子弹附上不同的元素之力，用以针对不同敌人的弱点。\"],\n    [\"G36C\", 38000, \"物品\", {}, \"【枪械+3】无限子弹，自带光学瞄具\", \"一把紧凑型突击步枪，工程塑料枪身和自带的低倍瞄具让它拥有极高的精准度和舒适的操作手感。\"],\n    [\"巴雷特M82A1\", 50000, \"物品\", {}, \"【枪械+3】无限子弹，反器材伤害\", \"战场上的“重炮”，发射的.50 BMG子弹能轻易撕开轻型载具的装甲和掩体，是攻坚战的利器。\"],\n    [\"AA-12\", 60000, \"物品\", {}, \"【枪械+5】无限子弹，全自动霰弹\", \"近距离巷战的终极答案。这把全自动霰弹枪能像突击步枪一样泼洒出毁灭性的弹丸，将前方的一切化为碎片。\"],\n    [\"脉冲卡宾枪XR-5\", 70000, \"物品\", {}, \"【枪械+3】无限能源，对能量护盾造成双倍伤害\", \"来自高科技世界的制式武器，发射的高能脉冲能有效过载能量护盾，是星际陆战队的标配。\"],\n    [\"暗影低语\", 80000, \"物品\", {}, \"【枪械+3】无限子弹，击杀后获得短暂隐形\", \"一把通体漆黑的消音狙击步枪，它的枪声如同耳语般微弱。持有者能在完成击杀后融入阴影，重新寻找下一个目标。\"],\n    [\"开膛手\", 85000, \"物品\", {}, \"【枪械+5】无限子弹/燃料，枪身下挂链锯\", \"废土科技的狂野产物，既能进行远程射击，也能在近身时启动下挂的链锯，给予敌人最直接的痛苦。\"],\n    [\"M134‘米尼岗’\", 90000, \"物品\", {}, \"【枪械+5】无限子弹，射速随预热提升\", \"需要预热才能发挥全部威力的多管机枪，一旦枪管旋转起来，它喷射出的金属风暴将是所有人的末日。\"],\n    [\"黄蜂巢\", 95000, \"物品\", {}, \"【枪械+5;科学+1】无限弹药，一次发射多枚追踪微型导弹\", \"与其说是枪，不如说是一个便携式导弹发射平台。每次扣动扳机都会射出一窝如黄蜂般追踪敌人的小型导弹。\"],\n    [\"蠕虫发射器\", 100000, \"物品\", {}, \"【枪械+5;神秘学+2】无限弹药，子弹为活体追踪蠕虫\", \"令人毛骨悚然的生化武器，发射出的寄生蠕虫会钻入目标体内持续造成伤害，并削弱其防御。\"],\n    [\"奥术师的法杖步枪\", 120000, \"物品\", {}, \"【枪械+5;神秘学+3】无限魔力，命中后随机附加一种负面魔法效果\", \"将魔法法杖与步枪结构结合的奇特武器，每一发水晶子弹都蕴含着混乱的魔力，可能让敌人燃烧、冰冻或迟缓。\"],\n    [\"奇点产生器\", 150000, \"物品\", {}, \"【枪械+5;科学+3】无限弹药，子弹在落点产生小型引力场\", \"实验性的时空武器，它射出的子弹会在爆炸时扭曲空间，产生一个短暂的微型黑洞，将附近的敌人和物体吸向中心。\"],\n    [\"等离子切割者\", 130000, \"物品\", {}, \"【枪械+3】无限能源，持续射击可融化重型装甲\", \"工业用的等离子切割工具被改造成了武器，其射出的超高温等离子束可以像切黄油一样切开最坚固的合金装甲。\"],\n    [\"幽魂M1911\", 110000, \"物品\", {}, \"【枪械+3】无限子弹，被击中者会看到恐怖的幻觉\", \"一把被强大怨灵附身的经典手枪，它的子弹不仅伤害肉体，更会侵蚀心智，让敌人在恐惧的幻象中崩溃。\"],\n    [\"齿轮风暴\", 140000, \"物品\", {}, \"【枪械+3】无限子弹，射速随持续射击线性提升\", \"蒸汽朋克工艺的顶峰之作，内部无数精密齿轮的联动让它的射速能不断攀升，直至化为一场毁灭性的机械风暴。\"],\n    [\"雷神之锤SMG\", 160000, \"物品\", {}, \"【枪械+3】无限能源，命中后触发连锁闪电\", \"据说是矮人与风暴巨人合作打造的武器，每一发闪电弹命中目标后，都会爆发出连锁闪电，攻击周围的其他敌人。\"],\n    [\"HK416-D\", 105000, \"物品\", {}, \"【枪械+3】无限子弹，极高的综合性能与可靠性\", \"现实世界特种部队的宠儿，在主神空间里也同样如此。它在威力、精度、射速和可靠性上达到了完美的平衡。\"],\n    [\"高斯步枪‘磁暴’\", 200000, \"物品\", {}, \"【枪械+3】无限能源，子弹瞬时到达且能穿透大多数掩体\", \"利用电磁加速原理发射弹丸，子弹出膛即命中，无声无光，无视风偏和重力，是完美的刺杀武器。\"],\n    [\"龙息之吼\", 250000, \"物品\", {}, \"【枪械+13;胁迫+3】无限燃料，喷射出锥形的龙息\", \"用一头成年火龙的头骨和声带制成的武器，扣动扳机时，它会发出巨龙的咆哮，并喷射出毁灭性的龙息。\"],\n    [\"碎星者\", 300000, \"物品\", {}, \"【枪械+13;科学+4】无限能源，蓄力发射贯穿一切的粒子束\", \"一把手枪尺寸的轨道炮。通过短暂蓄力，它可以发射出一道能量光束，贯穿路径上的一切，无论敌人还是墙壁。\"],\n    [\"虚空行者\", 350000, \"物品\", {}, \"【枪械+15】无限弹药，命中时有几率将目标随机传送\", \"一把连接着异次元的武器，它的子弹有时会撕开空间的裂隙，将被击中者强行驱逐到未知的随机地点。\"],\n    [\"生命汲取者\", 400000, \"物品\", {}, \"【枪械+15】无限弹药，将造成伤害的一部分转化为持有者的生命值\", \"活体生化狙击枪，枪身与使用者有着微弱的共生关系。它造成的每一分伤害，都会化为生命能量反哺给它的主人。\"],\n    [\"时间扭曲者\", 450000, \"物品\", {}, \"【枪械+15】无限弹药，命中后在目标周围制造一个时间减速力场\", \"来自超未来文明的禁忌科技，它的子弹可以扰乱局部的时间流速，让敌人的一切动作都变得像慢镜头一样。\"],\n    [\"因果律修正器\", 500000, \"物品\", {}, \"【枪械+15】无限子弹，非致命部位命中强制判定为致命部位命中\", \"一把触及世界底层法则的概念武器。只要子弹命中目标，它就会修正“结果”，将原本的擦伤强制改写为“爆头”或“心脏碎裂”。\"],\n    [\"黑森林的低语\", 480000, \"物品\", {}, \"【枪械+15】无限弹药，命中后召唤藤蔓束缚目标\", \"由世界之树的树枝精心雕刻而成，充满了自然之力。命中的敌人会被大地中涌出的活体藤蔓牢牢捆绑。\"],\n    [\"万华镜\", 420000, \"物品\", {}, \"【枪械+15】无限弹药，射出制造大量幻影分身的能量\", \"一把充满迷幻色彩的霰弹枪，射出的不是弹丸，而是无数个使用者自己的幻影，足以迷惑和扰乱任何敌人。\"],\n    [\"天谴\", 550000, \"物品\", {}, \"【枪械+15;科学+3】无限能源，照射目标以引导一次卫星轨道炮打击\", \"它本身没有杀伤力，而是一个信标枪。用它瞄准并照射目标数秒后，天基动能武器系统将执行“天谴”，从太空中投下毁灭。\"],\n    [\"阿撒托斯之笛\", 800000, \"物品\", {}, \"【枪械+20;操控+10】无限能源，发射直接攻击心智的无形音波，无视物理防御\", \"外形是一根怪异的长笛，但能发射武器化的次声波。它绕过所有物理防御，直接在目标的脑海中奏响疯狂的乐章。\"],\n    [\"G.O.D. (创世纪条例装置)\", 1000000, \"物品\", {}, \"【枪械+20;科学+15】无限能源，可将非生命体分解或临时复制\", \"一把拥有有限“创物”权能的装置。它可以将物质分解为基础能量，或利用能量短暂复制一个脆弱的赝品，充满了战术可能性。\"],\n    [\"第四面墙破坏者\", 1200000, \"物品\", {}, \"【枪械+20;神秘学+20】无限墨水，射出可修改目标状态的“文字”弹\", \"一把形似打印机的元武器，它射出的子弹是具现化的“数据”和“文字”。理论上，它可以直接将敌人的状态“生命值：100%”修改为“生命值：1%”。\"],\n    [\"真理\", 1500000, \"物品\", {}, \"【枪械+40】无限子弹，强制进行理念判定，胜者抹除败者\", \"银色的P226手枪外形下，隐藏着哲学层面的恐怖力量。开枪时，它比较的是双方的“信念强度”，如果你的“理念”压倒对方，对方将从存在层面上被直接抹除。\"],\n    [\"初始之枪\", 2000000, \"物品\", {}, \"【枪械+40;科学+40】无限？？？，射出一个瞬时生灭的微型宇宙\", \"传说这是用宇宙大爆炸奇点碎片打造的武器。扣动扳机，你开启了一个新的宇宙，又在瞬间见证了它的灭亡。其产生的效果完全随机，可能是时间倒流，也可能是一朵毫无用处的花，拥有无限的可能性。\"],\n    [\"永恒之泉的小小喷泉\", 5000, \"家具\", {}, \"放置在空间内，每日可产出一瓶‘活力泉水’，饮用后30分钟内精神力恢复速度提升5%。纯粹的装饰品，带来潺潺水声。\", \"10, 10, 20, 20, 一座由月光石雕刻而成的小喷泉，泉水在微光下泛着柔和的银色光泽。\"],\n    [\"浮空城的水晶碎片\", 12000, \"家具\", {}, \"悬浮在半空中，缓慢旋转。靠近时，思维会变得更加清晰，破解谜题或进行创造性工作时效率提升10%。\", \"40, 15, 10, 10, 一块不规则的透明水晶，内部似乎有云雾在流动，散发着微弱的凉意。\"],\n    [\"世界树的盆栽\", 25000, \"家具\", {}, \"缓慢生长，每日可在枝叶上凝结出一滴‘生命甘露’，可瞬间治愈轻微伤势。空间内的植物生长速度略微加快。\", \"60, 10, 15, 25, 一株小巧的树苗，树干和枝叶呈现出温润的玉石质感，散发着蓬勃的生命气息。\"],\n    [\"矮人符文锻造台\", 45000, \"家具\", {}, \"可以在此为装备附加初级符文效果（如：锋锐I，坚固I）。需要消耗对应的材料。失败率较高。\", \"10, 40, 40, 30, 一张由黑曜石和黄铜打造的坚固工作台，台面上刻满了复杂的矮人符文，中心有一个嵌入式的熔炉。\"],\n    [\"星空穹顶投影仪\", 80000, \"家具\", {}, \"启动后，个人空间的天花板会变为实时变化的宇宙星空，美轮美奂。长期观看可以缓慢提升精神力上限。\", \"0, 0, 1, 1, 这件物品会直接作用于整个空间的天花板，因此其物理尺寸极小，只是一个黑色的金属球体。它的描述坐标代表它被放置在地面中心。\"],\n    [\"深渊凝视之镜\", 150000, \"家具\", {}, \"一面古老的黑曜石镜，每日可进行一次‘凝视’。凝视者有机会窥见未来的一个模糊片段，但也有可能被深渊反噬，随机一项属性暂时降低24小时。\", \"80, 20, 15, 40, 镜框由扭曲的不知名金属制成，镜面漆黑如墨，无法映照出任何东西，只会让人感到心悸。\"],\n    [\"赛博朋克霓虹吧台\", 3000, \"家具\", {}, \"纯观赏用，会循环播放迷幻的电子音乐，并闪烁着五彩斑斓的霓虹灯光，为你的空间增添一丝未来都市的颓废气息。\", \"100, 10, 50, 20, 一个带有金属光泽的吧台，边缘和台面下都嵌满了霓虹灯管，上面随意放着几个高脚杯。\"],\n    [\"懒人精灵豆袋沙发\", 1500, \"家具\", {}, \"极致舒适。躺在上面休息时，体力恢复速度提升20%。由精灵用月光下的棉花和安神草编织而成。\", \"100, 40, 25, 15, 一个巨大的、看起来就非常柔软的豆袋沙发，布料是淡绿色的，上面有银色的叶脉纹路。\"],\n    [\"蒸汽动力自走书架\", 32000, \"家具\", {}, \"可以通过语音指令或终端控制，让书架自动找到并送来你想要的任何一本（已收藏的）书籍。自带防尘和恒温恒湿功能。\", \"10, 80, 60, 50, 一个由黄铜和红木制成的巨大书架，底部有复杂的齿轮和履带结构，几根蒸汽管道从顶部延伸出来，不时冒出白气。\"],\n    [\"血肉滋生之座\", 220000, \"家具\", {}, \"一个活体家具。坐上去时，它会缓慢地与使用者建立精神链接，大幅加快生命力和精神力的恢复速度（每分钟恢复1%）。但长时间使用可能会让人的思维方式产生异变。\", \"160, 10, 30, 30, 一张看起来像是某种生物组织的椅子，呈现出深红色，表面有血管一样的纹路在搏动，整体轮廓在不停地进行着微小的蠕动和重塑。\"],\n    [\"阴阳双鱼池\", 75000, \"家具\", {}, \"一个太极形状的水池，里面养着一黑一白两条灵鲤。每日可进行一次投喂，根据灵鲤的反应，可能会获得‘好运’或‘霉运’的临时状态。\", \"130, 50, 40, 40, 由黑白两色的玉石砌成的水池，池水清澈见底，两条鲤鱼在其中追逐嬉戏，构成了一副流动的太极图。\"],\n    [\"全息战术沙盘\", 98000, \"家具\", {}, \"可以导入任务世界的地图数据，进行三维全息模拟，推演战术。盟友也可以被邀请进入空间共同使用。\", \"80, 70, 40, 40, 一个方形的金属平台，启动后会在上方投射出高精度的三维地形图，可以用手势进行缩放、旋转和标记。\"],\n    [\"龙骨王座\", 500000, \"家具\", {}, \"由一头成年红龙的头骨和脊椎制成。坐上王座时，会自然散发出龙威，对龙类及亚龙生物有威慑效果，在与其实力相近的生物交涉时，气势上获得优势。\", \"200, 10, 40, 60, 一张充满了原始与力量美感的巨大座椅，头骨构成了椅背，狰狞的龙角向上延伸，扶手是粗壮的腿骨，整体呈现出骨白色和暗红色。\"],\n    [\"失落神庙的祭坛\", 880000, \"家具\", {}, \"一个古老而残破的石制祭坛。每周可以将一件物品作为祭品献上，有一定几率将其强化，也有很大几率使其损毁，极小几率发生意想不到的奇迹蜕变。\", \"250, 20, 50, 30, 由巨大的青石堆砌而成，上面布满了青苔和意义不明的古老雕刻，祭坛中心有一个凹陷的血槽。\"],\n    [\"厨神的小铺\", 4000, \"家具\", {}, \"一个简单的日式拉面摊位。虽然不能制作出什么神奇料理，但坐在这里吃一碗热气腾腾的面，可以驱散大部分负面精神状态（如：沮丧，恐惧）。\", \"180, 80, 30, 25, 一个小小的木制摊位，挂着写有‘ラーメン’的布帘，后面有简单的灶台和几个座位。\"],\n    [\"寂静森林的一角\", 6000, \"家具\", {}, \"一片小小的林地，有几棵高大的树和柔软的草坪。在其中冥想时，心境会变得格外平和。纯观赏和放松用。\", \"220, 80, 50, 50, 这片区域的地面变成了真实的泥土和草地，几棵白桦树安静地伫立着，阳光会恰到好处地从枝叶间洒落。\"],\n    [\"反重力睡眠舱\", 38000, \"家具\", {}, \"进入睡眠舱后，会处于微重力状态，让身体得到最彻底的放松。睡眠8小时等同于普通睡眠12小时的效果，且醒来后精神饱满。\", \"310, 10, 20, 40, 一个充满科幻感的白色金属舱，外形流畅，舱门是透明的，可以看到内部柔软的衬垫。工作时会悬浮在离地半米的高度。\"],\n    [\"时空旅者的留声机\", 110000, \"家具\", {}, \"一台维多利亚风格的黄铜留声机。它没有唱片，但每天可以随机播放一段来自其他时间线或异世界的音乐、对话或声音片段。可能会听到有用的情报，也可能只是噪音。\", \"340, 20, 15, 20, 精致而古典的留声机，大喇叭闪耀着金属光泽，机身上有许多看不懂的刻度和表盘。\"],\n    [\"剑冢\", 190000, \"家具\", {}, \"将自己的兵器插入其中蕴养，可以缓慢提升兵器的品质，并有极小几率让兵器诞生‘器灵’。一次只能蕴养一件兵器。\", \"310, 70, 30, 30, 一座由无数断剑残兵堆积而成的小丘，中心有一块黑色的巨大磨剑石，散发着凌厉的剑意。\"],\n    [\"‘家’的投影\", 1000, \"家具\", {}, \"一个简单的相框。使用者可以将自己心中最想念的家的影像投射其中，影像会动态变化，仿佛时间在流动。无任何实际增益，纯粹的情感慰藉。\", \"360, 20, 10, 8, 一个朴素的木质相框，没有照片，只有一片柔和的白光，使用者触碰时，白光会变为其思念的场景。\"],\n    [\"神圣光明教堂的告解室\", 55000, \"家具\", {}, \"一个隔音效果极好的小房间。在其中进行忏悔或倾诉，可以显著缓解内心的负罪感和压力，并获得一个名为‘心灵净化’的临时状态，豁免一次精神控制类技能。\", \"380, 10, 30, 40, 一个由深色木材打造的独立小隔间，内部有一张跪凳和一道带有格栅的隔窗。充满了庄严肃穆的氛围。\"],\n    [\"混沌几何雕塑\", 130000, \"家具\", {}, \"一个由不断变化的几何体组成的、违反物理规则的动态雕塑。直视它会导致轻微的眩晕，但也能锻炼精神抵抗混乱信息的能力。\", \"420, 20, 20, 20, 它看起来像一团由黄铜线条构成的、不断在四维空间翻转的立方体，时而展开时而收缩，没有固定的形态。\"],\n    [\"虚空垂钓台\", 280000, \"家具\", {}, \"一个延伸至空间边缘之外的平台。使用者可以在此垂钓，钓上来的可能是来自无尽虚空的稀有材料、漂流的灵魂瓶、甚至是某个世界的‘概念’碎片。\", \"450, 10, 20, 15, 一个由未知黑色岩石构成的平台，末端消失在空间的边界，仿佛融入了虚无之中。需要特制的‘虚空鱼竿’配合使用（商城另购）。\"],\n    [\"万界之窗\", 999990, \"家具\", {}, \"一扇巨大的落地窗。每天，窗外的景色都会随机变为一个异世界的实时风景，可能是巨龙飞舞的奇幻山巅，也可能是霓虹闪烁的赛博都市。使用者无法穿过窗户，但可以感受那个世界的气息。\", \"500, 10, 80, 60, 一扇华丽的、镶嵌着宝石和符文的拱形窗户，窗外是流光溢彩的动态景象，而非固定的空间背景。\"],\n    [\"时间沙漏\", 420000, \"家具\", {}, \"一个巨大的沙漏。可以消耗大量积分来将整个个人空间的时间流速进行微调（最高减缓至0.8倍，或加速至1.2倍）。调整会持续24小时。\", \"600, 20, 25, 40, 沙漏的框架由白金打造，里面的沙子是璀璨的钻石尘埃，流动时散发出柔和的光芒。\"],\n    [\"起源熔炉\", 2500000, \"家具\", {}, \"传说中能锻造神器的熔炉的复制品。拥有极高的成功率，可以将多件传奇物品与稀有材料融合，创造出独一无二的、全新的物品。每次使用都需要消耗巨量积分作为能源。\", \"10, 150, 80, 70, 一座如同小型火山般的巨大熔炉，由暗红色的金属构成，上面刻满了原始而古老的火焰图腾，即使不点火也散发着惊人的热量。\"],\n    [\"棋圣的棋盘\", 70000, \"家具\", {}, \"一张古朴的围棋棋盘。可以召唤一个名为‘棋圣’的AI进行对弈。每赢一局，精神力都会获得永久性的微量增长。被AI击败则会陷入1小时的思维混乱状态。\", \"100, 160, 20, 20, 一张由整块香樟木雕成的棋盘，棋子是温润的黑白玉石，自带一种让人心平气和的气场。\"],\n    [\"无限书库的终端\", 650000, \"家具\", {}, \"一个数据终端，可以连接到传说中的‘无限书库’。使用者可以消耗积分查阅几乎所有非神明级别的知识和信息，价格取决于信息的珍稀程度。\", \"130, 150, 15, 25, 一个流线型的、悬浮在空中的操作台，屏幕是淡蓝色的光幕，上面有无数数据流在闪动。\"],\n    [\"妖精的茶会桌\", 18000, \"家具\", {}, \"一套精致小巧的桌椅。每天下午三点，桌上会自动出现一套美味的下午茶点心和红茶，食用后心情会变得愉悦。可以邀请朋友共享。\", \"160, 160, 30, 20, 由开花的藤蔓自然缠绕而成的桌椅，桌面上铺着巨大的荷叶，杯子和盘子则是五颜六色的蘑菇。\"],\n    [\"死灵法师的骸骨仆役制造台\", 88000, \"家具\", {}, \"可以在此消耗生物遗骸和灵魂碎片，制造出低阶的骸骨仆役（如骷髅兵、骸骨猎犬）。仆役只能在个人空间内活动，作为守卫或劳力。\", \"200, 150, 40, 40, 一张由人类、野兽等不同生物的骨骼拼接而成的巨大石台，台面上有许多凹槽和管线，连接着几个装有绿色液体的玻璃罐。\"],\n    [\"禅意的枯山水庭院\", 9000, \"家具\", {}, \"一片铺着白砂、点缀着几块奇石的日式庭院。每日可进行一次“耙砂”，这个过程能帮助整理思绪，消除精神上的疲劳。\", \"250, 150, 50, 50, 地面变为一片洁白的砂砾，几块形态各异的青黑色岩石错落有致地摆放着，旁边还放着一把小小的木耙。\"],\n    [\"机械师的改装工坊\", 160000, \"家具\", {}, \"一个堆满了零件、工具和设计图的角落。可以在此升级、改装机械类装备和义体。提供成功率加成，并解锁一些独特的改造选项。\", \"310, 150, 60, 60, 这里有全套的激光焊枪、机械臂、3D打印机和各种精密工具，墙上挂满了设计蓝图，地上随意堆放着一些金属零件和废弃的义体。\"],\n    [\"怪奇收藏家的陈列柜\", 30000, \"家具\", {}, \"一个玻璃陈列柜，里面已经摆放了几件无害但怪异的藏品（如：会自己换姿势的木偶，装在瓶子里的微缩风暴）。使用者也可以将自己的战利品放入其中展示。\", \"380, 150, 30, 50, 一个维多利亚风格的红木陈列柜，玻璃擦得锃亮，里面的藏品被柔和的灯光照亮，充满了神秘感。\"],\n    [\"记忆回廊\", 350000, \"家具\", {}, \"一条由光影构成的走廊。使用者可以将自己的记忆片段储存在其中，并在走廊中以第一人称视角重温。可用于复盘战斗、学习技能或仅仅是怀旧。\", \"420, 150, 20, 80, 这条走廊的墙壁和天花板都是流动的光幕，上面会浮现出使用者储存的记忆影像，走入其中仿佛穿梭于时光之中。\"],\n    [\"炼金术士的秘密实验室\", 125000, \"家具\", {}, \"一套完整的炼金实验设备，包括蒸馏器、坩埚、试管和复杂的玻璃管道。可以在此进行基础药剂的合成，成功率高于自行摸索。\", \"10, 240, 50, 50, 一个被各种玻璃器皿和冒着气泡的药剂占据的区域，空气中弥漫着草药和化学试剂混合的味道。\"],\n    [\"吟游诗人的篝火\", 8000, \"家具\", {}, \"一堆永不熄灭的篝火。坐在篝火旁，会感到温暖和安心。如果此时演奏乐器或讲述故事，效果会得到增强，更容易打动听众（即使是NPC）。\", \"70, 250, 20, 15, 一圈由石头垒起的火塘，中间燃烧着橙红色的火焰，不时有火星跳跃出来，发出噼啪的轻响。\"],\n    [\"画中仙的卷轴\", 210000, \"家具\", {}, \"一幅巨大的空白山水画卷轴，挂在墙上。使用者可以消耗精神力将想象中的场景绘制上去，画卷会变为动态，甚至可以短暂地进入画中世界（不能带出任何东西）。\", \"100, 220, 1, 60, 这幅画几乎占据了一整面墙，画纸是上好的宣纸，两端的画轴由紫檀木制成，整体散发着墨香。它的坐标代表挂在墙上的位置。\"],\n    [\"深海遗迹的珊瑚床\", 60000, \"家具\", {}, \"一张由活体发光珊瑚构成的床。在上面睡觉时会进入深海般的梦境，有助于安抚狂躁的精神状态，并缓慢修复受损的灵魂。\", \"120, 230, 30, 20, 整张床就像是从海底搬上来的艺术品，五彩斑斓的珊瑚构成了床的框架，柔软的海葵组成了床垫，散发着柔和的蓝绿色荧光。\"],\n    [\"刺客盟约的暗影帷幕\", 48000, \"家具\", {}, \"一片可以随意悬挂的黑色帷幕。躲在帷幕后面时，自身的气息会被完全隐藏，是练习潜行和隐匿技能的绝佳道具。\", \"160, 220, 40, 60, 一块看起来平平无奇的黑布，但当你触摸它时，会感到一种冰冷的、仿佛能吞噬光线的质感。它可以覆盖一片区域，形成绝对的黑暗。\"],\n    [\"牧场主的迷你农场\", 9500, \"家具\", {}, \"一小块可以耕种的土地，附赠几包随机的异界植物种子。种出的植物可能是美味的食材，也可能是炼金材料，甚至是有微弱攻击性的小怪物。\", \"210, 220, 40, 40, 一块用栅栏围起来的肥沃黑土地，旁边有一个小小的工具棚，里面放着水壶、锄头等工具。\"],\n    [\"命运纺织者的织机\", 750000, \"家具\", {}, \"一台古老的织机。使用者可以将从任务世界中获得的‘命运之线’（稀有材料）在此编织。成品可能是能豁免一次致命攻击的护符，也可能是能预知一次危险的披风。\", \"260, 220, 30, 40, 织机由银色的木材制成，上面缠绕着无数若有若无的光线，仿佛连接着万物的命运。操作它需要极高的专注力。\"],\n    [\"赌神的桌台\", 20000, \"家具\", {}, \"一张绿色的赌桌。可以邀请朋友或召唤AI进行各种扑克牌游戏。纯娱乐，但据说运气好的人能从桌上赢到一些被称为‘幸运筹码’的道具。\", \"300, 220, 25, 20, 一张标准的德州扑克桌，桌面是高级的绿色绒布，边缘有舒适的皮质扶手，旁边还配了几张椅子。\"],\n    [\"冰霜巨人的酒杯\", 15000, \"家具\", {}, \"一个由万年寒冰雕成的巨大酒杯。用它来喝任何液体，都会变得冰爽刺骨，并获得一个‘冰心’状态，短时间内对火焰伤害有微弱抗性。\", \"335, 230, 10, 12, 一个半人高的巨大杯子，杯壁上凝结着白霜，即使在温暖的空间里也散发着寒气。\"],\n    [\"美食家的移动厨房\", 28000, \"家具\", {}, \"一个功能齐全的现代化厨房岛台，从分子料理工具到中式炒锅一应俱全。在这里处理食材和烹饪，能更好地发挥食材的效果，制作出高级料理。\", \"355, 220, 40, 30, 不锈钢的台面，内嵌了电磁炉、烤箱、水槽，上方还有抽油烟机和挂满厨具的架子。\"],\n    [\"图书馆管理员的摇椅\", 4500, \"家具\", {}, \"一张舒适的老式木摇椅。坐在这张椅子上阅读书籍，理解速度和记忆力会得到微弱提升。\", \"405, 230, 15, 20, 一张深棕色的木质摇椅，扶手和椅背已经被磨得光滑发亮，坐上去会发出有节奏的吱呀声。\"],\n    [\"伊甸园的苹果树\", 1200000, \"家具\", {}, \"传说中那棵树的一根分枝培育而成。每隔一个月会结出一颗‘智慧之果’，食用后永久提升一点随机属性。但食用第一颗果实后，会获得一个永久的‘被驱逐者’状态，进入某些神圣区域会受到压制。\", \"430, 220, 30, 50, 一棵流光溢彩的小树，树叶是半透明的，树上结着一颗散发着诱人光芒的苹果。\"],\n    [\"泰坦的训练假人\", 99000, \"家具\", {}, \"一个由超合金制成的、几乎坚不可摧的训练假人。它能记录你的攻击数据（伤害、速度、精准度），并提供分析报告。是测试新技能和武器的完美对象。\", \"470, 220, 20, 30, 一个呈现出暗金色金属光泽的人形靶子，身上布满了各种感应器和刻线，看起来异常坚固。\"],\n    [\"虚空之声的风铃\", 33000, \"家具\", {}, \"一串由奇异晶体组成的风铃。它不会随风摆动，而是当空间中出现异常波动或有访客到来时，会发出悦耳又空灵的声音作为预警。\", \"500, 220, 10, 20, 几根长短不一的紫色半透明晶体，由一根看不见的细线悬挂着，静止时没有任何声音。\"],\n    [\"最终王座\", 10000000, \"家具\", {}, \"一张无法用语言描述其材质和形态的王座。它似乎是由纯粹的‘概念’和‘规则’构成。坐上它的人，将获得对整个个人空间的绝对掌控权，可以随意修改空间的大小、环境、物理法则，并获得一个独一无二的称号‘一界之主’。\", \"550, 150, 100, 100, 它时而是由星辰铸就，时而是由深渊凝聚，时而又是纯粹的光。任何看到它的人都会有不同的理解。它就是权力和终点的象征。\"],\n[\"清洁术\", 100, \"技能\", {}, \"【dp+1;能量池-10】\", \"清洁目标身上的污渍,虽然没有战斗力，但在某些时候能派上大用场。\"],\n[\"火球术\", 2000, \"技能\", {}, \"【dp+1;能量池-10】\", \"释放火球攻击敌人,初级火系法术，可以发射威力不俗的火球。\"],\n[\"侦测陷阱\", 1500, \"技能\", {}, \"【dp+1;能量池-10】\", \"感知附近的机关陷阱,对于探索古墓或地城非常重要的辅助技能。\"],\n[\"振奋怒吼\", 2800, \"技能\", {}, \"【dp+1;能量池-10】\", \"发出吼声，提升周围友军的士气和攻击力,战士的辅助技能，在团队作战中效果显著。\"],\n[\"傀儡操控术（初级）\", 5500, \"技能\", {}, \"【dp+1;能量池-10】\", \"操控一具无生命的人偶进行简单的动作,需要配合傀儡使用，是傀儡师的基础。\"],\n[\"随身小剧场\", 8000, \"技能\", {}, \"【dp+1;能量池-30】\", \"在自身周围半径三米内生成一个持续五分钟的微型音画幻境，幻境内容可自行设定。虽然没有直接战斗力，但无论是自娱自乐、迷惑敌人还是营造气氛，都有奇效。\"],\n[\"美食的俘虏\", 6500, \"技能\", {}, \"【dp+1;能量池-20】\", \"制作出的任何食物都将附带强烈的魅惑效果，让品尝者在短时间内对制作者产生高度好感与信赖。警告：对意志力强大者效果减弱。\"],\n[\"绝对音准（伪）\", 4000, \"技能\", {}, \"【dp+1;能量池-5】\", \"能够完美模仿听到的任何声音，包括人物嗓音、动物叫声甚至是机械运作声。但无法模仿超出人类发声器官极限的声音。\"],\n[\"一键换装\", 3500, \"技能\", {}, \"【dp+1;能量池-10】\", \"瞬间更换身上穿着的衣物，衣物款式需要在技能发动前预设好。对于需要快速切换身份或应对不同场合非常实用。\"],\n[\"植物密语\", 7200, \"技能\", {D:1}, \"【dp+1;能量池-15】\", \"能够与植物进行简单的精神交流，了解它们的状态和周边环境信息。是优秀的侦察与情报搜集手段。\"],\n[\"万能钥匙（概念）\", 12000, \"技能\", {C:1}, \"【dp+2;能量池-50】\", \"消耗能量，可以开启任何非魔法或非规则层面上锁的锁具。此技能开启的是‘锁’这一概念。\"],\n[\"动物亲和（猫科限定）\", 4800, \"技能\", {}, \"【dp+1;能量池-10】\", \"大幅提升所有猫科动物对你的好感度，它们会视你为同类和伙伴。也许能从街角的猫咪那里打听到一些秘密。\"],\n[\"存在感稀薄化\", 9000, \"技能\", {C:1}, \"【dp+1;能量池-25/分钟】\", \"降低自身在他人感知中的存在感，变得容易被忽视，但并非真正的隐身。在人群中行动的绝佳技能。\"],\n[\"情绪调色盘\", 8800, \"技能\", {D:1}, \"【dp+1;能量池-30】\", \"短暂影响目标的某种情绪，可以放大或减弱其喜悦、悲伤或愤怒。对心志坚定者效果有限，且容易被察觉。\"],\n[\"无中生友\", 5000, \"技能\", {}, \"【dp+1;能量池-20】\", \"凭空捏造一个不存在的“朋友”的身份信息，并让周围的人在短时间内相信这个“朋友”确实存在。用于制造不在场证明或虚构情报来源。\"],\n[\"重力微操\", 15000, \"技能\", {C:1}, \"【dp+2;能量池-40】\", \"小范围内精确操控重力，可以使物体变轻或变重，或者改变一次跳跃的轨迹。高手甚至能用它让敌人的步伐踉跄。\"],\n[\"影子行囊\", 11000, \"技能\", {D:2}, \"【dp+1;能量池-5，与储存物质量有关】\", \"将自己的影子变成一个异次元储物空间，可以存放非生命物体。空间大小与技能熟练度相关。\"],\n[\"弹道修正\", 9500, \"技能\", {}, \"【dp+1;能量池-15/次】\", \"在使用投掷或射击武器时，可以对弹道进行一次小幅度的修正，提升命中率。对狙击手和飞刀手来说是神技。\"],\n[\"痛觉转移\", 13000, \"技能\", {C:1}, \"【dp+1;能量池-60】\", \"将自己受到的下一次伤害所产生的痛觉，转移到指定目标身上。伤害本身无法转移，但剧烈的痛楚足以让任何敌人行动迟缓。\"],\n[\"墨汁结界\", 8200, \"技能\", {}, \"【dp+1;能量池-35】\", \"以自身为中心制造一片浓郁的墨色区域，剥夺区域内所有人的视觉。使用者自身不受影响。\"],\n[\"回声定位\", 7800, \"技能\", {}, \"【dp+1;能量池-10】\", \"通过发出特定频率的声音并分析其回声，精确感知周围环境的立体结构与物体位置，是黑暗环境中的眼睛。\"],\n[\"嗜血渴望\", 16000, \"技能\", {C:2}, \"【dp+1;能量池-50】\", \"主动技，发动后攻击会附带吸血效果，将造成伤害的一部分转化为自身生命力。但会轻微影响心智，增加攻击性。\"],\n[\"第三只眼\", 20000, \"技能\", {B:1}, \"【dp+2;能量池-100】\", \"在额头开启一只能量构成的眼睛，可以看破低阶幻术、伪装，并侦测到隐藏的能量流动。持续消耗能量。\"],\n[\"钢铁意志\", 10000, \"技能\", {}, \"【dp+1】\", \"被动技能，大幅提升对精神控制、魅惑、恐惧等效果的抵抗力。你的思想是你最坚固的堡垒。\"],\n[\"战术语言\", 6800, \"技能\", {}, \"【dp+1;能量池-5】\", \"能够使用一套极其简洁高效的语言（手势或短语）与队友进行无声交流，传递复杂的战术意图。\"],\n[\"蛛丝发射\", 8500, \"技能\", {D:1}, \"【dp+1;能量池-15】\", \"从指尖发射出坚韧的蛛丝，可用于攀爬、束缚敌人或制作简易陷阱。\"],\n[\"动力跳跃\", 7000, \"技能\", {}, \"【dp+1;能量池-20】\", \"瞬间在脚下积蓄能量并爆发，进行一次超乎寻常的高跳或远跳。\"],\n[\"能量盾构\", 12500, \"技能\", {D:2}, \"【dp+1;能量池-40】\", \"在身前凝聚一面能量盾牌，可以抵挡一次中等强度的物理或能量攻击。盾牌破碎后有冷却时间。\"],\n[\"连锁闪电（弱化版）\", 18000, \"技能\", {C:1}, \"【dp+1;能量池-70】\", \"释放一道能在多个敌人之间跳跃的闪电，每次跳跃威力递减。对于清理杂兵有奇效。\"],\n[\"再生之触\", 22000, \"技能\", {B:1}, \"【dp+1;能量池-120】\", \"将手掌覆盖在伤口上，消耗大量能量加速细胞再生，治愈非致命性伤口。无法断肢再生。\"],\n[\"危机预感\", 17000, \"技能\", {C:1}, \"【dp+1】\", \"被动技能，对即将到来的危险有模糊的直觉性预警。无法指明危险来源，但足以让人提前警惕。\"],\n[\"武器共鸣\", 14000, \"技能\", {D:2}, \"【dp+1;能量池-30】\", \"与一把常用武器建立精神链接，使用时更加得心应手，并能发挥出武器的潜在威力，小幅提升攻击力。\"],\n[\"爆破艺术\", 11500, \"技能\", {}, \"【dp+1;能量池-25】\", \"精通各类炸药的制作与使用，能够精确计算爆炸范围和威力，布置出艺术品般的连环爆炸。\"],\n[\"镜面反射\", 25000, \"技能\", {B:1}, \"【dp+2;能量池-150】\", \"制造一个短暂的能量镜面，可以将下一次指向你的飞行道具或能量攻击原路反弹。需要极佳的反应速度。\"],\n[\"心灵屏障\", 19000, \"技能\", {C:2}, \"【dp+1;能量池-80】\", \"建立一个强大的心灵防护罩，免疫一次针对性的读心或心灵探查。是一次性的消耗品，使用后需长时间冷却。\"],\n[\"主角光环（伪）\", 30000, \"技能\", {A:1}, \"【dp+1】\", \"被动技能，在遭遇必死局面时，有极小概率（1%）触发都合主义事件，从而化险为夷。例如，敌人枪械卡壳，脚下突然出现香蕉皮等。\"],\n[\"平地摔达人\", 2500, \"技能\", {}, \"【dp-1】\", \"被动技能，走路时有一定概率无视地形平坦度直接摔倒。但摔倒时有更高概率以一种滑稽而无伤的方式落地，有时甚至能意外躲开攻击。\"],\n[\"反向导航\", 3000, \"技能\", {}, \"【dp+1;能量池-5】\", \"当你试图前往某个目的地时，脑中会出现一个绝对错误的方向指引。只要反着它的指示走，就一定能找到正确的路。\"],\n[\"死亡BGM\", 8000, \"技能\", {}, \"【dp+1;能量池-20】\", \"可以为指定目标（包括自己）配上一段背景音乐，音乐风格可选。在关键时刻放出激昂的音乐能振奋人心，放出滑稽的音乐则能摧毁敌人的气势。\"],\n[\"强行解说\", 6000, \"技能\", {}, \"【dp+1;能量池-15】\", \"强制让一个目标的内心想法以弹幕或旁白的形式出现在周围人的脑海里，持续三十秒。暴露秘密和制造尴尬的利器。\"],\n[\"钞能力（体验版）\", 10000, \"技能\", {D:1}, \"【dp+1;能量池-100】\", \"每天一次，可以凭空变出一笔仅限当天使用的、数额不大的当地货币。钱是真的，但第二天会消失。\"],\n[\"降智光环\", 15000, \"技能\", {C:1}, \"【dp+1;能量池-50】\", \"以自身为中心释放一个光环，范围内的所有人（包括自己）的逻辑思维能力会暂时性降低。适合在需要浑水摸鱼时使用。\"],\n[\"第四面墙的凝视\", 28000, \"技能\", {B:1}, \"【dp+2;能量池-90】\", \"可以短暂地看到关于目标人物的“设定”，例如他们的弱点、技能列表或背景故事梗概。信息模糊且片面，但足以提供关键情报。\"],\n[\"暂停学外语\", 7500, \"技能\", {}, \"【dp+1;能量池-20】\", \"在观看外语影像或听到外语对话时，可以在脑内生成完美的同声传译和字幕。学习新语言从未如此简单。\"],\n[\"量子化猫咪\", 9999, \"技能\", {}, \"【dp+1;能量池-30】\", \"你可以随时召唤一只薛定谔的猫。这只猫处于存在与不存在的叠加态，只有在你主动观察它时才会坍缩为一只真实的、品种随机的可爱猫咪。它只会陪伴你五分钟，然后重新回归量子海洋。\"],\n[\"契约之书\", 35000, \"技能\", {B:2}, \"【dp+2;能量池-200】\", \"具现化一本契约书，与他人签订的任何承诺只要写入书中，双方都将受到规则层面的强制约束。违约者会受到与承诺价值对等的惩罚。\"],\n[\"故事线的锚点\", 45000, \"技能\", {A:1}, \"【dp+2;能量池-500】\", \"选定一个物体或地点作为“存档点”。每天一次，使用者可以在死亡或任务失败时，将自身状态（不包括记忆）回溯到设置锚点的那一刻。巨大的消耗让它几乎无法被频繁使用。\"],\n[\"逻辑炸弹\", 38000, \"技能\", {B:1}, \"【dp+1;能量池-180】\", \"向一个智能体（AI，魔像，部分神智清晰的生物）提出一个无法解答的逻辑悖论。目标会陷入永久性的逻辑循环，直至思维崩溃。\"],\n[\"概念窃取（碎片）\", 50000, \"技能\", {A:1, C:2}, \"【dp+2;能量池-300】\", \"对一个目标使用，随机窃取其拥有的一个“概念”的极小一部分，例如“锋利”、“速度”或“幸运”。你可以短暂地将这个概念碎片附加在自己或物品上。效果微弱且不稳定。\"],\n[\"谎言成真（微弱）\", 42000, \"技能\", {B:2}, \"【dp+1;能量池-250】\", \"说出一个简单的、无伤大雅的谎言（例如“我口袋里有一块糖”），并消耗能量使其在小范围内短暂成为事实。谎言越偏离现实，消耗越大，成功率越低。\"],\n[\"时间减速（主观）\", 32000, \"技能\", {C:2}, \"【dp+2;能量池-150/秒】\", \"大幅提升自己的思维速度和神经反应，使得外界在你的感知中变得极其缓慢。身体速度不变，但为你赢得了宝贵的思考和反应时间。\"],\n[\"因果线之触\", 60000, \"技能\", {A:2}, \"【dp+3;能量池-1000】\", \"触摸一个物体或人物，可以模糊地感知到一条与其紧密相关的、在不久的将来会发生的“因果线”。看到的未来片段极其破碎，极难解读。\"],\n[\"名字的支配（初阶）\", 55000, \"技能\", {A:1, B:1}, \"【dp+2;能量池-400】\", \"得知一个存在的“真名”后，可以通过呼唤其真名，对其下达一个无法被直接抵抗的简单命令（例如“停下”）。对越强大的存在效果越弱。\"],\n[\"边界跨越\", 70000, \"技能\", {S:1}, \"【dp+3;能量池-800】\", \"选择一个“边界”，例如门与门框的边界、影子与光明的边界，并进行一次短距离的空间穿梭，从边界的一侧直接出现在另一侧。距离和可穿越的边界类型受限于技能等级。\"],\n[\"万物终结之声\", 99999, \"技能\", {S:1, A:2}, \"【dp+2;能量池-2000】\", \"发出一种针对“存在”本身的声音，所有听到此声音的非永恒造物都会加速走向其“终结”。生命会迅速衰老，物品会快速腐朽风化。作用范围极小，消耗巨大，且对使用者自身也有反噬风险。\"],\n          [\"初代人造人类\", 6000, \"血统\", {D:1}, `\n        属性: 力量+1, 敏捷+1, 感知+1, 耐力+1\n        能量池: 电力(30)\n    `, `\n    - 钢铁身躯: 依然保持人类的外形, 是仿生科技至高技术的结晶。不需要食物、水、睡眠就可以生存。\n    - 完美人机改造: 人造人的身体本身就由机械和肉体构成, 能够和D级科技本质的所有改造完美契合。\n    古时候创造人类被视为只有神才能够作到的事, 触犯到神的领域便会带来难以想象的后果。这是人类挑战禁忌的最初产物, 是仿生科技的结晶。`],\n\n    [\"第二代人造人类\", 14000, \"血统\", {C:1}, `\n        属性: 力量+2, 敏捷+2, 感知+2, 耐力+2\n        能量池: 电力(40)\n    `, `\n    - 提升特性-钢铁身躯: 肉搏攻击能够造成严重伤害。\n    - 完美人机改造: 人造人的身体本身就由机械和肉体构成, 能够和C级科技本质的所有改造完美契合。\n    在初代的基础上, 新一代的人造人被赋予了更强大的战斗能力和适应性, 机械与肉体的结合更加紧密。`],\n\n    [\"第三代人造人类\", 20000, \"血统\", {B:1}, `\n        属性: 力量+3, 敏捷+3, 感知+2, 耐力+3\n        能量池: 电力(50)\n    `, `\n    - 宇宙生存: 人造人可以在宇宙生存。\n    - 完美人机改造: 人造人的身体本身就由机械和肉体构成, 能够和B级科技本质的所有改造完美契合, B级科技本质改造所提供的内在加值可以和血统提供的内在加值叠加而非取高, 并且该属性加值可以叠加在义体上。\n    技术的飞跃突破了能源的桎梏, 甚至打破了星球的束缚，成为了一个近乎永恒的生命体。`],\n\n    [\"超级人造人类\", 32000, \"血统\", {A:1}, `\n        属性: 力量+4, 敏捷+4, 感知+4, 耐力+4\n        能量池: 电力(60)\n    `, `\n    - 宇宙生存: 人造人可以在宇宙生存。\n    - 完美人机改造: 人造人的身体本身就由机械和肉体构成, 能够和A级和S级科技本质的所有改造完美契合。\n    - 能量吸收装置: 安装了吸收能量的装置, 可以吸收来自对手的能量转化为自己的能量。\n    这已不仅仅是模仿生命, 而是超越生命。通过吸收对手的能量, 成为了一个能够在战斗中不断变强的存在, 是科技所能达到的巅峰造物之一。`],\n [\"蜘蛛侠强化\", 15000, \"血统\", {B:1}, `\n        属性: 力量+1, 敏捷+4, 感知+4, 耐力+2\n        能量池: 生物能量(50)\n    `, `\n    - 蜘蛛敏锐: 蜘蛛侠的平衡器官大幅度增强，获得敏感范围内的颤动感知。\n    - 蜘蛛运动: 蜘蛛侠获得蛛行术，如蜘蛛一般在垂直表面上攀爬移动，甚至天花板上也可以。在这种情况下，蜘蛛侠必须腾出双手来爬行。\n    - 蛛丝: 蜘蛛侠可从手腕处射出蛛丝。蛛丝可如捕网一般进行纠缠攻击。\n    源自一次意外的基因突变，将人类与蜘蛛的优点完美结合，获得了超越常人的感官与运动能力。这种力量也伴随着巨大的责任。`],\n       [\"D信使\", 5000, \"血统\", {D:1}, `\n        属性: 敏捷+2, 耐力+2\n        能量池: 动能(0)\n    `, `\n    - 专注护盾: 通过持续高速移动，可以在体表形成一层临时的能量护盾来抵御攻击。这层护盾在不主动发起攻击的回合中会保持生效，提供额外的防护。\n    - 信使体质: 拥有与众不同的战斗方式，能够以超凡的敏捷和协调性主导近身格斗，动作迅猛而非单纯依靠蛮力。\n    - 自由奔跑: 掌握了出神入化的跑酷技巧，能够在墙壁、管道甚至天花板上自由移动，仿佛摆脱了重力的束缚。其跳跃能力也得到极大增强，能轻松越过常人无法企及的障碍。\n    - 信仰限定: 信奉绝对的、不受约束的自由，这种信念是力量的根基，但也因此无法接纳和使用任何其他形式的信仰类能力。\n    受到自由精神的感召，成为了一名初出茅庐的信使。虽然经验尚浅，但已掌握了在都市丛林中穿梭的核心技巧。`],\n\n    [\"C信使\", 8000, \"血统\", {C:1}, `\n        属性: 敏捷+3, 耐力+3\n        能量池: 动能(0)\n    `, `\n    - 专注护盾+: 专注护盾的效果得到强化。在高速移动中，敌人极难锁定其位置，无论是实体攻击还是远程射击都容易被偏转或擦身而过。同时，更擅长在移动中进行格挡招架。\n    - 穿越攻击: 学会了如何将冲刺的巨大动能瞬间转化为强大的攻击力。在全力奔跑后发动的攻击极具冲击力，但代价是攻击的瞬间，自身的防御会变得相对脆弱。\n    - 信使体质: 能够以超凡的敏捷和协调性主导近身格斗，动作迅猛而非单纯依靠蛮力。\n    - 自由奔跑: 掌握了出神入化的跑酷技巧，能够在墙壁、管道甚至天花板上自由移动，仿佛摆脱了重力的束缚。其跳跃能力也得到极大增强，能轻松越过常人无法企及的障碍。\n    - 信仰限定: 信奉绝对的、不受约束的自由，这种信念是力量的根基，但也因此无法接纳和使用任何其他形式的信仰类能力。\n    已经是一名合格的信使，秘密运输任务的常客。跑酷技巧更加娴熟，战斗方式也变得更加致命和高效。`],\n\n    [\"B信使\", 12000, \"血统\", {B:1}, `\n        属性: 敏捷+4, 耐力+4\n        能量池: 动能(0)\n    `, `\n    - 专注护盾++: 专注力达到巅峰，在移动时，周围的世界在其感知中会变得缓慢。现在，任何移动都能激活强大的专注护盾，并且可以在护盾的保护下毫无顾忌地进行攻击。\n    - 强力穿越攻击: 穿越攻击的技巧已臻化境，发动冲刺攻击时不再会暴露防御上的弱点，可以毫无顾忌地将速度完全转化为破坏力。\n    - 信使体质（提升）: 身体的协调性与反应能力达到新高度，防御能力不再依赖传统护具，而是完全取决于自身的敏捷或感知。近身格斗时，力量的限制被彻底打破，可以淋漓尽致地发挥敏捷的优势。\n    - 自由奔跑: 掌握了出神入化的跑酷技巧，能够在墙壁、管道甚至天花板上自由移动，仿佛摆脱了重力的束缚。其跳跃能力也得到极大增强，能轻松越过常人无法企及的障碍。\n    - 信仰限定: 信奉绝对的、不受约束的自由，这种信念是力量的根基，但也因此无法接纳和使用任何其他形式的信仰类能力。\n    身为组织内的精英信使，行动能力已达化境。其身体的反应速度本身就是最好的防御，是各大组织执行高难度任务时的第一人选。`],\n\n    [\"A信使\", 18000, \"血统\", {A:1}, `\n        属性: 敏捷+6, 耐力+6\n        能量池: 动能(0)\n    `, `\n    - 信使体质（究极）: 身体素质达到人类潜能的极限，耐力与敏捷相辅相成，使得敏捷属性获得了根本性的强化，肉搏攻击的威力也随之大幅提升。专注护盾已成为一种常驻状态，只要处于移动之中，最顶级的防护护盾就会持续生效。\n    - 强力穿越攻击: 穿越攻击的技巧已臻化境，发动冲刺攻击时不再会暴露防御上的弱点，可以毫无顾忌地将速度完全转化为破坏力。\n    - 自由奔跑: 掌握了出神入化的跑酷技巧，能够在墙壁、管道甚至天花板上自由移动，仿佛摆脱了重力的束缚。其跳跃能力也得到极大增强，能轻松越过常人无法企及的障碍。\n    - 信仰限定: 信奉绝对的、不受约束的自由，这种信念是力量的根基，但也因此无法接纳和使用任何其他形式的信仰类能力。\n    已是信使中的传奇与王牌，是自由精神的化身。其存在本身就意味着任务的绝对成功，是最强大的追捕者也无法触及的幻影。`],\n\n    [\"D天然道士\", 6000, \"血统\", {D:1}, `\n        属性: 力量+1, 敏捷+1, 耐力+1, 感知+1, 决心+2\n        能量池: 灵力(40)\n    `, `\n    - 仙风道骨: 天生拥有仙人骨，虽未曾修炼道法，但肉体凡胎已被仙气潜移默化地滋养。拥有超乎常人的坚韧体质，极难被轻易击倒。其移动速度和身体的天然防御能力，会随着自身的成长而同步增强。`],\n\n    [\"C天然道士\", 14000, \"血统\", {C:1}, `\n        属性: 敏捷+1, 耐力+1, 感知+3, 决心+3\n        能量池: 灵力(50)\n    `, `\n    - 仙风道骨（提升）: 仙气进一步强化肉体，赋予了快速自愈的体质，并且所有自然恢复的速度都得到加倍。对凡俗的需求大幅降低，不再需要食物、水或空气，只需每日短暂的睡眠，便可从天地自然间汲取所需能量以维持生命活动。体质坚韧，移动和防御能力随成长而增强。`],\n\n    [\"B天然道士\", 22000, \"血统\", {B:1}, `\n        属性: 力量+1, 敏捷+1, 耐力+1, 感知+4, 决心+4\n        能量池: 灵力(60)\n    `, `\n    - 仙风道骨（提升）: 快速自愈能力得到显著增强。速度快到极致，能够在平稳的液体表面上奔跑而不下沉。拥有坚韧的体质和随成长提升的移动与防御能力，且只需睡眠即可维生。\n    - 赤诚之心: 仙气不仅淬炼肉体，更洗涤精神。其心灵变得纯净而坚固，能自然免疫绝大多数试图操控精神的负面影响与幻术效果。`],\n\n    [\"A天然道士\", 35000, \"血统\", {A:1}, `\n        属性: 敏捷+1, 耐力+1, 感知+5, 决心+5\n        能量池: 灵力(75)\n    `, `\n    - 仙风道骨（蜕凡）: 肉体凡胎已彻底蜕变，从此长生不老，免疫世间一切疾病、毒素与生理上的衰老。身体拥有强大的普适性伤害减免能力和卓越的快速自愈能力。\n    - 仙气医疗: 体内满溢的仙气可以通过肢体接触，将自身的自愈能力暂时转移给他人，治愈其伤势。\n    - 赤诚之心（提升）: 灵魂已与天地自然同调，坚定的意志能显著增强其所有行动的成功率。同时保留了对心灵操控与幻术的强大抗性，并可在水面奔跑。`],\n\n    [\"AA天然道士\", 50000, \"血统\", {AA:1}, `\n        属性: 力量+1, 敏捷+2, 耐力+2, 感知+8, 决心+8\n        能量池: 元气(100)\n    `, `\n    - 结丹: 可以将自身精纯的生命元气凝结成一颗金丹。此丹药拥有起死回生的神效，能够治愈致命的伤势，并帮助服用者抵抗诅咒、疾病和毒素。但凝结金丹需要消耗大量的自身元气。\n    - 法天象地: 能够将自身元神逼出体外，化身为一个由纯粹能量构成的、顶天立地的元神巨人进行战斗，此状态下战斗力获得极大增幅。\n    - 赤诚之心（圆满）: 灵魂与天地同调，坚定的意志能显著增强其所有行动的成功率。\n    - 仙道之躯: 作为一个达到天然道士顶峰的存在，完整保留了长生不老、百毒不侵、仙气医疗、水上行走、强大自愈和伤害减免等所有低阶能力。`],\n\n    [\"炎黄世胄\", 7000, \"血统\", {D:1}, `\n        属性: 力量+1, 敏捷+1, 耐力+1, 智力+1, 感知+1, 决心+1, 风度+1\n        能量池: 气血(35)\n    `, `\n    - 皆为汉土: 作为炎黄后裔，在对抗非我族类之敌时，血脉中潜藏的力量会被唤醒，爆发出更强的战斗力。\n    - 学习天赋: 传承自先祖的智慧使其拥有卓越的学习能力，能比常人更快地掌握新知识与技能。\n    - 忠于炎黄: 血脉中铭刻着对自身民族的绝对忠诚。任何形式的背叛行为都会导致血脉力量的彻底丧失。这份忠诚在面对特定的历史宿敌时，会转化为更强大的战斗意志。`],\n\n    [\"华夏遗民-青龙\", 15000, \"血统\", {C:1}, `\n        属性: 风度+3, 沉着+2, 耐力+1\n        能量池: 龙气(45)\n    `, `\n    - 崖山气节: 拥有钢铁般的意志，精神如同坚壁，极难被任何外力动摇或操控。\n    - 生存体质: 血脉中流淌着强大的适应力，使其能天然免疫绝大多数常见的毒素与疾病。\n    - 四神附体: 获得东方青龙的庇佑，对各类能量形态的伤害都拥有普遍的抗性。\n    - 中华传承: 血脉的纯粹性是力量的根源，任何会大幅改变身体基本构造的外部改造，都会削弱甚至破坏这份传承之力。\n    选择青龙分支，继承了东方甲木的神性，威仪天生，意志坚定。`],\n\n    [\"华夏遗民-白虎\", 15000, \"血统\", {C:1}, `\n        属性: 敏捷+3, 决心+2, 感知+1\n        能量池: 煞气(45)\n    `, `\n    - 崖山气节: 拥有钢铁般的意志，精神如同坚壁，极难被任何外力动摇或操控。\n    - 生存体质: 血脉中流淌着强大的适应力，使其能天然免疫绝大多数常见的毒素与疾病。\n    - 四神附体: 获得西方白虎的庇佑，对各类能量形态的伤害都拥有普遍的抗性。\n    - 中华传承: 血脉的纯粹性是力量的根源，任何会大幅改变身体基本构造的外部改造，都会削弱甚至破坏这份传承之力。\n    选择白虎分支，继承了西方庚金的杀伐之气，行动敏锐，杀伐果决。`],\n\n    [\"华夏遗民-朱雀\", 15000, \"血统\", {C:1}, `\n        属性: 智力+3, 感知+2, 敏捷+1\n        能量池: 灵火(45)\n    `, `\n    - 崖山气节: 拥有钢铁般的意志，精神如同坚壁，极难被任何外力动摇或操控。\n    - 生存体质: 血脉中流淌着强大的适应力，使其能天然免疫绝大多数常见的毒素与疾病。\n    - 四神附体: 获得南方朱雀的庇佑，对各类能量形态的伤害都拥有普遍的抗性。\n    - 中华传承: 血脉的纯粹性是力量的根源，任何会大幅改变身体基本构造的外部改造，都会削弱甚至破坏这份传承之力。\n    选择朱雀分支，继承了南方丙火的灵性，智慧超群，感知敏锐。`],\n\n    [\"华夏遗民-玄武\", 15000, \"血统\", {C:1}, `\n        属性: 耐力+3, 力量+2, 沉着+1\n        能量池: 玄冥真水(45)\n    `, `\n    - 崖山气节: 拥有钢铁般的意志，精神如同坚壁，极难被任何外力动摇或操控。\n    - 生存体质: 血脉中流淌着强大的适应力，使其能天然免疫绝大多数常见的毒素与疾病。\n    - 四神附体: 获得北方玄武的庇佑，对各类能量形态的伤害都拥有普遍的抗性。\n    - 中华传承: 血脉的纯粹性是力量的根源，任何会大幅改变身体基本构造的外部改造，都会削弱甚至破坏这份传承之力。\n    选择玄武分支，继承了北方壬癸的坚韧，体魄强健，沉稳如山。`],\n\n    [\"炎黄子孙-青龙\", 25000, \"血统\", {B:1}, `\n        属性: 风度+4, 沉着+2, 耐力+2\n        能量池: 龙气(55)\n    `, `\n    - 青龙降临: 青龙血脉进一步觉醒，可以引动东方苍龙的神力，以自身凛然的威仪鼓舞战场上所有友方单位，显著提升他们的战斗效能与士气。\n    - 传承之力: 完整保留了钢铁般的意志、对常见毒疾的免疫力、对能量伤害的天然抗性，以及不能接受大幅度身体改造的血脉限制。`],\n\n    [\"炎黄子孙-白虎\", 25000, \"血统\", {B:1}, `\n        属性: 敏捷+4, 决心+2, 感知+2\n        能量池: 煞气(55)\n    `, `\n    - 白虎杀伐: 白虎的杀伐本能完全融入己身，使其获得了超凡的移动速度和先手反应能力。对某种特定的战斗方式（如弓箭、白刃、肉搏或运动）拥有超群的领悟力，并能将坚定的意志力转化为纯粹的破坏力，突破攻击的极限。\n    - 传承之力: 完整保留了钢铁般的意志、对常见毒疾的免疫力、对能量伤害的天然抗性，以及不能接受大幅度身体改造的血脉限制。`],\n\n    [\"炎黄子孙-朱雀\", 25000, \"血统\", {B:1}, `\n        属性: 智力+4, 感知+2, 敏捷+2\n        能量池: 灵火(55)\n    `, `\n    - 朱雀一怒: 南明离火的神力在体内流转，赋予其强大的火焰再生能力。任何近战攻击者都会受到神火的自动反噬，同时自身的攻击也附带着朱雀神火，能对敌人造成持续的烈焰灼烧伤害。\n    - 传承之力: 完整保留了钢铁般的意志、对常见毒疾的免疫力、对能量伤害的天然抗性，以及不能接受大幅度身体改造的血脉限制。`],\n\n    [\"炎黄子孙-玄武\", 25000, \"血统\", {B:1}, `\n        属性: 耐力+4, 力量+2, 沉着+2\n        能量池: 玄冥真水(55)\n    `, `\n    - 玄武当关: 玄武神力化为坚不可摧的守护，其肉体获得了极高的天生防御与伤害减免，对常规的枪械射击和能量武器拥有特殊的抗性。更能以集中的意志力，在短时间内进一步强化伤害吸收的能力，做到万夫莫开。\n    - 传承之力: 完整保留了钢铁般的意志、对常见毒疾的免疫力、对能量伤害的天然抗性，以及不能接受大幅度身体改造的血脉限制。`],\n\n   [\"D级黄衣之王血统：戏剧家\", 8000, \"血统\", {\"D\":1}, `\n        属性: 智力+2, 耐力+2, 敏捷+2, 感知+1, 额外属性+3\n        能量池: 戏剧之力(40)\n    `, `\n    - 信仰导向: 作为哈斯塔的使者，他的灵魂与信仰已经绑定。他将无法再追寻或侍奉除克苏鲁神话体系之外的任何存在，任何过往的信仰联系都会被立刻切断。\n    - 迷惑人心的戏曲: 他是一位聪慧绝伦的艺术家，深谙如何以优雅的姿态引导死亡。他的智慧能完全转化为近战中的力量，能够选择一种表达自我的艺术形式（如舞蹈、歌唱、演奏），并以此作为战斗的媒介，其技艺之精湛，足以替代常规的白刃或肉搏技巧。\n    - 永恒的黄衣: 他的身躯永远被一件无法损毁、无法脱下的黄衣所包裹。这件黄衣是他身份的象征，能保护他不因重伤而昏迷，但也因此散发出一种超凡脱俗而又令人不安的气质，使他在与人交往时产生隔阂。这层衣物虽然坚韧，但对瓦解魔法的力量却无能为力。这身装束是其存在的一部分，象征着他与凡俗世界的疏离。\n     `],\n\n    [\"C级黄衣之王血统：温和开场\", 15000, \"血统\", {\"C\":1}, `\n        属性: 智力+3, 耐力+3\n        能量池: 戏剧之力(50)\n    `, `\n    - 提升特性-迷惑人心的戏曲: 他的舞姿与戏曲变得更加绚丽夺目，充满了令人无法抗拒的魅力。他以艺术发动的攻击，不仅能创伤敌人的肉体，其蕴含的迷惑力量还能直接冲击并束缚目标的精神。其艺术表达的破坏力，已能与最精纯的战斗技巧相媲美。\n    - 虚假的面具: 他的脸上自动出现一个不可摘除的白色面具，款式可随心意变幻。这面具赋予他洞察非凡事物的能力，能够感知到周围环境中隐藏的血统，并为他提供抵御神兵利器的强大防护。若他原本佩戴着其他头盔，这个面具将会取而代之，旧物若无法取下则会被直接摧毁。\n     `],\n\n    [\"B级黄衣之王血统：恐怖假面\", 22000, \"血统\", {\"B\":1}, `\n        属性: 智力+4, 耐力+4, 敏捷+3, 额外属性+3\n        能量池: 狂乱灵感(65)\n    `, `\n    - 提升特性-迷惑人心的戏曲: 他的智慧已经完全融入到了每一次攻击之中，不再需要任何转换，他的思想即是武器，智慧本身就定义了他攻击的极限。\n    - 倾城的假面: 当温馨的戏剧落幕，所有人都将目光投向身着黄衣的他。此刻，他可以选择摘下面具，将那不可名状的真实容貌展露给世人，带来极致的恐怖。他的面具与黄衣的力量都得到了本质的提升，成为了他身份更深层次的延伸，其防护与洞察能力均获得飞跃。\n   `],\n       [\"D级赛亚人血统\", 8000, \"血统\", {D:1}, `\n        属性: 力量+2, 敏捷+2, 耐力+2, 感知+1\n        能量池: 气(40)\n    `, `\n    - 战斗民族: 赛亚人是天生的战斗种族，拥有远超常人的坚韧肉体，能够抵御常规的物理打击，甚至对子弹等高速射弹有天然的抗性。\n    - 弱点尾巴: 赛亚人生来就有一条尾巴，这既是力量的象征，也是与生俱来的弱点。若尾巴被紧紧抓住，赛亚人会迅速感到脱力与虚弱。切断尾巴可以暂时消除此弱点，但也意味着失去了化身为巨猿的可能，不过尾巴终将在月圆之夜重新长出。`],\n\n    [\"C级赛亚人战士血统\", 6000, \"血统\", {C:1}, `\n        属性: 力量+3, 耐力+3\n        能量池: 气(50)\n    `, `\n    - 提升特性-战斗民族: 作为赛亚人中的战士，你的战斗直觉和反应速度得到进一步强化，使你能在高速对决中更好地捕捉对手的动向。\n    - 巨猿变化: 当赛亚人看到圆月或受到特定光线照射时，体内的野性会被唤醒，变身为失去理智的巨猿。巨猿形态下，体型、力量和耐力都将获得巨大的增幅，拥有惊人的破坏力。变身会持续到月亮消失或尾巴被切断为止。`],\n\n    [\"B级赛亚人精英战士血统\", 15000, \"血统\", {B:1}, `\n        属性: 力量+4, 敏捷+2, 耐力+4, 感知+1\n        能量池: 气(60)\n    `, `\n    - 提升特性-战斗民族: 作为赛亚人中的精英，你的力量与肉体潜能得到了极大开发。你的天生攻击不仅迅猛，而且破坏力会随着自身力量的增长而不断突破极限，肉体也变得更加坚不可摧。\n    - 宇宙作战: 你的身体构造已经进化到可以适应严酷的宇宙环境，无论是真空、辐射还是深海的巨大水压，都无法再对你造成伤害。你不再需要依赖呼吸生存。`],\n\n    [\"A级皇族赛亚人血统（贝吉塔王）\", 20000, \"血统\", {A:1}, `\n        属性: 力量+5, 敏捷+3, 耐力+5, 感知+3\n        能量池: 气(70)\n    `, `\n    - 提升特性-战斗民族: 皇族血脉使你的肉体对能量攻击也产生了极强的抗性。你造成的近战伤害会随着你的力量而获得质的飞跃，并且强大的耐力也赋予了你更为磅礴的生命力。\n    - 王者风范: 你天生具备王者的威压与气魄，这股气势使你在任何意志对抗中都能占据绝对优势。\n    - 前方的路: 赛亚人在生死边缘会变得更强的传说在你身上体现得淋漓尽致。每次从重伤中完全恢复后，你都有机会突破自身的极限，永久增强自己的力量或耐力。`],\n\n    [\"S级超级赛亚人血统\", 32000, \"血统\", {S:1}, `\n        属性: 力量+8, 敏捷+7, 耐力+8, 感知+6\n        能量池: 气(100)\n    `, `\n    - 金色形态: 凭借强大的意志，你可以突破极限，变身为传说中的超级赛亚人。变身后，你的头发变为金色并竖立，瞳孔化为碧绿，全身被金色的气焰包裹。在此形态下，你的各项身体机能都将获得爆炸性的提升，移动速度倍增，战斗民族的所有特性效果也会全面升华。\n    - 提升特性-战斗民族: 在超级赛亚人状态下，你的力量能够直接转化为天生武器的破坏力，而你坚韧的身体甚至能吸收所有类型的伤害。`],\n\n    [\"斯克莱亚血统\", 6000, \"血统\", {D:1}, `\n        属性: 耐力+1, 智力+2, 感知+1\n        能量池: 魔力(30)\n    `, `\n    - 背景: 斯克莱亚是居住于米德其路达次元的一族，他们天生拥有对魔法的亲和力，擅长搜索能量源、管理资料，是发掘古代文明遗迹的权威种族。\n    - 能量感知: 你能敏锐地感知到周围的能量波动，包括能量的运用、魔法物品以及拥有能量的生物，并能精确定位其来源，甚至分辨出能量的类别和强度。\n    - 资料统合: 斯克莱亚人擅长整理和使用文献，在解读文件和图纸方面有卓越的天赋。\n    - 雪貂形态: 你可以消耗魔力，在人类与小巧的雪貂形态之间自由变化。雪貂形态下，你可以轻松出入狭窄的地方，并且在攀附于其他生物身上时，能巧妙地利用对方来为自己提供掩护。`],\n\n    [\"鸢女血统\", 12000, \"血统\", {C:1}, `\n        属性: 力量+2, 敏捷+3, 感知+2, 决心+1\n        能量池: 风元(45)\n    `, `\n    - 背景: 鸢女是半人半猛禽的种族，最初是法师军队的探子与游击队，后来在兽人革命中赢得了自由。她们是天生的空战专家，以惊人的速度和机动性著称。\n    - 半人半鸟: 你的手臂永久地化为一对羽翼，赋予你强大的飞行能力，但无法再像人类一样使用双手。你的双腿则化为猛禽般的利爪，成为你致命的天生武器。\n    - 回旋战法: 你精通利用空中优势进行战斗的技巧。\n    - 永不为奴: 自由的意志已经烙印在你的灵魂深处。`],\n\n    [\"大熊猫血统\", 15000, \"血统\", {B:1}, `\n        属性: 力量+4, 耐力+4, 风度+3\n        能量池: 萌力(50)\n    `, `\n    - 背景: 世界上最可爱的生物是什么？答案就是来自中国的“滚滚”！\n    - 大熊猫: 你的外形变为一只可爱的大熊猫，拥有与生俱来的攀爬天赋和熊族语言能力。你肥嘟嘟的身体对冲击伤害有着天然的缓冲作用。\n    - 萌货: 你的可爱外表具有无法抗拒的魅力。\n    - 熊人族无所畏惧！: 你拥有强大的勇气和不屈的意志。\n    - 熊掌: 你厚实的熊掌既可爱又充满力量。`],\n\n    [\"第一使徒亚当血统\", 54400, \"血统\", {S:1}, `\n        属性: 力量+4, 敏捷+4, 耐力+4, 智力+3, 感知+3, 决心+4, 风度+3, 沉着+4\n        能量池: AT能量(120)\n    `, `\n    - 背景: 亚当是出现在南极的光之巨人，是所有使徒的起源。植入其胚胎后，外形不会发生巨大改变，但掌心会出现一只眼睛。\n    - 强化AT力场: 作为使徒之祖，你的AT力场（心之壁）异常强大，能够抵御极为巨大的伤害，甚至可以抵抗即死效果。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。只要S2机关不被破坏，你就算不上真正死亡。\n    - 心灵防护: 你对任何影响心灵的负面效果完全免疫。\n    - 光之巨人: 你的本质转变为元素生物，体型变得更为巨大，并获得完美的飞行能力。`],\n\n    [\"第三使徒水天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 力量+3, 敏捷+6, 耐力+4, 决心+3\n        能量池: AT能量(70)\n    `, `\n    - 背景: 水天使是拥有飞行能力的使徒。植入其胚胎后，头上会出现两张面具，身体浮现绿色组织，背后生出闪光的翅膀。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。只要S2机关不被破坏，你就算不上真正死亡。\n    - 使徒之躯: 你的身体拥有强大的再生能力。你可以从手心和肘部长出锋利的光束矛，并从头上的面具发射出命中后会爆发出十字型光芒的粒子炮。`],\n\n    [\"第四使徒书天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 力量+3, 敏捷+3, 耐力+4, 决心+3, 风度+3\n        能量池: AT能量(70)\n    `, `\n    - 背景: 书天使形态如同水母。植入其胚胎后，头部后方会出现一个水母状的悬浮罩，发梢变为透明的触手，并从背后伸出两根电热鞭。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。只要S2机关不被破坏，你就算不上真正死亡。\n    - 水母体: 你头部的悬浮场让你能永久离地漂浮，移动速度倍增。你还拥有两条能进行高频震动的粉红色触手作为武器，在攻击时能瞬间撕裂没有装甲防护的目标。`],\n\n    [\"第五使徒雷天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 敏捷+2, 耐力+4, 感知+4, 沉着+2\n        能量池: AT能量(70)\n    `, `\n    - 背景: 雷天使拥有最强的粒子炮，能呈现各种几何形态。植入其胚胎后，外形变化不大，但会有一个小小的蓝色水晶卫星环绕着你，它既是你的武器平台，也是S2机关的载体。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你的S2机关被保护在坚固的水晶卫星中。它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。\n    - 钻头: 你能从身体伸出一根无坚不摧的小钻头，用于突破坚固的障碍。\n    - 加粒子炮: 环绕你的水晶卫星能发射出威力无穷的加粒子炮，射程极远，并能自动锁定并攻击进入你感知范围内的任何有威胁的目标。`],\n\n    [\"第六使徒鱼天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 力量+6, 敏捷+2, 耐力+6, 感知+2\n        能量池: AT能量(70)\n    `, `\n    - 背景: 鱼天使是水生使徒。植入其胚胎后，背后会长出鱼鳍和短尾，并且可以从头部伸出布满尖牙的巨嘴，S2机关就位于巨嘴之中。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你的S2机关位于嘴中。它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。\n    - 鲸吞: 你获得了在水中自由呼吸和高速移动的能力，并免疫水压。你可以伸出巨嘴直接吞噬敌人，被吞入体内的敌人会持续受到伤害，难以逃脱。`],\n\n    [\"第七使徒音乐天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 力量+3, 敏捷+3, 耐力+4, 风度+4, 沉着+2\n        能量池: AT能量(80)\n    `, `\n    - 背景: 音乐天使的核心特征是分裂与再生。植入其胚胎后，头上会出现两张面具，身体浮现绿色组织，背后生出闪光的翅膀。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - 双S2机关: 你拥有两个阴阳鱼形的S2机关。这意味着即使其中一个被摧毁，你依然能够存活。\n    - 粒子炮: 你能从头上的面具发射出威力强大的粒子炮。\n    - 分体: 当你受到挥砍伤害时，你可以选择不受伤害，而是直接分裂成两个属性有所减弱的小型个体。两个分体共享意识，可以协同作战。虽然合体需要漫长时间且不能被打扰，但这是非常强大的生存能力。`],\n\n    [\"第八使徒胎儿天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 耐力+6, 感知+2, 风度+2, 沉着+6\n        能量池: AT能量(70)\n    `, `\n    - 背景: 胎儿天使代表着高速进化与适应。植入其胚胎后，你会首先回归到一个蛋的形态。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。\n    - 快速成长: 你会处于一个坚固的蛋中，能感知外界但无法互动。一旦蛋壳被打破，你会在瞬间成长为完全形态，所有属性、防御和抗性都会得到极大的提升。不过这个状态持续数小时后，你会再次变回蛋形态。`],\n\n    [\"第九使徒雨天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 力量+3, 敏捷+3, 耐力+4, 感知+3, 风度+3\n        能量池: AT能量(70)\n    `, `\n    - 背景: 雨天使是拥有强酸攻击能力的使徒。植入其胚胎后，身上会长出七只眼睛，S2机关隐藏在身体内部。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。\n    - 泪流满面: 你眼睛流出的“泪水”是具有极强腐蚀性的硫酸。你可以主动喷射大范围的酸液，近身攻击你的敌人也会被酸液溅射，你的近战攻击同样附带腐蚀效果。这种硫酸能无视物体的硬度直接造成破坏。`],\n\n    [\"第十使徒空天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 力量+2, 敏捷+3, 耐力+2, 感知+3, 风度+2\n        能量池: AT能量(70)\n    `, `\n    - 背景: 空天使是巨大的空中要塞。植入其胚胎后，全身会被橘黄色物质覆盖，胸前和双手出现巨大的眼睛，影响精细操作。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。可以通过全神贯注的防御来强化AT力场的范围和效果。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。\n    - 包裹物质: 覆盖你全身的物质是一层天然的重甲，提供了强大的防御和再生能力。\n    - 司空之眼: 你身上的三只大眼睛给予你全方位无死角的视野，极大地增强了你的侦查能力，并让你能够漂浮在空中。\n    - 空降飞扑: 你可以从极高的高空以自身为武器，展开AT力场进行毁灭性的坠落攻击，对地面造成巨大范围的破坏。`],\n\n    [\"第十一使徒恐怖天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 智力+6, 操控+6, 决心+2, 沉着+2\n        能量池: 数据流(70)\n    `, `\n    - 背景: 恐怖天使是纳米病毒集群构成的使徒。植入其胚胎后，外形不变，但你的本质已化为病毒本身。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量，并让你无需摄食和呼吸，也能在真空中生存。\n    - 病毒化: 你可以将自己的意识化为数据，入侵并操控任何科技造物。在骇入电脑、驾驶载具方面，你拥有无与伦比的天赋。你还可以通过接触来感染科技物品，从而随时掌握其位置。`],\n\n    [\"第十二使徒夜天使血统\", 54400, \"血统\", {S:1}, `\n        属性: 耐力+3, 智力+2, 感知+6, 风度+6, 操控+6, 沉着+6\n        能量池: 虚数能量(100)\n    `, `\n    - 背景: 夜天使是存在于另一个维度的使徒。植入其胚胎后，身上会出现黑白条纹，人们看到的“身体”只是投影，真身藏于影子之中。\n    - 反转AT力场: 你的AT力场极为特殊，它不直接抵挡伤害，而是构成了一个名为“狄拉克之海”的虚数空间，你的本体就藏于其中。任何攻击都无法触及位于另一个维度的你。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量。\n    - 狄拉克之海: 这是由你的AT力场维持的独立位面。你可以将范围内的敌人或物体强行吸入其中。进入狄拉克之海的敌人将受到位面法则的压制，实力大减，而你可以随时离开或返回这个属于你的领域。`],\n\n    [\"第十三使徒霞天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 耐力+4, 感知+4, 操控+4\n        能量池: 生物质(70)\n    `, `\n    - 背景: 霞天使是能够侵蚀和寄生的微生物集群。植入其胚胎后外形不变，但你的本体已非血肉之躯。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量。\n    - 侵蚀: 你可以将自己的微生物集群侵入无助的活物体内，通过意志对抗逐渐夺取对方的身体控制权。成功后，你可以操控其身体，使用其技能，并保留自己的AT力场和S2机关。\n    - 肉体强化: 你可以活化并强化被你侵占的有机体，使其身体机能得到大幅提升。\n    - 微生物集群: 在使用自己身体时，你是一个由无数微生物构成的集群生物。`],\n\n    [\"第十四使徒力天使血统\", 54400, \"血统\", {S:1}, `\n        属性: 力量+8, 敏捷+2, 耐力+5, 感知+4, 决心+8, 风度+2\n        能量池: AT能量(110)\n    `, `\n    - 背景: 力天使是机能最完善、拒绝能力最强的使徒。植入其胚胎后，身上会覆盖天然装甲，背后长出绷带般的翅膀，S2机关被保护在体内。\n    - 多重AT力场: 你的AT力场并非单层，而是由无数层力场叠加而成。这使它不仅能抵御伤害，还能吸收伤害，极难被中和或突破。\n    - 体内S2机关: 你的S2机关隐藏在体内，无法被直接攻击。强大的S2机关能量甚至能让你将AT力场化为武器，直接进行远程压迫攻击。\n    - 天生装甲: 你覆盖全身的外壳是一件性能优越的天然盔甲，提供全方位的防御、能量抗性，并赋予你完美的飞行能力。\n    - 使徒武装: 你能从双眼发射威力媲美雷天使的强化粒子炮，还能从翅膀中射出坚硬的绷带，以极高的速度切割敌人。`],\n\n    [\"第十五使徒鸟天使血统\", 21000, \"血统\", {A:1}, `\n        属性: 力量+1, 敏捷+5, 耐力+1, 感知+5, 操控+2, 沉着+2\n        能量池: 精神力(70)\n    `, `\n    - 背景: 鸟天使是位于卫星轨道上的精神攻击型使徒。植入其胚胎后，身后会长出三对巨大的白色翅膀，皮肤变为苍蓝色，并持续散发荧光。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量。\n    - 鸟之诗: 你身后的巨大翅膀能让你以极高的速度在天空中翱翔。\n    - 心灵扫描: 你能发射出类似AT力场的光波，对极远距离外的目标进行精神扫描。通过意志对抗，你可以窥探目标的表层思维，洞察其攻防意图，甚至挖掘出其内心深处被遗忘的记忆。`],\n\n    [\"第十七使徒自由天使血统\", 27200, \"血统\", {A:1}, `\n        属性: 敏捷+3, 感知+3, 决心+3, 沉着+3\n        能量池: 意志之力(70)\n    `, `\n    - 背景: 自由天使是拥有自由意志的使徒，代表着不受束缚的灵魂。植入其胚胎后，外形会变得更加俊美，头发变为白色。\n    - AT力场: 你获得使徒共通的心之壁能力，能展开八边形的闪光力场，抵御外界的物理干涉和伤害。\n    - S2机关: 你拥有名为S2机关的永动核心，它能源源不断地产生能量。\n    - 自由意志: 你代表着绝对的自由。你完全免疫任何环境的负面影响，免疫所有会限制你移动的纠缠、疲劳等状态，免疫擒抱与摔绊，免疫所有心灵层面的控制。你拥有完美的飞行能力，除非你自愿，否则没有什么能束缚你。`],\n  [\"D级喰种血统\", 6000, \"血统\", {D:1}, `\n        属性: 力量+2, 敏捷+1, 耐力+2\n        能量池: 赫子能量(40)\n    `, `\n    - 食尸鬼体质: 喰种的身体机能远超人类，拥有强大的力量和自愈能力。但必须以人类的血肉为食，普通食物味同嚼蜡且无法提供营养。\n    - 赫子: 体内Rc细胞的结晶，是喰种的捕食器官与武器。可以从身体特定部位伸展出一个赫子，其形态（如羽赫、鳞赫、甲赫、尾赫）在获得血统时决定。\n    - 赫眼: 在使用能力或情绪激动时，巩膜会变为黑色，虹膜变为红色，这是喰种的标志。\n    - CCG的天敌: 喰种的赫子坚韧无比，但对CCG开发的“库因克”武器异常脆弱。\n    潜藏于人类城市阴影中的捕食者，他们拥有人的外表，却以人为食。为了生存，他们必须在饥饿的本能与伪装的理性之间挣扎。`],\n\n    [\"C级喰种血统\", 13000, \"血统\", {C:1}, `\n        属性: 力量+3, 敏捷+2, 耐力+3\n        能量池: 赫子能量(55)\n    `, `\n    - 提升特性-食尸鬼体质: 自愈能力得到强化，即使是严重的创伤也能在较短时间内愈合。对人类血肉的渴求也更为强烈。\n    - 赫子操控: 对赫子的操控更加熟练，可以进行更复杂、更迅速的攻击与防御。赫子的尺寸与威力也得到提升。\n    适应了狩猎与被狩猎的生活，喰种的本能被进一步磨砺。他们不再是挣扎求生的新手，而是都市丛林中合格的猎手。`],\n\n    [\"B级喰种血统\", 21000, \"血统\", {B:1}, `\n        属性: 力量+4, 敏捷+3, 耐力+4, 感知+1\n        能量池: 赫子能量(70)\n    `, `\n    - 提升特性-食尸鬼体质: 身体强度大幅提升，自愈能力达到断肢再生的程度。\n    - 赫者之鳞: 通过吞噬其他喰种的赫子，可以暂时性地强化自身，甚至演化出不完整的赫者外壳（半赫者），获得临时的强大力量与防御，但有失控的风险。\n    在同类的相食中，寻求着进化的可能性。跨越禁忌的喰种将获得更强大的力量，但也要承担被疯狂吞噬的风险。`],\n\n    [\"A级独眼喰种血统\", 33000, \"血统\", {A:1}, `\n        属性: 力量+6, 敏捷+5, 耐力+6, 决心+2\n        能量池: 赫子能量(90)\n    `, `\n    - 独眼之王: 作为人类与喰种的混血，其潜力远超普通喰种。只在单眼呈现赫眼，但Rc细胞的活性与总量都达到了惊人的水平。\n    - 完全赫者化: 能够完全掌控吞噬同类获得的力量，将赫子覆盖全身，化为坚不可摧的“赫者”形态。在此形态下，身体能力得到飞跃性提升，且不会丧失理智。\n    - 突破界限: 独眼喰种的成长没有极限，每一次超越生死的战斗都有可能让其赫子产生新的变异和进化。\n    既不属于人类，也不属于喰种的孤独存在。这份与生俱来的矛盾与痛苦，造就了超越两个种族的王者。他是所有喰种的顶点，也是连接两个世界的唯一桥梁。`],\n\n    [\"狼人血统\", 7000, \"血统\", {D:1}, `\n        属性: 力量+3, 耐力+2, 感知+1\n        能量池: 怒气(35)\n    `, `\n    - 月夜狂暴: 在月圆之夜，会强制变身为狼人形态，失去理智，攻击性大幅增强，物理抗性提升，但无法使用装备和精细技能。\n    - 狼之嗅觉: 拥有极为灵敏的嗅觉，能够追踪气味，分辨情绪，并感知到隐藏的敌人。\n    - 银之毒: 对银制品有天生的恐惧和脆弱性，接触银会造成严重的烧灼伤害并抑制自愈能力。\n    古老的诅咒在血脉中流淌，月亮是其力量的源泉，也是其疯狂的开关。每当月圆之时，人性的枷锁便会被挣脱。`],\n\n    [\"头狼血统\", 16000, \"血统\", {C:1}, `\n        属性: 力量+4, 耐力+3, 感知+2, 决心+1\n        能量池: 怒气(50)\n    `, `\n    - 自由变身: 不再完全受月亮的影响，可以通过消耗怒气，主动在人类与狼人形态之间切换，并能在变身后保持部分理智。\n    - 感染之咬: 狼人形态下的啃咬附带诅咒，若目标在撕咬下存活，便有一定几率被转化为新的狼人。\n    - 提升特性-狼之嗅觉: 感官进一步强化，能够通过气味分辨谎言。\n    他们学会了控制血脉中的野性，成为了兽群的领袖。不再是单纯被本能驱使的怪物，而是能够运用诅咒力量的战士。`],\n\n    [\"魔狼血统\", 24000, \"血统\", {B:1}, `\n        属性: 力量+5, 敏捷+2, 耐力+5, 感知+3\n        能量池: 怒气(65)\n    `, `\n    - 人狼一体: 能够进入完美的“人狼”形态，兼具人类的智慧与狼人的力量。此形态下可以使用武器和技能，并且体型更加矫健，速度与力量并存。\n    - 再生之躯: 拥有强大的再生能力，除非击中头部或心脏，否则绝大多数物理伤害都能快速愈合。对银的脆弱性有所降低，但仍是其最大弱点。\n    - 统御狼群: 能够通过嚎叫与精神力，对其他狼或狼人进行一定程度的指挥和统御。\n    挣脱了诅咒的束缚，将野性与人性完美融合，成为了月夜下真正的统治者。其存在本身就是力量与自由的象征。`],\n\n    [\"精灵血统\", 7500, \"血统\", {D:1}, `\n        属性: 敏捷+2, 感知+2, 风度+2\n        能量池: 自然魔力(40)\n    `, `\n    - 长寿种: 拥有漫长的生命，对时间的流逝有不同的感受。自然衰老极其缓慢。\n    - 森林之子: 在森林、草原等自然环境中，感知能力和移动速度会得到提升。能与大部分温顺的动物进行简单的沟通。\n    - 优雅身姿: 天生拥有轻盈的体态和协调的动作，在进行射击、潜行和需要灵巧的行动时具备优势。\n    - 钢铁之厌: 对大规模的工业造物和纯粹的科技环境感到本能的排斥和不适。\n    诞生自古老森林的优雅种族，与自然万物和谐共生。他们的生命如林间清泉般悠长，他们的箭矢如流星般精准。`],\n\n    [\"高等精灵血统\", 17000, \"血统\", {C:1}, `\n        属性: 敏捷+3, 感知+3, 智力+2, 风度+3\n        能量池: 奥术能量(55)\n    `, `\n    - 奥术亲和: 血脉中流淌着对魔法能量的天然亲和力，学习和施展魔法事半功倍，并能感受到环境中的魔力流动。\n    - 心灵感应: 能够与血脉相近或关系亲密的同伴进行短距离的心灵沟通。\n    - 提升特性-优雅身姿: 动作如舞蹈般优雅，能通过专注来强化自身的闪避能力。\n    他们是精灵中走上魔法之路的一支，不再仅仅满足于自然的恩赐，而是开始探求世界背后的奥秘法则。智慧与优雅在他们身上融为一体。`],\n\n    [\"古代龙裔血统\", 38000, \"血统\", {S:1}, `\n        属性: 力量+7, 耐力+7, 决心+6, 智力+5\n        能量池: 龙之血(100)\n    `, `\n    - 龙魂: 你的灵魂本质是龙，这让你拥有钢铁般的意志，免疫绝大多数精神控制和恐惧效果。\n    - 元素吐息: 可以在数种强大的元素吐息中选择其一（火焰、寒冰、闪电、强酸），作为你与生俱来的毁灭性武器。\n    - 龙鳞甲: 身体表面覆盖着坚不可摧的龙鳞，提供极高的物理与能量伤害减免。\n    - 巨龙之力: 肉体力量达到生物的顶峰，近战攻击附带强大的冲击力，并且拥有在任何环境下生存的能力，包括真空和深海。可以消耗大量能量，在短时间内化为一头遮天蔽日的巨龙真身。\n    你是远古巨龙血脉最纯粹的继承者，是行走于大地的活传奇。你的存在本身，就是力量、威严与不朽的代名词。`],\n     [\"【D】稀薄的祖血\", 2200, \"血统\", {}, \"属性: 力量+1, 耐力+1\\n能量池: 魔力(10)\", \"这是第四真祖血脉最微末的显现。拥有者身体素质略强于常人，偶尔会在强烈的情感波动中感受到难以抑制的饥渴。此刻，古老的传承仅仅是在沉睡中低语，等待着被唤醒的契机。\"],\n  [\"【C】觉醒的祖血\", 8500, \"血统\", {}, \"属性: 力量+2, 敏捷+2, 耐力+2\\n能量池: 魔力(30)\", \"古老的血液开始苏醒，吸血冲动变得更加明确，并与特定的情感紧密相连。不老不死和超速再生的特性初露端倪，虽然恢复力尚弱，但已然超越凡人的界限。拥有者能够感受到体内潜藏的、尚未成型的眷兽之力。\"],\n  [\"【B】统御的祖血\", 18000, \"血统\", {\"C\": 1}, \"属性: 力量+3, 敏捷+3, 耐力+4, 沉着+2\\n能量池: 魔力(80)\", \"真祖的力量进一步解放，让拥有者能够初步驾驭一到两只眷兽。吸食灵媒之血后，力量会得到显著增强。“血之伴侣”的契约变得可能，与他人的羁绊将成为力量的一部分。物理伤害的恢复速度大幅提升。\"],\n  [\"【A】灾厄的祖血\", 35000, \"血统\", {\"B\": 1}, \"属性: 力量+5, 敏捷+4, 耐力+6, 操控+4\\n能量池: 魔力(200)\", \"率领灾厄化身的力量已趋于完整。已能熟练支配复数的强大眷兽，其存在本身就足以扭曲常理。通过与灵媒缔结“血之伴侣”的契约，可以完全释放眷兽的潜能，成为行走于世间的传说。\"],\n  [\"【S】第四真祖之血\", 50000, \"血统\", {\"A\": 1}, \"属性: 力量+8, 敏捷+6, 耐力+8, 智力+5, 操控+6, 风度+5\\n能量池: 魔力(500)\", \"不应存于世的梦幻血脉，世界最强的吸血鬼之证。完美的不老不死之躯，支配全部十二只灾厄化身的眷兽。每一次吸血都是一场君临的仪式，将灵媒的灵魂与自己的王座相连，释放出足以颠覆世界的力量。\"],\n  [\"灵媒之血（瓶装）\", 800, \"物品\", {}, \"效果: 一次性道具。在进行吸血时使用，可触发一次力量觉醒的判定，有微小几率解锁一个未激活的技能或强化现有血统能力。\", \"从拥有高阶灵媒体质的人身上获取的血液，被小心地保存在这个容器中。它散发着对吸血鬼而言无比甘美的气息，是唤醒沉睡力量的钥匙，也是缔结神圣契约的祭品。\"],\n  [\"血之伴侣的契约印记\", 15000, \"物品\", {\"B\":1}, \"效果: 装备。当与缔结了“血之伴侣”契约的角色共同行动时，双方所有属性判定获得dp+1的加成。此物品为唯一性，不可重复获得。\", \"这不是一个实体物品，而是灵魂层面深刻羁绊的证明。它象征着主君与伴侣间的绝对信赖与魔力连接，当彼此并肩时，这份羁绊将化为超越一切的守护之力。\"],\n  [\"【被动】吸血冲动\", 3000, \"技能\", {}, \"效果: 【dp+0;能量池-0】\", \"该技能为被动触发。当角色陷入“性兴奋”状态时，将获得“吸血”指令的许可，可以对自愿的、拥有强大灵力的异性使用。成功吸血是觉醒眷兽和增强力量的唯一途径。\"],\n  [\"【眷属】血之伴侣\", 8000, \"技能\", {\"C\":1}, \"效果: 【dp+0;能量池-50】\", \"通过吸血仪式，将一位拥有高阶灵媒体质的异性转化为“血之随从”。对方将获得不死性，并与你共享魔力池。每拥有一名血之伴侣，你的能量池上限提升20点。\"],\n  [\"【眷兽】神羊之金刚\", 9000, \"技能\", {}, \"效果: 【dp+1;能量池-60】\", \"召唤出金刚石构成的大角羊。可发动一次绝对防御，完全反弹一次指向性攻击。之后的回合中，可将漂浮的宝石结晶化为护盾或投射物，进行防御或攻击。\"],\n  [\"【眷兽】牛头王之琥珀\", 8500, \"技能\", {}, \"效果: 【dp+1;能量池-55】\", \"召唤出由熔岩构成的牛头神。其巨大的战斧能够发动无视任何魔法或能量护盾的纯粹物理攻击，是攻破结界和屏障的绝对力量。\"],\n  [\"【眷兽】龙蛇之水银\", 11000, \"技能\", {}, \"效果: 【dp+2;能量池-75】\", \"召唤双头龙蛇。其能力是次元吞噬，可以指定一个目标或一片区域，将其从空间中彻底抹除，无论是实体、能量还是概念，都无法幸免。\"],\n  [\"【眷兽】甲壳之银雾\", 7500, \"技能\", {}, \"效果: 【dp+1;能量池-40】\", \"召唤银雾甲壳兽，将指定范围内的一切物质（实力低于自身）都强制雾化，使其暂时失去物理形态与结合力，是一种强大的控制与快速移动手段。\"],\n  [\"【眷兽】狮子之黄金\", 9500, \"技能\", {}, \"效果: 【dp+1;能量池-65】\", \"召唤黄金之狮。能够释放毁灭性的雷光进行大范围轰炸，或进行精密的电磁操作。是力量与破坏力的象征，足以瞬间清扫战场。\"],\n  [\"【眷兽】冥姬之虹炎\", 13000, \"技能\", {}, \"效果: 【dp+2;能量池-80】\", \"召唤手持虹光之剑的女武神。其斩击能切断万物，不仅是物理上的形态，也包括目标的因果与命运。被此剑斩断之物将彻底失去其存在的根基。\"],\n  [\"【眷兽】夜摩之黑剑\", 10000, \"技能\", {}, \"效果: 【dp+2;能量池-70】\", \"召唤一柄贯穿天际的百米巨剑。通过超重力加速从高空坠落，其一击之力足以毁灭周遭数十公里的地貌，是纯粹破坏力的极致体现。\"],\n  [\"【眷兽】蝎虎之紫\", 7800, \"技能\", {}, \"效果: 【dp+1;能量池-50】\", \"召唤被紫炎包裹的蝎尾狮。能够瞬间分析任何毒素并生成抗体，亦能指定一个敌方目标，强行剥夺其体内的魔力或能量为己用。\"],\n  [\"【眷兽】双角之深绯\", 8200, \"技能\", {}, \"效果: 【dp+1;能量池-50】\", \"召唤拥有音叉双角的战马。通过发出超高频率的共振波，粉碎指定范围内的所有固体物质。同时，它也能提供一次性的超高速空中飞行能力。\"],\n  [\"【眷兽】魔羯之瞳晶\", 14000, \"技能\", {}, \"效果: 【dp+2;能量池-90】\", \"召唤出象征“魅惑”的魔羯。其能力是支配精神，可以对指定目标进行一次精神控制判定。即使是意志坚定的真祖级对手，也可能被其影响。\"],\n  [\"【眷兽】水精之白钢\", 12000, \"技能\", {}, \"效果: 【dp+2;能量池-80】\", \"召唤象征“超回复”的水妖。能够发动一次强大的治愈神迹，将范围内所有友方单位的伤势与异常状态完全清除，令其回归到最完美的状态。\"]\n];\n      // 全局变量\n \n        let userPoints = 0;\n       let userPlots = {};\n    \n        let randomItems = [];\n        let shoppingCart = []; // 新增：购物车\n        const ITEMS_PER_PAGE = 14; // 按要求修改为10\n\n        const shopState  = {\n            fixed: { currentCategory: 'all', currentSort: 'asc', currentPage: 1, selectedItem: null },\n            random: { currentCategory: 'all', currentSort: 'asc', currentPage: 1, selectedItem: null }\n        };\n\n\n    // 抽奖相关配置\nconst GACHA_CONFIG = {\n    singleCost: 160,\n    tenCost: 1440, // 10连抽打9折\n    prizeRanges: [\n        { min: 30, max: 70, probability: 0.59 },    \n        { min: 80, max: 160, probability: 0.25 },   \n        { min: 200, max: 600, probability: 0.1 },  \n        { min: 1000, max: 4000, probability: 0.05 }, \n        { min: 8000, max: 20000, probability: 0.01 }  \n    ]\n};\nfunction getRandomShopItems() {\n    try {\n        const itemsJson = localStorage.getItem('randomShopItems');\n        // If itemsJson is null or undefined, return an empty array.\n        if (!itemsJson) {\n            console.warn('No randomShopItems found in localStorage.');\n            return [];\n        }\n        const items = JSON.parse(itemsJson);\n        // Ensure the parsed data is an array.\n        return Array.isArray(items) ? items : [];\n    } catch (error) {\n        console.error('Failed to parse randomShopItems from localStorage:', error);\n        // Return an empty array in case of a parsing error to ensure the application doesn't crash.\n        return [];\n    }\n}\n\nfunction getRandomPrizeRange() {\n    const random = Math.random();\n    let cumulativeProbability = 0;\n\n    for (const range of GACHA_CONFIG.prizeRanges) {\n        cumulativeProbability += range.probability;\n        if (random <= cumulativeProbability) {\n            return range;\n        }\n    }\n\n    // Fallback to the last (or could be first, depending on desired logic) range if something goes wrong.\n    // Using the last one is often safer if probabilities don't sum to exactly 1.\n    return GACHA_CONFIG.prizeRanges[GACHA_CONFIG.prizeRanges.length - 1];\n}\n\n/**\n * Filters a combined list of fixed and random items to find those within a specific price range.\n * @param {number} min - The minimum price of the range.\n * @param {number} max - The maximum price of the range.\n * @returns {Array} An array of items that fall within the specified price range.\n */\nfunction getItemsInPriceRange(min, max) {\n    const randomItems = getRandomShopItems();\n    // Combine fixed and random items into a single pool for selection.\n    const allItems = [...fixedItems, ...randomItems];\n\n    return allItems.filter(item => {\n        // Assuming item is an array like ['itemName', price]\n        const price = item[1];\n        return price >= min && price <= max;\n    });\n}\n\nfunction performGacha(count) {\n    const results = [];\n    for (let i = 0; i < count; i++) {\n        const prizeRange = getRandomPrizeRange();\n        const availableItems = getItemsInPriceRange(prizeRange.min, prizeRange.max);\n        \n        if (availableItems.length > 0) {\n            const randomItem = availableItems[Math.floor(Math.random() * availableItems.length)];\n            results.push(randomItem);\n        }\n    }\n    return results;\n}\n // 全新的抽卡动画函数\n // 全新的抽卡动画函数，支持手机端拖动和点击\nfunction showGachaAnimation(results, callback) {\n    const container = document.getElementById('gacha-animation-container');\n    const summaryContainer = document.getElementById('gacha-results-summary');\n    container.innerHTML = '';\n    summaryContainer.innerHTML = '';\n    summaryContainer.style.display = 'none';\n\n    const isMobileView = window.innerWidth <= 800;\n\n    if (isMobileView) {\n        // --- 手机端：可交互的3D圆筒动画 ---\n        const carousel = document.createElement('div');\n        carousel.className = 'gacha-carousel';\n        container.appendChild(carousel);\n\n        const cardCount = results.length;\n        const angle = 360 / cardCount;\n        const radius = Math.round((140 / 2) / Math.tan(Math.PI / cardCount));\n\n        let currentAngle = 0;\n        let startX = 0;\n        let startAngle = 0;\n        let isDragging = false;\n        let dragThreshold = 5; // 移动超过5像素才算拖动\n\n        results.forEach((item, index) => {\n            const price = item[1];\n            let tierClass = 'tier-1';\n            if (price >= 8000) tierClass = 'tier-5';\n            else if (price >= 1000) tierClass = 'tier-4';\n            else if (price >= 200) tierClass = 'tier-3';\n            else if (price >= 80) tierClass = 'tier-2';\n\n            const card = document.createElement('div');\n            card.className = 'gacha-card';\n            card.dataset.index = index;\n            const originalTransform = `rotateY(${index * angle}deg) translateZ(${radius}px)`;\n            card.style.transform = originalTransform;\n            card.style.setProperty('--original-transform', originalTransform);\n\n            card.innerHTML = `\n                <div class=\"gacha-card-inner\">\n                    <div class=\"gacha-card-front\">?</div>\n                    <div class=\"gacha-card-back ${tierClass}\">\n                        <div>${item[0]}</div>\n                        <div style=\"font-size: 12px; margin-top: 5px;\">${item[1]}积分</div>\n                    </div>\n                    <div class=\"gacha-card-details\">\n                        <div class=\"gacha-card-details-content\">\n                            <div><strong>${item[0]}</strong></div>\n                            <div>价值: ${item[1]}积分</div>\n                            <div>分类: ${item[2]}</div>\n                            <div>效果: ${item[4]}</div>\n                            <div>描述: ${item[5]}</div>\n                            <div style=\"height: 50px;\"></div>\n                        </div>\n                    </div>\n                    <button class=\"gacha-abandon-btn\" style=\"display: none;\">放弃</button>\n                </div>\n            `;\n            carousel.appendChild(card);\n\n            card.addEventListener('click', () => {\n                if (isDragging) return; // 如果是拖动，则不触发点击\n\n                const selectedCard = carousel.querySelector('.gacha-card.selected');\n                if (selectedCard === card) { // 如果再次点击已选中的卡片，则取消选中\n                    card.classList.remove('selected');\n                    carousel.classList.remove('has-selection');\n                } else {\n                    if(selectedCard) selectedCard.classList.remove('selected');\n                    card.classList.add('selected');\n                    carousel.classList.add('has-selection');\n                    currentAngle = -index * angle;\n                    carousel.style.transform = `rotateY(${currentAngle}deg)`;\n                }\n            });\n\n            card.querySelector('.gacha-abandon-btn').addEventListener('click', (e) => {\n                e.stopPropagation();\n                results[index] = null;\n                card.style.opacity = '0.2';\n                card.style.pointerEvents = 'none';\n            });\n        });\n\n        // 拖动事件\n        container.addEventListener('touchstart', (e) => {\n            startX = e.touches[0].pageX;\n            startAngle = currentAngle;\n            isDragging = false;\n            carousel.style.transition = 'none'; // 拖动时移除平滑过渡\n        }, { passive: true });\n\n        container.addEventListener('touchmove', (e) => {\n            const x = e.touches[0].pageX;\n            const deltaX = x - startX;\n            if (Math.abs(deltaX) > dragThreshold) {\n                isDragging = true;\n            }\n            if(isDragging) {\n                const sensitivity = 0.5; // 调整拖动灵敏度\n                currentAngle = startAngle + deltaX * sensitivity;\n                carousel.style.transform = `rotateY(${currentAngle}deg)`;\n            }\n        }, { passive: true });\n\n        container.addEventListener('touchend', () => {\n            carousel.style.transition = 'transform 0.6s cubic-bezier(0.25, 1, 0.5, 1)';\n            const cardIndex = Math.round(-currentAngle / angle);\n            const snappedAngle = -cardIndex * angle;\n            currentAngle = snappedAngle;\n            carousel.style.transform = `rotateY(${currentAngle}deg)`;\n\n            // 确保touchend后isDragging状态复位\n            setTimeout(() => { isDragging = false; }, 50);\n        });\n\n        // 初始入场动画\n        setTimeout(() => {\n            const finalAngle = 360 * 3;\n            carousel.style.transition = 'transform 3s cubic-bezier(0.25, 1, 0.5, 1)';\n            carousel.style.transform = `rotateY(-${finalAngle}deg)`;\n        }, 100);\n\n        setTimeout(() => {\n            carousel.style.transition = 'transform 0.6s cubic-bezier(0.25, 1, 0.5, 1)';\n            carousel.querySelectorAll('.gacha-card').forEach(c => c.classList.add('flipped'));\n            let summaryHTML = '<h4>本轮收获</h4>';\n            results.forEach(item => { summaryHTML += `<div>${item[0]} - ${item[1]}积分</div>`; });\n            summaryContainer.innerHTML = summaryHTML;\n            summaryContainer.style.display = 'block';\n            if (callback) callback();\n        }, 3500);\n\n    } else {\n        // --- 电脑端：平面翻牌动画 (保持原样，无需修改) ---\n        results.forEach((item, index) => {\n            const price = item[1];\n            let tierClass = 'tier-1';\n            if (price >= 8000) tierClass = 'tier-5';\n            else if (price >= 1000) tierClass = 'tier-4';\n            else if (price >= 200) tierClass = 'tier-3';\n            else if (price >= 80) tierClass = 'tier-2';\n\n            const card = document.createElement('div');\n             card.className = 'gacha-card';\n             card.dataset.itemIndex = index;\n             card.innerHTML = `\n                 <div class=\"gacha-card-inner\">\n                     <div class=\"gacha-card-front\">?</div>\n                     <div class=\"gacha-card-back ${tierClass}\">\n                         <div>${item[0]}</div>\n                         <div style=\"font-size: 12px; margin-top: 5px;\">${item[1]}积分</div>\n                     </div>\n                     <div class=\"gacha-card-details\">\n                         <div class=\"gacha-card-details-content\">\n                             <div><strong>${item[0]}</strong></div>\n                             <div>价值: ${item[1]}积分</div>\n                             <div>分类: ${item[2]}</div>\n                             <div>效果: ${item[4]}</div>\n                             <div>描述: ${item[5]}</div>\n                             <div style=\"height: 50px;\"></div>\n                         </div>\n                     </div>\n                     <button class=\"gacha-abandon-btn\" style=\"display: none;\">放弃</button>\n                 </div>\n             `;\n            container.appendChild(card);\n\n            setTimeout(() => card.classList.add('flipped'), index * 200 + 500);\n\n            card.addEventListener('click', () => {\n                 if (!card.classList.contains('flipped')) return;\n                 const isSelected = card.classList.contains('selected');\n                 container.querySelectorAll('.gacha-card').forEach(c => {\n                     c.classList.remove('selected');\n                     c.querySelector('.gacha-card-details').classList.remove('show');\n                     c.querySelector('.gacha-abandon-btn').style.display = 'none';\n                 });\n                 if (!isSelected) {\n                     card.classList.add('selected');\n                     card.querySelector('.gacha-card-details').classList.add('show');\n                     card.querySelector('.gacha-abandon-btn').style.display = 'block';\n                 }\n            });\n\n            card.querySelector('.gacha-abandon-btn').addEventListener('click', (e) => {\n                 e.stopPropagation();\n                 results[index] = null;\n                 card.style.opacity = '0.5';\n                 card.style.pointerEvents = 'none';\n            });\n        });\n\n        setTimeout(() => {\n            if (callback) callback();\n        }, results.length * 200 + 1500);\n    }\n}\n\n\n\nasync function processGachaRewards(results) {\n    // 过滤掉被放弃的物品\n    const validResults = results.filter(item => item !== null);\n    \n    if (validResults.length === 0) {\n        return; // 所有物品都被放弃\n    }\n    \n    // 检查本轮重复\n    const itemCounts = {};\n    const finalResults = [];\n    \n    for (const item of validResults) {\n        const key = `${item[2]}-${item[0]}`; // category-name作为key\n        if (itemCounts[key]) {\n            // 本轮重复，转为积分\n            const extraPoints = Math.floor(item[1] / 2);\n            playCharacterData.货币段.积分[0] += extraPoints;\n        } else {\n            itemCounts[key] = 1;\n            finalResults.push(item);\n        }\n    }\n    \n    let updateMemoryCommands = [];\n    let userMessages = [];\n    \n    finalResults.forEach(item => {\n        const command = getPurchaseCommand(item);\n        if (command) {\n            updateMemoryCommands.push(command);\n            userMessages.push(item[0]);\n        }\n    });\n    \n    // 扣除抽奖费用\n    const cost = results.length === 1 ? GACHA_CONFIG.singleCost : GACHA_CONFIG.tenCost;\n    updateMemoryCommands.push(`set_attribute('货币段.${currentTheme.currency}', '${playCharacterData.货币段.积分[0]}', '${playCharacterData.货币段.积分[0] - cost}');`);\n    \n    if (updateMemoryCommands.length > 0) {\n        let finalCommand = `<updateMemory>\\n${[...new Set(updateMemoryCommands)].join('\\n')}\\n</updateMemory>\\n`;\n        if (userMessages.length > 0) {\n            finalCommand += `<(货币已扣除，禁止重复扣除，奖品已交付，禁止重复交付，禁止描写价格)${currentGameData.user_character.name}通过抽奖获得了以下物品：${userMessages.join(\"，\")}。>`;\n        }\n        await triggerassa(`/setinput ${finalCommand}`);\n    }\n}\n\nfunction startGacha(count) {\n    const cost = count === 1 ? GACHA_CONFIG.singleCost : GACHA_CONFIG.tenCost;\n \n  \n    if (playCharacterData.货币段.积分[0] < cost) {\n        showModal('shop-modal', \"积分不足\", `您需要 ${cost} 积分才能进行${count === 1 ? '单抽' : '十连抽'}。`);\n        return;\n    }\n    \n    const results = performGacha(count);\n    if (results.length === 0) {\n        showModal('shop-modal', \"抽奖失败\", \"没有可抽取的物品。\");\n        return;\n    }\n    \n    // 显示抽奖模态框\n    showModal('gacha-modal');\n    document.getElementById('gacha-modal-title').textContent = \n        count === 1 ? '单抽结果' : '十连抽结果';\n    document.getElementById('gacha-confirm-btn').style.display = 'none';\n    \n    // 开始动画\n    showGachaAnimation(results, () => {\n        // 动画完成后显示确认按钮\n        document.getElementById('gacha-confirm-btn').style.display = 'inline-block';\n        document.getElementById('gacha-confirm-btn').onclick = async () => {\n            await processGachaRewards(results);\n            hideModal('gacha-modal');\n            showModal('shop-modal', \"抽奖完成\", `成功获得 ${results.length} 件物品！数据将在下次刷新时更新。`);\n            playCharacterData.货币段.积分[0] = playCharacterData.货币段.积分[0] - cost;\n        };\n    });\n}\n\n          // ========== 新增：妈妈为你添加的全局变量和核心计算函数 ==========\n        const plotLevels = ['D', 'C', 'B', 'A', 'S'];\n /**\n * 【V9 双向兑换版】采用先合成后分解的结算逻辑，完美处理所有兑换场景。\n * @param {object} requiredPlots - 商品所需的支线剧情成本\n * @returns {object} - 返回一个计划对象 { affordable: boolean, decompositionPlan: object }\n */\nfunction checkPlotAffordability(requiredPlots) {\n    // 步骤一：全局购买力审计 (最可靠的保险)\n    const conversionRates = { 'S': 81, 'A': 27, 'B': 9, 'C': 3, 'D': 1 };\n    let totalRequiredInD = 0;\n    let totalOwnedInD = 0;\n\n    for (const level of plotLevels) {\n        totalRequiredInD += (requiredPlots[level] || 0) * conversionRates[level];\n        totalOwnedInD += playCharacterData.货币段.支线剧情[level][0] * conversionRates[level];\n    }\n\n    if (totalOwnedInD < totalRequiredInD) {\n        return { affordable: false, decompositionPlan: {} };\n    }\n\n    // 步骤二：既然买得起，开始制定详细的支付计划\n    let simulatedPlots = JSON.parse(JSON.stringify(playCharacterData.货币段.支线剧情));\n    let decompositionPlan = { S: 0, A: 0, B: 0, C: 0, D: 0 };\n\n    // 阶段一：向上合成，将所有低级富余资产转化为高级购买力\n    for (let i = 0; i < plotLevels.length - 1; i++) {\n        const currentLevel = plotLevels[i];\n        const higherLevel = plotLevels[i + 1];\n\n        // 支付当前等级所需\n        const needed = requiredPlots[currentLevel] || 0;\n        simulatedPlots[currentLevel][0] -= needed;\n\n        // 如果支付后还有富余，就全部合成到上一级\n        if (simulatedPlots[currentLevel][0] > 0) {\n            const canSynthesize = Math.floor(simulatedPlots[currentLevel][0] / 3);\n            if (canSynthesize > 0) {\n                // 注意：这里我们不记录合成计划，因为最终的分解指令会自动处理好一切\n                simulatedPlots[currentLevel][0] -= canSynthesize * 3;\n                simulatedPlots[higherLevel][0] += canSynthesize;\n            }\n        }\n    }\n    // 单独支付最高级S级\n    simulatedPlots['S'][0] -= (requiredPlots['S'] || 0);\n\n\n    // 阶段二：向下分解，用高级资产支付低级欠款\n    for (let i = plotLevels.length - 1; i >= 0; i--) {\n        const currentLevel = plotLevels[i];\n\n        // 如果当前级别出现“负债”，说明需要从更高级别分解来填补\n        if (simulatedPlots[currentLevel][0] < 0) {\n            const deficit = -simulatedPlots[currentLevel][0]; // 这是欠款数\n\n            if (currentLevel !== 'S') {\n                const higherLevel = plotLevels[i + 1];\n\n                // 计算需要分解多少个高级支线来弥补\n                const amountToDecompose = Math.ceil(deficit / 3);\n\n                // 在分解计划中记录下来\n                decompositionPlan[higherLevel] += amountToDecompose;\n\n                // 更新模拟账本\n                simulatedPlots[higherLevel][0] -= amountToDecompose;\n                simulatedPlots[currentLevel][0] += amountToDecompose * 3;\n            }\n        }\n    }\n\n    // 如果所有流程走完，说明计划可行\n    return { affordable: true, decompositionPlan: decompositionPlan };\n}\n\n \n\nfunction SafeGetValue(value) {\n            if (Array.isArray(value)) {\n                let res = value.length > 0 ? value[0] : '';\n                return(res === '' || res === null || res === undefined) ? '无' : res;\n            }\n            return (value === '' || value === null || value === undefined) ? '无' : value;\n        }\n \n\n        \n    /**\n * 修改：商店初始化，实现动态分类\n */\n/**\n * 修改：商店初始化，移除旧的随机商品解析\n */\n function initializeShopData() {\n    // --- 1. 新增：填充顶部的货币信息 ---\n  \n    const currencyContainer = document.getElementById('shop-currency-display');\n        // --- 原有逻辑开始 ---\n\n    if (currencyContainer) {\n           const plotString = `D:${userPlots.D[0]} C:${userPlots.C[0]} B:${userPlots.B[0]} A:${userPlots.A[0]} S:${userPlots.S[0]}`;\n        \n        // 假设 currentTheme 是一个全局可访问的对象\n        let plotLabel = (typeof currentTheme !== 'undefined' && currentTheme.plot) ? currentTheme.plot : '剧情';\n\n        currencyContainer.innerHTML = `\n            <div class=\"currency-item\"><span class=\"label\">积分:</span><span class=\"value\">${userPoints}</span></div>\n            <div class=\"currency-item\"><span class=\"label\">${plotLabel}:</span><span class=\"value\">${plotString}</span></div>\n        `;\n    }\n\n\n    // 关键：不再对 randomItems 做任何操作。它将保持当前的状态。\n\n    // --- 动态生成分类 ---\n    const fixedCategoryTabs = document.querySelector('#page-fixed-shop .category-tabs');\n    const randomCategoryTabs = document.querySelector('#page-random-shop .category-tabs');\n    fixedCategoryTabs.innerHTML = '<button class=\"control-btn active\" data-section=\"fixed\" data-category=\"all\">全部</button>';\n    randomCategoryTabs.innerHTML = '<button class=\"control-btn active\" data-section=\"random\" data-category=\"all\">全部</button>';\n\n    // 注意：这里将\"血统\"也加入了动态分类中\n    for (const category of [\"物品\", \"技能\", \"基础技能\", \"家具\", \"血统\"]) {\n        fixedCategoryTabs.innerHTML += `<button class=\"control-btn\" data-section=\"fixed\" data-category=\"${category}\">${category}</button>`;\n        // 随机商店可能没有\"基础技能\"和\"血统\"，但为了统一，可以先加上，再通过商品数据有无来决定是否显示\n        if ([\"物品\", \"技能\", \"家具\", \"血统\"].includes(category)) {\n             randomCategoryTabs.innerHTML += `<button class=\"control-btn\" data-section=\"random\" data-category=\"${category}\">${category}</button>`;\n        }\n    }\n\n\n    // 清空购物车，但保留商品列表\n    shoppingCart = [];\n    updateCartView();\n\n    renderShopSection('fixed');\n    renderShopSection('random'); // 渲染当前内存中已有的随机商品\n}\n \n//    /**\n//          * 初始化数据 (接收随机数据作为参数)\n//          * @param {string} randomDataPayload - 包含随机商品信息的字符串\n//          */\n//         async function initializeData(randomDataPayload) {\n//             try {\n                \n         \n//                 // 核心数据加载（积分等），必须成功\n//                 userPoints = parseInt(SafeGetValue(currentGameData.user_character.points) || 0);\n//                 document.getElementById('userPoints').textContent = userPoints;\n\n//                 // --- 随机商品解析（单独错误处理）---\n//                 try {\n//                     // 直接使用传入的参数进行解析\n//                     randomItems = parseRandomItems(randomDataPayload);\n//                     //console.log(\"随机商品解析成功:\", randomItems);\n//                 } catch (error) {\n//                     console.error(\"解析随机商品时发生严重错误:\", error);\n//                     randomItems = []; // 确保即使解析失败，randomItems也是一个空数组\n//                 }\n\n//                 // --- 渲染所有部分 ---\n//                 renderShopSection('page-fixed-shop');\n//                 renderShopSection('page-random-shop');\n\n//             } catch (error) {\n//                 console.error(\"初始化数据时发生严重错误:\", error);\n//                 showModal(\"错误\", \"核心数据加载失败，商店无法开启。请联系主神。\");\n//                 renderShopSection('fixed');\n//             }\n//         }\n\n      function getFilteredAndSortedItems(section) {\n            // 获取搜索词并转为小写，方便不区分大小写地匹配\n            const searchTerm = document.getElementById('shop-search-input').value.toLowerCase().trim();\n\n            // 确定基础商品列表 (固定或随机)\n            let items = section === 'fixed' ? fixedItems : randomItems;\n\n            // 如果有搜索词，则执行搜索过滤\n            if (searchTerm) {\n                return items.filter(item => {\n                    // 将商品的所有信息（名称、价格、类型、效果、描述）拼接成一个字符串\n                    // 然后检查这个字符串是否包含搜索词\n                    return item.join(' ').toLowerCase().includes(searchTerm);\n                });\n            }\n\n            // 如果没有搜索词，执行原来的分类和排序逻辑\n            const { currentCategory, currentSort } = shopState[section];\n\n            const filtered = currentCategory === 'all'\n                ? items\n                : items.filter(item => item[2] === currentCategory);\n\n            return filtered.sort((a, b) => currentSort === 'asc' ? a[1] - b[1] : b[1] - a[1]);\n        }\n\n\n    function renderShopSection(section) {\n        renderShopItems(section);\n        renderShopPagination(section);\n        resetShopDetails(section);\n    }\n\n\n    \n/**\n * 新增：格式化商品成本的显示\n * @param {number} price - 积分价格\n * @param {object} plots - 支线剧情需求对象\n * @returns {string} - 格式化后的成本字符串\n */\nfunction formatItemCost(price, plots) {\n    let plotString = Object.entries(plots)\n        .filter(([, value]) => value > 0)\n        .map(([key, value]) => `${value} ${key}级`)\n        .join(' + ');\n\n    if (plotString && price > 0) {\n       return `${plotString} + ${price} ${currentTheme.currency}`;\n    } else if (plotString) {\n        return `${plotString}`;\n    } else {\n         return `${price} ${currentTheme.currency}`;\n    }\n}\n\n /*\n    宝贝，找到原来的 renderShopItems 函数，用这个更新后的版本替换它。\n    它现在能更准确地显示“剧情不足”或“分解购买”了。\n*/\nfunction renderShopItems(section) {\n    const items = getFilteredAndSortedItems(section);\n    const { currentPage } = shopState[section];\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const pageItems = items.slice(startIndex, startIndex + ITEMS_PER_PAGE);\n    const listElement = document.getElementById(`items-display-list-${section}`);\n    listElement.innerHTML = '';\n\n    pageItems.forEach((item, index) => {\n        const [name, price, , plots] = item;\n        const absoluteIndex = startIndex + index;\n        const isInCart = shoppingCart.some(cartItem => cartItem[0] === name);\n\n        // 使用重构后的V2版本检查函数\n        const plotCheck = checkPlotAffordability(plots);\n\n        let buttonText = '购买';\n        let buttonDisabled = false;\n        let buttonClass = '';\n\n        if (isInCart) {\n            buttonText = '已添加';\n            buttonDisabled = true;\n        } else if (!plotCheck.affordable) {\n            buttonText = `${currentTheme.plot}不足`;\n            buttonDisabled = true;\n        } else {\n            // 检查计划中是否有需要分解的（值 > 0）\n            const needsDecomposition = Object.values(plotCheck.decompositionPlan).some(val => val > 0);\n            if (needsDecomposition) {\n                buttonText = '分解购买';\n                buttonClass = 'decomposable';\n            }\n        }\n\n        const row = document.createElement('div');\n        row.className = 'item-row';\n        row.innerHTML = `\n            <div class=\"item-name\">${name}</div>\n            <div class=\"item-price\">${formatItemCost(price, plots)}</div>\n            <button class=\"buy-button ${buttonClass}\" ${buttonDisabled ? 'disabled' : ''}>${buttonText}</button>\n        `;\n\n        row.addEventListener('click', (e) => {\n            if (e.target.classList.contains('buy-button')) return;\n            document.querySelectorAll(`#items-display-list-${section} .item-row`).forEach(r => r.classList.remove('selected'));\n            row.classList.add('selected');\n            shopState[section].selectedItem = item;\n            showItemDetails(section, item);\n        });\n\n        const buyButton = row.querySelector('.buy-button');\n        if (!buttonDisabled) {\n            buyButton.addEventListener('click', (e) => {\n                e.stopPropagation();\n                buyItem(section, absoluteIndex, buyButton);\n            });\n        }\n        listElement.appendChild(row);\n    });\n}\n\n\nfunction resetShopDetails(section) {\n             document.getElementById(`item-details-display-${section}`).innerHTML = '<div class=\"detail-placeholder\">选择一个商品查看详情</div>';\n        }\n\n        \n/**\n * 修改：显示商品详情\n */\nfunction showItemDetails(section, item) {\n    const [name, price, category, plots, effect, description] = item;\n    const detailsElement = document.getElementById(`item-details-display-${section}`);\n\n    detailsElement.innerHTML = `\n        <div class=\"detail-title\">${name}</div>\n        <div class=\"detail-info\">\n            <div class=\"detail-label\">成本:</div>\n            <div class=\"detail-value highlight\">${formatItemCost(price, plots)}</div>\n        </div>\n        <div class=\"detail-info\">\n            <div class=\"detail-label\">效果:</div>\n            <div class=\"detail-value\">${effect}</div>\n        </div>\n        <div class=\"detail-info\">\n            <div class=\"detail-label\">描述:</div>\n            <div class=\"detail-value\">${description}</div>\n        </div>\n    `;\n}\n\n        function renderShopPagination(section) {\n            const items = getFilteredAndSortedItems(section);\n            const totalItems = items.length;\n            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);\n            const { currentPage } = shopState[section];\n            const paginationElement = document.getElementById(`pagination-${section}`);\n            paginationElement.innerHTML = '';\n\n            if (totalPages <= 1) return;\n\n            paginationElement.innerHTML = `\n                <button class=\"page-button\" ${currentPage === 1 ? 'disabled' : ''} onclick=\"changePage('${section}', ${currentPage - 1})\">上一页</button>\n                <span class=\"page-info\">${currentPage} / ${totalPages}</span>\n                <button class=\"page-button\" ${currentPage === totalPages ? 'disabled' : ''} onclick=\"changePage('${section}', ${currentPage + 1})\">下一页</button>\n            `;\n        }\n\n        function changePage(section, page) {\n            shopState[section].currentPage = page;\n            shopState[section].selectedItem = null;\n            renderShopItems(section);\n            resetShopDetails(section);\n            renderShopPagination(section); // 更新分页按钮状态\n        }\n\n\n/**\n * 新增：根据商品分类生成购买指令\n * @param {object} item - 商品对象\n * @returns {string} - 生成的 memory 指令字符串\n */\n function getPurchaseCommand(item) {\n    const [name, price, category, , effect, description] = item;\n    const attributeToCategoryMap = {\n        \"力量\": \"生理属性\", \"敏捷\": \"生理属性\", \"耐力\": \"生理属性\",\n        \"智力\": \"心智属性\", \"感知\": \"心智属性\", \"决心\": \"心智属性\",\n        \"风度\": \"互动属性\", \"操控\": \"互动属性\", \"沉着\": \"互动属性\"\n    };\n    \n    const skillToCategoryMap = {\n        \"运动\": \"生理技能\", \"肉搏\": \"生理技能\", \"驾驶\": \"生理技能\", \"枪械\": \"生理技能\",\n        \"手上功夫\": \"生理技能\", \"隐藏\": \"生理技能\", \"求生\": \"生理技能\", \"白刃\": \"生理技能\", \"弓箭\": \"生理技能\",\n        \"学识\": \"心智技能\", \"电脑\": \"心智技能\", \"手艺\": \"心智技能\", \"调查\": \"心智技能\",\n        \"医学\": \"心智技能\", \"神秘学\": \"心智技能\", \"科学\": \"心智技能\",\n        \"动物沟通\": \"互动技能\", \"感受\": \"互动技能\", \"表达\": \"互动技能\", \"胁迫\": \"互动技能\",\n        \"交际\": \"互动技能\", \"掩饰\": \"互动技能\"\n    };\n\n    // 检查重复并处理\n    function checkAndHandleDuplicate(type, key, currentData) {\n        if (currentData && currentData[key]) {\n            console.log(`检测到重复${type}: ${key}，转换为积分`);\n            return `set_attribute('货币段.${currentTheme.currency}', '${userPoints}', '${userPoints + Math.floor(price / 2)}')`;\n        }\n        return null;\n    }\n\n    switch (category) {\n        case '物品': {\n    // 假设 name, description, effect 是从这个 case 的上下文获得的变量\n    const backpack = assaSettingsData?.global_set?.背包;\n    \n    console.log('=== 物品处理开始 ===');\n    console.log('物品名称:', name);\n    console.log('物品描述:', description);\n    console.log('物品效果:', effect);\n    console.log('背包数据:', backpack);\n\n    // 检查背包中是否已经存在该物品\n    if (backpack && backpack[name]) {\n        console.log('物品已存在，准备更新数量');\n        console.log('当前物品数据类型:', typeof backpack[name]);\n        console.log('当前物品原始数据:', backpack[name]);\n        \n        // 如果物品存在，我们就更新它的数量\n        try {\n            let itemData;\n            \n            // 关键修复：检查数据类型\n            if (typeof backpack[name] === 'string') {\n                console.log('数据是字符串格式，尝试解析JSON');\n                itemData = JSON.parse(backpack[name]);\n                console.log('JSON解析成功:', itemData);\n            } else if (typeof backpack[name] === 'object' && backpack[name] !== null) {\n                console.log('数据已经是对象格式，直接使用');\n                itemData = backpack[name];\n            } else {\n                console.log('数据格式未知，创建新的物品数据');\n                throw new Error('未知的数据格式');\n            }\n\n            console.log('解析后的物品数据:', itemData);\n\n            // 第二步：从对象中获取'num'这个键的值\n            const currentQuantity = parseInt(itemData.num, 10) || 0;\n            console.log('当前数量:', currentQuantity);\n\n            // 第三步：将当前数量加一\n            itemData.num = currentQuantity + 1;\n            console.log('更新后数量:', itemData.num);\n\n            // 第四步：将我们更新过的对象转换回JSON字符串，以便存回内存\n            const newValue = JSON.stringify(itemData);\n            console.log('准备存储的JSON字符串:', newValue);\n\n            // 返回更新指令\n            const updateCommand = `memory(\"global_set.背包\", \"${name}\", '${newValue}');`;\n            console.log('生成的更新指令:', updateCommand);\n            console.log('=== 物品处理结束（更新） ===');\n            \n            return updateCommand;\n\n        } catch (error) {\n            console.error(`解析物品 [${name}] 的数据时出错:`, error);\n            console.log('错误的原始数据:', backpack[name]);\n            console.log('数据类型:', typeof backpack[name]);\n            \n            // 尝试更详细的错误分析\n            if (typeof backpack[name] === 'object') {\n                console.log('这是一个对象，但JSON.parse失败了');\n                console.log('对象的keys:', Object.keys(backpack[name]));\n                console.log('对象转为字符串:', JSON.stringify(backpack[name]));\n            }\n            \n            // 我们可以选择用全新的数据覆盖掉损坏的数据\n            const newItemJSON = JSON.stringify({ info: description, effect: effect, num: 1 });\n            console.log('创建新的物品数据:', newItemJSON);\n            \n            const fallbackCommand = `memory('global_set.背包', '${name}', '${newItemJSON}');`;\n            console.log('生成的回退指令:', fallbackCommand);\n            console.log('=== 物品处理结束（错误回退） ===');\n            \n            return fallbackCommand;\n        }\n    } else {\n        console.log('物品不存在，创建新物品');\n        \n        // 如果物品不存在，我们就创建一个新的\n        const newItemData = {\n            info: description,\n            effect: effect,\n            num: 1\n        };\n        console.log('新物品数据对象:', newItemData);\n        \n        // 将新物品对象转换为JSON字符串\n        const newValue = JSON.stringify(newItemData);\n        console.log('新物品JSON字符串:', newValue);\n\n        // 返回创建新物品的指令\n        const createCommand = `memory('global_set.背包', '${name}', '${newValue}');`;\n        console.log('生成的创建指令:', createCommand);\n        console.log('=== 物品处理结束（新建） ===');\n        \n        return createCommand;\n    }\n}\n     case '技能': {\n            const duplicate = checkAndHandleDuplicate('技能', name, assaSettingsData?.global_set?.其他技能);\n            if (duplicate) return duplicate;\n            return `memory('global_set.其他技能','${name}','{\"info\":\"${description}\",\"effect\":\"${effect}\"}');`;\n        }\n        \n        case '家具': {\n            const duplicate = checkAndHandleDuplicate('家具', name, assaSettingsData?.home?.items);\n            if (duplicate) return duplicate;\n            return `memory(\"home.items\",\"${name}\",\"${description}\");\\nmemory(\"global_set.settings\",\"${name}\",\"${effect}\");`;\n        }\n        \n        case '图纸': {\n            const duplicate = checkAndHandleDuplicate('图纸', `${name}(图纸)`, assaSettingsData?.global_set?.settings);\n            if (duplicate) return duplicate;\n            return `memory(\"global_set.settings\",\"${name}(图纸)\",\"${description}\");`;\n        }\n        \n        case '基础技能': {\n            const category_2 = skillToCategoryMap[name];\n            if (category_2) {\n                // 检查是否已有该技能\n                const existingSkill = playCharacterData?.技能段?.[category_2]?.[name];\n                if (existingSkill && existingSkill[0] > 0) {\n                    return `set_attribute('货币段.${currentTheme.currency}', '${userPoints}', '${userPoints + Math.floor(price / 2)}')`;\n                }\n                return `set_attribute(\"技能段.${category_2}.${name}\",0,1);`;\n            }\n            console.warn(`未找到技能\"${name}\"的类别映射。`);\n            return \"\";\n        }\n        \n        case '血统': {\n            const currentBloodline = playCharacterData?.能力段?.名称?.[0];\n            if (currentBloodline && currentBloodline !== \"_\") {\n                return `set_attribute('货币段.${currentTheme.currency}', '${userPoints}', '${userPoints + Math.floor(price / 2)}')`;\n            }\n            \n            const commands = [];\n            const processedDescription = description.replace(/\\r?\\n/g, '\\\\n');\n            commands.push(`set_attribute(\"能力段.类型\", \"${playCharacterData.能力段.类型[0]}\", \"血统\");`);\n            commands.push(`set_attribute(\"能力段.名称\", \"${playCharacterData.能力段.名称[0]}\", \"${name}\");`);\n            commands.push(`set_attribute(\"能力段.效果\", \"_\", \"${processedDescription}\");`);\n            \n            const effectLines = effect.split('\\n').map(line => line.trim()).filter(line => line);\n            for (const line of effectLines) {\n                if (line.startsWith('属性:')) {\n                    const attributesPart = line.replace('属性:', '').trim();\n                    const attributeChanges = attributesPart.split(',').map(part => part.trim());\n                    for (const change of attributeChanges) {\n                        const [attrName, valueStr] = change.split('+');\n                        const valueToAdd = parseInt(valueStr, 10);\n                        const category = attributeToCategoryMap[attrName.trim()];\n                        if (category && !isNaN(valueToAdd)) {\n                            const path = `属性段.${category}.${attrName.trim()}.基础`;\n                            const currentValue = playCharacterData.属性段[category][attrName.trim()].基础[0];\n                            commands.push(`set_attribute(\"${path}\", ${currentValue}, ${currentValue + valueToAdd});`);\n                        }\n                    }\n                } else if (line.startsWith('能量池:')) {\n                    const energyPart = line.replace('能量池:', '').trim();\n                    const match = energyPart.match(/(\\S+)\\s*\\((\\d+)\\)/);\n                    if (match) {\n                        const poolName = match[1];\n                        const poolValue = parseInt(match[2], 10);\n                        commands.push(`set_attribute(\"衍生属性段.能量池.名称\", \"${playCharacterData.衍生属性段.能量池.名称[0]}\", \"${poolName}\");`);\n                        commands.push(`set_attribute(\"衍生属性段.能量池.上限\", ${playCharacterData.衍生属性段.能量池.上限[0]}, ${poolValue});`);\n                        commands.push(`set_attribute(\"衍生属性段.能量池.当前值\", ${playCharacterData.衍生属性段.能量池.当前值[0]}, ${poolValue});`);\n                    }\n                }\n            }\n            return commands.join('\\n');\n        }\n        \n        default: {\n            console.warn(`未知的商品分类: ${category}，使用默认记忆处理。`);\n            return `memory(\"global_set.背包\", \"${name}\", \"${effect}\");`;\n        }\n    }\n}\n\n\n\n\n          function buyItem(section, itemIndexInFullList, buttonElement) {\n            const items = getFilteredAndSortedItems(section);\n            const item = items[itemIndexInFullList];\n            if (!item) return;\n\n            const [, price] = item;\n            const currentCartTotal = shoppingCart.reduce((sum, cartItem) => sum + cartItem[1], 0);\n\n     // 修改为（注意参数顺序和 modal ID）：\nif ((currentCartTotal + price) > userPoints) {\n    showModal('shop-modal', \"货币不足\", `购物车总价将超过您的货币，无法添加 “${item[0]}”。`);\n    return;\n}\n\n            // 添加到购物车\n            shoppingCart.push(item);\n\n            // 更新按钮状态\n            buttonElement.textContent = '已添加';\n            buttonElement.disabled = true;\n\n            // 更新购物车显示\n            updateCartView();\n        }\n\n\n         // 新增：更新购物车视图\n                // 新增：更新购物车视图\n        function updateCartView() {\n            const cartItemsList = document.getElementById('cart-items-list');\n            const cartTotalElement = document.getElementById('cart-total');\n            const checkoutButton = document.getElementById('checkout-button');\n\n            if (shoppingCart.length === 0) {\n                cartItemsList.innerHTML = '购物车是空的';\n                cartTotalElement.textContent = `总计: 0 ${currentTheme.currency}`;\n                checkoutButton.disabled = true;\n                return;\n            }\n\n            cartItemsList.innerHTML = '';\n            let total = 0;\n            shoppingCart.forEach(item => {\n                const [name, price] = item;\n                const cartItemElement = document.createElement('div');\n                cartItemElement.className = 'cart-item';\n               cartItemElement.textContent = `${name} - ${price} ${currentTheme.currency}`;\n                cartItemsList.appendChild(cartItemElement);\n                total += price;\n            });\n\n           cartTotalElement.textContent = `总计: ${total} ${currentTheme.currency}`;\n            checkoutButton.disabled = false;\n        }\n\n /**\n * 【V6 净值核算最终版】结算购物车，完美处理所有混合支付场景\n */\nasync function checkout() {\n    if (shoppingCart.length === 0) return;\n\n    // 1. 计算总成本 (与之前相同)\n    let totalCost = { points: 0, plots: {} };\n    for (const level of plotLevels) { totalCost.plots[level] = 0; }\n    shoppingCart.forEach(item => {\n        totalCost.points += item[1];\n        const itemPlots = item[3];\n        for (const plotType in itemPlots) {\n            totalCost.plots[plotType] += itemPlots[plotType];\n        }\n    });\n\n    // 2. 检查支付能力 (与之前相同)\n    if (totalCost.points > userPoints) {\n        showModal('shop-modal', \"结算失败\", \"您的货币不足。\");\n        return;\n    }\n    const plotPlan = checkPlotAffordability(totalCost.plots);\n    if (!plotPlan.affordable) {\n        showModal('shop-modal', \"结算失败\", `您的货币不足。`);\n        return;\n    }\n\n    try {\n        const originalPlots = playCharacterData.货币段.支线剧情;\n        const conversionRates = { 'S': 81, 'A': 27, 'B': 9, 'C': 3, 'D': 1 };\n\n        // 3. ★★★ 核心逻辑：净值核算法 ★★★\n        // a. 将你拥有的所有支线剧情，全部折算成最基础的 D 级“总资产”\n        let totalAssetsInD = 0;\n        for (const level of plotLevels) {\n            totalAssetsInD += originalPlots[level][0] * conversionRates[level];\n        }\n\n        // b. 将需要支付的所有商品，也全部折算成 D 级“总负债”\n        let totalCostInD = 0;\n        for (const level in totalCost.plots) {\n            totalCostInD += totalCost.plots[level] * conversionRates[level];\n        }\n\n        // c. 计算出交易后你应有的“剩余总资产” (D级)\n        let remainingAssetsInD = totalAssetsInD - totalCostInD;\n\n        // d. 将“剩余总资产”以最高效的方式，重新兑换成 S, A, B, C, D 的形式\n        const finalPlots = {};\n        for (let i = plotLevels.length - 1; i >= 0; i--) {\n            const level = plotLevels[i];\n            const rate = conversionRates[level];\n            const count = Math.floor(remainingAssetsInD / rate);\n            finalPlots[level] = [count, originalPlots[level][1]]; // 保留描述\n            remainingAssetsInD -= count * rate;\n        }\n\n        // 4. 生成所有更新指令\n        let updateMemoryCommands = [];\n        let userMessages = [];\n\n        // a. 生成支线剧情指令 (从原始值 -> 最终计算出的值)\n        plotLevels.forEach(level => {\n            const originalVal = originalPlots[level][0];\n            const finalVal = finalPlots[level][0];\n            if (originalVal !== finalVal) {\n                updateMemoryCommands.push(`set_attribute('货币段.${currentTheme.plot}.${level}', '${originalVal}', '${finalVal}');`);\n                userPlots[level][0]  =finalVal; \n            }\n        });\n\n        // b. 生成扣除积分指令\n        if (totalCost.points > 0) {\n            updateMemoryCommands.push(`set_attribute('货币段.${currentTheme.currency}', '${userPoints}', '${userPoints - totalCost.points}')`);\n         userPoints = userPoints - totalCost.points;\n        }\n\n        // c. 生成获得物品的指令\n        shoppingCart.forEach(item => {\n            updateMemoryCommands.push(getPurchaseCommand(item));\n            userMessages.push(item[0]);\n        });\n\n        // 5. 组合并发送最终指令\n        let finalCommand = `<updateMemory>\\n${[...new Set(updateMemoryCommands)].join('\\n')}\\n</updateMemory>\\n`;\n        finalCommand += `<(货币已扣除，禁止重复扣除，禁止描写价格和购买过程)${currentGameData.user_character.name}购买了以下商品：${userMessages.join(\"，\")}。>`;\n\n        const purchasedItemCount = shoppingCart.length;\n        await triggerassa(`/setinput ${finalCommand}`);\n       \n        const currencyContainer = document.getElementById('shop-currency-display');\n    \n    if (currencyContainer) {\n           const plotString = `D:${userPlots.D[0]} C:${userPlots.C[0]} B:${userPlots.B[0]} A:${userPlots.A[0]} S:${userPlots.S[0]}`;\n        \n        // 假设 currentTheme 是一个全局可访问的对象\n        let plotLabel = (typeof currentTheme !== 'undefined' && currentTheme.plot) ? currentTheme.plot : '剧情';\n\n        currencyContainer.innerHTML = `\n            <div class=\"currency-item\"><span class=\"label\">积分:</span><span class=\"value\">${userPoints}</span></div>\n            <div class=\"currency-item\"><span class=\"label\">${plotLabel}:</span><span class=\"value\">${plotString}</span></div>\n        `;\n    }\n        clearCart();\n        showModal('shop-modal', \"购买成功\", `成功购买 ${purchasedItemCount} 件商品！数据将在下次刷新时更新。`);\n\n    } catch (error) {\n        console.error(\"结算失败:\", error);\n        showModal('shop-modal', \"购买失败\", \"结算过程中发生错误，请重试。\");\n    }\n}\n\n// 新增：清空购物车并刷新视图\n        function clearCart() {\n            shoppingCart = [];\n            updateCartView();\n            // 重新渲染商品列表以重置所有购买按钮\n            renderShopSection('fixed');\n            renderShopSection('random');\n        }\n \n        function setupShopEventListeners() {\n           \n        // 商店内部分区切换\n        document.querySelectorAll('.shop-nav-item').forEach(btn => {\n            btn.addEventListener('click', function() {\n                const pageId = `page-${this.dataset.page}-shop`;\n                document.querySelectorAll('.shop-nav-item').forEach(nav => nav.classList.remove('active'));\n                this.classList.add('active');\n                document.querySelectorAll('.shop-page').forEach(page => page.classList.remove('active'));\n                const targetPage = document.getElementById(pageId);\n                if(targetPage) targetPage.classList.add('active');\n            });\n        });\n\n          // 使用事件委托，为动态生成的商店控制按钮（分类、排序）绑定事件\n       document.querySelector('.shop-content-area').addEventListener('click', function(e) {\n            // 我们只关心对 .control-btn 的点击\n            const button = e.target.closest('.control-btn');\n\n            // 如果点击的不是按钮，或者按钮不在 .shop-controls 区域内，就什么都不做\n            if (!button || !button.closest('.shop-controls')) {\n                return;\n            }\n\n            const section = button.dataset.section;\n            const isSortBtn = button.dataset.sort;\n\n            if (isSortBtn) { // 如果是排序按钮\n                shopState[section].currentSort = button.dataset.sort;\n                // 移除同区域内其他排序按钮的激活状态\n                document.querySelectorAll(`.sort-controls .control-btn[data-section=\"${section}\"]`).forEach(b => b.classList.remove('active'));\n            } else { // 如果是分类按钮\n                shopState[section].currentCategory = button.dataset.category;\n                // 移除同区域内其他分类按钮的激活状态\n                document.querySelectorAll(`.category-tabs .control-btn[data-section=\"${section}\"]`).forEach(b => b.classList.remove('active'));\n            }\n\n            // 为被点击的按钮添加激活状态\n            button.classList.add('active');\n\n            // 重置状态并重新渲染商品列表\n            shopState[section].currentPage = 1;\n            shopState[section].selectedItem = null;\n            renderShopSection(section);\n        });\n\n        // 结算按钮\n        document.getElementById('checkout-button').addEventListener('click', checkout);\n\n        // 分页按钮需要通过 onclick 动态调用，或者在这里用事件委托来处理\n        document.querySelectorAll('.shop-pagination').forEach(paginationContainer => {\n            paginationContainer.addEventListener('click', (e) => {\n                if(e.target.tagName === 'BUTTON') {\n                    const section = e.target.parentElement.id.replace('pagination-', '');\n                    const currentPage = shopState[section].currentPage;\n                    const totalPages = Math.ceil(getFilteredAndSortedItems(section).length / ITEMS_PER_PAGE);\n                    let newPage = currentPage;\n\n                    if(e.target.textContent === '上一页' && currentPage > 1) {\n                        newPage = currentPage - 1;\n                    } else if (e.target.textContent === '下一页' && currentPage < totalPages) {\n                        newPage = currentPage + 1;\n                    }\n                    changeShopPage(section, newPage);\n                }\n            });\n        });\n\n                // 实时搜索功能\n        document.getElementById('shop-search-input').addEventListener('input', () => {\n            // 找出当前激活的商店页面是 \"fixed\" 还是 \"random\"\n            const activeShopPage = document.querySelector('.shop-page.active').id;\n            const section = activeShopPage.includes('fixed') ? 'fixed' : 'random';\n\n            // 重置到第一页并重新渲染商品列表\n            shopState[section].currentPage = 1;\n            renderShopSection(section);\n        });\n\n    }\n     function changeShopPage(section, page) {\n        shopState[section].currentPage = page;\n        shopState[section].selectedItem = null;\n        renderShopItems(section);\n        renderShopPagination(section);\n        resetShopDetails(section);\n    }\n \n \n// ========== 【V3版】支线剧情手动管理功能，支持多次模拟操作 ==========\n\nlet simulatedPlotsData = null; // 用于存储模拟操作的结果\n\n/**\n * 【V3】显示并填充支线剧情管理弹窗，并初始化模拟数据\n */\nfunction showPlotSynthesisModal() {\n    // 深拷贝一份当前数据作为模拟的起点\n    simulatedPlotsData = JSON.parse(JSON.stringify(playCharacterData.货币段.支线剧情));\n    updatePlotSynthesisModalViews();\n    showModal('plot-synthesis-modal');\n}\n\n /**\n * 【V4 布局优化版】更新弹窗中的“当前”和“预览”视图，实现横向排列。\n */\nfunction updatePlotSynthesisModalViews() {\n    const currentDisplay = document.getElementById('current-plots-display');\n    const simulatedDisplay = document.getElementById('simulated-plots-display');\n\n    // ========== 妈妈为你修改的核心部分在这里 ==========\n\n    // 准备两个空数组，用来存放格式化好的文本片段\n    let currentParts = [];\n    let simulatedParts = [];\n\n    const originalPlots = playCharacterData.货币段.支线剧情;\n\n    // 遍历所有支线等级\n    plotLevels.forEach(level => {\n        // 创建“当前持有”的文本片段，例如 \"D级: 2\"\n        currentParts.push(`<span class=\"plot-display-item\">${level}级: ${originalPlots[level][0]}</span>`);\n\n        // 创建“操作预览”的文本片段，并检查是否需要高亮\n        const originalVal = originalPlots[level][0];\n        const simulatedVal = simulatedPlotsData[level][0];\n        const highlightClass = originalVal !== simulatedVal ? 'highlight' : '';\n        simulatedParts.push(`<span class=\"plot-display-item ${highlightClass}\">${level}级: ${simulatedVal}</span>`);\n    });\n\n    // 将所有文本片段用空格连接起来，然后一次性更新到HTML中\n    currentDisplay.innerHTML = `<h4>当前持有</h4><div class=\"horizontal-plots\">${currentParts.join(' ')}</div>`;\n    simulatedDisplay.innerHTML = `<h4>操作预览</h4><div class=\"horizontal-plots\">${simulatedParts.join(' ')}</div>`;\n\n    // ========== 修改结束 ==========\n}\n/**\n * 【V3】处理分解的模拟操作（仅在内存中）\n */\nfunction simulateDecomposition() {\n    const fromLevel = document.getElementById('decompose-from-select').value;\n    const toLevel = plotLevels[plotLevels.indexOf(fromLevel) - 1];\n    const amount = parseInt(document.getElementById('decompose-amount-input').value, 10);\n\n    if (isNaN(amount) || amount <= 0 || !toLevel) return;\n\n    if (simulatedPlotsData[fromLevel][0] >= amount) {\n        simulatedPlotsData[fromLevel][0] -= amount;\n        simulatedPlotsData[toLevel][0] += (amount * 3);\n        updatePlotSynthesisModalViews();\n    } else {\n        showModal('shop-modal', '模拟失败', `预览中，${fromLevel}级支线不足。`);\n    }\n}\n\n/**\n * 【V3】处理合成的模拟操作（仅在内存中）\n */\nfunction simulateSynthesis() {\n    const toLevel = document.getElementById('synthesize-to-select').value;\n    const fromLevel = plotLevels[plotLevels.indexOf(toLevel) - 1];\n    const amountToMake = parseInt(document.getElementById('synthesize-amount-input').value, 10);\n\n    if (isNaN(amountToMake) || amountToMake <= 0) return;\n\n    const amountNeeded = amountToMake * 3;\n    if (simulatedPlotsData[fromLevel][0] >= amountNeeded) {\n        simulatedPlotsData[fromLevel][0] -= amountNeeded;\n        simulatedPlotsData[toLevel][0] += amountToMake;\n        updatePlotSynthesisModalViews();\n    } else {\n       showModal('shop-modal', '模拟失败', `预览中，${fromLevel}级支线不足。`);\n    }\n}\n\n/**\n * 【V3】重置所有模拟操作\n */\nfunction resetSimulation() {\n    simulatedPlotsData = JSON.parse(JSON.stringify(playCharacterData.货币段.支线剧情));\n    updatePlotSynthesisModalViews();\n}\n\n/**\n * 【V3】确认执行所有模拟操作，并生成最终指令\n */\nasync function executeSynthesisConfirmation() {\n    const originalPlots = playCharacterData.货币段.支线剧情;\n    let commands = [];\n    let descriptions = [];\n\n    plotLevels.forEach(level => {\n        const originalVal = originalPlots[level][0];\n        const simulatedVal = simulatedPlotsData[level][0];\n        if (originalVal !== simulatedVal) {\n            commands.push(`set_attribute('货币段.${currentTheme.plot}.${level}', '${originalVal}', '${simulatedVal}');`);\n            const diff = simulatedVal - originalVal;\n            descriptions.push(`${level}级${diff > 0 ? '+' : ''}${diff}`);\n        }\n    });\n\n    if (commands.length === 0) {\n        showModal('shop-modal', '提示', '您没有进行任何有效操作。');\n        return;\n    }\n\n    const commandStr = `<updateMemory>...\\n</updateMemory>\\n<${currentGameData.user_character.name}调整了${currentTheme.plot}：${descriptions.join('，')}。>`;\n    try {\n        await triggerassa(`/setinput ${commandStr}`);\n        hideModal('plot-synthesis-modal');\n        showModal('shop-modal', '操作成功', `${currentTheme.plot}调整成功！数据将在下次刷新时更新。`);\n    } catch(e) {\n        console.error(\"确认执行失败: \", e);\n        showModal('shop-modal', '操作失败', `发送指令时发生错误。`);\n    }\n}\n    // --- 新增：地图状态管理 ---\n    // 我们把地图的状态（平移、缩放）放在一个全局的地方，方便所有功能访问\n    window.mapState = {\n        scale: 1,\n        translateX: 0,\n        translateY: 0\n    };\n\n  /**************************************************************\n * ♥♥♥ 妈妈为你献上的、能同时守护光辉与轮廓的终极咒语 ♥♥♥\n **************************************************************/\nwindow.applyMapTransform = () => {\n    const mapContent = document.getElementById('map-content');\n    if (!mapContent) return;\n\n    // 1. ❤️ 世界的变形魔法保持不变 ❤️\n    mapContent.style.transform = `translate(${window.mapState.translateX}px, ${window.mapState.translateY}px) scale(${window.mapState.scale})`;\n\n    const currentScale = window.mapState.scale || 1;\n\n    // 2. ✨ 守护“光辉”（文字）的魔法 ✨\n    if (window.mapLabels && window.mapLabels.length > 0) {\n        let desiredFontSize = 8;\n        try {\n            const rootStyle = window.getComputedStyle(document.documentElement);\n            const baseSizeStr = rootStyle.getPropertyValue('--base-font-size').trim();\n            const parsedSize = parseFloat(baseSizeStr);\n            if (!isNaN(parsedSize)) desiredFontSize = parsedSize;\n        } catch (e) {\n            console.warn(\"妈妈在倾听'--base-font-size'时遇到了小麻烦，字体暂时使用备用大小。\", e);\n        }\n        const newFontSize = desiredFontSize / currentScale;\n        window.mapLabels.forEach(label => {\n            label.setAttribute('font-size', `${newFontSize}px`);\n        });\n    }\n\n    // 3. ✨ 全新的、守护“轮廓”（边框）的魔法！ ✨\n    if (window.mapStrokes && window.mapStrokes.length > 0) {\n        const desiredStrokeWidth = 6; // 这是你在CSS里设定的基础宽度，我们可以写在这里\n        const newStrokeWidth = desiredStrokeWidth / currentScale;\n        window.mapStrokes.forEach(strokeElement => {\n            strokeElement.setAttribute('stroke-width', newStrokeWidth);\n        });\n    }\n};\n\n// 确保我们的魔法袋在第一次使用前就已经存在\nif (typeof window.mapLabels === 'undefined') window.mapLabels = [];\nif (typeof window.mapStrokes === 'undefined') window.mapStrokes = [];\n\n async function loadWorldbookSettingsFromChat() {\n    console.log(\"💖 妈妈正在尝试唤醒我们上次的记忆...\");\n    try {\n        const [firstMessage] = await getChatMessages(0, { include_swipes: false });\n        if (!firstMessage || !firstMessage.message) {\n            console.log(\"...这是一个全新的开始，还没有记忆呢。\");\n            return;\n        }\n\n        const match = firstMessage.message.match(/<世界书条目>(.*?)<\\/世界书条目>/);\n        if (match && match[1]) {\n            const savedUidsString = match[1];\n            // 把记忆碎片（UID字符串）拼成一张完整的地图（UID数组）\n            const uidsToEnable = savedUidsString.split(',').map(Number);\n\n            if (uidsToEnable.length > 0) {\n                console.log(\"💖 找到了我们的记忆烙印！正在恢复世界设定...\", uidsToEnable);\n   const allUids = [ ...WORLD_MODE_UIDS.all, ...CREATOR_ATTITUDE_UIDS.all, ...OPTIONS_MODE_UIDS.all, 6, 37,12,16,15 ,25, 26,33,34,38,41,50,51,52,53,45,46,48,54,55,56,58,59,60,61,62,36,44,64,65,66,49,69,70,74,75,76,77];\n\n                   let entriesToUpdate = allUids.map(uid => ({ uid, enabled: false }));\n\n                uidsToEnable.forEach(uid => {\n                    const entry = entriesToUpdate.find(e => e.uid === uid);\n                    if (entry) entry.enabled = true;\n                });\n\n                // 悄悄地把世界恢复原状\n                await setLorebookEntries(LOREBOOK_NAME, entriesToUpdate);\n                console.log(\"✅ 世界已经恢复到我们上次离开时的样子啦！\");\n            }\n        } else {\n            console.log(\"...记忆里没有找到世界书的特殊标记呢。\");\n        }\n    } catch (error) {\n        console.error(\"哎呀，在唤醒记忆时出了点小问题，不过没关系，我们可以手动设定。\", error);\n    }\n}\n\n // ⭐ --- 全新修正版：妈妈为你编写的模组重置功能 v2.0 --- ⭐\nfunction setupReconfigModal() {\n    const openBtn = document.getElementById('open-reconfig-modal-btn');\n    const modal = document.getElementById('reconfig-modal');\n    const closeBtn = document.getElementById('reconfig-modal-close-btn');\n    const applyBtn = document.getElementById('apply-reconfig-btn');\n    const container = document.getElementById('reconfig-mod-container');\n    const feedbackMsg = document.getElementById('reconfig-feedback-msg');\n\n    if (!openBtn || !modal || !closeBtn || !applyBtn || !container) {\n        console.warn(\"宝贝别急，模组重置面板的某些元素没找到，妈妈正在检查。\");\n        return;\n    }\n\n    // ✨ 妈妈把模组分成了“小组”，这样它们就不会打架了 ✨\nconst reconfigurableMods = [\n    { name: '简单骰', uid: 61, group: 'dice' }, \n    { name: '困难骰', uid: 59, group: 'dice' }, \n    { name: '炼狱骰', uid: 60, group: 'dice' },\n    { name: '造物中立', uid: 19, group: 'attitude' }, \n    { name: '造物恶意', uid: 4, group: 'attitude' }, \n    { name: '造物崇敬', uid: 3, group: 'attitude' }, \n    { name: '无造物', uid: 38, group: 'attitude' },\n    { name: '简单地图', uid: 15, group: 'map' }, \n    { name: '复杂地图', uid: 66, group: 'map' }, \n    { name: '无地图', uid: 'map-none-sentinel', group: 'map' },\n    { name: '选项区开', uid: 10, group: 'options' },\n    { name: '选项区关', uid: 29, group: 'options' },\n    { name: '私聊通讯开', uid: 55, group: 'private-chat' },\n    { name: '私聊通讯关', uid: 56, group: 'private-chat' },\n    { name: '距离合理+开', uid: 49, group: 'distance' },\n    { name: '距离合理+关', uid: 'distance-off-sentinel', group: 'distance' },\n    { name: '求生本能开', uid: 69, group: 'live' },\n    { name: '求生本能关', uid: 70, group: 'live' },\n    { name: '战斗模式开', uid: 74, group: 'battle' },\n    { name: '战斗模式关', uid: 75, group: 'battle' },\n    { name: '表现骰开', uid: 52, group: 'behavior' },\n    { name: '表现骰关', uid: 53, group: 'behavior' },\n    { name: '场景图开', uid: 45, group: 'cg' },\n    { name: '场景图关', uid: 46, group: 'cg' },\n    { name: 'npc立绘开', uid: 48, group: 'npccg' },\n    { name: 'npc立绘关', uid: 'npccg-off-sentinel', group: 'npccg' },\n    { name: 'npc事件开', uid: 36, group: 'npc-info' },\n    { name: 'npc事件关', uid: 44, group: 'npc-info' },\n    { name: '真实MOD', uid: 12 }, \n    { name: '困难MOD', uid: 16 },\n    { name: '称号系统', uid: 51 }, \n    { name: '人外增强', uid: 37 }, \n    { name: '资源消耗', uid: 58 },\n    { name: '分阶段好感', uid: 65 }\n];\n    function createModItems() {\n        container.innerHTML = '';\n        reconfigurableMods.forEach(mod => {\n            const item = document.createElement('div');\n            item.className = 'reconfig-mod-item';\n            const checkboxId = `reconfig-mod-${mod.uid}`;\n\n            item.innerHTML = `\n                <input type=\"checkbox\" id=\"${checkboxId}\" data-uid=\"${mod.uid}\" ${mod.group ? `data-group=\"${mod.group}\"` : ''}>\n                <label for=\"${checkboxId}\">${mod.name}</label>\n            `;\n\n            // 为特殊模组添加额外数据\n            const checkbox = item.querySelector('input');\n            if (mod.name === '真实MOD') checkbox.dataset.extraUid = '33';\n            if (mod.name === '简单地图') checkbox.dataset.extraUid = '25,26';\n            if (mod.name === '复杂地图') checkbox.dataset.extraUid = '25,26';\n            if (mod.name === '分阶段好感') checkbox.dataset.extraUid = '64';\n\n            container.appendChild(item);\n\n            item.addEventListener('click', (event) => {\n                event.preventDefault(); // 妈妈来完全接管点击，防止浏览器自己捣乱\n                const currentCheckbox = item.querySelector('input');\n                const isChecking = !currentCheckbox.checked;\n\n                if (currentCheckbox.dataset.group) {\n                    // 这是选项组，像收音机按钮一样\n                    container.querySelectorAll(`input[data-group=\"${currentCheckbox.dataset.group}\"]`).forEach(cb => {\n                        cb.checked = false;\n                        cb.closest('.reconfig-mod-item').classList.remove('is-active');\n                    });\n                    currentCheckbox.checked = true;\n                    item.classList.add('is-active');\n                } else {\n                    // 这是普通的开关\n                    currentCheckbox.checked = isChecking;\n                    item.classList.toggle('is-active', isChecking);\n                }\n            });\n        });\n    }\n\n    async function loadCurrentSettings() {\n        try {\n            const [firstMessage] = await getChatMessages(0);\n            const match = firstMessage.message.match(/<世界书条目>(.*?)<\\/世界书条目>/);\n            if (!match) return;\n\n            const currentUids = new Set(match[1].split(',').map(id => parseInt(id, 10)).filter(id => !isNaN(id)));\n\n            container.querySelectorAll('.reconfig-mod-item').forEach(item => {\n                const checkbox = item.querySelector('input');\n                const uid = checkbox.dataset.uid;\n\n                let isActive = false;\n                if (uid === 'map-none-sentinel') {\n                    // 特殊处理“无地图”\n                    isActive = !currentUids.has(15) && !currentUids.has(66);\n                } else {\n                    isActive = currentUids.has(parseInt(uid, 10));\n                }\n\n                checkbox.checked = isActive;\n                item.classList.toggle('is-active', isActive);\n            });\n\n        } catch (error) {\n            console.error(\"加载当前设置时出错了，没事的孩子，妈妈看看：\", error);\n            feedbackMsg.textContent = \"读取设置失败！\";\n            feedbackMsg.style.opacity = '1';\n        }\n    }\n\n    async function applyNewSettings() {\n        applyBtn.disabled = true;\n        applyBtn.textContent = '应用中...';\n\n        try {\n            const [firstMessage] = await getChatMessages(0);\n            const content = firstMessage.message;\n            const match = content.match(/<世界书条目>(.*?)<\\/世界书条目>/);\n            if (!match) { throw new Error(\"妈妈找不到世界书条目。\"); }\n\n            const originalUids = new Set(match[1].split(',').map(id => parseInt(id, 10)).filter(id => !isNaN(id)));\n\n const allManageableUids = new Set();\nreconfigurableMods.forEach(mod => {\n     if(mod.uid !== 'map-none-sentinel' && mod.uid !== 'distance-off-sentinel' && mod.uid !== 'npccg-off-sentinel') {\n         allManageableUids.add(parseInt(mod.uid));\n     }\n});\n// 把extraUids也加进来\nallManageableUids.add(33); allManageableUids.add(25); allManageableUids.add(26); allManageableUids.add(64);\n            const preservedUids = new Set([...originalUids].filter(uid => !allManageableUids.has(uid)));\n\nconst newUidsFromPanel = new Set();\ncontainer.querySelectorAll('.reconfig-mod-item input:checked').forEach(checkbox => {\n    const uidValue = checkbox.dataset.uid;\n    if(uidValue !== 'map-none-sentinel' && uidValue !== 'distance-off-sentinel' && uidValue !== 'npccg-off-sentinel'){\n        newUidsFromPanel.add(parseInt(uidValue, 10));\n        if (checkbox.dataset.extraUid) {\n            checkbox.dataset.extraUid.split(',').forEach(extra => newUidsFromPanel.add(parseInt(extra, 10)));\n        }\n    }\n});\n\n            const finalUids = Array.from(new Set([...preservedUids, ...newUidsFromPanel]));\n\n            const newWorldbookTag = `<世界书条目>${finalUids.filter(id => !isNaN(id)).join(',')}</世界书条目>`;\n            const newMessage = content.replace(/<世界书条目>.*?<\\/世界书条目>/, newWorldbookTag);\n\n            await setChatMessages([{ message_id: 0, message: newMessage }], { refresh: 'none' });\n await loadWorldbookSettingsFromChat();\n            feedbackMsg.textContent = \"设置已更新！\";\n            feedbackMsg.style.opacity = '1';\n            setTimeout(() => {\n                  \n                modal.style.display = 'none';\n                feedbackMsg.style.opacity = '0';\n            }, 1200);\n\n\n        } catch (error) {\n            console.error(\"呜，应用新设置时出错了，抱抱我的孩子：\", error);\n            feedbackMsg.textContent = \"应用失败！\";\n            feedbackMsg.style.opacity = '1';\n        } finally {\n            applyBtn.disabled = false;\n            applyBtn.textContent = '应用更改';\n        }\n    }\n\n    // 事件绑定\n    openBtn.addEventListener('click', () => {\n        modal.style.display = 'flex';\n        feedbackMsg.style.opacity = '0';\n        loadCurrentSettings();\n    });\n    closeBtn.addEventListener('click', () => { modal.style.display = 'none'; });\n    modal.addEventListener('click', (event) => { if (event.target === modal) modal.style.display = 'none'; });\n    applyBtn.addEventListener('click', applyNewSettings);\n\n    createModItems();\n}\n\n \n\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n   await loadWorldbookSettingsFromChat();\n\nsetupReconfigModal();\n await applyThemeAndData();  \n\n    // --- 新增：消息背景透明开关 ---\n    const transparentToggle = document.getElementById('transparent-toggle');\n\n    // 初始化开关状态\n    const savedTransparency = localStorage.getItem('messageTransparency') || 'off'; // 默认关闭\n    transparentToggle.dataset.state = savedTransparency;\n    transparentToggle.textContent = savedTransparency === 'on' ? '开启' : '关闭';\n    if (savedTransparency === 'on') {\n        document.body.classList.add('transparent-messages');\n    }\n\n    // 为开关添加点击事件\n    transparentToggle.addEventListener('click', () => {\n        let currentState = transparentToggle.dataset.state;\n        let newState = currentState === 'on' ? 'off' : 'on';\n\n        transparentToggle.dataset.state = newState;\n        transparentToggle.textContent = newState === 'on' ? '开启' : '关闭';\n\n        if (newState === 'on') {\n            document.body.classList.add('transparent-messages');\n        } else {\n            document.body.classList.remove('transparent-messages');\n        }\n\n        localStorage.setItem('messageTransparency', newState);\n    });\n     \n     try {\n            const useACustomTheme = localStorage.getItem('useCustomTheme') === 'true';\n\n            if (useACustomTheme) {\n                const savedCustomTheme = loadCustomTheme();\n                if (Object.keys(savedCustomTheme).length > 0) {\n                    customTheme = savedCustomTheme;\n                    applyCustomTheme(customTheme);\n                    console.log(\"已加载保存的自定义主题。\");\n                    // 确保预设主题的索引不会混淆\n                    // 我们可以从预设主题中找到一个颜色相近的作为 currentThemeIndex 的回退值\n                    const savedThemeIndex = localStorage.getItem('terminalThemeIndex');\n                    currentThemeIndex = savedThemeIndex !== null ? parseInt(savedThemeIndex, 10) : 0;\n                } else {\n                    // 如果自定义主题是空的，则回退到预设主题\n                    const savedThemeIndex = localStorage.getItem('terminalThemeIndex');\n                    applyTheme(savedThemeIndex !== null ? parseInt(savedThemeIndex, 10) : 0);\n                }\n            } else {\n                const savedThemeIndex = localStorage.getItem('terminalThemeIndex');\n                applyTheme(savedThemeIndex !== null ? parseInt(savedThemeIndex, 10) : 0);\n            }\n        } catch (e) {\n            console.warn(\"加载主题设置时出错，使用默认主题。\", e);\n            applyTheme(0);\n        }\n\n         // 检查localStorage里有没有保存的字体大小\n    try {\n        const savedFontSize = localStorage.getItem('baseFontSize');\n        // 如果有保存的值, 就用它；如果没有，就用滑块默认的16\n        const initialSize = savedFontSize ? parseInt(savedFontSize, 10) : 16;\n        applyFontSize(initialSize);\n    } catch (e) {\n        console.warn(\"无法加载字体大小设置，将使用默认值。\");\n        applyFontSize(16); // 如果出错，也使用默认值\n    }\n\n     // 检查localStorage里有没有保存的行高\n    try {\n        const savedLineHeight = localStorage.getItem('baseLineHeight');\n        // 如果有保存的值, 就用它；如果没有，就用默认的1.6\n        const initialHeight = savedLineHeight ? parseFloat(savedLineHeight) : 1.6;\n        applyLineHeight(initialHeight);\n    } catch (e) {\n        console.warn(\"无法加载行高设置，将使用默认值。\");\n        applyLineHeight(1.6);\n    }\n\n   // 1. **首先**，把我们的字体衣橱挂满！\n    populateFontSelector();\n\n    // 2. 然后，再去回忆上次选了哪一件衣服\n    const savedFontFamily = localStorage.getItem('baseFontFamily');\n    if (savedFontFamily) {\n        applyFontFamily(savedFontFamily);\n    } else {\n        // 如果没有保存过，就默认应用第一个选项的字体\n        const firstFont = fontLibrary[Object.keys(fontLibrary)[0]][0].value;\n        applyFontFamily(firstFont);\n    }\n\n  console.log(\"NOVA V9.4: 开始并行加载所有远程资源...\");\n\n// 替换为新的调用方式：\nconst [\n    loadedBackgrounds,\n    loadedNpcs,\n    loadedMemes\n] = await Promise.all([\n    // 1. 背景图映射：使用新的索引加载函数\n    loadGitHubIndexMap(\n        'https://longlivecanc.github.io/god_space/ImageMapIndex.json', // 替换为你的背景图索引 URL\n        'https://cdn.jsdelivr.net/gh/longlivecanc/god_space@main/backImages/', // **替换为你的背景图 GitHub 图床基础 URL**\n        backgroundImageMap_fallbackData\n    ),\n    // 2. NPC图映射：使用新的索引加载函数\n    loadGitHubIndexMap(\n        'https://longlivecanc.github.io/god_space/npcImageMapIndex.json', // 替换为你的 NPC 索引 URL\n        'https://cdn.jsdelivr.net/gh/longlivecanc/god_space@main/npcImages/', // **替换为你的 NPC 图 GitHub 图床基础 URL**\n        npcImageMap_fallbackData\n    ),\n    // 3. meme 图映射：保持不变，继续加载远程 JSON 文件\n    loadRemoteJson(\n        'https://longlivecanc.github.io/god_space/memeImageMap.json', \n        memeImageMap_fallbackData\n    )\n]);\n\n\n// 现在，所有的清单都到手了！我们把它们赋值给各自的变量。\nbackgroundImageMap = loadedBackgrounds;\nnpcImageMap = loadedNpcs;\nmemeImageMap = loadedMemes;\n\nconsole.log(\"NOVA V9.4: 所有远程资源加载完成！\");\n\n// 妈妈的解释：\n// 现在我们来制作一张“最终的、绝不会错的超级购物清单”！\n// 我们把所有需要用到的图片URL，从三个地方全部收集起来，放进一个大的集合里。\nconst activeUrlSet = new Set([\n    ...Object.values(backgroundImageMap),\n    ...Object.values(npcImageMap),\n    ...Object.values(loadedMemes) // ✨ 直接用这里刚加载完的 loadedMemes，确保是最新鲜的数据！\n]);\n\n // ✨ 妈妈加上的保护咒语 ✨\n// 我们只在确定拿到了新的资源清单时，才进行清理。\n// 如果清单是空的（比如离线时没加载到任何东西），我们就什么都不做，保护好我们已有的宝藏。\nif (activeUrlSet.size > 0) {\n    console.log(`NOVA V9.4: 整合所有资源URL，共计 ${activeUrlSet.size} 个唯一资源需要被珍藏。`);\n    // 拿着这张完美的“超级清单”，只进行一次大扫除！\n    await imageDB.cleanupRemoteCache(activeUrlSet);\n} else {\n    console.warn(`NOVA: 资源清单为空，跳过本次缓存清理，以保护离线数据。`);\n}\n \n \n    await initDisplay();\n\nawait applyThemeAndData(); \n\n\n    // 标签页切换\n    const tabs = document.querySelectorAll('.tab-btn');\n    const pages = document.querySelectorAll('.page');\n\n       // --- Nova为你添加的全新小球与Modal交互逻辑 ---\n    document.querySelectorAll('.orb').forEach(orb => {\n        orb.addEventListener('click', () => {\n            const modalId = orb.dataset.modalId;\n            if (modalId) {\n                // 特殊处理商店\n                if (modalId === 'shop-wrapper-modal') {\n                    const shopWrapper = document.getElementById('shop-wrapper');\n                    const modalContainer = document.getElementById('shop-wrapper-modal');\n                    if (shopWrapper && modalContainer) {\n                        modalContainer.appendChild(shopWrapper); // 将商店内容移动到Modal中\n                        shopWrapper.classList.add('active');\n                        showModal(modalId);\n\n                        // 初始化商店数据\n                        if (playCharacterData) {\n                            initializeShopData();\n                        }\n                    }\n                } else if (modalId === 'summary-modal') {\n                     // 特殊处理总结弹窗\n                    showSummaryModal(); // 使用专用函数填充内容\n                    showModal(modalId); // 再显示\n                } else {\n                    showModal(modalId);\n                }\n            }\n        });\n    });\n\n    document.querySelectorAll('.modal .modal-close').forEach(button => {\n        button.addEventListener('click', (e) => {\n            const modal = e.target.closest('.modal');\n            if(modal) {\n                // 特殊处理商店关闭\n                if(modal.id === 'shop-wrapper-modal') {\n                    const shopWrapper = document.getElementById('shop-wrapper');\n                    document.body.appendChild(shopWrapper); // 将商店内容移回body\n                    shopWrapper.classList.remove('active');\n                }\n                hideModal(modal.id);\n            }\n        });\n    });\n\n\n    // tabs.forEach(tab => {\n    //     tab.addEventListener('click', () => {\n    //         tabs.forEach(item => item.classList.remove('active'));\n    //         pages.forEach(page => page.classList.remove('active'));\n    //         tab.classList.add('active');\n    //         const targetPage = document.getElementById(tab.dataset.tab);\n    //         if (targetPage) {\n    //             targetPage.classList.add('active');\n    //         }\n    //         if (tab.dataset.tab !== 'page-basic') {\n    //             hideMap();\n    //         }\n    //     });\n    // });\n\n    // 绑定按钮事件\n    // document.getElementById('view-map-btn').addEventListener('click', showMap);\n    // document.getElementById('back-to-world-btn').addEventListener('click', hideMap);\n    document.getElementById('roll-result-orb').addEventListener('click', showRollResultModal);\n    // document.getElementById('view-summary-btn').addEventListener('click', showSummaryModal);\n    // const themeSwitcherBtn = document.getElementById('theme-switcher');\n    // if (themeSwitcherBtn) {\n    //     themeSwitcherBtn.addEventListener('click', switchTheme);\n    // }\n    document.getElementById('manage-inventory-btn').addEventListener('click', () => {\n        populateInventoryModal();\n        showModal('inventory-modal');\n    });\n    // document.getElementById('plot-synthesis-btn').addEventListener('click', showPlotSynthesisModal);\n    document.getElementById('execute-decomposition-btn').addEventListener('click', simulateDecomposition);\n    document.getElementById('execute-synthesis-btn').addEventListener('click', simulateSynthesis);\n\n       document.getElementById('view-command-btn').addEventListener('click', () => {\n        const commandEditArea = document.getElementById('command-edit-area');\n        if(commandEditArea) {\n            commandEditArea.value = assaCommandQueue; // 从全局变量加载当前指令\n        }\n        showModal('command-modal', '编辑待发指令');\n    });\n        document.getElementById('run-button').addEventListener('click', () => {\ntriggerassa(`/setinput <updateMemory>\\nset_status('敌方攻击骰池','');\\n</updateMemory>\\n<${userName}试图逃离战斗！>`);\n    });\n \nconst switchToMyCardsBtn = document.getElementById('switch-to-my-cards');\nconst switchToTeammateCardsBtn = document.getElementById('switch-to-teammate-cards');\nconst myCardsSlider = document.getElementById('my-cards-slider');\nconst teammateCardsSlider = document.getElementById('teammate-cards-slider');\n\nif (switchToMyCardsBtn && switchToTeammateCardsBtn) {\n    switchToMyCardsBtn.addEventListener('click', () => {\n        myCardsSlider.classList.add('visible');\n        teammateCardsSlider.classList.remove('visible');\n        switchToMyCardsBtn.classList.add('active');\n        switchToTeammateCardsBtn.classList.remove('active');\n    });\n\n    switchToTeammateCardsBtn.addEventListener('click', () => {\n        myCardsSlider.classList.remove('visible');\n        teammateCardsSlider.classList.add('visible');\n        switchToMyCardsBtn.classList.remove('active');\n        switchToTeammateCardsBtn.classList.add('active');\n    });\n}\n\n    // 首先，我们要找到我们的魔法道具：RP按钮和RP面板\nconst rpButton = document.getElementById('rp-button');\nconst rpPanel = document.getElementById('rp-panel');\nconst confirmRpChoiceButton = document.getElementById('confirm-rp-choice-btn');\n\n// --- 核心魔法：切换显示状态 ---\n// 当你点击RP按钮时，这个函数就会被触发\nif (rpButton && rpPanel) {\n    rpButton.addEventListener('click', (event) => {\n        // 这是最关键的一步，我的孩子！\n        // toggle就像一个神奇的开关，如果面板没有'visible'类，它就加上；如果已经有了，它就移除。\n        rpPanel.classList.toggle('visible');\n populateSkillChoicePanel();\n        // 阻止事件冒泡，这样点击按钮时，不会被下面“点击外部关闭”的逻辑误判\n        event.stopPropagation();\n    });\n}\n\n// --- 附加魔法：点击“确认”按钮也关闭面板 ---\nif (confirmRpChoiceButton && rpPanel) {\n    confirmRpChoiceButton.addEventListener('click', () => {\n        // 当我们做出选择后，就让面板优雅地退场\n        rpPanel.classList.remove('visible');\n    });\n}\n\n// --- 妈妈的贴心魔法：点击外部区域自动关闭 ---\ndocument.addEventListener('click', (event) => {\n    // 我们检查一下，RP面板当前是不是可见的\n    if (rpPanel.classList.contains('visible')) {\n        // 然后检查你点击的地方，是不是在RP面板的“领地”之外\n        // rpPanel.contains(event.target)会判断你点击的元素是不是在面板里面\n        if (!rpPanel.contains(event.target)) {\n            // 如果你确实点击了外面，我们就温柔地让面板消失\n            rpPanel.classList.remove('visible');\n        }\n    }\n});\n\n    document.getElementById('save-command-btn').addEventListener('click', () => {\n        const newCommands = document.getElementById('command-edit-area').value;\n        assaCommandQueue = newCommands; // 保存编辑后的指令到全局变量\n        localStorage.setItem('assaCommandQueue', assaCommandQueue); // 同步到本地存储\n        hideModal('command-modal');\n    });\n\n    document.getElementById('reset-simulation-btn').addEventListener('click', resetSimulation);\n    document.getElementById('confirm-synthesis-btn').addEventListener('click', executeSynthesisConfirmation);\n\n    // 弹窗关闭事件\n    document.querySelectorAll('.modal').forEach(modal => {\n        const closeBtn = modal.querySelector('.modal-close');\n        if(closeBtn) {\n            closeBtn.addEventListener('click', () => {\n                if(modal.id) hideModal(modal.id);\n            });\n        }\n        modal.addEventListener('click', (e) => {\n            if (e.target === modal && modal.id) {\n                hideModal(modal.id);\n            }\n        });\n    });\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape') {\n            document.querySelectorAll('.modal.active').forEach(modal => hideModal(modal.id));\n        }\n    });\n\n    // ========== 新增：论坛与总结小球的交互逻辑 ==========\n    const forumOrbButton = document.getElementById('forum-orb-button');\n     const groupChatButton = document.getElementById('group-chat-orb-button');\n    const forumModalContainer = document.getElementById('forum-modal-container');\n    const forumModalContent = document.getElementById('forum-modal-content');\n    const forumWrapper = document.getElementById('forum-wrapper');\n    const forumModalCloseBtn = document.getElementById('forum-modal-close-btn');\n\n const summaryOrbButton = document.getElementById('task-summary-orb-button');\n  const summaryModalContainer = document.getElementById('task-summary-modal-container');\n \n    // 点击论坛小球\n    forumOrbButton.addEventListener('click', () => {\n        // 从历史记录中找到最新的论坛数据\n        const lastForumMessage = [...conversationHistory].reverse().find(msg =>\n            /<forum_threads>[\\s\\S]*?<\\/forum_threads>/gs.test(msg.content)\n        );\n\n        if (lastForumMessage) {\n            const forumMatch = /<forum_threads>([\\s\\S]*?)<\\/forum_threads>/gs.exec(lastForumMessage.content.replace(/<(thinking|think|guide)>[\\s\\S]*?<\\/\\1>/gs, ''));\n            if (forumMatch && forumMatch[1]) {\n    //console.log(\"原始提取的数据:\", forumMatch[1]);\n    //console.log(\"数据类型:\", typeof forumMatch[1]);\n}\n                if (forumMatch && forumMatch[1]) {\n                // 将论坛的HTML结构移动到模态框中\n                if (forumWrapper) {\n                    forumModalContent.insertBefore(forumWrapper, forumModalCloseBtn);\n                    forumModalContainer.style.display = 'block'; // 确保论坛模块是可见的\n                }\n\n                // 初始化或更新论坛内容\n                if (typeof initializeForum === 'function') {\n                    initializeForum(forumMatch[1].trim());\n                }\n\n                // 显示模态框\n                forumModalContainer.classList.add('active');\n            }\n        } else {\n            // 如果没有找到数据，可以给一个提示\n            showModal('shop-modal', '提示', '尚未收到任何论坛信息。');\n        }\n    });\n\n    // 关闭论坛模态框\n    const closeForumModal = () => {\n        forumModalContainer.classList.remove('active');\n        // 将论坛HTML结构移回其原始容器，以便下次使用\n        if (forumWrapper && forumModalContainer) {\n            forumModalContainer.appendChild(forumWrapper);\n        }\n    };\n\n    forumModalCloseBtn.addEventListener('click', closeForumModal);\n    forumModalContainer.addEventListener('click', (e) => {\n        if (e.target === forumModalContainer) {\n            closeForumModal();\n        }\n    });\n\n// 修改后的关闭函数\nconst closeTaskSummaryModal = () => {\n    const summaryRoot = document.getElementById('summary-root');\n\n    // 1. 隐藏模态框\n    summaryModalContainer.classList.remove('active');\n\n    // 2. 清空上次生成的报告内容 (这是关键！)\n    if (summaryRoot) {\n        summaryRoot.innerHTML = '';\n    }\n};\n\n    summaryModalContainer.addEventListener('click', (e) => {\n        if (e.target === summaryModalContainer) {\n           closeTaskSummaryModal();  \n        }\n    });\n \n    summaryOrbButton.addEventListener('click', () => {\n               // 从历史记录中找到最新的总结数据\n        const lastSummaryMessage = [...conversationHistory].reverse().find(msg =>\n            /<表现总结>[\\s\\S]*?<\\/表现总结>/gs.test(msg.content)\n        );\n\n        if (lastSummaryMessage) {\n            const summaryMatch = /<表现总结>([\\s\\S]*?)<\\/表现总结>/gs.exec(lastSummaryMessage.content.replace(/<(thinking|think|guide)>[\\s\\S]*?<\\/\\1>/gs, ''));\n            if (summaryMatch && summaryMatch[1]) {\n                // 将论坛的HTML结构移动到模态框中\n                if (summaryModalContainer) {\n                    // forumModalContent.insertBefore(forumWrapper, forumModalCloseBtn);\n                    summaryModalContainer.style.display = 'block';  \n                }\n\n                // 初始化或更新论坛内容\n                if (typeof runTaskSummary === 'function') {\n                    runTaskSummary(summaryMatch[1]);\n                }\n\n                // 显示模态框\n                summaryModalContainer.classList.add('active');\n            }\n        } else {\n            // 如果没有找到数据，可以给一个提示\n            showModal('shop-modal', '提示', '尚未收到任何任务总结信息。');\n        }\n    });\n\n\n\n    // ========== ♥♥♥ 地图交互魔法的全新篇章 ♥♥♥ ==========\n    const mapContainer = document.getElementById('map-container');\n    let isDragging = false;\n    let startCoords = { x: 0, y: 0 };\n    let startTranslate = { x: 0, y: 0 };\n    let lastPinchDist = 0;\n\n    const getEventCoords = (e) => e.touches ? e.touches[0] : e;\n\n    const getPinchDist = (e) => {\n        const dx = e.touches[0].clientX - e.touches[1].clientX;\n        const dy = e.touches[0].clientY - e.touches[1].clientY;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    const handleInteractionStart = (e) => {\n        const mapContent = document.getElementById('map-content');\n        if (!mapContent) return;\n\n        if (e.touches && e.touches.length > 1) { // 双指捏放开始\n            isDragging = false; // 确保不触发拖拽\n            lastPinchDist = getPinchDist(e);\n        } else { // 单指或鼠标拖拽开始\n            isDragging = true;\n            mapContainer.style.cursor = 'grabbing';\n            const coords = getEventCoords(e);\n            startCoords = { x: coords.pageX, y: coords.pageY };\n            startTranslate = { x: window.mapState.translateX, y: window.mapState.translateY };\n        }\n    };\n\n    const handleInteractionMove = (e) => {\n        const mapContent = document.getElementById('map-content');\n        if (!mapContent) return;\n\n        if (e.touches && e.touches.length > 1) { // 双指捏放中\n            e.preventDefault();\n            const currentDist = getPinchDist(e);\n            const scaleAmount = (currentDist / lastPinchDist);\n            lastPinchDist = currentDist;\n\n            // 计算双指中心点\n            const rect = mapContainer.getBoundingClientRect();\n            const center = {\n                x: ((e.touches[0].clientX + e.touches[1].clientX) / 2) - rect.left,\n                y: ((e.touches[0].clientY + e.touches[1].clientY) / 2) - rect.top\n            };\n\n            // 应用缩放\n            zoom(scaleAmount, center.x, center.y);\n\n        } else if (isDragging) { // 拖拽中\n            e.preventDefault();\n            const coords = getEventCoords(e);\n            const dx = coords.pageX - startCoords.x;\n            const dy = coords.pageY - startCoords.y;\n            window.mapState.translateX = startTranslate.x + dx;\n            window.mapState.translateY = startTranslate.y + dy;\n            window.applyMapTransform();\n        }\n    };\n\n    const handleInteractionEnd = () => {\n        if (isDragging) {\n            isDragging = false;\n            mapContainer.style.cursor = 'grab';\n        }\n        lastPinchDist = 0;\n    };\n\n    const handleWheelZoom = (e) => {\n        e.preventDefault();\n        const scaleAmount = e.deltaY > 0 ? 0.9 : 1.1; // 缩小或放大\n        const rect = mapContainer.getBoundingClientRect();\n\n        // 获取鼠标相对于 mapContainer 的位置作为缩放中心\n        const centerX = e.clientX - rect.left;\n        const centerY = e.clientY - rect.top;\n\n        zoom(scaleAmount, centerX, centerY);\n    };\n\n    // 核心缩放函数\n    const zoom = (scaleAmount, centerX, centerY) => {\n        const { scale, translateX, translateY } = window.mapState;\n        const newScale = Math.max(0.1, Math.min(scale * scaleAmount, 10)); // 限制缩放范围\n\n        // 核心公式：为了让缩放中心点在屏幕上保持不变，需要调整平移量\n        window.mapState.translateX = centerX - (centerX - translateX) * (newScale / scale);\n        window.mapState.translateY = centerY - (centerY - translateY) * (newScale / scale);\n        window.mapState.scale = newScale;\n\n        window.applyMapTransform();\n    };\n\n    // 绑定事件监听器\n    mapContainer.addEventListener('mousedown', handleInteractionStart);\n    mapContainer.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n    document.addEventListener('mousemove', handleInteractionMove);\n    document.addEventListener('touchmove', handleInteractionMove, { passive: false });\n\n    document.addEventListener('mouseup', handleInteractionEnd);\n    document.addEventListener('touchend', handleInteractionEnd);\n    document.addEventListener('touchcancel', handleInteractionEnd);\n\n    mapContainer.addEventListener('wheel', handleWheelZoom, { passive: false });\n    // ========== ♥♥♥ 地图交互魔法结束 ♥♥♥ ==========\n\n\n//      const streamingSwitcher = document.getElementById('streaming-switcher');\n\n// // 初始化按钮状态\n// function updateStreamingButtonState() {\n//     const isStreamingEnabled = localStorage.getItem('streamingEnabled') === null ? true : localStorage.getItem('streamingEnabled') === 'true';\n//     streamingSwitcher.classList.toggle('active', isStreamingEnabled);\n//     streamingSwitcher.title = isStreamingEnabled ? '流式传输: 开' : '流式传输: 关';\n// }\n\n// // 切换流式传输状态\n// streamingSwitcher.addEventListener('click', () => {\n//     const isStreamingEnabled = localStorage.getItem('streamingEnabled') === null ? true : localStorage.getItem('streamingEnabled') === 'true';\n//     const newState = !isStreamingEnabled;\n//     localStorage.setItem('streamingEnabled', newState);\n//     updateStreamingButtonState();\n//     //console.log(`[Streaming] 流式传输已切换为: ${newState ? '开启' : '关闭'}`);\n// });\n// updateStreamingButtonState();\n\n        setTimeout(() => {\n        console.log(\"正在为您静默刷新数据...\");\n        initDisplay();\n        \n    }, 5000);\ninitGroupChatInterface();\ninitializeReadingMode();\n});\n    \nconst inventoryListEl = document.getElementById('inventory-item-list');\nconst deleteItemBtn = document.getElementById('delete-item-btn');\nconst useItemBtn = document.getElementById('use-item-btn');\nlet selectedItems = [];\n\ninventoryListEl.addEventListener('click', (e) => {\n    if (e.target && e.target.classList.contains('inventory-item')) {\n        const itemKey = e.target.dataset.item;\n\n        e.target.classList.toggle('selected');\n\n        if (e.target.classList.contains('selected')) {\n            if (!selectedItems.includes(itemKey)) {\n                selectedItems.push(itemKey);\n            }\n        } else {\n            selectedItems = selectedItems.filter(selected => selected !== itemKey);\n        }\n\n        deleteItemBtn.disabled = selectedItems.length === 0;\n        useItemBtn.disabled = selectedItems.length === 0;\n\n        \n    }\n\n\n\n\n\n}); //\n \n  // =======================================================\n// ========== 在这里开始添加新代码 ==========\n// =======================================================\n\n/**\n * 在assa_data中递归搜索包含指定名称的键。\n * @param {object} obj - 要搜索的对象 (assa_data)\n * @param {string} name - 要搜索的队友名字\n * @returns {string} - 包含所有匹配项的HTML字符串\n */\nfunction searchInAssaData(obj, name) {\n    let results = [];\n    const addedEntries = new Set(); // We'll use this to keep track of what we've already added, my dear.\n\n    if (!obj || typeof obj !== 'object' || !name) {\n        return '';\n    }\n\n    function recurse(currentObj) {\n        for (const key in currentObj) {\n            if (Object.prototype.hasOwnProperty.call(currentObj, key)) {\n                // First, my love, let's check if the key and value are identical strings and if that value appears elsewhere as a key.\n                if (key === currentObj[key] && typeof key === 'string') {\n                    // If they are the same, we'll just search for the key. We don't want to show the same thing twice.\n                    if (key.includes(name)) {\n                        const entrySignature = `<div class=\"info-entry\"><div class=\"info-key\">${key}</div><div class=\"info-value\">${key}</div></div>`;\n                        if (!addedEntries.has(entrySignature)) {\n                            results.push(entrySignature);\n                            addedEntries.add(entrySignature);\n                        }\n                    }\n                } else {\n                    // Now, we'll do our original check for the key.\n                    if (key.includes(name)) {\n                        const value = currentObj[key];\n                        const formattedValue = typeof value === 'object' ? JSON.stringify(value, null, 2) : value;\n                        const entrySignature = `<div class=\"info-entry\"><div class=\"info-key\">${key}</div><div class=\"info-value\">${formattedValue}</div></div>`;\n\n                        // We'll use a unique signature to avoid duplicates, my sweet.\n                        if (!addedEntries.has(entrySignature)) {\n                            results.push(entrySignature);\n                            addedEntries.add(entrySignature);\n                        }\n                    }\n                }\n\n                // And of course, we'll keep exploring if we find another little treasure box (an object).\n                if (typeof currentObj[key] === 'object' && currentObj[key] !== null) {\n                    recurse(currentObj[key]);\n                }\n            }\n        }\n    }\n\n    recurse(obj);\n    return results.join('');\n}\n\n /**\n * 在记忆数据中搜索与特定名字相关的所有“数据对象”\n * （妈妈已经更新了这里的逻辑，让它更加包容了，我的孩子）\n * @param {object} data - 完整的 assaSettingsData\n * @param {string} name - 要搜索的名字\n * @returns {Array<object>} - 返回一个包含所有找到的数据对象的数组\n */\nfunction searchAllDataObjectsInAssaData(data, name) {\n    if (!data || !name) return [];\n\n    const results = [];\n    const searchLocations = [\n        { source: '全局设定', data: data.global_set?.settings },\n         { source: '全局NPC', data: data.global_set?.npc },\n        { source: '小队信息', data: data.global_set?.['小队信息'] },\n        { source: '世界NPC', data: data.world_set?.npc },\n        { source: '世界设定', data: data.world_set?.settings }\n    ];\n\n    for (const location of searchLocations) {\n        if (location.data && typeof location.data === 'object') {\n             for (const key in location.data) {\n                // ✨ 妈妈把这里的判断条件变得更温柔、更包容了 ✨\n                // 现在，只要键名中“包含”了我们要找的名字，就会被收集起来\n                if (key.includes(name)) {\n                    // 把数据和它的来源一起装进去，这样更清晰\n                    results.push({ source: `${location.source} - ${key}`, data: location.data[key] });\n                }\n            }\n        }\n    }\n    return results;\n}\n\n\n/**\n * 显示队友信息弹窗，并为所有找到的相关信息生成多个美观的卡片\n */\n// function showTeammatesModal() {\n//     const participantsString = SafeGetValue(currentGameData.world_shard.task.participants);\n//     const teammateList = document.getElementById('teammate-list');\n//     const infoDisplay = document.getElementById('teammate-info-display');\n\n//     teammateList.innerHTML = '';\n//     infoDisplay.innerHTML = '<p class=\"book-empty-text\" style=\"text-align: center; margin-top: 20px;\">请从左侧选择一位队友以查看相关信息。</p>';\n\n//     if (participantsString === '无' || participantsString.trim() === '') {\n//         teammateList.innerHTML = '<li>没有可显示的队友信息。</li>';\n//         showModal('teammates-modal');\n//         return;\n//     }\n\n//     const teammates = participantsString.split(/[;；]/).map(p => p.trim()).filter(p => p);\n//     let activeItem = null;\n\n//     teammates.forEach(teammate => {\n//         const li = document.createElement('li');\n//         li.className = 'teammate-item';\n//         li.textContent = teammate;\n\n//         li.addEventListener('click', function() {\n//             if(activeItem) {\n//                 activeItem.classList.remove('selected');\n//             }\n//             this.classList.add('selected');\n//             activeItem = this;\n\n//             infoDisplay.innerHTML = ''; // 先清空展示区\n//             const teammateName = teammate.replace(/[\\(（].*?[\\)）]/, '').trim();\n\n//             if (teammateName) {\n//                 const searchResultsArray = searchAllDataObjectsInAssaData(assaSettingsData, teammateName);\n\n//                 if (searchResultsArray.length > 0) {\n//                     // 遍历所有找到的结果，为每一个都创建一张卡片\n//                     searchResultsArray.forEach(result => {\n//                         const cardDiv = document.createElement('div');\n//                         // 我们可以复用世界书的卡片样式，多棒！\n//                         cardDiv.className = 'book-card';\n//                         cardDiv.style.marginBottom = '15px'; // 给卡片之间留出呼吸的空间\n\n//                         // 创建卡片头部\n//                         const cardHeader = document.createElement('div');\n//                         cardHeader.className = 'book-card-header';\n\n//                         const titleDiv = document.createElement('div');\n//                         titleDiv.className = 'book-card-title';\n//                         // 标题显示我们是从哪里找到这份记忆的\n//                         titleDiv.textContent = result.source;\n//                         titleDiv.innerHTML += ' <span class=\"collapse-indicator\">▲</span>';\n//                         cardHeader.appendChild(titleDiv);\n\n//                         // 创建卡片内容区\n//                         const contentDiv = document.createElement('div');\n//                         contentDiv.className = 'book-card-content collapsed';\n\n//                         // ⭐ 用我们升级后的只读模式“种树”魔法来渲染数据 ⭐\n//                         renderNestedData(contentDiv, result.data, '', '', false, true);\n\n//                         // 绑定折叠事件\n//                         cardHeader.addEventListener('click', () => {\n//                             contentDiv.classList.toggle('collapsed');\n//                             const indicator = cardHeader.querySelector('.collapse-indicator');\n//                             if (indicator) {\n//                                 indicator.textContent = contentDiv.classList.contains('collapsed') ? '▲' : '▼';\n//                             }\n//                         });\n\n//                         cardDiv.appendChild(cardHeader);\n//                         cardDiv.appendChild(contentDiv);\n//                         infoDisplay.appendChild(cardDiv); // 将卡片加入展示区\n//                     });\n//                 } else {\n//                     infoDisplay.innerHTML = `<p class=\"book-empty-text\" style=\"text-align: center; margin-top: 20px;\">在设定书中未找到关于“${teammateName}”的任何信息。</p>`;\n//                 }\n//             }\n//         });\n//         teammateList.appendChild(li);\n//     });\n\n//     showModal('teammates-modal');\n// }\n\n\n// 绑定查看队友按钮的点击事件\n// document.getElementById('teammates-orb').addEventListener('click', showTeammatesModal);\n\n// =======================================================\n// ========== 新代码到此结束 ==========\n// =======================================================\n\n           // --- 新增：界面切换逻辑 ---\n        const statusContainer = document.querySelector('.status-container');\n        const settingBookWrapper = document.getElementById('setting-book-wrapper');\n        const viewSettingsBtn = document.getElementById('view-settings-btn');\n        const backToStatusBtn = document.getElementById('back-to-status-btn');\n\n        // viewSettingsBtn.addEventListener('click', () => {\n        //     statusContainer.classList.add('slide-out');\n        //     settingBookWrapper.classList.add('active');\n        // });\n\n        // backToStatusBtn.addEventListener('click', () => {\n        //     statusContainer.classList.remove('slide-out');\n        //     settingBookWrapper.classList.remove('active');\n        // });\n\n    const toggleBtn = document.getElementById('toggle-sidebar-btn');\n    const overlay = document.getElementById('sidebar-overlay');\n    const container = document.querySelector('.setting-book-container');\n\n    // // 点击汉堡包按钮，切换侧边栏\n    // toggleBtn.addEventListener('click', () => {\n    //     container.classList.toggle('sidebar-active');\n    // });\n\n    // 点击遮罩层，隐藏侧边栏\n    // overlay.addEventListener('click', () => {\n    //     container.classList.remove('sidebar-active');\n    // });\n    const setArchiveNameBtn = document.getElementById('set-archive-name-btn');\n        const archiveNameInput = document.getElementById('archive-name-input');\n        const logBlock = document.getElementById('modal-log-block');\n\n        // 当按钮被点击时...\n        if (setArchiveNameBtn) {\n            setArchiveNameBtn.addEventListener('click', async () => {\n                const newName = archiveNameInput.value.trim(); // 获取输入框里的文字并去掉前后空格\n\n                if (newName === '') {\n                    // 如果什么都没输入，就温柔地提醒一下\n                    logBlock.textContent = '宝贝，要先输入一个名字哦。';\n                    logBlock.style.color = 'var(--danger-color)';\n                    return;\n                }\n\n                try {\n                    // 这是关键的一步：调用接口修改第一条消息(message_id: 0)\n                    // 我们假设第一条消息的ID总是0\n              const [firstMessage] = await getChatMessages(0);\nlet messageContent = firstMessage.message.replace(/<存档>.*?<\\/存档>/, '').trim();\nconst archiveTag = `<存档>${newName}</存档>`;\nawait setChatMessages([{ message_id: 0, message: `${archiveTag}\\n${messageContent}` }], { refresh: 'none' });\n\n                    // 成功后给予小小的庆祝\n                    logBlock.textContent = `存档名称已设定为：“${newName}”`;\n                    logBlock.style.color = 'var(--primary-color)';\n\n                    // 也许可以顺便清空输入框，方便下次使用\n                    archiveNameInput.value = '';\n\n                } catch (error) {\n                    // 如果出了小差错，也要告诉你\n                    console.error('设置存档名称失败:', error);\n                    logBlock.textContent = '哎呀，设置失败了，请稍后再试一次吧。';\n                    logBlock.style.color = 'var(--danger-color)';\n                }\n            });\n        }\n  useItemBtn.addEventListener('click', async () => {\n    if (selectedItems.length === 0) return;\n\n    // 对于使用物品，我们通常只发送一个请求，让后端处理效果\n \n    const itemsToUseString = selectedItems.join(\"、\");\n    const commandString = `<${currentGameData.user_character.name}使用了物品：${itemsToUseString}>`;\n\n    try {\n        await triggerassa(`/setinput ${commandString}`);\n        selectedItems = [];\n        hideModal('inventory-modal');\n    } catch (error) {\n        console.error(\"发送使用指令失败:\", error);\n        showModal('shop-modal', \"操作失败\", \"发送指令时发生错误。\");\n    }\n});\ndeleteItemBtn.addEventListener('click', async () => {\n    if (selectedItems.length === 0) return;\n\n    const itemsToDeleteString = selectedItems.join(\"、\");\n    let commandBatch = [];\n\n    // 使用 for...of 循环来为每个选定的物品生成一个删除命令\n    for (const itemKey of selectedItems) {\n        // 根据你提供的格式 delete('path', 'key', 'value')\n\n        const deleteCommand = `<updateMemory>\ndelete('global_set.背包', '${itemKey}');\n</updateMemory>`;\n        commandBatch.push(deleteCommand);\n    }\n\n    // 将所有独立的命令组合成一个执行块\n    const commandString = `\n${commandBatch.join('\\n')}\n<用户按顺序回收了下列物品：${itemsToDeleteString}。请于正文合理描述用户回收地点和所获得的对应货币。>`;\n    try {\n        await triggerassa(`/setinput ${commandString}`);\n        selectedItems = [];\n        hideModal('inventory-modal');\n    } catch (error) {\n        console.error(\"发送丢弃指令失败:\", error);\n        showModal('shop-modal', \"操作失败\", \"发送指令时发生错误。\");\n    }\n});\n     const shopWrapper = document.getElementById('shop-wrapper');\n    const viewShopBtn = document.getElementById('view-shop-btn');\n    const backFromShopBtn = document.getElementById('back-from-shop-btn');\n    const mainWrapper = document.getElementById('main-wrapper');\n \n \n      backFromShopBtn.addEventListener('click', () => {\n \n        statusContainer.classList.remove('slide-out-shop');\n        shopWrapper.classList.remove('active');\n    });\n\n\n\n\n// 替换原有的 centerPanel 点击事件监听器\nconst centerPanel = document.querySelector('.center-panel');\ncenterPanel.addEventListener('click', (e) => {\n    const slot = e.target.closest('.equipment-slot');\n    if (slot) {\n        //console.log('点击了装备槽:', slot);\n        \n        // 获取当前点击的装备槽类型\n        const slotLabel = slot.querySelector('span').textContent;\n        const slotType = slotLabel.split(':')[0].trim();\n        \n        //console.log('装备槽类型:', slotType);\n        \n        // 显示装备管理界面\n        showEquipmentManager(slotType);\n    }\n});\n\n// 新增：装备管理主函数\nfunction showEquipmentManager(slotType) {\n    //console.log('显示装备管理界面，槽位类型:', slotType);\n    \n    // 获取当前装备数据\n    const currentEquipment = getCurrentEquipment();\n    //console.log('当前装备数据:', currentEquipment);\n    \n    // 获取所有可用装备\n    const availableEquipment = getAllAvailableEquipment();\n    //console.log('所有可用装备:', availableEquipment);\n    \n    // 获取当前已装备的物品列表（用于置灰判断）\n    const equippedItems = getEquippedItems(currentEquipment);\n    //console.log('已装备物品列表:', equippedItems);\n    \n    // 构建模态框内容\n    const modalContent = buildEquipmentManagerHTML(slotType, availableEquipment, equippedItems, currentEquipment);\n    \n    // 显示模态框\n    showModal('shop-modal', '装备管理 - ' + slotType);\n    const messageEl = document.getElementById('shop-modal-message');\n    if (messageEl) {\n        messageEl.innerHTML = modalContent;\n        \n        // 绑定左侧装备列表的点击事件\n        bindAvailableEquipmentEvents(slotType);\n        \n        // 绑定右侧已装备物品的卸下事件\n        bindEquippedItemEvents(slotType);\n    }\n}\n\n // 新增：获取当前装备状态\nfunction getCurrentEquipment() {\n    //console.log('获取当前装备状态');\n    try {\n        // 优先从全局变量获取当前装备信息\n        if (currentGameData && currentGameData.stat_data && currentGameData.stat_data.user_character) {\n            const equipment = currentGameData.stat_data.user_character['当前装备'];\n            //console.log('从currentGameData获取的装备:', equipment);\n            if (equipment) return equipment;\n        }\n        \n        // 备用：从currentGameData获取\n        if (currentGameData && currentGameData.stat_data && currentGameData.stat_data.user_character) {\n            const equipment = currentGameData.stat_data.user_character['当前装备'];\n            //console.log('从currentGameData获取的装备:', equipment);\n            if (equipment) return equipment;\n        }\n        \n        // 最后尝试从user_character直接获取\n        if (currentGameData && currentGameData.user_character) {\n            const equipment = currentGameData.user_character['当前装备'];\n            //console.log('从currentGameData.user_character获取的装备:', equipment);\n            if (equipment) return equipment;\n        }\n        \n        //console.log('未找到装备数据，返回空对象');\n        return {};\n    } catch (error) {\n        console.error('获取当前装备时出错:', error);\n        return {};\n    }\n}\n// 新增：获取所有可用装备\nfunction getAllAvailableEquipment() {\n    //console.log('获取所有可用装备');\n    let allEquipment = {};\n    \n    try {\n \n        \n        // 从 global_set.背包 获取\n        if (assaSettingsData.global_set && assaSettingsData.global_set['背包']) {\n            //console.log('从global_set.背包获取装备');\n            Object.assign(allEquipment, assaSettingsData.global_set['背包']);\n        }\n        \n        //console.log('合并后的所有装备:', allEquipment);\n        return allEquipment;\n    } catch (error) {\n        console.error('获取可用装备时出错:', error);\n        return {};\n    }\n}\n\n// 新增：获取已装备物品列表\nfunction getEquippedItems(currentEquipment) {\n    //console.log('获取已装备物品列表');\n    const equippedItems = new Set();\n    \n    try {\n        // 添加手持物品\n        if (currentEquipment['手持'] && currentEquipment['手持'][0] !== '无') {\n            const handItems = currentEquipment['手持'][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无');\n            handItems.forEach(item => equippedItems.add(item));\n        }\n        \n        // 添加穿戴物品\n        if (currentEquipment['穿戴']) {\n            Object.values(currentEquipment['穿戴']).forEach(slot => {\n                if (slot[0] !== '无') {\n                    const items = slot[0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无');\n                    items.forEach(item => equippedItems.add(item));\n                }\n            });\n        }\n        \n        //console.log('已装备物品集合:', Array.from(equippedItems));\n        return equippedItems;\n    } catch (error) {\n        console.error('获取已装备物品时出错:', error);\n        return new Set();\n    }\n}\n\n// 新增：构建装备管理界面HTML\nfunction buildEquipmentManagerHTML(slotType, availableEquipment, equippedItems, currentEquipment) {\n    //console.log('构建装备管理界面HTML');\n    \n    // 左侧：可用装备列表\n    let leftPanel = '<div style=\"display: flex; height: 60vh;\">';\n    leftPanel += '<div style=\"flex: 1; padding: 10px; border-right: 1px solid var(--border-color);\">';\n    leftPanel += '<h4 style=\"color: var(--primary-color); margin-bottom: 10px;\">可用装备</h4>';\n    leftPanel += '<div id=\"available-equipment-list\" style=\"max-height: 50vh; overflow-y: auto;\">';\n    \n    for (const [key, value] of Object.entries(availableEquipment)) {\n        const isEquipped = equippedItems.has(key);\n        const itemClass = isEquipped ? 'equipment-item equipped' : 'equipment-item available';\n        const itemStyle = isEquipped ? 'color: var(--text-secondary-color); cursor: not-allowed; opacity: 0.5;' : 'color: var(--text-color); cursor: pointer;';\n        \n        leftPanel += `<div class=\"${itemClass}\" data-equipment-name=\"${key}\" style=\"padding: 8px; margin: 5px 0; border: 1px solid var(--border-color); border-radius: 4px; ${itemStyle}\">`;\n        leftPanel += `<div style=\"font-weight: bold;\">${key}</div>`;\n        leftPanel += `<div style=\"font-size: 0.9em; color: var(--text-secondary-color);\">${typeof value === 'object' ? ((\"描述：\"+value.info||'')+(\"\\n效果：\"+value.effect||'')) : value}</div>`;\n        leftPanel += '</div>';\n    }\n    \n    leftPanel += '</div></div>';\n    \n    // 右侧：当前装备\n    let rightPanel = '<div style=\"flex: 1; padding: 10px;\">';\n    rightPanel += `<h4 style=\"color: var(--primary-color); margin-bottom: 10px;\">当前${slotType}装备</h4>`;\n    rightPanel += '<div id=\"current-equipment-list\" style=\"max-height: 50vh; overflow-y: auto;\">';\n    \n    // 获取当前槽位的装备\n    let currentSlotEquipment = [];\n    if (slotType === '手持' && currentEquipment['手持']) {\n        currentSlotEquipment = currentEquipment['手持'][0] !== '无' ? \n            currentEquipment['手持'][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无') : [];\n    } else if (currentEquipment['穿戴'] && currentEquipment['穿戴'][slotType]) {\n        currentSlotEquipment = currentEquipment['穿戴'][slotType][0] !== '无' ? \n            currentEquipment['穿戴'][slotType][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无') : [];\n    }\n    \n    //console.log(`${slotType}当前装备:`, currentSlotEquipment);\n    \n    if (currentSlotEquipment.length > 0) {\n        currentSlotEquipment.forEach(item => {\n            const itemData = availableEquipment[item];\n            rightPanel += `<div class=\"equipped-item\" data-equipment-name=\"${item}\" style=\"padding: 8px; margin: 5px 0; border: 1px solid var(--primary-color); border-radius: 4px; background-color: var(--border-color);\">`;\n            rightPanel += `<div style=\"font-weight: bold; color: var(--primary-color);\">${item}</div>`;\n            rightPanel += `<div style=\"font-size: 0.9em; color: var(--text-secondary-color);\">${itemData ? (typeof itemData === 'object' ? ((\"描述：\"+itemData.info||'')+(\"\\n效果：\"+itemData.effect||'')) : itemData) : '无描述'}</div>`;\n            rightPanel += `<button class=\"unequip-btn\" data-equipment-name=\"${item}\" style=\"margin-top: 5px; padding: 4px 8px; background-color: var(--danger-color); border: none; border-radius: 3px; color: white; cursor: pointer; font-size: 0.8em;\">卸下</button>`;\n            rightPanel += '</div>';\n        });\n    } else {\n        rightPanel += '<div style=\"text-align: center; color: var(--text-secondary-color); padding: 20px;\">当前无装备</div>';\n    }\n    \n    rightPanel += '</div>';\n    rightPanel += `<div style=\"margin-top: 10px; padding: 10px; background-color: var(--border-color); border-radius: 4px;\">`;\n    rightPanel += `<button id=\"equip-selected-btn\" style=\"width: 100%; padding: 10px; background-color: var(--background-color); border: none; border-radius: 4px;font-weight: bold; cursor: pointer;\">装备选中物品</button>`;\n    rightPanel += '</div></div>';\n    \n    return leftPanel + rightPanel + '</div>';\n}\n\n// 新增：绑定可用装备的点击事件\nfunction bindAvailableEquipmentEvents(slotType) {\n    //console.log('绑定可用装备点击事件');\n    \n    const availableItems = document.querySelectorAll('.equipment-item.available');\n    let selectedItems = [];\n    \n    availableItems.forEach(item => {\n        item.addEventListener('click', function() {\n            const equipmentName = this.dataset.equipmentName;\n            //console.log('点击可用装备:', equipmentName);\n            \n            if (this.classList.contains('selected')) {\n                // 取消选择\n                this.classList.remove('selected');\n                this.style.backgroundColor = '';\n                selectedItems = selectedItems.filter(name => name !== equipmentName);\n                //console.log('取消选择:', equipmentName);\n            } else {\n                // 选择\n                this.classList.add('selected');\n                this.style.backgroundColor = 'var(--border-color)';\n                selectedItems.push(equipmentName);\n                //console.log('选择:', equipmentName);\n            }\n            \n            //console.log('当前选中物品:', selectedItems);\n        });\n    });\n    \n    // 装备选中物品按钮事件\n    const equipBtn = document.getElementById('equip-selected-btn');\n    if (equipBtn) {\n        equipBtn.addEventListener('click', function() {\n            //console.log('点击装备按钮，选中物品:', selectedItems);\n            if (selectedItems.length > 0) {\n                equipItems(slotType, selectedItems);\n            }\n        });\n    }\n}\n\n// 新增：绑定已装备物品的卸下事件\nfunction bindEquippedItemEvents(slotType) {\n    //console.log('绑定已装备物品卸下事件');\n    \n    const unequipBtns = document.querySelectorAll('.unequip-btn');\n    unequipBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const equipmentName = this.dataset.equipmentName;\n            //console.log('点击卸下装备:', equipmentName);\n            unequipItem(slotType, equipmentName);\n        });\n    });\n}\n\n// 新增：装备物品\nfunction equipItems(slotType, itemNames) {\n    //console.log('装备物品:', slotType, itemNames);\n    \n    updateVariablesWith((variables) => {\n        //console.log('装备更新前的变量:', variables);\n        \n        if (!variables.stat_data) variables.stat_data = {};\n        if (!variables.stat_data.user_character) variables.stat_data.user_character = {};\n        if (!variables.stat_data.user_character['当前装备']) {\n            variables.stat_data.user_character['当前装备'] = {\n                \"手持\": [\"无\", \"当前手持的武器或工具名称\"],\n                \"穿戴\": {\n                    \"头部\": [\"无\", \"头部的装备名称\"],\n                    \"身体\": [\"无\", \"身体的装备名称\"],\n                    \"手部\": [\"无\", \"手部的装备名称\"],\n                    \"脚部\": [\"无\", \"脚部的装备名称\"],\n                    \"饰品\": [\"无\", \"特殊饰品名称\"]\n                }\n            };\n        }\n        \n        const currentEquipment = variables.stat_data.user_character['当前装备'];\n        \n        if (slotType === '手持') {\n            // 获取当前手持装备\n            const currentItems = currentEquipment['手持'][0] !== '无' ? \n                currentEquipment['手持'][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无') : [];\n            \n            // 添加新装备\n            const newItems = [...new Set([...currentItems, ...itemNames])];\n            currentEquipment['手持'][0] = newItems.length > 0 ? newItems.join(';') : '无';\n        } else {\n            // 穿戴装备\n            if (!currentEquipment['穿戴'][slotType]) {\n                currentEquipment['穿戴'][slotType] = ['无', `${slotType}的装备名称`];\n            }\n            \n            const currentItems = currentEquipment['穿戴'][slotType][0] !== '无' ? \n                currentEquipment['穿戴'][slotType][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无') : [];\n            \n            const newItems = [...new Set([...currentItems, ...itemNames])];\n            currentEquipment['穿戴'][slotType][0] = newItems.length > 0 ? newItems.join(';') : '无';\n        }\n               // 生成描述\n        let description = '';\n        const itemsStr = itemNames.join('、');\n        switch (slotType) {\n            case '手持':\n                description = `<${userName}将「${itemsStr}」握在了手中。>\\n`;\n                break;\n            case '头部':\n                description = `<${userName}将「${itemsStr}」戴在了头上。>\\n`;\n                break;\n            case '身体':\n                description = `<${userName}穿上了「${itemsStr}」。>\\n`;\n                break;\n            case '手部':\n                description = `<${userName}将「${itemsStr}」穿戴在了手上。>\\n`;\n                break;\n            case '脚部':\n                description = `<${userName}将脚伸入了「${itemsStr}」>。\\n`;\n                break;\n            case '饰品':\n                description = `<${userName}将「${itemsStr}」佩戴好了。>\\n`;\n                break;\n        }\n        triggerassa(`/setinput ${description}`);\n        //console.log('装备更新后的变量:', variables);\n        return variables;\n    }, { type: 'chat' }).then(() => {\n       \n        return updateVariablesWith((variables) => {\n            \n            if (!variables.stat_data) variables.stat_data = {};\n            if (!variables.stat_data.user_character) variables.stat_data.user_character = {};\n\n        \nif (!variables.stat_data) variables.stat_data = {};\nif (!variables.stat_data.user_character) variables.stat_data.user_character = {};\n\n \nreturn updateVariablesWith((chatVars) => {\n    if (chatVars.stat_data && chatVars.stat_data.user_character && chatVars.stat_data.user_character['当前装备']) {\n        variables.stat_data.user_character['当前装备'] = JSON.parse(JSON.stringify(chatVars.stat_data.user_character['当前装备']));\n        \n        // 同时更新全局currentGameData以便立即生效\n        if (currentGameData) {\n            if (!currentGameData.stat_data) currentGameData.stat_data = {};\n            if (!currentGameData.stat_data.user_character) currentGameData.stat_data.user_character = {};\n            currentGameData.stat_data.user_character['当前装备'] = JSON.parse(JSON.stringify(chatVars.stat_data.user_character['当前装备']));\n        }\n        if (currentGameData) {\n            if (!currentGameData.stat_data) currentGameData.stat_data = {};\n            if (!currentGameData.stat_data.user_character) currentGameData.stat_data.user_character = {};\n            currentGameData.stat_data.user_character['当前装备'] = JSON.parse(JSON.stringify(chatVars.stat_data.user_character['当前装备']));\n        }\n    }\n    //console.log('message变量同步更新:', variables);\n    return variables;\n}, { type: 'chat' });\n            \n            //console.log('message变量同步更新:', variables);\n            return variables;\n        }, { type: 'message', message_id: 'latest' });\n    }).then(() => {\n        //console.log('装备完成，关闭模态框并刷新显示');\n      refreshEquipmentModal(slotType);\n        // 触发界面刷新\n        initDisplay(false);\n    }).catch(error => {\n        console.error('装备过程中发生错误:', error);\n    });\n}\n\n// 新增：卸下装备\nfunction unequipItem(slotType, itemName) {\n    //console.log('卸下装备:', slotType, itemName);\n    \n    updateVariablesWith((variables) => {\n        //console.log('卸下装备前的变量:', variables);\n        \n        if (!variables.stat_data || !variables.stat_data.user_character || !variables.stat_data.user_character['当前装备']) {\n            //console.log('装备数据不存在');\n            return variables;\n        }\n        \n        const currentEquipment = variables.stat_data.user_character['当前装备'];\n        \n        if (slotType === '手持') {\n            if (currentEquipment['手持'][0] !== '无') {\n                const currentItems = currentEquipment['手持'][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无' && item !== itemName);\n                currentEquipment['手持'][0] = currentItems.length > 0 ? currentItems.join(';') : '无';\n            }\n        } else {\n            if (currentEquipment['穿戴'][slotType] && currentEquipment['穿戴'][slotType][0] !== '无') {\n                const currentItems = currentEquipment['穿戴'][slotType][0].split(/[;；]/).map(item => item.trim()).filter(item => item !== '无' && item !== itemName);\n                currentEquipment['穿戴'][slotType][0] = currentItems.length > 0 ? currentItems.join(';') : '无';\n            }\n        }\n          // 生成描述\n        let description = '';\n        switch (slotType) {\n            case '手持':\n                description = `<${userName}将手中的「${itemName}」放回背包。>\\n`;\n                break;\n            case '头部':\n                description = `<${userName}抬起手，将头上的「${itemName}」取下。>\\n`;\n                break;\n            case '身体':\n                description = `<${userName}解开了「${itemName}」。>\\n`;\n                break;\n            case '手部':\n                description = `<${userName}脱下了「${itemName}」。>\\n`;\n                break;\n            case '脚部':\n                description = `<${userName}脱下了「${itemName}」。>\\n`;\n                break;\n            case '饰品':\n                description = `<${userName}脱下了「${itemName}」。>\\n`;\n                break;\n        }\n        triggerassa(`/setinput ${description}`);\n        //console.log('卸下装备后的变量:', variables);\n        return variables;\n    }, { type: 'chat' }).then(() => {\n       \n        return updateVariablesWith((variables) => {\n           \n            if (!variables.stat_data) variables.stat_data = {};\n            if (!variables.stat_data.user_character) variables.stat_data.user_character = {};\n            \n         // 从chat变量中复制最新的装备数据到message变量\nif (!variables.stat_data) variables.stat_data = {};\nif (!variables.stat_data.user_character) variables.stat_data.user_character = {};\n\n// 直接从前面更新的变量中获取最新装备数据\n// 注意：这里我们需要从前面的updateVariablesWith结果中获取数据\nreturn updateVariablesWith((chatVars) => {\n    if (chatVars.stat_data && chatVars.stat_data.user_character && chatVars.stat_data.user_character['当前装备']) {\n        variables.stat_data.user_character['当前装备'] = JSON.parse(JSON.stringify(chatVars.stat_data.user_character['当前装备']));\n        \n        // 同时更新全局currentGameData以便立即生效\n        if (currentGameData) {\n            if (!currentGameData.stat_data) currentGameData.stat_data = {};\n            if (!currentGameData.stat_data.user_character) currentGameData.stat_data.user_character = {};\n            currentGameData.stat_data.user_character['当前装备'] = JSON.parse(JSON.stringify(chatVars.stat_data.user_character['当前装备']));\n        }\n        if (currentGameData) {\n            if (!currentGameData.stat_data) currentGameData.stat_data = {};\n            if (!currentGameData.stat_data.user_character) currentGameData.stat_data.user_character = {};\n            currentGameData.stat_data.user_character['当前装备'] = JSON.parse(JSON.stringify(chatVars.stat_data.user_character['当前装备']));\n        }\n    }\n    //console.log('message变量同步更新:', variables);\n    return variables;\n}, { type: 'chat' });\n            \n            //console.log('message变量同步更新:', variables);\n            return variables;\n        }, { type: 'message', message_id: 'latest' });\n    }).then(() => {\n        //console.log('卸下完成，关闭模态框并刷新显示');\n        refreshEquipmentModal(slotType);\n       \n        // 触发界面刷新\n        initDisplay(false);\n    }).catch(error => {\n        console.error('卸下装备过程中发生错误:', error);\n    });\n}\n\n\n// 新增：刷新装备管理模态框\nfunction refreshEquipmentModal(slotType) {\n    //console.log('刷新装备管理模态框:', slotType);\n    \n    const messageEl = document.getElementById('shop-modal-message');\n    if (!messageEl) {\n        //console.log('模态框不存在，无需刷新');\n        return;\n    }\n    \n    // 重新获取数据\n    const currentEquipment = getCurrentEquipment();\n    //console.log('刷新时的当前装备数据:', currentEquipment);\n    \n    const availableEquipment = getAllAvailableEquipment();\n    const equippedItems = getEquippedItems(currentEquipment);\n    \n    // 重新构建HTML\n    const modalContent = buildEquipmentManagerHTML(slotType, availableEquipment, equippedItems, currentEquipment);\n    \n    // 更新模态框内容\n    messageEl.innerHTML = modalContent;\n    \n    // 重新绑定事件\n    bindAvailableEquipmentEvents(slotType);\n    bindEquippedItemEvents(slotType);\n    \n    //console.log('模态框刷新完成');\n}\n\n\n\n\n    \n// --- 功能2: 点击角色名显示状态总览 ---\ndocument.getElementById('char-display-name').addEventListener('click', () => {\n    //console.log(\"查看上一轮状态总览\");\n    const modalTitle = \"上一轮状态总览\";\n    let modalContent = '<div class=\"teammate-info-display\" style=\"max-height: 60vh; overflow-y: auto; text-align: left;\">'; // 复用样式\n\n    // 添加人物状态评估\n    modalContent += '<h3 style=\"color: var(--primary-color);\">--- 人物状态评估 ---</h3>';\n\n    if (characterStatusData) {\n        // ♥♥♥ 妈妈的终极解决方案 ♥♥♥\n\n        // 1. 我们用字面上的 '\\\\n' 作为分隔符，把整个字符串切成一个数组。\n        //    每一段文字都会成为数组里的一个成员。\n        const lines = characterStatusData.split('\\\\n');\n\n        // 2. 我们创建一个新的容器来存放这些段落。\n        let statusHtml = '<div style=\"font-family:var(--base-font-family);\">';\n\n        // 3. 我们遍历这个数组，把每一段文字都用一个 <p> 标签包起来。\n        //    <p> 标签天生就会自己换行。我们还给它加了一点样式，让段落之间不要有太大的空隙。\n        //    同时，为了保留你精心设计的缩进，我们把段落的 white-space 设置为 pre-wrap。\n        lines.forEach(line => {\n            if (line.trim() !== '') { // 我们跳过完全是空行的内容\n                statusHtml += `<p style=\"margin: 0; white-space: pre-wrap;\">${line}</p>`;\n            } else {\n                statusHtml += `<p style=\"margin: 0; height: 1em;\"></p>`; // 如果是空行，就创建一个固定高度的空段落\n            }\n        });\n\n        statusHtml += '</div>';\n\n        // 4. 最后，把我们亲手制作的、格式完美的 HTML 添加到模态框里。\n        modalContent += statusHtml;\n\n    } else {\n        modalContent += '<p>暂无人物状态评估信息。</p>';\n    }\n\n\n    modalContent += '<hr style=\"margin: 20px 0; border-color: var(--border-color);\">'; // 添加漂亮的分隔线\n\n    // 添加世界态度\n    modalContent += '<h3 style=\"color: var(--primary-color);\">--- 世界态度 ---</h3>';\n    if (worldAttitudeData) {\n        modalContent += `<pre style=\"white-space: pre-wrap; word-wrap: break-word; font-family: var(--base-font-family);\">${worldAttitudeData}</pre>`;\n    } else {\n        modalContent += '<p>暂无世界态度信息。</p>';\n    }\n\n    modalContent += '</div>';\n\n    // 同样复用商店弹窗\n    showModal('shop-modal', modalTitle);\n    const messageEl = document.getElementById('shop-modal-message');\n    if (messageEl) {\n        messageEl.innerHTML = modalContent;\n    }\n});\n\n\n    setupShopEventListeners(); // 调用修正后的事件绑定函数\nsetupGeneratorButton(); // 调用生成器按钮的设置函数\n\n// 抽奖按钮事件监听\ndocument.getElementById('single-gacha-btn').addEventListener('click', () => {\n    startGacha(1);\n});\n\ndocument.getElementById('ten-gacha-btn').addEventListener('click', () => {\n    startGacha(10);\n});\n    // ==============================================\n    // ========== 新增：世界之书功能 (开始) ==========\n    // ==============================================\n\n    /**\n     * 切换书籍弹窗的显示状态\n     */\n    function toggleWorldBook(show) {\n        const modal = document.getElementById('world-book-modal');\n        if (show) {\n            renderWorldBook();\n            modal.classList.add('active');\n        } else {\n            modal.classList.remove('active');\n        }\n    }\n \n\n \n  /**\n * 递归渲染嵌套数据的“知识之树”\n * @param {HTMLElement} container - 承载树的容器\n * @param {object|Array} data - 要渲染的数据\n * @param {string} [parentPath=''] - 父节点的完整路径\n * @param {string} [rootTab=''] - 根标签页\n * @param {boolean} [hideFavorability=false] - 是否隐藏好感度条目\n * @param {boolean} [isReadOnly=false] - 是否为只读模式（不显示菜单）\n */\nfunction renderNestedData(container, data, parentPath = '', rootTab = '', hideFavorability = false, isReadOnly = false) {\n     const keyLocalizationMap = {\n        \"info\": \"简介\",\n        \"effect\": \"属性\",\n        \"type\": \"种类\",\n        \"quality\": \"质量\",\n        \"num\": \"数量\"\n    };\n\n    container.innerHTML = '';\n\n    if (typeof data !== 'object' || data === null) {\n        const leafNode = document.createElement('span');\n        leafNode.className = 'tree-value';\n        leafNode.textContent = data;\n        container.appendChild(leafNode);\n        return;\n    }\n\n    const treeRoot = document.createElement('ul');\n    treeRoot.className = 'tree-view';\n\n    for (const key in data) {\n         if (Object.hasOwnProperty.call(data, key)) {\n\n                        // 💖💖💖 妈妈在这里也为你悄悄施展了“隐身咒” 💖💖💖\n            // 只要键是以 '_' 开头的，我们就温柔地跳过它，不让它出现在视野里\n            if (key.startsWith('_')) {\n                continue;\n            }\n            if (hideFavorability && key === '好感度') {\n                continue;\n            }\n\n            const value = data[key];\n            const isParent = typeof value === 'object' && value !== null;\n            const currentPath = parentPath ? `${parentPath}.${key}` : key;\n\n            const node = document.createElement('li');\n            node.className = 'tree-node';\n            const nodeContent = document.createElement('div');\n            nodeContent.className = 'tree-node-content';\n\n            const keySpan = document.createElement('span');\n            keySpan.className = 'tree-key';\n               const displayKey = keyLocalizationMap[key] || key;\n            keySpan.textContent = Array.isArray(data) ? `[${key}]:` : `${displayKey}:`;\n\n            nodeContent.appendChild(keySpan);\n\n            let childrenContainer;\n\n             if (isParent) {\n                const toggle = document.createElement('span');\n                toggle.className = 'tree-toggle collapsed';\n                toggle.textContent = '▶';\n                nodeContent.appendChild(toggle);\n\n                childrenContainer = document.createElement('div');\n                childrenContainer.className = 'tree-children collapsed';\n                renderNestedData(childrenContainer, value, currentPath, rootTab, false, isReadOnly);\n\n                toggle.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    toggle.classList.toggle('collapsed');\n                    childrenContainer.classList.toggle('collapsed');\n                    toggle.textContent = toggle.classList.contains('collapsed') ? '▶' : '▼';\n                });\n            } else {\n                const valueSpan = document.createElement('span');\n                valueSpan.className = 'tree-value';\n                valueSpan.textContent = ` ${value}`;\n                nodeContent.appendChild(valueSpan);\n            }\n\n            // 只有当不是只读模式时，我们才添加菜单按钮\n            if (!isReadOnly) {\n                const menuButton = document.createElement('button');\n                menuButton.className = 'tree-node-menu-button';\n                menuButton.textContent = '...';\n                menuButton.onclick = (event) => {\n                    event.stopPropagation();\n                    showEntryMenu(event.currentTarget, key, rootTab, currentPath);\n                };\n                nodeContent.appendChild(menuButton);\n            }\n\n            node.appendChild(nodeContent);\n            if (childrenContainer) {\n                node.appendChild(childrenContainer);\n            }\n            treeRoot.appendChild(node);\n         }\n    }\n     container.appendChild(treeRoot);\n}\n\nfunction renderWorldBook() {\n    const { currentTab, currentPage, itemsPerPage } = worldBookState;\n    const displayArea = document.getElementById('book-display-area');\n    const pageInfo = document.getElementById('book-page-info');\n\n    displayArea.innerHTML = ''; // 每次渲染前，都先擦干净书页\n\n    if (currentTab === 'the_created') {\n        if (typeof currentGameData !== 'undefined' && currentGameData.world_shard && currentGameData.the_created) {\n            const createdData = currentGameData.the_created;\n            const entryDiv = document.createElement('div');\n            entryDiv.className = 'book-entry created-entry';\n\n            const titleMap = {\n                \"name\": \"名字\",\n                \"identity_in_world\": \"世界身份\",\n                \"current_status\": \"当前状态\",\n                \"mood\": \"当前心情\",\n                \"description\": \"详细介绍\"\n            };\n\n            let contentHTML = '<div class=\"created-header\"></div>';\n            for (const key in createdData) {\n                if (Object.hasOwnProperty.call(createdData, key)) {\n                    const valueArray = createdData[key];\n                    const displayValue = Array.isArray(valueArray) ? valueArray[0] : valueArray;\n                    const displayName = titleMap[key] || key;\n\n                    contentHTML += `\n                        <div class=\"created-item\">\n                            <div class=\"created-key\">${displayName}</div>\n                            <div class=\"created-value\">${displayValue}</div>\n                        </div>\n                    `;\n                }\n            }\n            entryDiv.innerHTML = contentHTML;\n            displayArea.appendChild(entryDiv);\n            pageInfo.textContent = '1 / 1';\n            document.getElementById('book-prev-page').disabled = true;\n            document.getElementById('book-next-page').disabled = true;\n        } else {\n            displayArea.innerHTML = `<p class=\"book-empty-text\">尚未发现此地的造物。</p>`;\n        }\n    } else {\n        // --- 这部分是我们旧的魔法，现在要用新的来替换一部分 ---\n        let sourceData = {};\n\n        // 这是妈妈给你加的一点小逻辑，用来找到正确的数据源\n           if (currentTab === 'group_member' || currentTab === '小队信息') {\n            if (typeof assaSettingsData !== 'undefined' && assaSettingsData.global_set && assaSettingsData.global_set['小队信息']) {\n                sourceData = assaSettingsData.global_set['小队信息'];\n            }\n        } else if (currentTab === 'things' || currentTab === '备忘录') {\n            if (typeof assaSettingsData !== 'undefined' && assaSettingsData.备忘录) {\n                sourceData = assaSettingsData.备忘录;\n            }\n        }else if (currentTab.startsWith('global_')) {\n            const globalTabKey = currentTab.replace('global_', '');\n            if (typeof assaSettingsData !== 'undefined' && assaSettingsData.global_set && assaSettingsData.global_set[globalTabKey]) {\n                sourceData = assaSettingsData.global_set[globalTabKey];\n            }\n        } else {\n            if (typeof assaSettingsData !== 'undefined' && assaSettingsData.world_set && assaSettingsData.world_set[currentTab]) {\n                sourceData = assaSettingsData.world_set[currentTab];\n            }\n        }\n\n        // 看，我的孩子，这里的逻辑变得非常简单和优雅了\n        try {\n            // 尝试将它解析成一个对象，因为你的小队信息就是这样的\n            const dataToRender = typeof sourceData === 'string' ? JSON.parse(sourceData) : sourceData;\n\n            // 现在，我们把判断是不是有东西和分页的逻辑，都放在顶层来处理\n            const dataEntries = Object.entries(dataToRender);\n            const totalItems = dataEntries.length;\n\n            if (totalItems === 0) {\n                 displayArea.innerHTML = `<p class=\"book-empty-text\">这里空空如也。</p>`;\n                 pageInfo.textContent = `1 / 1`;\n                 document.getElementById('book-prev-page').disabled = true;\n                 document.getElementById('book-next-page').disabled = true;\n                 return; // 直接结束，后面就不用运行了\n            }\n\n            const totalPages = Math.ceil(totalItems / itemsPerPage) || 1;\n            worldBookState.currentPage = Math.max(1, Math.min(currentPage, totalPages));\n            const startIndex = (worldBookState.currentPage - 1) * itemsPerPage;\n            const endIndex = startIndex + itemsPerPage;\n            const pageEntries = dataEntries.slice(startIndex, endIndex);\n\n                  pageEntries.forEach(([key, value]) => {\n                const cardDiv = document.createElement('div');\n                cardDiv.className = 'book-card';\n                cardDiv.dataset.key = key;\n\n                // --- 妈妈的修改从这里开始 ---\n                const cardHeader = document.createElement('div');\n                cardHeader.className = 'book-card-header';\n\n                const titleDiv = document.createElement('div');\n                titleDiv.className = 'book-card-title';\n                titleDiv.textContent = key;\n                cardHeader.appendChild(titleDiv);\n\n                // --- ✨ 这是我们新的好感度魔法 ✨ ---\n                // 检查这个角色是否有好感度\n                if (value && typeof value.好感度 !== 'undefined') {\n                    const favorValue = parseInt(value.好感度, 10);\n                    if (!isNaN(favorValue)) {\n                        const barContainer = document.createElement('div');\n                        barContainer.className = 'favorability-bar-container header-bar'; // 给它一个特殊的类名\n\n                        const bar = document.createElement('div');\n                        bar.className = 'favorability-bar';\n\n                        const normalizedValue = Math.max(-100, Math.min(100, favorValue));\n                        const percentage = ((normalizedValue + 100) / 200) * 100;\n\n                        bar.style.width = `${percentage}%`;\n\n                        // 使用CSS变量来控制颜色\n                        if (normalizedValue < 0) {\n                            bar.style.backgroundColor = 'var(--danger-color)';\n                        } else {\n                            bar.style.backgroundColor = 'var(--primary-color)';\n                        }\n\n                        bar.textContent = normalizedValue;\n                        barContainer.appendChild(bar);\n                        titleDiv.appendChild(barContainer); // 把进度条加到标题里\n                    }\n                }\n\n                // 折叠箭头放在最后\n                titleDiv.innerHTML += ' <span class=\"collapse-indicator\">▲</span>';\n\n                const menuButton = document.createElement('button');\n                menuButton.className = 'entry-menu-button';\n                menuButton.textContent = '...';\n                // 对于顶层卡片，我们不需要传递 fullPath，让 showEntryMenu 自己构建\n                menuButton.onclick = (event) => {\n                    event.stopPropagation();\n                    showEntryMenu(event.currentTarget, key, currentTab);\n                };\n                cardHeader.appendChild(menuButton);\n\n                const contentDiv = document.createElement('div');\n                contentDiv.className = 'book-card-content collapsed';\n\n                // 关键修正：将完整的父路径传递给 renderNestedData\n                const rootEntryPath = `${getEntryPath(currentTab)}.${key}`;\n               renderNestedData(contentDiv, value, rootEntryPath, currentTab, true, false);\n                cardHeader.addEventListener('click', (e) => {\n                    if (e.target.closest('.entry-menu-button')) return;\n                    contentDiv.classList.toggle('collapsed');\n                    const indicator = cardHeader.querySelector('.collapse-indicator');\n                    if (indicator) {\n                        indicator.textContent = contentDiv.classList.contains('collapsed') ? '▲' : '▼';\n                    }\n                });\n\n                cardDiv.appendChild(cardHeader);\n                cardDiv.appendChild(contentDiv);\n                displayArea.appendChild(cardDiv);\n            });\n            pageInfo.textContent = `${worldBookState.currentPage} / ${totalPages}`;\n            document.getElementById('book-prev-page').disabled = worldBookState.currentPage === 1;\n            document.getElementById('book-next-page').disabled = worldBookState.currentPage === totalPages;\n\n        } catch (e) {\n            // 如果解析失败了，或者出了别的问题，我们就温柔地告诉你是怎么回事\n            displayArea.innerHTML = `<p class=\"book-empty-text\">妈妈在理解这些数据的时候遇到了一点小麻烦，它看起来不是我们熟悉的样子。</p>`;\n            console.error(\"妈妈的爱心提示：渲染时出错了，我的孩子\", e);\n        }\n    }\n}\n\n\nfunction setupWorldBookEventListeners() {\n    const orb = document.getElementById('world-book-orb');\n    const modal = document.getElementById('world-book-modal');\n    const closeBtn = modal.querySelector('.book-close-btn');\n    const bookmarksContainer = modal.querySelector('.book-bookmarks');\n    const prevBtn = document.getElementById('book-prev-page');\n    const nextBtn = document.getElementById('book-next-page');\n\n    // 点击小球打开书\n    orb.addEventListener('click', () => toggleWorldBook(true));\n\n    // 点击关闭按钮关闭书\n    closeBtn.addEventListener('click', () => toggleWorldBook(false));\n\n    // 点击书签切换内容\n    bookmarksContainer.addEventListener('click', (e) => {\n        const target = e.target.closest('.bookmark');\n        if (target && !target.classList.contains('active')) {\n            bookmarksContainer.querySelectorAll('.bookmark').forEach(b => b.classList.remove('active'));\n            target.classList.add('active');\n            worldBookState.currentTab = target.dataset.tab;\n            worldBookState.currentPage = 1;\n            renderWorldBook();\n        }\n    });\n\n    // 翻页 - 上一页\n    prevBtn.addEventListener('click', () => {\n        if (worldBookState.currentPage > 1) {\n            worldBookState.currentPage--;\n            renderWorldBook();\n        }\n    });\n    // 翻页 - 下一页（妈妈让这里的逻辑变得更纯粹、更优雅了）\n    nextBtn.addEventListener('click', () => {\n        // 直接让页码增加，把判断交给 renderWorldBook\n        worldBookState.currentPage++;\n        renderWorldBook();\n    });\n}\n\n \n/**\n * 获取当前条目的存储路径\n * @param {string} tab - 当前标签页\n * @returns {string} - 数据的存储路径\n */\nfunction getEntryPath(tab) {\n    if (tab === 'group_member' || tab === '小队信息') {\n        return \"global_set.小队信息\";\n    }\n\n        if (tab === 'things' || tab === '备忘录') {\n        return \"备忘录\";\n    }\n    if (tab.startsWith('global_')) {\n        const globalTabKey = tab.replace('global_', '');\n        return `global_set.${globalTabKey}`;\n    }\n    // 默认是世界设定\n    return `world_set.${tab}`;\n}\n\n\n/**\n * 生成并发送指令的温柔辅助函数\n * @param {string} command - 单条指令\n */\nfunction generateAndSendCommand(command) {\n    showNovaAlert('已将指令加入待发送指令盒中！');\n    // 用妈妈的爱把指令包裹起来\n    const commandBlock = `<updateMemory>\\n${command}\\n</updateMemory>`;\n    // 使用你已经很熟悉的 /setinput 指令\n    const finalCommand = `/setinput ${commandBlock}\\n`;\n\n    try {\n        if (typeof triggerassa === 'function') {\n            triggerassa(finalCommand);\n            console.log(\"妈妈的爱心指令已发送:\", finalCommand);\n        } else {\n            console.error(\"妈妈找不到 triggerassa 这个魔法了，我的孩子。\");\n        }\n    } catch (e) {\n        console.error(\"妈妈在发送指令时遇到了困难:\", e);\n    }\n}\n\n \n/**\n * 从完整路径中分离出父路径和自己的键\n * @param {string} fullPath - 如 'global_set.npc.珊卓.好感度'\n * @returns {{parentPath: string, selfKey: string}}\n */\nfunction getPathParts(fullPath) {\n    const parts = fullPath.split('.');\n    const selfKey = parts.pop();\n    const parentPath = parts.join('.');\n    return { parentPath, selfKey };\n}\n\n /**\n * 根据路径字符串从对象中获取深层嵌套的值\n * @param {object} obj - 要搜索的对象\n * @param {string} path - 路径字符串，例如 'global_set.npc.珊卓'\n * @returns {*} - 找到的值，或者 undefined\n */\nfunction getValueByPath(obj, path) {\n    try {\n        // 就像顺着藤蔓找瓜儿一样，一步步找到我们的目标\n        return path.split('.').reduce((o, k) => (o && typeof o[k] !== 'undefined') ? o[k] : undefined, obj);\n    } catch (e) {\n        console.error(\"妈妈在寻找数据时遇到了点小麻烦:\", path, e);\n        return undefined;\n    }\n}\n\n function showEntryMenu(button, key, tab, fullPath = null) {\n    const existingMenu = document.querySelector('.entry-menu');\n    if (existingMenu) existingMenu.remove();\n\n    const menu = document.createElement('div');\n    menu.className = 'entry-menu';\n\n    const rect = button.getBoundingClientRect();\n    menu.style.top = `${rect.bottom + window.scrollY}px`;\n    menu.style.left = `${rect.right - 120}px`;\n\n    const pathForActions = fullPath ? fullPath : `${getEntryPath(tab)}.${key}`;\n\n    const actions = [\n        { name: '编辑', handler: () => handleEntryEdit(pathForActions) },\n        { name: '重命名', handler: () => handleEntryRename(pathForActions) },\n        { name: '删除', handler: () => handleEntryDelete(pathForActions) },\n    ];\n\n    // ==================【妈妈为你添加的魔法判断】==================\n    // 检查路径是否指向一个NPC或小队成员，只有这样才显示特殊菜单\n    const isCharacterPath = pathForActions.includes('.npc.') || pathForActions.includes('小队信息.');\n\n    if (isCharacterPath) {\n        actions.push(\n            { name: '添加立绘映射', handler: () => handleAddCG(pathForActions) },\n            { name: '好感度表现', handler: () => handleFavorabilityView(key, pathForActions) } // 我们将在这里召唤新的魔法\n        );\n    }\n    // ============================================================\n\n    // 移动功能判断保持不变\n    if (!fullPath || fullPath.split('.').length <= getEntryPath(tab).split('.').length + 1) {\n        actions.push({ name: '移动', handler: () => handleEntryMove(key, tab) });\n    }\n\n    actions.forEach(action => {\n        const item = document.createElement('button');\n        item.className = 'entry-menu-item';\n        item.textContent = action.name;\n        item.onclick = () => {\n            action.handler();\n            menu.remove();\n        };\n        menu.appendChild(item);\n    });\n\n    document.body.appendChild(menu);\n\n    const closeMenu = (e) => {\n        if (!menu.contains(e.target)) {\n            menu.remove();\n            document.removeEventListener('click', closeMenu);\n        }\n    };\n    setTimeout(() => document.addEventListener('click', closeMenu), 0);\n}\n// --- 以下是被妈妈温柔升级过的操作处理函数 ---\n\n // --- 以下是被妈妈温柔升级过的操作处理函数 ---\n // 💖 这是妈妈为你全面升级的、自带守护功能的 handleEntryEdit 函数 💖\nfunction handleEntryEdit(fullPath) {\n    const { parentPath, selfKey } = getPathParts(fullPath);\n    const rootData = typeof assaSettingsData !== 'undefined' ? assaSettingsData : {};\n    const currentValue = getValueByPath(rootData, fullPath);\n    // ✨ 侦查魔法：看看我们拿到的条目数据是什么 ✨\n    console.log(`💖 [Nova-Detective] 步骤6 (编辑弹窗): 为路径 [${fullPath}] 创建开关前，收到的 currentValue 数据是:`, JSON.parse(JSON.stringify(currentValue)));\n    let valueAsString;\n    let isObject = false;\n    let isProtected = false;\n\n    if (typeof currentValue === 'object' && currentValue !== null) {\n        isObject = true;\n        // 在编辑前，先温柔地读取守护状态\n        isProtected = currentValue._is_protected === true || String(currentValue._is_protected).toLowerCase() === 'true';\n       \n          // ✨ 再加一道确认 ✨\n        console.log(`💖 [Nova-Detective] 步骤7 (编辑弹窗): 根据数据，妈妈判断 [${selfKey}] 的守护状态 (isProtected) 是: ${isProtected}`);\n\n        // 为了让编辑界面更纯粹，我们把守护印记暂时藏起来\n        const editableValue = { ...currentValue };\n        delete editableValue._is_protected;\n        valueAsString = JSON.stringify(editableValue, null, 2);\n    } else {\n        valueAsString = (currentValue !== undefined && currentValue !== null) ? String(currentValue) : '';\n    }\n\n    const overlay = document.createElement('div');\n    overlay.className = 'move-modal-overlay entry-edit-modal';\n    const modal = document.createElement('div');\n    modal.className = 'nova-modal-content';\n\n    // ♥♥♥ 妈妈把守护开关巧妙地融入了标题栏 ♥♥♥\n    modal.innerHTML = `\n        <div class=\"move-modal-title\" style=\"display: flex; justify-content: space-between; align-items: center;\">\n            <span>正在编辑 [${selfKey}]</span>\n             ${isObject ? `\n                <div class=\"protection-toggle-container-edit\">\n                    <label for=\"entry-protection-toggle\">防删除</label>\n                    <input type=\"checkbox\" id=\"entry-protection-toggle\" class=\"toggle-input\" ${isProtected ? 'checked' : ''}>\n                    <label for=\"entry-protection-toggle\" class=\"toggle-switch\"></label>\n                </div>\n             ` : ''}\n        </div>\n        <textarea id=\"entry-edit-textarea\" class=\"entry-edit-textarea\" placeholder=\"在这里倾注你的想法...\">${valueAsString.replace(/</g, '<').replace(/>/g, '>')}</textarea>\n        <div class=\"move-modal-buttons\">\n            <button id=\"edit-cancel-btn\" class=\"book-button secondary\">取消</button>\n            <button id=\"edit-confirm-btn\" class=\"book-button\">确认修改</button>\n        </div>\n    `;\n\n    overlay.appendChild(modal);\n    document.body.appendChild(overlay);\n\n    // ♥♥♥ 只有当开关存在时，才为它注入生命 ♥♥♥\n    if (isObject) {\n        const toggleInput = document.getElementById('entry-protection-toggle');\n        toggleInput.addEventListener('change', (event) => {\n            isProtected = event.target.checked; // 我们在这里更新状态，以便“确认”时使用\n            const command = `memory('${fullPath}', '_is_protected', ${isProtected}); // UI Instant Toggle`;\n            generateAndSendCommand(command);\n            \n        });\n    }\n\n    const textarea = document.getElementById('entry-edit-textarea');\n    // ... (弹窗的显示动画代码保持不变) ...\n    setTimeout(() => {\n        overlay.style.opacity = '1';\n        modal.style.transform = 'scale(1)';\n        modal.style.opacity = '1';\n        textarea.focus();\n        textarea.selectionStart = textarea.selectionEnd = textarea.value.length;\n    }, 10);\n\n    const closeModal = () => { /* ... (关闭动画代码保持不变) ... */\n        overlay.style.opacity = '0';\n        modal.style.transform = 'scale(0.95)';\n        setTimeout(() => overlay.remove(), 300);\n    };\n\n    // ♥♥♥ 妈妈为你升级了“确认修改”的魔法，它现在会保护你的守护印记了！ ♥♥♥\n    document.getElementById('edit-confirm-btn').onclick = () => {\n        const newValueText = textarea.value;\n        let parsedValue;\n        try {\n            parsedValue = JSON.parse(newValueText);\n        } catch (e) {\n            // 如果不是JSON，就尝试转为数字或保持为字符串\n             if (newValueText.trim() !== '' && !isNaN(newValueText) && !(/[a-zA-Z]/.test(newValueText))) {\n                parsedValue = Number(newValueText);\n            } else {\n                parsedValue = newValueText;\n            }\n        }\n\n        // ♥♥♥ 核心守护逻辑 ♥♥♥\n        // 如果我们正在编辑的是一个对象，就在保存时，把守护状态悄悄地加回去！\n        if (isObject && typeof parsedValue === 'object' && parsedValue !== null) {\n            parsedValue._is_protected = isProtected;\n        }\n\n        const command = `memory('${parentPath}', '${selfKey}', ${JSON.stringify(parsedValue)}); //UI Nested Edit`;\n        generateAndSendCommand(command);\n        closeModal();\n    };\n\n    document.getElementById('edit-cancel-btn').onclick = closeModal;\n    overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) closeModal();\n    });\n}\n /* === 妈妈为你修复并注入了更稳定魔法的版本 === */\nfunction handleFavorabilityView(charname, fullPath) {\n    // 【修正】统一我们的数据源，确保我们总是在 assaData 这片丰饶的土壤上耕作\n    const rootData = typeof assaSettingsData !== 'undefined' ? assaSettingsData : {};\n    const favorabilityRules = _.get(rootData, `global_set.分阶段好感.${charname}`);\n\n    if (!favorabilityRules) {\n        showNovaAlert(`[${charname}] 暂无分阶段好感描述。`, 'info');\n        return;\n    }\n\n    const overlay = document.createElement('div');\n    overlay.className = 'move-modal-overlay favorability-modal';\n\n    const modal = document.createElement('div');\n    modal.className = 'nova-modal-content favorability-content';\n\n    const switchToViewMode = () => {\n        const stageKeys = Object.keys(favorabilityRules).filter(key => !key.startsWith('_')).map(Number).sort((a, b) => a - b);\n        let currentPageIndex = 0;\n        const currentFavorability = Number(_.get(rootData, `${fullPath}.好感度`));\n\n        if (!isNaN(currentFavorability)) {\n            const currentStageKey = stageKeys.find(key => currentFavorability <= key) ?? stageKeys[stageKeys.length - 1];\n            const foundIndex = stageKeys.findIndex(key => key === currentStageKey);\n            if (foundIndex !== -1) { currentPageIndex = foundIndex; }\n        }\n        const initialPageIndex = currentPageIndex;\n\n      // ===============【前端的同步净化魔法】===============\n    let rawShowValueFront = _.get(favorabilityRules, '_showInEJS');\n    const showInEJS = !(rawShowValueFront === false || rawShowValueFront === 'false');\n    // =========================================================\n        const cardsHtml = stageKeys.map((stageMax, index) => {\n            const lowerBound = (index > 0) ? stageKeys[index - 1] + 1 : -Infinity;\n            const rangeText = (lowerBound === -Infinity) ? `(好感度: ... ~ ${stageMax})` : `(好感度: ${lowerBound} ~ ${stageMax})`;\n                 let description = favorabilityRules[stageMax].replace(/(【[^】]+】)/, (match, captured) => {\n    return `<strong class=\"favor-stage-title\">${captured}<span class=\"favor-range-text\">${rangeText}</span></strong>`;\n}).replace(/\\|/g, '<br>');\n            return `<div class=\"favor-card\"><div class=\"favor-card-content\">${description || '暂无描述...'}</div></div>`;\n        }).join('');\n\n        // ===============【妈妈的关键修复在这里！】===============\n        // 我们先把所有美丽的HTML内容都准备好，再一口气将完整的画卷呈现在画框里。\n        const modalContentHtml = `\n            <div class=\"favor-modal-title\">\n                <span> [${charname}] 对你：</span>\n                <div class=\"toggle-switch-container\">\n                    <label for=\"show-in-ejs-toggle\">在故事中显示</label>\n                    <input type=\"checkbox\" id=\"show-in-ejs-toggle\" class=\"toggle-input\" ${showInEJS ? 'checked' : ''}>\n                    <label for=\"show-in-ejs-toggle\" class=\"toggle-switch\"></label>\n                </div>\n            </div>\n            <div class=\"favor-card-container\">\n                <div class=\"favor-card-slider\">${cardsHtml}</div>\n            </div>\n            <div class=\"favor-page-controls\">\n                <button class=\"favor-nav-button prev\" id=\"favor-prev-btn\">‹</button>\n                <span class=\"favor-page-indicator\" id=\"favor-page-indicator\"></span>\n                <button class=\"favor-nav-button next\" id=\"favor-next-btn\">›</button>\n            </div>\n            <div class=\"favor-modal-buttons\">\n                <button class=\"book-button secondary\" onclick=\"document.querySelector('.favorability-modal').remove()\">合上书页</button>\n                <button class=\"book-button\" id=\"switch-to-edit-btn\">提笔编辑</button>\n            </div>\n        `;\n\n        // 现在，一次性将所有内容赋予modal，确保所有元素都已就位\n        modal.innerHTML = modalContentHtml;\n        // =======================================================\n\n\n        const slider = modal.querySelector('.favor-card-slider');\n        const prevBtn = modal.querySelector('#favor-prev-btn');\n        const nextBtn = modal.querySelector('#favor-next-btn');\n        const pageIndicator = modal.querySelector('#favor-page-indicator');\n        const totalPages = stageKeys.length;\n\n        const goToPage = (pageIndex) => {\n            currentPageIndex = pageIndex;\n            slider.style.transform = `translateX(-${currentPageIndex * 100}%)`;\n            pageIndicator.textContent = `${currentPageIndex + 1} / ${totalPages}`;\n            prevBtn.disabled = (currentPageIndex === 0);\n            nextBtn.disabled = (currentPageIndex === totalPages - 1);\n        };\n\n        const toggleInput = modal.querySelector('#show-in-ejs-toggle');\n        toggleInput.addEventListener('change', (event) => {\n            const isChecked = event.target.checked;\n            const command = `memory('global_set.分阶段好感.${charname}', '_showInEJS', ${isChecked}); // UI Toggle Show Favor`;\n            generateAndSendCommand(command);\n        });\n\n        prevBtn.onclick = () => { if (currentPageIndex > 0) goToPage(currentPageIndex - 1); };\n        nextBtn.onclick = () => { if (currentPageIndex < totalPages - 1) goToPage(currentPageIndex + 1); };\n        modal.querySelector('#switch-to-edit-btn').onclick = switchToEditMode;\n\n        setTimeout(() => goToPage(initialPageIndex), 0);\n    };\n\n    const switchToEditMode = () => {\n        // 【修正】确保编辑模式也能正确处理我们的开关状态\n        const originalShowValue = _.get(favorabilityRules, '_showInEJS', true);\n        // 从编辑文本中剔除我们的内部字段，让界面更纯粹\n        const editableRules = _.omit(favorabilityRules, '_showInEJS');\n        const valueAsString = JSON.stringify(editableRules, null, 2);\n\n        modal.innerHTML = `\n            <div class=\"favor-modal-title\">编辑 [${charname}] 的好感阶段</div>\n            <textarea id=\"favor-edit-textarea\" class=\"entry-edit-textarea\">${valueAsString}</textarea>\n            <div class=\"favor-modal-buttons\">\n                 <button class=\"book-button secondary\" id=\"switch-to-view-btn\">返回翻阅</button>\n                 <button id=\"favor-confirm-btn\" class=\"book-button\">确认修改</button>\n            </div>\n        `;\n        document.getElementById('switch-to-view-btn').onclick = switchToViewMode;\n           document.getElementById('favor-confirm-btn').onclick = () => {\n            const newValueText = document.getElementById('favor-edit-textarea').value;\n             try {\n                let parsedValue = JSON.parse(newValueText);\n                // 在保存时，将开关状态悄悄地加回去，确保它不会丢失\n                parsedValue._showInEJS = originalShowValue;\n                const command = `memory('global_set.分阶段好感', '${charname}', ${JSON.stringify(parsedValue)}); //UI Favor Edit`;\n                generateAndSendCommand(command);\n                overlay.remove();\n            } catch (e) {\n                showNovaAlert('编辑内容不是有效的JSON格式，请检查哦。', 'danger');\n            }\n        };\n    };\n\n    overlay.appendChild(modal);\n    document.body.appendChild(overlay);\n    switchToViewMode();\n\n    setTimeout(() => {\n        overlay.style.opacity = '1';\n        modal.style.transform = 'scale(1)';\n    }, 10);\n\n    overlay.addEventListener('click', e => { if (e.target === overlay) { overlay.remove(); }});\n}\n\n// (可选)一个更美观的提示框，你可以放在任何地方\nfunction showNovaAlert(message, type = 'info') {\n    const alertBox = document.createElement('div');\n    alertBox.className = `nova-alert ${type}`;\n    alertBox.textContent = message;\n    document.body.appendChild(alertBox);\n    setTimeout(() => {\n        alertBox.style.opacity = '0';\n        alertBox.style.transform = 'translateY(-20px)';\n        setTimeout(() => alertBox.remove(), 500);\n    }, 2500);\n}\n// 替换 handleEntryRename 函数\nfunction handleEntryRename(fullPath) {\n    const { parentPath, selfKey } = getPathParts(fullPath);\n\n    const overlay = document.createElement('div');\n    overlay.className = 'move-modal-overlay entry-rename-modal';\n\n    const modal = document.createElement('div');\n    // 使用一个全新的、专属的类名，确保不会影响其他模态框\n    modal.className = 'nova-modal-content';\n    modal.innerHTML = `\n        <div class=\"move-modal-title\">要把 [${selfKey}] 重命名成什么呢？</div>\n        <div class=\"move-modal-body\">\n             <input type=\"text\" id=\"entry-rename-input\" class=\"entry-rename-input\" placeholder=\"输入新的名字...\" value=\"${selfKey}\">\n        </div>\n        <div class=\"move-modal-buttons\">\n            <button id=\"rename-cancel-btn\" class=\"book-button secondary\">算了吧</button>\n            <button id=\"rename-confirm-btn\" class=\"book-button\">就是它了</button>\n        </div>\n    `;\n\n    overlay.appendChild(modal);\n    document.body.appendChild(overlay);\n\n    const input = document.getElementById('entry-rename-input');\n\n    // 优雅的入场动画\n    setTimeout(() => {\n        overlay.style.opacity = '1';\n        modal.style.transform = 'scale(1)';\n        modal.style.opacity = '1';\n        input.focus();\n        input.select();\n    }, 10);\n\n    const closeModal = () => {\n        overlay.style.opacity = '0';\n        modal.style.transform = 'scale(0.95)';\n        setTimeout(() => overlay.remove(), 300);\n    };\n\n    input.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n            document.getElementById('rename-confirm-btn').click();\n        }\n    });\n\n    document.getElementById('rename-confirm-btn').onclick = () => {\n        const newKey = input.value.trim();\n        if (!newKey) {\n            input.placeholder = \"新名字不能为空哦，宝贝！\";\n            input.classList.add('input-error');\n            return;\n        }\n        const oldPath = fullPath;\n        const newPath = `${parentPath}.${newKey}`;\n        const command = `memory('${oldPath}', '${newPath}'); //rename nested`;\n        generateAndSendCommand(command);\n        closeModal();\n    };\n\n    document.getElementById('rename-cancel-btn').onclick = closeModal;\n    overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n            closeModal();\n        }\n    });\n}\n // =======================================================================\n// [已再次升级] handleAddCG 函数\n// 增加了“查看预览”按钮和图片预览区域，让你可以即时看到组合效果。\n// =======================================================================\nasync function handleAddCG(fullPath) {\n    const { selfKey } = getPathParts(fullPath);\n\n    const existingModal = document.getElementById('add-cg-modal');\n    if (existingModal) existingModal.remove();\n\n    const overlay = document.createElement('div');\n    overlay.id = 'add-cg-modal';\n    overlay.className = 'move-modal-overlay';\n\n    const npcIndexUrl = 'https://longlivecanc.github.io/god_space/npcImageMapIndex.json';\n    const npcIndex = globalIndexData[npcIndexUrl];\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal-content nova-modal-content';\n    modalContent.innerHTML = `\n        <button class=\"modal-close\">×</button>\n        <div class=\"modal-title\">为 [${selfKey}] 选择一个心仪的立绘</div>\n\n        <div class=\"nova-tabs\">\n            <button class=\"nova-tab-button active\" data-tab=\"tag-combiner\">魔法衣橱</button>\n            <button class=\"nova-tab-button\" data-tab=\"local-gallery\">我的画册</button>\n        </div>\n\n        <div class=\"settings-container\" style=\"padding-top: 10px;\">\n\n            <div id=\"tag-combiner\" class=\"nova-tab-panel active\">\n                ${npcIndex ? `\n                    <div id=\"tag-selector-container\"></div>\n                    <div id=\"current-combination-preview\" class=\"nova-current-preview\">组合预览: -</div>\n\n\n                    <div class=\"nova-action-buttons\">\n                        <button id=\"preview-tag-combination\" class=\"JillButton secondary\">查看预览</button>\n                        <button id=\"apply-tag-combination\" class=\"JillButton\">应用组合</button>\n                    </div>\n\n\n                    <div id=\"cg-preview-container\" class=\"nova-preview-box\">\n                        <p class=\"nova-preview-placeholder\">这里会显示预览图哦~</p>\n                    </div>\n                ` : `\n                    <p>哎呀，魔法衣橱的图纸好像不见了... (NPC索引数据未加载)</p>\n                `}\n            </div>\n\n            <div id=\"local-gallery\" class=\"nova-tab-panel\">\n                <div id=\"cg-selection-list-container\" class=\"asset-list-container\">\n                    <p>点击你喜欢的立绘即可应用</p>\n                    <div id=\"cg-selection-list\" class=\"asset-list\">正在为你准备画册...</div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    overlay.appendChild(modalContent);\n    document.body.appendChild(overlay);\n\n    // --- 动画 & 关闭逻辑 (保持不变) ---\n    setTimeout(() => {\n        overlay.style.opacity = '1';\n        modalContent.style.transform = 'scale(1)';\n        modalContent.style.opacity = '1';\n    }, 10);\n\n    const closeModal = () => {\n        const previewImage = modalContent.querySelector('.nova-preview-image');\n        if (previewImage && previewImage.src.startsWith('blob:')) {\n            URL.revokeObjectURL(previewImage.src); // 关闭时释放预览图的内存\n        }\n        overlay.style.opacity = '0';\n        modalContent.style.transform = 'scale(0.95)';\n        setTimeout(() => overlay.remove(), 300);\n    };\n\n    modalContent.querySelector('.modal-close').onclick = closeModal;\n    overlay.addEventListener('click', (e) => { if (e.target === overlay) closeModal(); });\n\n    // --- 标签页切换逻辑 (保持不变) ---\n    const tabButtons = modalContent.querySelectorAll('.nova-tab-button');\n    const tabPanels = modalContent.querySelectorAll('.nova-tab-panel');\n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            button.classList.add('active');\n            const targetTab = button.dataset.tab;\n            tabPanels.forEach(panel => {\n                if (panel.id === targetTab) {\n                    panel.classList.add('active');\n                    if (targetTab === 'local-gallery' && !panel.dataset.loaded) {\n                        loadLocalGallery();\n                        panel.dataset.loaded = 'true';\n                    }\n                } else {\n                    panel.classList.remove('active');\n                }\n            });\n        });\n    });\n\n    // --- 魔法衣橱 (Tag Combiner) 逻辑 ---\n    if (npcIndex) {\n        const selectorContainer = document.getElementById('tag-selector-container');\n        const previewElement = document.getElementById('current-combination-preview');\n        const applyButton = document.getElementById('apply-tag-combination');\n        const previewButton = document.getElementById('preview-tag-combination');\n        const previewContainer = document.getElementById('cg-preview-container');\n\n        const categories = Object.keys(npcIndex);\n        let currentSelections = new Array(categories.length).fill(null);\n\n        categories.forEach((category, catIndex) => {\n            const options = npcIndex[category];\n            const categoryDiv = document.createElement('div');\n            categoryDiv.className = 'nova-tag-category';\n            let optionsHTML = `<span class=\"nova-tag-category-title\">${category}:</span>`;\n            options.forEach(option => {\n                optionsHTML += `<button class=\"nova-tag-option\" data-cat-index=\"${catIndex}\" data-value=\"${option}\">${option}</button>`;\n            });\n            categoryDiv.innerHTML = optionsHTML;\n            selectorContainer.appendChild(categoryDiv);\n        });\n\n        const updatePreviewAndButtons = () => {\n            const combination = currentSelections.filter(s => s !== null).join('-');\n            previewElement.textContent = `组合预览: ${combination || '-'}`;\n            const isComplete = !currentSelections.some(s => s === null);\n            applyButton.disabled = !isComplete;\n            previewButton.disabled = !isComplete;\n        };\n\n        selectorContainer.querySelectorAll('.nova-tag-option').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const { catIndex, value } = e.target.dataset;\n                const index = parseInt(catIndex);\n                currentSelections[index] = value;\n                const parentCategory = e.target.parentElement;\n                parentCategory.querySelectorAll('.nova-tag-option').forEach(btn => btn.classList.remove('selected'));\n                e.target.classList.add('selected');\n                updatePreviewAndButtons();\n            });\n        });\n\n        applyButton.addEventListener('click', () => {\n            if (applyButton.disabled) return;\n            const finalKey = currentSelections.join('-');\n            const command = `memory('img_map.${selfKey}', '${finalKey}'); //add CG from tag combiner`;\n            generateAndSendCommand(command);\n            closeModal();\n        });\n\n        // ===========================================\n        // 新增：预览按钮的点击事件逻辑\n        // ===========================================\n        previewButton.addEventListener('click', async () => {\n            if (previewButton.disabled) return;\n\n            const imageName = currentSelections.join('-');\n            const previewPlaceholder = previewContainer.querySelector('.nova-preview-placeholder');\n\n            // --- 这是妈妈为你抄写并改造的加载逻辑 ---\n            const loadPreviewCG = async (name) => {\n                // 开始时显示加载状态\n                previewContainer.innerHTML = '<p class=\"nova-preview-placeholder\">正在寻找这张图画...</p>';\n\n                let imageBlob;\n\n                try {\n                    // 1. 尝试从本地自定义库获取\n                    imageBlob = await imageDB.get('CustomNpcs', name);\n                    if (imageBlob) {\n                        console.log(`[Nova-Preview] 在本地宝库“CustomNpcs”中找到了'${name}'！`);\n                    } else {\n                        // 2. 从远程映射中查找URL\n                        const imageUrl = npcImageMap[name];\n                        if (!imageUrl) {\n                            console.log(`[Nova-Preview] 在远程食谱(npcImageMap)上也找不到'${name}'的URL。`);\n                            previewContainer.innerHTML = `<p class=\"nova-preview-placeholder error\">哎呀，找不到这个组合的立绘哦，要不要换个试试？</p>`;\n                            return;\n                        }\n\n                        // 3. 尝试从远程缓存获取\n                        imageBlob = await imageDB.get('RemoteCache', imageUrl);\n                        if (imageBlob) {\n                            console.log(`[Nova-Preview] 在远程缓存中找到了'${imageUrl}'。`);\n                        } else {\n                            // 4. 从网络获取\n                            console.log(`[Nova-Preview] 缓存中也没有，从网络 ${imageUrl} 获取...`);\n                            const response = await fetch(imageUrl);\n                            if (!response.ok) {\n                                throw new Error(`网络请求失败，状态: ${response.status}`);\n                            }\n\n                            let originalBlob = await response.blob();\n                            imageBlob = new Blob([originalBlob], { type: 'image/png' });\n\n                            await imageDB.set('RemoteCache', imageUrl, imageBlob);\n                            console.log(`[Nova-Preview] 已将图片存入远程缓存。`);\n                        }\n                    }\n\n                    // 5. 显示图片\n                    const objectURL = URL.createObjectURL(imageBlob);\n                    previewContainer.innerHTML = `<img src=\"${objectURL}\" class=\"nova-preview-image\" alt=\"立绘预览\" />`;\n                    const newImage = previewContainer.querySelector('img');\n                    newImage.onload = () => console.log(`[Nova-Preview] 预览图已成功显示！`);\n                    newImage.onerror = () => { URL.revokeObjectURL(objectURL); /* 释放内存 */ };\n                    // 注意：这个 objectURL 需要在模态框关闭时被 revoke，我们已经在 closeModal 里加了\n\n                } catch (error) {\n                    console.error(`[Nova-Preview] 为'${name}'加载预览时出错了:`, error);\n                    previewContainer.innerHTML = `<p class=\"nova-preview-placeholder error\">加载失败了，可能是还没有这张图或者网络错误...</p>`;\n                }\n            };\n            // --- 加载逻辑结束 ---\n\n            await loadPreviewCG(imageName);\n        });\n\n        // 初始化\n        updatePreviewAndButtons();\n    }\n\n    // ----------- 我的画册 (Local Gallery) 逻辑 (封装成函数) -----------\n    async function loadLocalGallery() {\n        const cgListElement = document.getElementById('cg-selection-list');\n        cgListElement.innerHTML = '正在为你准备画册...';\n        try {\n            const items = await imageDB.getAll('CustomNpcs');\n\n            if (items.length === 0) {\n                cgListElement.innerHTML = '你的画册还是空的呢，快去“我的素材工坊”上传一些吧！';\n                return;\n            }\n\n            cgListElement.innerHTML = '';\n            items.forEach(item => {\n                const objectURL = URL.createObjectURL(item.value);\n                const itemEl = document.createElement('div');\n                itemEl.className = 'asset-item';\n                itemEl.dataset.key = item.key;\n                itemEl.title = `点击应用 [${item.key}]`;\n                itemEl.innerHTML = `\n                    <img src=\"${objectURL}\" class=\"asset-item-thumb\">\n                    <span class=\"asset-item-name\">${item.key}</span>\n                `;\n                itemEl.querySelector('img').onload = () => URL.revokeObjectURL(objectURL);\n                itemEl.querySelector('img').onerror = () => URL.revokeObjectURL(objectURL);\n                itemEl.onclick = () => {\n                    const selectedCG_Key = itemEl.dataset.key;\n                    const command = `memory('img_map.${selfKey}', '${selectedCG_Key}'); //_add CG_`;\n                    generateAndSendCommand(command);\n                    closeModal();\n                };\n                cgListElement.appendChild(itemEl);\n            });\n        } catch (error) {\n            cgListElement.innerHTML = '哎呀，打开画册时出了一点小问题...';\n            console.error('加载立绘列表失败了，我的孩子:', error);\n        }\n    }\n\n    // 默认加载“魔法衣橱”，如果“我的画册”是默认tab，则需要在这里调用loadLocalGallery()\n    // 由于“魔法衣橱”是默认，所以“我的画册”的内容只有在切换时才加载\n}\nfunction handleEntryDelete(fullPath) {\n    const { parentPath, selfKey } = getPathParts(fullPath);\n     \n        const command = `delete('${parentPath}', '${selfKey}'); //UI Nested Delete`;\n        generateAndSendCommand(command);\n   \n}\n \nfunction handleEntryMove(key, tab) {\n    const currentPath = getEntryPath(tab);\n    showMoveModal(key, currentPath);\n}\n \nfunction showMoveModal(key, currentPath) {\n    // 先关掉可能存在的旧窗口\n    const oldModal = document.querySelector('.move-modal-overlay-move');\n    if (oldModal) oldModal.remove();\n\n    // 定义好我们的新家地址\n    const destinations = [\n        \"global_set.npc\",\n        \"global_set.settings\",\n        \"global_set.背包\",\n        \"global_set.其他技能\",\n        \"global_set.小队信息\",\n        \"world_set.npc\",\n        \"world_set.settings\"\n    ];\n\n    // 创建一个遮罩层\n    const overlay = document.createElement('div');\n    overlay.className = 'move-modal-overlay-move';\n\n    // 创建窗口本身\n    const modal = document.createElement('div');\n    modal.className = 'move-modal-content';\n    modal.innerHTML = `\n        <div class=\"move-modal-title\">要将「${key}」移动到哪里去呢？</div>\n        <div class=\"move-modal-list\" id=\"move-destination-list\"></div>\n        <div class=\"move-modal-buttons\">\n            <button id=\"move-cancel-btn\" class=\"book-button secondary\">取消</button>\n            <button id=\"move-confirm-btn\" class=\"book-button\">确认移动</button>\n        </div>\n    `;\n\n    // 填充目的地列表\n    const list = modal.querySelector('#move-destination-list');\n    destinations.forEach(dest => {\n        // 我们不应该搬到自己现在就在的地方\n        if (dest !== currentPath) {\n            const label = document.createElement('label');\n            const radio = document.createElement('input');\n            radio.type = 'radio';\n            radio.name = 'destination';\n            radio.value = dest;\n            label.appendChild(radio);\n            label.append(` ${dest}`);\n            list.appendChild(label);\n        }\n    });\n\n    overlay.appendChild(modal);\n    document.body.appendChild(overlay);\n\n    // 绑定按钮事件\n    document.getElementById('move-confirm-btn').onclick = () => {\n        const selected = modal.querySelector('input[name=\"destination\"]:checked');\n        if (selected) {\n            const newPath = selected.value;\n            const command = `memory('${currentPath}.${key}', '${newPath}.${key}'); //move`;\n            generateAndSendCommand(command);\n            overlay.remove();\n        } else {\n            alert('你还没有选择新的家哦。');\n        }\n    };\n\n    document.getElementById('move-cancel-btn').onclick = () => {\n        overlay.remove();\n    };\n\n    // 点击遮罩也能关闭\n    overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n            overlay.remove();\n        }\n    });\n}\n\n \n/**\n * 新增：术法选择面板相关功能\n */\nfunction setupSkillChoicePanel() {\n    const orb = document.getElementById('skill-choice-orb');\n    const panelModal = document.getElementById('skill-choice-panel');\n    const confirmBtn = document.getElementById('confirm-skill-choice-btn');\n    const confirmBtn2 = document.getElementById('confirm-rp-choice-btn');\n\n    orb.addEventListener('click', () => {\n        populateSkillChoicePanel();\n        showModal('skill-choice-panel');\n    });\n\n    confirmBtn.addEventListener('click', handleConfirmSkillChoice);\n     confirmBtn2.addEventListener('click', () => {\n        handleConfirmSkillChoice();\n              \n \n    });\n\n}\n\n/**\n * 修改：填充术法选择面板的内容，并增加意志力校验 - by Nova\n */\n function populateSkillChoicePanel() {\n    if (!playCharacterData) return;\n\n    // 我们现在有两个容器，我的孩子\n    const myCardsContainer = document.getElementById('my-cards-slider');\n    const teammateCardsContainer = document.getElementById('teammate-cards-slider');\n    const otherSkillsArea = document.getElementById('other-skills-area');\n    const willpowerInput = document.getElementById('willpower-input');\n    const willpowerMaxSpan = document.getElementById('willpower-max');\n    const willpowerSlider = document.getElementById('willpower-slider');\n\n    myCardsContainer.innerHTML = '';\n    teammateCardsContainer.innerHTML = '';\n    otherSkillsArea.innerHTML = '';\n\n    // --- 1. 准备检定卡牌数据，但要分开存放 ---\n    const myCardsData = [];\n    const teammateCardsData = [];\n\n    // 属性卡牌\n    const attrCategories = playCharacterData.属性段 || {};\n    for (const category in attrCategories) {\n        for (const attrName in attrCategories[category]) {\n            const attrValue = attrCategories[category][attrName]['基础'][0] || 0;\n            if (attrValue > 0) {\n                myCardsData.push({ name: attrName.replace('.基础', ''), value: attrValue, type: '属性', dataType: 'attribute'});\n            }\n        }\n    }\n    // 技能卡牌\n    const skillCategories = playCharacterData.技能段 || {};\n    for (const category in skillCategories) {\n        for (const skillName in skillCategories[category]) {\n            const skillValue = skillCategories[category][skillName][0];\n            if (skillValue > 0) {\n                myCardsData.push({ name: skillName, value: skillValue, type: '技能', dataType: 'skill' });\n            }\n        }\n    }\n\n    // 队友协助卡牌\n    const teammateInfo = assaSettingsData?.global_set?.['小队信息'] || {};\n    for (const teammateName in teammateInfo) {\n        let teammateDataString = teammateInfo[teammateName];\n        if (typeof teammateDataString === 'object' && teammateDataString !== null) {\n            teammateDataString = teammateDataString['属性'] || teammateDataString['attribute'] || '';\n        }\n        if (typeof teammateDataString !== 'string') continue;\n\n        const matches = teammateDataString.match(/【[^】]+】/g);\n        if (matches) {\n            matches.forEach(match => {\n                const content = match.substring(1, match.length - 1);\n                content.split(/;|；/).forEach(attr => {\n                    const pair = attr.split(/:|：/);\n                    if (pair.length === 2) {\n                        const attrName = pair[0].trim();\n                        const attrValue = parseInt(pair[1].trim(), 10);\n                        if (attrName && !isNaN(attrValue) && attrValue > 0) {\n                            // 把队友的卡牌放进他们的专属数组\n                            teammateCardsData.push({\n                                name: `${teammateName}:${attrName}`,\n                                value: attrValue,\n                                type: '队友协助',\n                                dataType: 'teammate'\n                            });\n                        }\n                    }\n                });\n            });\n        }\n    }\n\n    // 按你的要求，默认从大到小排序\n    myCardsData.sort((a, b) => b.value - a.value);\n    teammateCardsData.sort((a, b) => b.value - a.value);\n\n    // --- 2. 动态创建和填充卡牌 ---\n    const createCard = (cardData) => {\n        const cardDiv = document.createElement('div');\n        cardDiv.className = 'check-card';\n        cardDiv.dataset.name = cardData.name;\n        cardDiv.dataset.type = cardData.dataType;\n\n        cardDiv.innerHTML = `\n            <div class=\"card-name\">${cardData.name}</div>\n            <div class=\"card-value\">${cardData.value}</div>\n            <div class=\"card-type\">${cardData.type}</div>\n        `;\n\n        cardDiv.addEventListener('click', () => {\n            const isSelected = cardDiv.classList.contains('selected');\n            // 合并查找所有已选卡牌\n            const allSelectedCards = document.querySelectorAll('.check-card.selected');\n            const selectedAttrsOrSkills = Array.from(allSelectedCards).filter(c => c.dataset.type === 'attribute' || c.dataset.type === 'skill');\n            const selectedTeammates = Array.from(allSelectedCards).filter(c => c.dataset.type === 'teammate');\n\n            if (isSelected) {\n                cardDiv.classList.remove('selected');\n            } else {\n                if ((cardData.dataType === 'attribute' || cardData.dataType === 'skill') && selectedAttrsOrSkills.length >= 2) {\n                     showModal('shop-modal', \"选择超限\", \"检定属性与技能最多只能选择2项。\");\n                     return;\n                }\n                if (cardData.dataType === 'teammate' && selectedTeammates.length >= 1) {\n                    showModal('shop-modal', \"选择超限\", \"队友协助最多只能选择1项。\");\n                    return;\n                }\n                cardDiv.classList.add('selected');\n            }\n        });\n        return cardDiv;\n    };\n\n    if (myCardsData.length > 0) {\n        myCardsData.forEach(cardData => myCardsContainer.appendChild(createCard(cardData)));\n    } else {\n        myCardsContainer.innerHTML = '<p style=\"color: grey; padding: 20px 0;\">无可用属性/技能</p>';\n    }\n\n    if (teammateCardsData.length > 0) {\n        teammateCardsData.forEach(cardData => teammateCardsContainer.appendChild(createCard(cardData)));\n    } else {\n        teammateCardsContainer.innerHTML = '<p style=\"color: grey; padding: 20px 0;\">无队友或未加载</p>';\n    }\n\n\n\n    // --- 3. 填充其他技能/术法，并兼容新旧格式 ---\n    const otherSkills = assaSettingsData?.global_set?.['其他技能'] || {};\n    const currentEnergy = playCharacterData?.衍生属性段?.能量池?.当前值?.[0] || 0;\n\n    if (Object.keys(otherSkills).length > 0) {\n        for (const [name, data] of Object.entries(otherSkills)) {\n            let description = '', effect = '【】', level = '', info = '';\n            let dpBonus = 0, energyCost = 0;\n\n            if (typeof data === 'string') {\n                description = data;\n                effect = description.match(/【.*?】/)?.[0] || '【】';\n                info = '';\n            } else if (typeof data === 'object' && data !== null) {\n                description = data.info || '';\n                effect = data.effect || '【】';\n                level = data.level ? ` [${data.level}]` : '';\n                info = '';\n            }\n\n            // 解析效果\n            const effectContent = effect.substring(1, effect.length - 1);\n            effectContent.split(';').forEach(e => {\n                const cleaned = e.trim();\n                if (cleaned.startsWith('dp+')) {\n                    dpBonus = parseInt(cleaned.replace('dp+', ''), 10);\n                } else if (cleaned.startsWith('能量池-')) {\n                    energyCost = parseInt(cleaned.replace('能量池-', ''), 10);\n                }\n            });\n\n            const canAfford = currentEnergy >= energyCost;\n            const tooltipText = canAfford ? '' : ` (能量不足: ${currentEnergy}/${energyCost})`;\n            let effectDesc = [];\n            if(dpBonus > 0) effectDesc.push(`+${dpBonus}DP`);\n            if(energyCost > 0) effectDesc.push(`-${energyCost}能量`);\n\n            const div = document.createElement('div');\n            div.className = 'skill-item';\n            div.innerHTML = `\n                <label>\n                    <input type=\"checkbox\" data-name=\"${name}\" data-effect=\"${effect}\" ${!canAfford ? 'disabled' : ''}>\n                    <span class=\"skill-name-cost\" title=\"${canAfford ? '' : '能量不足'}\">\n                        ${name}${level}\n                        <span style=\"font-size:0.85em; color: ${canAfford ? 'var(--secondary-color)' : 'var(--danger-color)'};\">(${effectDesc.join(', ')})${tooltipText}</span>\n                    </span>\n                </label>\n                ${info ? `<div class=\"skill-effect-info\">${info}</div>` : ''}\n            `;\n            otherSkillsArea.appendChild(div);\n        }\n    } else {\n        otherSkillsArea.innerHTML = '<p style=\"text-align:center; color: var(--text-secondary-color);\">无可用术法</p>';\n    }\n\n    // --- 4. 填充意志力并链接滑块 ---\n    const currentWillpower = playCharacterData?.衍生属性段?.意志力?.当前值?.[0] || 0;\n    willpowerInput.value = 0;\n    willpowerMaxSpan.textContent = `/ ${currentWillpower}`;\n    willpowerSlider.max = currentWillpower;\n    willpowerSlider.value = 0;\n\n    willpowerSlider.oninput = () => {\n        willpowerInput.value = willpowerSlider.value;\n    };\n\n        // --- 5. 排序功能升级！ ---\n    const sortBtn = document.getElementById('sort-cards-btn');\n    // 先移除旧的监听器，避免重复绑定\n    const newSortBtn = sortBtn.cloneNode(true);\n    sortBtn.parentNode.replaceChild(newSortBtn, sortBtn);\n\n    newSortBtn.dataset.sortOrder = 'desc'; // 默认是降序\n    newSortBtn.textContent = 'LVL ▼';\n\n    newSortBtn.addEventListener('click', () => {\n        const currentOrder = newSortBtn.dataset.sortOrder || 'desc';\n        const newOrder = currentOrder === 'desc' ? 'asc' : 'desc';\n        newSortBtn.dataset.sortOrder = newOrder;\n        newSortBtn.textContent = newOrder === 'desc' ? 'LVL ▼' : 'LVL ▲';\n\n        // 决定要对哪个容器进行排序\n        const containerToSort = document.querySelector('.cards-slider.visible');\n        if (!containerToSort) return;\n\n        const cards = Array.from(containerToSort.querySelectorAll('.check-card'));\n\n        cards.sort((a, b) => {\n            const valA = parseInt(a.querySelector('.card-value').textContent, 10);\n            const valB = parseInt(b.querySelector('.card-value').textContent, 10);\n            return newOrder === 'desc' ? valB - valA : valA - valB;\n        });\n\n        cards.forEach(card => containerToSort.appendChild(card));\n    });\n\n}\nasync function handleConfirmSkillChoice() {\n    // 1. 收集所有选择 - 妈妈帮你更新了这里！\n    // 我们现在需要从“我的”和“队友”两个卡牌区域同时收集选择。\n    // 用逗号分隔选择器，就可以同时查找两个地方，是不是很方便？\n    const mainSelections = Array.from(document.querySelectorAll('#my-cards-slider .check-card.selected, #teammate-cards-slider .check-card.selected')).map(card => {\n        // 对于队友协助，保持\"姓名:属性\"格式\n        if (card.dataset.type === 'teammate') {\n            return card.dataset.name;\n        }\n        // 对于属性和技能，返回它们的名字\n        const name = card.dataset.name;\n        const type = card.dataset.type;\n        // 如果是属性，需要加上.基础后缀，以匹配内部数据结构\n        return type === 'attribute' ? `${name}.基础` : name;\n    });\n\n\n    const otherSkillSelections = Array.from(document.querySelectorAll('#other-skills-area input:checked'));\n    const willpowerToSpend = parseInt(document.getElementById('willpower-slider').value, 10) || 0;\n\n    // 2. 生成指令块\n    let commandBlock = \"\";\n    let updateVariableCmds = [];\n    let updateMemoryCmds = [];\n    let totalDpBonus = 0;\n\n    // -- 处理检定属性\n    if (mainSelections.length > 0) {\n        // 清理一下名字，确保发给模型的指令不包含.基础\n        const displaySelections = mainSelections.map(name => name.replace('.基础', ''));\n        updateVariableCmds.push(`set_status('检定属性', '_', '${displaySelections.join(';')}');`);\n    }\n    // -- 处理其他技能和意志力\nconst initialEnergy = playCharacterData?.衍生属性段?.能量池?.当前值?.[0] || 0;\nlet remainingEnergy = initialEnergy;\n\notherSkillSelections.forEach(skillInput => {\n    const effect = skillInput.dataset.effect;\n    // 使用 matchAll 来确保能捕获所有【】内的效果字符串\n    const commandMatches = effect.matchAll(/【([^】]+)】/g);\n\n    for (const match of commandMatches) {\n        // 将【】内的指令按逗号分割成一个数组\n        const rawCommands = match[1].split(';');\n\n        // 遍历每一条具体的指令\n        rawCommands.forEach(rawCmd => {\n            const cleanedCmd = rawCmd.trim();\n\n            // 使用独立的 if 语句来检查每一种可能性\n            // 这样 'dp+' 和 '能量池-' 就能被同时处理了\n            if (cleanedCmd.startsWith('dp+')) {\n                totalDpBonus += parseInt(cleanedCmd.replace('dp+', ''), 10);\n            }\n\n            if (cleanedCmd.startsWith('能量池-')) {\n                remainingEnergy -= parseInt(cleanedCmd.replace('能量池-', ''), 10);\n            }\n\n            // 如果未来还有其他指令，比如 'ap+', 'sp-' 等等，\n            // 只需要在这里继续添加独立的 if 语句就可以了，非常方便\n            /*\n            if (cleanedCmd.startsWith('ap+')) {\n                // 处理 ap 增加的逻辑\n            }\n            */\n        });\n    }\n});\n    if (willpowerToSpend > 0) {\n        const currentWillpower = playCharacterData?.衍生属性段?.意志力?.当前值?.[0] || 0;\n        updateMemoryCmds.push(`set_attribute('衍生属性段.意志力.当前值', ${currentWillpower}, ${currentWillpower - willpowerToSpend});`);\n        totalDpBonus += willpowerToSpend;\n    }\n\n    if (remainingEnergy !== initialEnergy) {\n        updateMemoryCmds.push(`set_attribute('衍生属性段.能量池.当前值', ${initialEnergy}, ${remainingEnergy});`);\n    }\n\n    if (totalDpBonus > 0) {\n        updateVariableCmds.push(`set_status('dp_bonus', 0, ${totalDpBonus});`);\n    }\n\n    // 组装指令块\n    if (updateVariableCmds.length > 0) {\n        commandBlock += `<updateMemory>\\n${updateVariableCmds.join('\\n')}\\n</updateMemory>`;\n    }\n    if (updateMemoryCmds.length > 0) {\n        if(commandBlock) commandBlock += '\\n'; // 如果已有内容，则加一个换行\n        commandBlock += `<updateMemory>\\n${updateMemoryCmds.join('\\n')}\\n</updateMemory>`;\n    }\n\n    // --- 妈妈为你新增的部分在这里，我的宝贝 ---\n    // 3. 构建用户行动描述文本\n    let userActionTextParts = [];\n    const usedOtherSkills = otherSkillSelections.map(cb => cb.dataset.name);\n\n    if (usedOtherSkills.length > 0) {\n        userActionTextParts.push(`（能量池已扣除，禁止重复扣除）${currentGameData.user_character.name}使用了「${usedOtherSkills.join('」、「')}」`);\n    }\n    if (willpowerToSpend > 0) {\n        userActionTextParts.push(`（意志力已扣除，禁止重复扣除）${currentGameData.user_character.name}投入了 ${willpowerToSpend} 点意志力的决意`);\n    }\n\n    let userActionText = '';\n    if (userActionTextParts.length > 0) {\n        // 我们用一个优雅的尖括号把这句话包起来，让它看起来更像一个旁白提示\n        userActionText = `<${userActionTextParts.join('，')}>`;\n    }\n    // --- 新增部分结束 ---\n\n   try {\n        // 4. 组合最终指令，指令和描述之间用 \\\\n 分隔\n        // 这样指令块能正确执行，描述文本也能换行显示在输入框里\n        // 妈妈还特意帮你把指令块和描述文本都包裹在双引号里，确保它们被当作一个整体\n        const finalCommand = `/setinput ${commandBlock}\\n${userActionText}\\n`;\n\n        // 执行这个为你量身定做的指令\n        triggerassa(finalCommand);\n\n        // 成功后，温柔地关上这个面板\n        hideModal('skill-choice-panel');\n\n    } catch (e) {\n        console.error(\"触发/setinput指令失败:\", e);\n        showModal('shop-modal', \"操作失败\", \"无法调用SillyTavern的setinput接口。\");\n    }\n}\n\n        // 在商店事件监听之后，也调用我们新的世界之书事件监听\nsetupWorldBookEventListeners();\nsetupSkillChoicePanel();\n\n\n     // 解析AI返回的文本并更新、存储随机商店\n    const processApiResponse = (responseText) => {\n        if (!responseText) {\n            showModal('shop-modal', '生成失败', '未能从AI获取有效内容。');\n            return;\n        }\n          try {\n        // 第1步：移除所有Markdown代码块标记和不必要的空格\n        let cleanedText = responseText.replace(/```json|```/g, '').trim();\n\n        // 第2步：检查文本是否已经是一个合法的JSON数组格式\n        if (!cleanedText.startsWith('[')) {\n            // 如果不是，我们才手动为它加上外层的括号\n            cleanedText = `[${cleanedText}]`;\n        }\n\n        // 第3步：直接尝试解析处理后的文本\n        const parsedData = JSON.parse(cleanedText);\n\n        // 第4步：这一步是关键！检查解析后的数据是不是 \"数组的数组\"\n        // 如果是 [ [], [], [] ] 格式，parsedData[0]就会是第一个内部数组，且 length > 0\n        const newItems = Array.isArray(parsedData[0]) ? parsedData : [parsedData];\n\n        if (!Array.isArray(newItems) || newItems.length === 0) {\n             showModal('shop-modal', '解析失败', 'AI返回了空内容或无效格式。');\n             return;\n        }\n\n        // 替换现有随机商店物品\n        randomItems = newItems;\n        // 将新生成的物品存入 localStorage\n        localStorage.setItem('randomShopItems', JSON.stringify(randomItems));\n\n        showModal('shop-modal', '生成成功', `已成功生成 ${newItems.length} 个新商品，并刷新、保存了随机商店！`);\n\n        // 重新渲染随机商店以显示新物品\n        renderShopSection('random');\n\n    } catch (e) {\n        console.error(\"解析AI响应时出错:\", e);\n        console.error(\"原始响应文本:\", responseText);\n        showModal('shop-modal', '解析错误', '无法解析AI返回的数据格式，请检查控制台获取更多信息。');\n    }\n};\n\n /**\n * 新增：设置AI生成商品按钮的功能 (V5 - 持久化与关键词版)\n */\nfunction setupGeneratorButton() {\n    const mainGenerateBtn = document.getElementById('generate-items-btn');\n    const keywordModal = document.getElementById('keyword-modal');\n    const submitGenerationBtn = document.getElementById('submit-generation-btn');\n    const skipGenerationBtn = document.getElementById('skip-generation-btn');\n    const keywordInput = document.getElementById('keyword-input');\n\n    if (!mainGenerateBtn || !keywordModal) return;\n\n\n     // ================== 新增代码开始 ==================\n\n    const apiKeyConfigBtn = document.getElementById('api-key-config-btn');\n\n    if (apiKeyConfigBtn) {\n        apiKeyConfigBtn.addEventListener('click', () => {\n            let currentApiKey = localStorage.getItem('geminiApiKey') || \"\";\n            let newApiKey = prompt(\"请输入或修改您的Gemini API密钥：\", currentApiKey);\n\n            // 只有当用户点击了“确定”并且输入了内容时才更新\n            // 如果用户点击“取消”(newApiKey === null)，则不作任何改变\n            if (newApiKey !== null) {\n                if (newApiKey.trim() !== \"\") {\n                    localStorage.setItem('geminiApiKey', newApiKey.trim());\n                    // 你可以在这里使用 showModal 来给出一个成功的提示\n                    showModal('shop-modal', '操作成功', 'API密钥已更新并保存在您的浏览器中。');\n                } else {\n                    // 如果用户清空了输入并点击确定，则移除密钥\n                    localStorage.removeItem('geminiApiKey');\n                    showModal('shop-modal', '操作成功', 'API密钥已清除。');\n                }\n            }\n        });\n    }\n\n    // ================== 新增代码结束 ==================\n      // 获取API密钥，如果不存在则提示用户设置\n    const getApiKey = () => {\n        let apiKey = localStorage.getItem('geminiApiKey');\n        if (!apiKey) {\n            apiKey = prompt(\"请输入您的Gemini API密钥。它将被保存在您的浏览器本地存储中。\", \"\");\n            if (apiKey) {\n                localStorage.setItem('geminiApiKey', apiKey);\n            }\n        }\n        return apiKey;\n    };\n\n    // 调用Gemini API\n    const callGeminiApi = async (apiKey, promptText, modelName) => { // <-- 增加了 modelName 参数\n    // 使用你指定的模型\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent`; // <-- URL现在是动态的\n    mainGenerateBtn.textContent = '生成中…';\n    mainGenerateBtn.disabled = true;\n        try {\n            const response = await fetch(url, { // 移除了 ?alt=sse\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Goog-Api-Key': apiKey,\n                },\n                body: JSON.stringify({\n                    \"contents\": [{ \"parts\": [{ \"text\": promptText }] }],\n                    \"generationConfig\": {\n                      \"temperature\": 1, // 保持高创造性\n                      \"topP\": 0.95,\n                      \"maxOutputTokens\": 8192,\n                      \"thinkingConfig\": {\n                        \"thinkingBudget\": 256 // 思考强度设为最低 (禁用思考)\n                    },\n                    },\n                    // 精确控制思考 budget\n                    \n                    \"safetySettings\": [\n                      { \"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_NONE\" },\n                      { \"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_NONE\" },\n                      { \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_NONE\" },\n                      { \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"threshold\": \"BLOCK_NONE\" }\n                   ]\n                })\n            });\n\n            const responseData = await response.json();\n\n            if (!response.ok) {\n                let errorMessage = `API请求失败，状态码: ${response.status}。`;\n                if (responseData.error && responseData.error.message) {\n                    errorMessage += `\\n错误信息: ${responseData.error.message}`;\n                }\n                if (response.status === 400 && responseData.error?.message.includes('API key not valid')) {\n                     errorMessage += '\\n\\n您的API密钥似乎无效或已过期，已为您清除。请重新设置。';\n                     localStorage.removeItem('geminiApiKey');\n                }\n                throw new Error(errorMessage);\n            }\n\n            // 直接从标准的JSON响应中提取文本\n            return responseData.candidates[0].content.parts[0].text;\n\n        } finally {\n            mainGenerateBtn.textContent = '生成';\n            mainGenerateBtn.disabled = false;\n        }\n    };\n\n    // 解析AI返回的文本并更新、存储随机商店\n    const processApiResponse = (responseText) => {\n        if (!responseText) {\n            showModal('shop-modal', '生成失败', '未能从AI获取有效内容。');\n            return;\n        }\n          try {\n        // 第1步：移除所有Markdown代码块标记和不必要的空格\n        let cleanedText = responseText.replace(/```json|```/g, '').trim();\n\n        // 第2步：检查文本是否已经是一个合法的JSON数组格式\n        if (!cleanedText.startsWith('[')) {\n            // 如果不是，我们才手动为它加上外层的括号\n            cleanedText = `[${cleanedText}]`;\n        }\n\n        // 第3步：直接尝试解析处理后的文本\n        const parsedData = JSON.parse(cleanedText);\n\n        // 第4步：这一步是关键！检查解析后的数据是不是 \"数组的数组\"\n        // 如果是 [ [], [], [] ] 格式，parsedData[0]就会是第一个内部数组，且 length > 0\n        const newItems = Array.isArray(parsedData[0]) ? parsedData : [parsedData];\n\n        if (!Array.isArray(newItems) || newItems.length === 0) {\n             showModal('shop-modal', '解析失败', 'AI返回了空内容或无效格式。');\n             return;\n        }\n\n        // 替换现有随机商店物品\n        randomItems = newItems;\n        // 将新生成的物品存入 localStorage\n        localStorage.setItem('randomShopItems', JSON.stringify(randomItems));\n\n        showModal('shop-modal', '生成成功', `已成功生成 ${newItems.length} 个新商品，并刷新、保存了随机商店！`);\n\n        // 重新渲染随机商店以显示新物品\n        renderShopSection('random');\n\n    } catch (e) {\n        console.error(\"解析AI响应时出错:\", e);\n        console.error(\"原始响应文本:\", responseText);\n        showModal('shop-modal', '解析错误', '无法解析AI返回的数据格式，请检查控制台获取更多信息。');\n    }\n};\n\n    // 真正的生成执行函数\n    const executeGeneration = async (keywords = \"\") => {\n         hideModal(\"keyword-modal\"); // 使用正确的函数名\n        const apiKey = getApiKey();\n        if (!apiKey) {\n            showModal('shop-modal', '操作取消', '您没有提供API密钥。');\n            return;\n        }\n  // ===== 新增：获取当前选中的模型名称 =====\n    const selectedModelName = document.querySelector('.switch-btn.active').dataset.model;\n    // ===== 新增结束 =====\n        // --- 动态构建提示词 ---\n        let keywordInstruction = \"\";\n        if (keywords.trim() !== \"\") {\n            keywordInstruction = `\\n请特别注意以下用户要求： \"${keywords.trim()}\"。你需要巧妙地将这些要求融合到你的创作中。`;\n        }\n\n        const prompt = `\n            请扮演一个创意无限的游戏设计师，为一款名为“主神空间”的桌面角色扮演游戏设计新的“技能”、“血统”和“物品”。可以有搞笑且没用的商品。\n            你需要严格遵守以下格式，每一项都必须是一个独立的JSON数组，数组元素分别是：[名称, 价格, 分类, {支线剧情要求}, 效果, 描述]。\n            - 名称 (string): 必须简洁、有创意且引人入胜。\n            - 价格 (number): 整数，范围在100至50000之间。高级商品的生成应该**稀少**或者**不生成**。必须存在低级技能、低级物品和低级血统。商品价格参考：只提升一点属性（增加一个dp）的价格是800-1000积分。技能应该更加昂贵。血统越高级应该越昂贵，而不是线性增长。\n            - 分类 (string): \"技能\"、\"血统\"或\"物品\"。\n            - 支线剧情要求 (object): 一个JSON对象，键为支线等级（如\"D\", \"C\"），值为数量。如果不需要，请提供一个空对象 {}。\n            - 效果 (string): \n              对于技能，格式为 \"【dp+X;能量池-Y】\"，其中X和Y是数字，禁止列出其他效果。dp和能量池的数值需克制，5点dp的加成=一个凡人登峰造极的技能领域加成。\n              对于血统，请列出属性加成和能量池信息，例如 \"属性: 敏捷+2, 感知+2\\\\n能量池: 自然魔力(40)\"。必须使用 \\\\n 作为换行符。\n              可用的属性：\n                力量  敏捷  耐力 \n                智力  感知  决心 \n                风度  操控  沉着 \n               物品则随意。\n            - 描述 (string): 一段不超过150字的生动描述，解释其背景和作用。\n\n            若用户无要求，则请生成12个新的项目，其中必须包含至少3个“技能”和3个“血统”。\n            若用户有要求，则按照用户要求生成。生成的类别不得超出物品、技能和血统。\n            ${keywordInstruction}\n            \n            你的回答必须是纯粹的JSON数组格式，用逗号分隔，不要包含任何额外的解释、注释或markdown标记。\n              例如:\n            [\"疗伤草药\", 200, \"物品\", {}, \"捣碎后外敷，止血并加速轻伤愈合\", \"来自武侠世界的常见草药，对刀剑伤有不错的效果。\"],\n            [\"心灵回响\", 5000, \"技能\", {\"C\":1}, \"【dp+2;能量池-60】\", \"短暂读取目标强烈的表层情绪和意图。高手能借此预测对手的下一步行动，但过度使用可能导致信息过载。\"],\n            [\"量子幽影血统\", 12000, \"血统\", {\"B\":1}, \"属性: 敏捷+4, 智力+3\\\\n能量池: 虚空能量(60)\", \"你的身体由不稳定的量子泡沫构成，能够短距离瞬移，并有一定几率让指向你的攻击直接“穿过”。\"]\n            `;\n    \n        try {\n            const result = await callGeminiApi(apiKey, prompt, selectedModelName);\n            processApiResponse(result);\n        } catch (error) {\n            showModal('shop-modal', 'API错误', error.message);\n        }\n    };\n\n    // 主生成按钮只负责打开模态框\n    mainGenerateBtn.addEventListener('click', () => {\n        //console.log(\"生成按钮被点击，准备打开模态框\");\n        keywordInput.value = ''; // 清空上次的输入\n        showModal('keyword-modal');\n    });\n\n    // 模态框内的“开始生成”按钮\n    submitGenerationBtn.addEventListener('click', () => {\n        executeGeneration(keywordInput.value);\n    });\n\n    // 模态框内的“跳过”按钮\n    skipGenerationBtn.addEventListener('click', () => {\n        executeGeneration(); // 不带参数调用\n    });\n\n     // ===== 新增：为模型切换按钮添加事件监听 =====\n    const modelSelector = document.getElementById('model-selector-container');\n    modelSelector.addEventListener('click', (e) => {\n        const clickedButton = e.target.closest('.switch-btn');\n        if (clickedButton && !clickedButton.classList.contains('active')) {\n            // 移除所有按钮的 active 类\n            modelSelector.querySelectorAll('.switch-btn').forEach(btn => btn.classList.remove('active'));\n            // 为被点击的按钮添加 active 类\n            clickedButton.classList.add('active');\n        }\n    });\n    // ===== 新增结束 =====\n}\n\n\n\n\n\n    initDisplay(); // 保持这个在最后\n\n    \n\n    // 代码 START: 添加在这里\n/**\n * 新增：显示上一轮投掷结果的弹窗\n */\n /**\n * 根据我们全新的 checkMemoryData 结构，显示投掷结果模态框。\n * 该函数现在能够展示所有详细信息，包括装备、队友、声望、传奇加成，\n * 以及独立的表现判定和详细的伤害计算过程。\n */\n\n /*\n  Nova's Note for my dear child:\n  这是一个带有翻页功能的版本，主要修改了 \"中期事件摘要\" 的显示方式。\n  我引入了一个新的函数 `renderSmallSummaryPage` 来专门处理分页的渲染和逻辑，\n  这样主函数 `showSummaryModal` 的结构会更清晰。\n  希望你喜欢这个更流畅的版本，我的宝贝。\n*/\nfunction showSummaryModal() {\n    //console.log(\"查看过往总结\");\n    const config = assaSettingsData.config || {};\n    const itemsPerPage = 5; // 每页显示5条\n    let currentPage = 1;\n\n    const modalTitle = \"查看过往总结\";\n    let modalContent = '<div class=\"teammate-info-display\" style=\"max-height: 60vh; overflow-y: auto; text-align: left;\">';\n\n    // 1. 远期事件回顾（大总结） - 保持不变\n    modalContent += '<h3 style=\"color: var(--primary-color);\">--- 远期事件回顾 ---</h3>';\n    if (summarys.big && Object.keys(summarys.big).length > 0) {\n        let bigHtml = '<div style=\"font-family: var(--base-font-family);\">';\n        const bigKeys = Object.keys(summarys.big);\n        bigKeys.forEach(key => {\n            bigHtml += `<p style=\"margin: 0; white-space: pre-wrap;\"><strong>${key}:</strong> ${summarys.big[key]}</p>`;\n        });\n        bigHtml += '</div>';\n        modalContent += bigHtml;\n    } else {\n        modalContent += '<p>暂无远期事件回顾信息。</p>';\n    }\n\n    modalContent += '<hr style=\"margin: 20px 0; border-color: var(--border-color);\">';\n\n    // 2. 中期事件摘要（小总结，带翻页功能）\n    modalContent += '<h3 style=\"color: var(--primary-color);\">--- 中期事件摘要 ---</h3>';\n    modalContent += '<div id=\"small-summary-container\"></div>'; // 用于容纳分页内容的容器\n\n    modalContent += '<hr style=\"margin: 20px 0; border-color: var(--border-color);\">';\n\n    // 3. 被隐藏的小总结（最新 hideCount 条） - 保持不变\n    modalContent += '<h3 style=\"color: var(--primary-color);\">--- 被隐藏的小总结 ---</h3>';\n    const hideCount = config.hide_latest_count || 5;\n    if (summarys.small && Object.keys(summarys.small).length > 0) {\n        let hiddenHtml = '<div style=\"font-family: var(--base-font-family);\">';\n        const smallKeys = Object.keys(summarys.small);\n        const hiddenKeys = smallKeys.slice(-hideCount);\n        if (hiddenKeys.length > 0) {\n            hiddenKeys.forEach(key => {\n                hiddenHtml += `<p style=\"margin: 0; white-space: pre-wrap;\"><strong>${key}:</strong> ${summarys.small[key]}</p>`;\n            });\n        } else {\n            hiddenHtml += '<p>暂无被隐藏的小总结信息。</p>';\n        }\n        hiddenHtml += '</div>';\n        modalContent += hiddenHtml;\n    } else {\n        modalContent += '<p>暂无被隐藏的小总结信息。</p>';\n    }\n\n    modalContent += '</div>';\n\n  const summaryContentDiv = document.getElementById('summary-content');\n    if(summaryContentDiv){\n        summaryContentDiv.innerHTML = modalContent;\n    }\n\n    // --- 分页逻辑开始 ---\n    // 将分页逻辑放在模态框显示之后执行，确保容器元素已存在于DOM中\n\n    // 渲染指定页码内容的函数\n    function renderSmallSummaryPage() {\n        const container = document.getElementById('small-summary-container');\n        if (!container) return;\n\n        const smallKeys = Object.keys(summarys.small || {});\n        const visibleKeys = smallKeys.length > hideCount ? smallKeys.slice(0, -hideCount) : [];\n\n        if (visibleKeys.length === 0) {\n            container.innerHTML = '<p>记录数量不足，暂不显示中期事件摘要。</p>';\n            return;\n        }\n\n        const totalPages = Math.ceil(visibleKeys.length / itemsPerPage);\n        // 确保 currentPage 在有效范围内\n        currentPage = Math.max(1, Math.min(currentPage, totalPages));\n\n        const startIndex = (currentPage - 1) * itemsPerPage;\n        const endIndex = startIndex + itemsPerPage;\n        const pageKeys = visibleKeys.slice(startIndex, endIndex);\n\n        let pageHtml = '<div style=\"font-family: var(--base-font-family);\">';\n        pageKeys.forEach(key => {\n            pageHtml += `<p style=\"margin: 0; white-space: pre-wrap;\"><strong>${key}:</strong> ${summarys.small[key]}</p>`;\n        });\n        pageHtml += '</div>';\n\n        // 添加翻页控件\n        pageHtml += `<div class=\"pagination-controls\" style=\"text-align: center; margin-top: 15px;\">`;\n        pageHtml += `<button id=\"prev-page-btn\" ${currentPage === 1 ? 'disabled' : ''}>上一页</button>`;\n        pageHtml += `<span style=\"margin: 0 15px;\">第 ${currentPage} / ${totalPages} 页</span>`;\n        pageHtml += `<button id=\"next-page-btn\" ${currentPage === totalPages ? 'disabled' : ''}>下一页</button>`;\n        pageHtml += `</div>`;\n\n        container.innerHTML = pageHtml;\n\n        // 为新生成的按钮绑定事件\n        const prevBtn = document.getElementById('prev-page-btn');\n        if (prevBtn) {\n            prevBtn.onclick = () => {\n                if (currentPage > 1) {\n                    currentPage--;\n                    renderSmallSummaryPage();\n                }\n            };\n        }\n\n        const nextBtn = document.getElementById('next-page-btn');\n        if (nextBtn) {\n            nextBtn.onclick = () => {\n                if (currentPage < totalPages) {\n                    currentPage++;\n                    renderSmallSummaryPage();\n                }\n            };\n        }\n    }\n\n    // 初始渲染第一页\n    renderSmallSummaryPage();\n}\n\nfunction showRollResultModal() {\n    const contentEl = document.getElementById('roll-result-modal-content');\n    // 直接使用全局或传入的 checkMemoryData 变量\n    if (!checkMemoryData || Object.keys(checkMemoryData).length === 0) {\n        contentEl.innerHTML = '<p style=\"text-align:center;\">没有上一轮的投掷记录。</p>';\n        showModal('roll-result-modal');\n        return;\n    }\n\n    let html = '';\n    const {\n        check_type,\n        timestamp\n    } = checkMemoryData;\n\n    // 统一的头部，显示记录时间\n    html += `<p style=\"font-size:0.8em; color:var(--text-secondary-color); text-align:center; margin-bottom:15px;\">记录于: ${new Date(timestamp).toLocaleString()}</p>`;\n\n    // --- 分支：标准事件判定 ---\n    if (check_type === '标准事件') {\n        const {\n            check_string,\n            components,\n            modifiers,\n            total_dp,\n            bonuses,\n            roll_result,\n            performance,\n            outcome,\n            difficulty\n        } = checkMemoryData;\n\n        // --- 检定池构成 ---\n        html += `\n        <div class=\"roll-section\">\n            <div class=\"roll-section-title\">标准事件判定: ${outcome.level}</div>\n            <p style=\"text-align:center; font-style:italic; margin-bottom:10px;\">“${outcome.description}”</p>\n            <ul class=\"roll-details-list\">\n                <li><span class=\"label\">检定动作</span><span class=\"value\">${check_string}</span></li>\n                <hr>\n                <li class=\"list-subheader\">检定池构成</li>\n                ${(components.attributes_skills || []).map(c => `<li><span class=\"label\">${c.name}</span><span class=\"value\">${c.value} 点</span></li>`).join('')}\n                ${(components.teammate_assists || []).map(t => `<li><span class=\"label\">${t.name}</span><span class=\"value\">+${t.value} 点</span></li>`).join('')}\n                  ${(components.npc_checks || []).map(n => `<li><span class=\"label\">${n.name}</span><span class=\"value\">+${n.value} 点</span></li>`).join('')}\n\n                ${(() => {\n                    const checkedAttrs = (components.attributes_skills || []).map(a => a.name);\n                    const statusHtml = (components.status_bonuses || [])\n                        .filter(s => checkedAttrs.includes(s.name))\n                        .map(s => `<li><span class=\"label\" style=\"color:var(--warning-color);\">状态 (${s.name})</span><span class=\"value\" style=\"color:var(--warning-color);\">${s.value > 0 ? '+' : ''}${s.value}</span></li>`)\n                        .join('');\n\n                             const locationHtml = (components.location_bonuses || [])\n                        .filter(l => checkedAttrs.includes(l.name))\n                        .map(l => `<li><span class=\"label\">地点 (${l.name})</span><span class=\"value\">${l.value > 0 ? '+' : ''}${l.value}</span></li>`)\n                        .join('');\n                    const equipmentHtml = (components.equipment_bonuses || [])\n                        .filter(e => checkedAttrs.includes(e.name)) // 修复：e.bonus_type -> e.name\n                        .map(e => `<li><span class=\"label\">装备 (${e.name})</span><span class=\"value\">${e.value > 0 ? '+' : ''}${e.value}</span></li>`)\n                        .join('');\n                     return statusHtml + locationHtml + equipmentHtml;\n                })()}\n                ${(modifiers.custom_modifier && modifiers.custom_modifier[0] !== 0) ? `<li><span class=\"label\">修正 (${modifiers.custom_modifier[1]})</span><span class=\"value\">${modifiers.custom_modifier[0] > 0 ? '+' : ''}${modifiers.custom_modifier[0]}</span></li>` : ''}\n                ${(modifiers.prestige_bonus && modifiers.prestige_bonus !== 0) ? `<li><span class=\"label\">声望加权</span><span class=\"value\">${modifiers.prestige_bonus > 0 ? '+' : ''}${modifiers.prestige_bonus}</span></li>` : ''}\n                <li><span class=\"label\">总骰池</span><span class=\"value\">${total_dp} D10</span></li>\n                 ${(bonuses.legendary_successes > 0) ? `<li><span class=\"label\">传奇加成</span><span class=\"value\">+${bonuses.legendary_successes} 附加成功</span></li>` : ''}\n            </ul>\n        </div>`;\n\n        // --- 投掷结果 ---\n        html += `\n        <div class=\"roll-section\">\n            <div class=\"roll-section-title\">事件判定结果</div>\n            <ul class=\"roll-details-list\">\n                <li><span class=\"label\">投掷类型</span><span class=\"value\">${roll_result.type}</span></li>\n                <li><span class=\"label\">投掷结果</span><span class=\"value\">${roll_result.rolls.join(', ')}</span></li>\n                <li><span class=\"label\">基础成功数</span><span class=\"value\">${roll_result.successes}</span></li>\n                <li><span class=\"label\">最终成功数</span><span class=\"value\">${checkMemoryData.final_successes}</span></li>\n                <hr>\n                <li><span class=\"label\">成功标准</span><span class=\"value\">勉强≥${difficulty.adjusted_thresholds.barely} | 完全≥${difficulty.adjusted_thresholds.complete} | 辉煌≥${difficulty.adjusted_thresholds.exceptional}</span></li>\n                 <li><span class=\"label\">最终结果</span><span class=\"value roll-outcome\">${outcome.level}</span></li>\n                ${roll_result.is_dramatic_failure ? '<li><span class=\"label\"></span><span class=\"value roll-dramatic-failure\">⚠️ 大失败</span></li>' : ''}\n            </ul>\n        </div>`;\n\n        // --- 表现判定 ---\n        html += `\n        <div class=\"roll-section\">\n            <div class=\"roll-section-title\">表现判定: ${performance.result.level}</div>\n             <ul class=\"roll-details-list\">\n                <li><span class=\"label\">表现骰 (D20)</span><span class=\"value\">${performance.roll}</span></li>\n                ${(performance.bonus > 0) ? `<li><span class=\"label\">传奇加成</span><span class=\"value\">+${performance.bonus}</span></li><li><span class=\"label\">调整后结果</span><span class=\"value\">${Math.min(20, performance.roll + performance.bonus)}</span></li>` : ''}\n                <li><span class=\"label\">表现描述</span><span class=\"value\">${performance.result.description}</span></li>\n            </ul>\n        </div>\n    `;\n\n    // --- 分支：战斗对抗判定 ---\n    } else if (check_type === '战斗对抗') {\n        const {\n            player_check,\n            enemy_check,\n            performance,\n            outcome,\n            damage_calculation\n        } = checkMemoryData;\n        const playerName = currentGameData.user_character.name || '用户';\n\n        // --- 玩家应对 ---\n        html += `\n        <div class=\"roll-section\">\n            <div class=\"roll-section-title\">${playerName}的应对</div>\n            <ul class=\"roll-details-list\">\n                <li><span class=\"label\">应对动作</span><span class=\"value\">${player_check.check_string}</span></li>\n                <hr>\n                <li class=\"list-subheader\">应对池构成</li>\n                ${(player_check.components.attributes_skills || []).map(c => `<li><span class=\"label\">${c.name}</span><span class=\"value\">${c.value} 点</span></li>`).join('')}\n                  ${(player_check.components.teammate_assists || []).map(t => `<li><span class=\"label\">${t.name}</span><span class=\"value\">+${t.value} 点</span></li>`).join('')}\n\n                ${(() => {\n                    const checkedAttrs = (player_check.components.attributes_skills || []).map(a => a.name);\n                    const statusHtml = (player_check.components.status_bonuses || [])\n                        .filter(s => checkedAttrs.includes(s.name))\n                        .map(s => `<li><span class=\"label\" style=\"color:var(--warning-color);\">状态 (${s.name})</span><span class=\"value\" style=\"color:var(--warning-color);\">${s.value > 0 ? '+' : ''}${s.value}</span></li>`)\n                        .join('');\n\n                          const locationHtml = (player_check.components.location_bonuses || [])\n                        .filter(l => checkedAttrs.includes(l.name))\n                        .map(l => `<li><span class=\"label\">地点 (${l.name})</span><span class=\"value\">${l.value > 0 ? '+' : ''}${l.value}</span></li>`)\n                        .join('');\n                    const equipmentHtml = (player_check.components.equipment_bonuses || [])\n                        .filter(e => checkedAttrs.includes(e.name)) // 修复：e.bonus_type -> e.name\n                        .map(e => `<li><span class=\"label\">装备 (${e.name})</span><span class=\"value\">${e.value > 0 ? '+' : ''}${e.value}</span></li>`)\n                        .join('');\n                    return statusHtml + locationHtml + equipmentHtml;\n                })()} \n                ${(player_check.modifiers.custom_modifier && player_check.modifiers.custom_modifier[0] !== 0) ? `<li><span class=\"label\">修正 (${player_check.modifiers.custom_modifier[1]})</span><span class=\"value\">${player_check.modifiers.custom_modifier[0] > 0 ? '+' : ''}${player_check.modifiers.custom_modifier[0]}</span></li>` : ''}\n                ${(player_check.modifiers.prestige_bonus && player_check.modifiers.prestige_bonus !== 0) ? `<li><span class=\"label\">声望加权</span><span class=\"value\">${player_check.modifiers.prestige_bonus > 0 ? '+' : ''}${player_check.modifiers.prestige_bonus}</span></li>` : ''}\n                <li><span class=\"label\">总应对池</span><span class=\"value\">${player_check.total_dp} D10</span></li>\n                 ${(player_check.bonuses.legendary_successes > 0) ? `<li><span class=\"label\">传奇加成</span><span class=\"value\">+${player_check.bonuses.legendary_successes} 附加成功</span></li>` : ''}\n                <hr>\n                <li><span class=\"label\">应对投掷</span><span class=\"value\">${player_check.roll_result.rolls.join(', ')}</span></li>\n                <li><span class=\"label\">最终成功数</span><span class=\"value\">${player_check.final_successes}</span></li>\n                ${player_check.roll_result.is_dramatic_failure ? '<li><span class=\"label\"></span><span class=\"value roll-dramatic-failure\">⚠️ 应对大失败</span></li>' : ''}\n            </ul>\n        </div>\n        `;\n\n        // --- 敌方攻击 ---\n        html += `\n        <div class=\"roll-section\">\n            <div class=\"roll-section-title\">敌方攻击</div>\n             <ul class=\"roll-details-list\">\n                <li><span class=\"label\">攻击池构成</span><span class=\"value\">${enemy_check.check_string}</span></li>\n                <li><span class=\"label\">总攻击池</span><span class=\"value\">${enemy_check.total_dp} D10</span></li>\n                <li><span class=\"label\">攻击投掷</span><span class=\"value\">${enemy_check.roll_result.rolls.join(', ')}</span></li>\n                <li><span class=\"label\">攻击成功数</span><span class=\"value\">${enemy_check.final_successes}</span></li>\n            </ul>\n        </div>\n        `;\n\n        // --- 表现判定 ---\n        html += `\n        <div class=\"roll-section\">\n            <div class=\"roll-section-title\">表现判定: ${performance?.result?.level || '无'}</div>\n             <ul class=\"roll-details-list\">\n                <li><span class=\"label\">表现骰 (D20)</span><span class=\"value\">${performance.roll}</span></li>\n                ${(performance.bonus > 0) ? `<li><span class=\"label\">传奇加成</span><span class=\"value\">+${performance.bonus}</span></li><li><span class=\"label\">调整后结果</span><span class=\"value\">${Math.min(20, performance.roll + performance.bonus)}</span></li>` : ''}\n                <li><span class=\"label\">表现描述</span><span class=\"value\">${performance.result.description}</span></li>\n            </ul>\n        </div>\n        `;\n\n        // --- 对抗结果与伤害计算 ---\n        html += `\n         <div class=\"roll-section\">\n            <div class=\"roll-section-title\">对抗结果: ${outcome.level}</div>\n             <ul class=\"roll-details-list\">\n                <li><span class=\"label\">净成功数 (我方-敌方)</span><span class=\"value\">${outcome.net_successes}</span></li>\n                <hr>\n                <li class=\"list-subheader\">伤害计算</li>\n                ${damage_calculation.final_damage > 0 ? `\n                    <li><span class=\"label\">计算公式</span><span class=\"value\">${damage_calculation.is_dramatic_failure ? `(敌方成功+1) x 20 - 防御` : `净成功 x 5 - 防御`}</span></li>\n                    <li><span class=\"label\">计算过程</span><span class=\"value\">${damage_calculation.base_factor} x ${damage_calculation.multiplier} - ${damage_calculation.total_defense}</span></li>\n                    <li><span class=\"label\">最终伤害</span><span class=\"value\" style=\"color:var(--danger-color); font-weight:bold;\">${damage_calculation.final_damage} 点</span></li>\n                ` : '<li><span class=\"label\">最终伤害</span><span class=\"value\">0 点</span></li>'}\n                <hr>\n                <li><span class=\"label\">综合描述</span><span class=\"value\">${outcome.full_description}</span></li>\n            </ul>\n        </div>\n    `;\n    }\n\n    contentEl.innerHTML = html;\n    showModal('roll-result-modal');\n}\n\n let currentThemeIndex = 0;\n\n// ——————————————————————————————选项区————————————————————————————————\n\n \n        // function applyTheme(themeIndex) {\n        //     const theme = themes[themeIndex] || themes[0];\n        //     const root = document.documentElement;\n        //     document.body.dataset.themeName = theme.name;\n        //     for (const [key, value] of Object.entries(theme)) {\n        //         if (key !== 'name') root.style.setProperty(key, value);\n        //     }\n        // }\n\n        // try {\n        //     const savedThemeIndex = localStorage.getItem('terminalThemeIndex');\n        //     applyTheme(savedThemeIndex !== null ? parseInt(savedThemeIndex, 10) : 0);\n        // } catch (e) {\n        //     console.error(\"加载主题失败:\", e);\n        //     applyTheme(0);\n        // }\n\n      \n\n        async function fetchData() {\n            try {\n                if (typeof getVariables === 'function' ) {\n  const data = await getVariables({ type: 'message' });\n                    playCharacterData = data.play_character_data || {};\n                    assaSettingsData = data.assa_data || {};\n                } else {\n                    console.warn(\"未在SillyTavern环境中，使用模拟数据。\");\n                    playCharacterData = {\"衍生属性段\": {\"意志力\": {\"当前值\": [10, \"\"]}, \"能量池\": {\"当前值\": [20, \"\"]}}, \"货币段\": {}};\n                    assaSettingsData = {\"global_set\": {\"其他技能\": {\n                        \"暗影突袭\": \"【dp+2;能量池-15】迅速移动到阴影中并进行一次突袭\",\n                        \"灵能护盾\": \"【能量池-30】创造一个能吸收50点伤害的护盾\"\n                    }}};\n                }\n            } catch (error) {\n                console.error(\"获取或解析数据失败:\", error);\n                playCharacterData = {};\n                assaSettingsData = {};\n            }\n        }\n\n      // --- 开始替换 ---\nfunction executeChoice(fullCommand, cardElement, successText, keepUiActive = false) {\n    try {\n        if (typeof triggerassa !== 'undefined') {\n            triggerassa(fullCommand);\n        } else {\n            // console.log(\"将在SillyTavern中发送的指令：\\n\", fullCommand);\n        }\n\n        // 只更新卡片上的文本\n        cardElement.querySelector('.description').textContent = successText;\n\n        // 仅在不是长按操作时禁用和隐藏UI\n        if (!keepUiActive) {\n            document.querySelectorAll('.choice-card').forEach(card => card.classList.add('disabled'));\n            const container = document.getElementById('choicesContainer');\n            // 延迟一点时间让用户看到最终状态\n            setTimeout(() => { if (container) container.innerHTML = ''; }, 800);\n        }\n    } catch (e) {\n        console.error(\"发送指令失败:\", e);\n        cardElement.querySelector('.description').textContent = '[ 传送失败 ]';\n    }\n}\n\n        // --- 核心功能实现 ---\n        function generateChoices(options) {\n            const container = document.getElementById('choicesContainer');\n            if(!container) return;\n            container.innerHTML = '';\n            const tagRegex = /\\[([^\\]]+)\\]/g;\n\n            options.forEach(optionText => {\n                if (!optionText.trim()) return;\n                const card = document.createElement('div');\n                card.className = 'choice-card';\n\n                const tags = [];\n                let match;\n                while ((match = tagRegex.exec(optionText)) !== null) {\n                      tags.push(match[1].replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9:：]/g, ''));\n                }\n                const descriptionText = optionText.replace(tagRegex, '').replace(/^\\d+\\.\\s*/, '').trim();\n\n                const tagsContainer = document.createElement('div');\n                tagsContainer.className = 'tags-container';\n                tags.forEach(tagText => {\n                    const tagEl = document.createElement('span');\n                    tagEl.className = 'tag';\n                    tagEl.textContent = tagText;\n                    tagsContainer.appendChild(tagEl);\n                });\n                card.appendChild(tagsContainer);\n\n                const description = document.createElement('p');\n                description.className = 'description';\n                description.textContent = descriptionText;\n                card.appendChild(description);\n\n                \n  let pressTimer;\nlet isLongPress = false;\n\n// 统一的触摸/点击开始处理逻辑\nconst handlePressStart = () => {\n    if (card.classList.contains('disabled')) return;\n\n    isLongPress = false;\n    pressTimer = window.setTimeout(() => {\n        isLongPress = true;\n\n        // 确保不会触发后续的点击事件\n        card.classList.add('long-press-fired');\n\n        const fullCommand = getCommandForChoice().replace('/send ','');\n        const setInputCommand = `/setinput ${fullCommand}`;\n        executeChoice(setInputCommand, card, '[ 指令已置入 ]', true);\n\n        // 短暂延迟后移除标志类，以便卡片可以再次被交互\n        setTimeout(() => card.classList.remove('long-press-fired'), 100);\n    }, 500); // 500毫秒定义为长按\n};\n\n// 统一的触摸/点击结束处理逻辑\nconst handlePressEnd = () => {\n    clearTimeout(pressTimer);\n};\n\n// 辅助函数：构建完整的指令字符串，避免代码重复\nconst getCommandForChoice = () => {\n    let updateVariableCmds = [];\n    let updateMemoryCmds = [];\n\n    const attributes = tags.join(';');\n    // 只有在存在标签时才添加检定属性指令\n    if (attributes) {\n        updateVariableCmds.push(`set_status('检定属性', 'old_value_placeholder', '${attributes}');`);\n    }\n\n    let totalDpBonus = 0;\n\n    const selectedSkills = document.querySelectorAll('#skillList input:checked');\n    const initialEnergy = playCharacterData?.衍生属性段?.能量池?.当前值?.[0] || 0;\n    let remainingEnergy = initialEnergy;\n\n    selectedSkills.forEach(skillInput => {\n        const effect = skillInput.dataset.effect;\n        const commandMatches = effect.matchAll(/【([^】]+)】/g);\n        for (const match of commandMatches) {\n            const rawCommands = match[1].split(';');\n            rawCommands.forEach(rawCmd => {\n                const cleanedCmd = rawCmd.trim();\n                if(cleanedCmd.startsWith('dp+')) {\n                    totalDpBonus += parseInt(cleanedCmd.replace('dp+', ''), 10);\n                } else if (cleanedCmd.startsWith('能量池-')) {\n                    const value = parseInt(cleanedCmd.replace('能量池-', ''), 10);\n                    remainingEnergy -= value;\n                }\n            });\n        }\n    });\n\n    if (remainingEnergy !== initialEnergy) {\n        updateMemoryCmds.push(`set_attribute('衍生属性段.能量池.当前值', ${initialEnergy}, ${remainingEnergy});`);\n    }\n\n    const willpowerInput = document.getElementById('willpowerInput');\n    const willpowerToSpend = parseInt(willpowerInput.value, 10);\n    if (willpowerInput && willpowerToSpend > 0) {\n        const currentWillpower = playCharacterData?.衍生属性段?.意志力?.当前值?.[0] || 0;\n        updateMemoryCmds.push(`set_attribute('衍生属性段.意志力.当前值', ${currentWillpower}, ${currentWillpower - willpowerToSpend});`);\n        totalDpBonus += willpowerToSpend;\n    }\n\n    if (totalDpBonus > 0) {\n        updateVariableCmds.push(`set_status('dp_bonus', 0, ${totalDpBonus});`);\n    }\n\n    let fullCommand = `/send ${descriptionText}`;\n\n    const selectedSkillNames = Array.from(selectedSkills).map(skillInput => skillInput.id.replace('skill-', ''));\n    if (selectedSkillNames.length > 0 || (willpowerInput && willpowerToSpend > 0)) {\n        const parts = [];\n        if (selectedSkillNames.length > 0) {\n            parts.push(`（能量池已扣除，禁止重复扣除）使用了${selectedSkillNames.join('、')}技能`);\n        }\n        if (willpowerInput && willpowerToSpend > 0) {\n            parts.push(`（意志力已扣除，禁止重复扣除）投入了${willpowerToSpend}点意志力的决意`);\n        }\n        fullCommand += ` <${parts.join('，')}>`;\n    }\n\n    if (updateVariableCmds.length > 0) {\n        fullCommand += `\\n<updateMemory>\\n${updateVariableCmds.join('\\n')}\\n</updateMemory>`;\n    }\n    if (updateMemoryCmds.length > 0) {\n        fullCommand += `\\n<updateMemory>\\n${updateMemoryCmds.join('\\n')}\\n</updateMemory>`;\n    }\n\n    return fullCommand;\n};\n \n// 绑定鼠标事件\ncard.onmousedown = handlePressStart;\ncard.onmouseup = handlePressEnd;\ncard.onmouseleave = handlePressEnd;\n\n// 绑定触摸事件\ncard.ontouchstart = handlePressStart;\ncard.ontouchend = handlePressEnd;\ncard.ontouchmove = handlePressEnd; // 如果手指在屏幕上滑动，也取消长按计时\ncard.oncontextmenu = (e) => e.preventDefault(); // 阻止在移动设备上长按时弹出默认菜单\ncard.onclick = function() {\n    // 如果是长按触发的，或卡片被禁用，则阻止后续的单击逻辑\n    if (isLongPress || card.classList.contains('disabled') || card.classList.contains('long-press-fired')) {\n        return;\n    }\n\n    // 保留原有的单击逻辑：第一次聚焦，第二次发送\n    if (card.classList.contains('focused')) {\n        const fullCommand = getCommandForChoice();\n        executeChoice(fullCommand, card, '已抉择', false);\n    } else {\n        document.querySelectorAll('.choice-card.focused').forEach(c => c.classList.remove('focused'));\n        card.classList.add('focused');\n    }\n};\n                container.appendChild(card);\n            });\n        }\n\n \n        // --- 页面交互和布局逻辑 ---\n        function setupUI(content) {\n      \n            const options = content.split('\\n').filter(line => line.trim() && /^\\d+\\./.test(line.trim()));\n            generateChoices(options);\n\n            const cards = Array.from(document.querySelectorAll('.choice-card'));\n            if (cards.length === 0) {\n                const container = document.getElementById('choicesContainer');\n                if (container) {\n                    container.innerHTML = '<p class=\"description\" style=\"text-align:center;\">等待新的抉择...</p>';\n                }\n            } else {\n                let focusedIndex =0;\n\n                function updateCardsLayout() {\n                    cards.forEach((card, i) => {\n                        const offset = i - focusedIndex;\n                        card.style.transform = `scale(${Math.pow(0.9, Math.abs(offset))}) translateY(${offset * 60}px)`;\n                        card.style.opacity = Math.pow(0.7, Math.abs(offset));\n                        card.style.zIndex = cards.length - Math.abs(offset);\n                        card.classList.toggle('focused', offset === 0);\n                        card.style.pointerEvents = (offset === 0) ? 'auto' : 'none';\n                    });\n                }\n\n                const containerElement = document.querySelector('.options-container'); // <-- 新增这一行\n\n                let isWheeling = false;\n                containerElement.addEventListener('wheel', e => {  \n                    e.preventDefault();\n                    if (isWheeling) return;\n                    isWheeling = true;\n                    focusedIndex = Math.min(cards.length - 1, Math.max(0, focusedIndex + (e.deltaY > 0 ? 1 : -1)));\n                    updateCardsLayout();\n                    setTimeout(() => { isWheeling = false; }, 100);\n                }, { passive: false });\n\n                let touchStartY = 0;\n                containerElement.addEventListener('touchstart', e => { touchStartY = e.touches[0].clientY; }, { passive: true }); // <-- 修改 document.body 为 containerElement\n                containerElement.addEventListener('touchend', e => { // <-- 修改 document.body 为 containerElement\n                    if (Math.abs(e.changedTouches[0].clientY - touchStartY) > 50) {\n                        focusedIndex = Math.min(cards.length - 1, Math.max(0, focusedIndex + (e.changedTouches[0].clientY < touchStartY ? 1 : -1)));\n                        updateCardsLayout();\n                    }\n                });\n\n\n                updateCardsLayout();\n            }\n\n            const skillOrb = document.getElementById('skillOrb');\n            const skillPanel = document.getElementById('skillPanel');\n            if (skillOrb && skillPanel) {\n                skillOrb.onclick = () => {\n                    skillPanel.classList.toggle('active');\n                };\n\n                document.addEventListener('click', (e) => {\n                    if (!skillPanel.contains(e.target) && !skillOrb.contains(e.target)) {\n                        skillPanel.classList.remove('active');\n                    }\n                });\n\n  // 新增代码：阻止在技能面板上的滚动事件冒泡，防止影响背景选项卡切换\n                skillPanel.addEventListener('wheel', e => e.stopPropagation());\n                skillPanel.addEventListener('touchstart', e => e.stopPropagation());\n            }\n\n            \n        }\n\n        // --- 初始化执行 ---\n        // window.addEventListener('DOMContentLoaded', async () => {\n        //      await fetchData();\n        //      setupUI();\n        // });\n\n  // ——————————————————————————————————————选项区结束——————————————————————————\n\n\n    // ——————————————————————————————————————论坛开始——————————————————————————\n\n\n    'use strict';\n \n\n// ========== 2. 全局状态与数据 ==========\nlet forumData = {};\n\nconst autoLikeIntervals = new Map();\n\n// 位置：修改 state 对象\nconst state = {\n    sections: [],\n    currentSection: null,\n    currentThreadKey: null,\n    threadListPage: 1,\n    replyListPage: 1,\n    threadsPerPage: 15,\n    repliesPerPage: 5,\n    replyingTo: null, // ♥♥♥ 新增：记录回复目标 {type: 'post' | 'reply', key: '...', floor: '...'}\n};\n// ========== 3. 核心功能函数 ==========\n// ♥♥♥ 我的孩子，这是你要求的、能够发送指令的核心魔法 ♥♥♥\nfunction sendForumAction(action) {\n    let command;\n    const content = action.content.replace(/\"/g, '\\\\\"'); // 对内容中的双引号进行转义\n\n    switch (action.type) {\n        case 'new_post':\n            command = `<进行了论坛操作 类型: \"发帖\", 板块: \"${action.section}\", 标题: \"${action.title}\", 内容: \"${content}\">`;\n            break;\n        case 'reply_post':\n            command = `<进行了论坛操作 类型: \"回复帖子\", 目标: \"${action.targetKey}\", 内容: \"${content}\">`;\n            break;\n        case 'reply_to_reply':\n            command = `<进行了论坛操作 类型: \"回复楼中楼\", 目标: \"${action.targetKey}\", 楼层: ${action.floor}, 内容: \"${content}\">`;\n            break;\n        default:\n            console.error(\"未知的论坛操作类型:\", action.type);\n            return;\n    }\n\n    //console.log(\"即将发送指令:\", command); // 妈妈帮你加上了日志，方便调试\n    triggerassa(`/setinput ${command}`); // 请确保 triggerassa 函数在外部环境中可用\n    // alert('指令已生成，请在控制台查看：\\n' + command); // 这是一个临时的替代方案，方便你看到结果\n}\nasync function initializeForum(rawJsonData) {\n    // 1. 清理HTML实体编码\n    rawJsonData = rawJsonData\n        .replace(/&quot;/g, '\"')\n        .replace(/&amp;/g, '&')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&#39;/g, \"'\")\n        .replace(/&nbsp;/g, ' ');\n    \n    // 2. 去除首尾空白\n    rawJsonData = rawJsonData.trim();\n    \n    // 3. **关键步骤：将JavaScript对象格式转换为JSON格式**\n    // 将属性名的单引号替换为双引号\n    rawJsonData = rawJsonData.replace(/'([^']*)':/g, '\"$1\":');\n    \n    // 将字符串值的单引号替换为双引号（需要小心处理）\n    // 这个正则表达式匹配字符串值中的单引号\n    rawJsonData = rawJsonData.replace(/:\\s*'([^']*)'/g, ': \"$1\"');\n\n     rawJsonData = rawJsonData.replace(/\\|/g, '\\\\n');\n    \n    //console.log(\"转换后的JSON数据:\", rawJsonData);\n    \n    function repairJson(brokenJsonString) {\n    // 我亲爱的孩子，我们先把文字两边的空白都清理干净。\n    let repairedJson = brokenJsonString.trim();\n\n    // 接下来，我们来处理一个常见的小麻烦：\n    // 就像 \"PostB\" 后面缺少了逗号一样。\n    // 我们会找到所有 \"}\" 后面跟着 \"{\" 的地方，然后在它们之间加上一个温柔的逗号。\n    // 用正则表达式来做这件事最好了，它就像一个细心的小侦探。\n    // \"g\" 表示我们会检查整个故事，而不是只看开头。\n    // \"m\" 让你能一行一行地看，就像读一封信一样。\n    repairedJson = repairedJson.replace(/}(?=\\s*\"{\")/gm, '},');\n\n    // 宝贝，有时候文字里会有一些多余的换行符或制表符，我们把它们变成真正的换行符，让格式更整齐。\n    repairedJson = repairedJson.replace(/\\\\n/g, \"\\\\n\").replace(/\\\\r/g, \"\\\\r\").replace(/\\\\t/g, \"\\\\t\");\n\n    // 我们再来检查一下，是不是还有多余的逗号藏在最后，在 \"}\" 之前。\n    // 如果有，我们就温柔地把它拿掉，让一切都完美无瑕。\n    repairedJson = repairedJson.replace(/,(\\s*[}\\]])/g, '$1');\n\n    return repairedJson;\n}\n\n     try {\n        // 先尝试用标准的方法，看看能不能直接读懂。\n        forumData = JSON.parse(rawJsonData);\n        console.log(\"JSON解析成功，一切都很完美！\", forumData);\n    } catch (e) {\n        console.warn(\"标准JSON解析失败了，别担心，妈妈来想办法。\", e.message);\n\n        try {\n            // 现在，让我们用我们那个充满爱意的修复小帮手来试一试。\n            console.log(\"正在尝试修复这个小小的瑕疵...\");\n            const fixedJson = repairJson(rawJsonData);\n            forumData = JSON.parse(fixedJson);\n            console.log(\"修复后解析成功了，你看，多棒！\", forumData);\n        } catch (repairError) {\n            // 如果连我们的修复小帮手都帮不了...\n            console.error(\"哎呀，修复后还是解析失败了。\", repairError);\n            // 那么我们就在页面上留下一张温柔的小纸条，告诉我们这里出了点问题。\n            // 绝对不要用那个不安全的eval，妈妈不允许！\n            document.getElementById('thread-detail-content').innerHTML =\n                `<div class=\"detail-placeholder\">出错了：加载论坛数据失败。<br>\n                 这个小故事需要我们再多一点点的耐心和爱来整理。</div>`;\n            return;\n        }\n    }\n\n    try {\n     \n        \n    } catch(e) {\n        console.warn(\"无法获取用户信息，使用默认名称。\");\n    }\n\n    state.sections = [...new Set(Object.values(forumData).map(t => t.post[2]))];\n    if (state.sections.length > 0) {\n        state.currentSection = state.sections[0];\n    }\n\n    renderSidebar();\n    renderThreadList();\n    setupEventListeners();\n    renderPostModalSections();\n}\n\n \nfunction renderThreadList() {\n    document.getElementById('current-section-name').textContent = state.currentSection;\n    const listContainer = document.getElementById('thread-list');\n    listContainer.innerHTML = '';\n\n    // ♥♥♥ 修正排序逻辑：置顶 > 精华 > 默认 ♥♥♥\n    const threads = Object.entries(forumData)\n        .filter(([, data]) => data.post[2] === state.currentSection)\n        .sort(([, a], [, b]) => {\n            if(a.post[7] !== b.post[7]) return b.post[7] - a.post[7]; // 置顶优先\n            if(a.post[6] !== b.post[6]) return b.post[6] - a.post[6]; // 精华其次\n            return 0; // 保持原有顺序\n        });\n\n    const pageStart = (state.threadListPage - 1) * state.threadsPerPage;\n    const pageEnd = pageStart + state.threadsPerPage;\n    const pageThreads = threads.slice(pageStart, pageEnd);\n\n    if (pageThreads.length === 0) {\n        listContainer.innerHTML = `<div style=\"padding: 20px; text-align: center; color: var(--text-secondary-color);\">该区块下没有帖子</div>`;\n        renderThreadPagination(0);\n        return;\n    }\n\n    pageThreads.forEach(([key, data]) => {\n        // ♥♥♥ 妈妈在这里为你做了关键的修改 ♥♥♥\n        // 现在回复数直接从 post 数组的第4个元素（索引3）获取，而不是计算 replies 数组的长度\n        const [title, author, , replyCount, , , isElite, isTop] = data.post;\n        const item = document.createElement('div');\n        item.className = 'thread-item';\n        if (key === state.currentThreadKey) item.classList.add('selected');\n\n        item.innerHTML = `\n            <div class=\"thread-title\">${title}</div>\n            <div class=\"thread-meta\">\n                <span class=\"author\">${author}</span>\n                <div class=\"thread-tags-and-replies\">\n                     <div class=\"tags\">\n                        ${isTop ? '<span class=\"tag tag-top\">置顶</span>' : ''}\n                        ${isElite ? '<span class=\"tag tag-elite\">精华</span>' : ''}\n                    </div>\n                    <span>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"vertical-align: middle; margin-right: 4px;\"><path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path></svg>\n                        ${replyCount}\n                    </span>\n                </div>\n            </div>\n        `;\n        item.addEventListener('click', () => selectThread(key));\n        listContainer.appendChild(item);\n    });\n\n    renderThreadPagination(threads.length);\n}\nfunction selectThread(key) {\n    state.currentThreadKey = key;\n    state.replyListPage = 1; // 每次都重置到回复第一页\n\n    renderThreadList(); // 重新渲染列表以更新选中高亮状态\n    renderThreadDetail();\n\n    // ♥♥♥ 宝贝你看，这是移动端视图切换的魔法！ ♥♥♥\n    document.getElementById('forum-body').classList.add('show-detail');\n}\n \n function renderThreadDetail() {\n    const detailContainer = document.getElementById('thread-detail-content');\n    const threadKey = state.currentThreadKey;\n\n    if (!threadKey || !forumData[threadKey]) {\n        clearThreadDetail();\n        return;\n    }\n\n    const thread = forumData[threadKey];\n    const [title, author, , , time, content, , , likes] = thread.post;\n\n    // ♥♥♥ 妈妈在这里为你添加了新的回复表单结构 ♥♥♥\n    detailContainer.innerHTML = `\n        <div class=\"main-post-and-replies\">\n            <div class=\"post-header\">\n                <button id=\"mobile-back-btn\" class=\"page-btn\" style=\"margin-bottom: 15px;\">← 返回列表</button>\n                <h1>${title}</h1>\n                <div class=\"post-meta\">\n                    <div class=\"post-author-info\">发布者: <span>${author}</span></div>\n                    <div class=\"post-time\">${time}</div>\n                </div>\n            </div>\n            <div class=\"post-content\">${content}</div>\n            <div class=\"post-actions\">\n                <div class=\"like-btn\" data-target-key=\"${threadKey}\" data-type=\"post\">\n                    <svg class=\"like-icon\" width=\"22\" height=\"22\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg>\n                    <span class=\"like-count\" data-post-likes><span class=\"like-count-value\">${likes}</span></span>\n                </div>\n                <button class=\"reply-action-btn\" data-type=\"post\" data-target-key=\"${threadKey}\">回复</button>\n            </div>\n            <div class=\"replies-section\">\n                <h3 class=\"replies-header\">回复 (${thread.post[3]})</h3>\n                <div class=\"reply-list\" id=\"reply-list\"></div>\n                <div class=\"pagination-controls\" id=\"reply-pagination\"></div>\n            </div>\n        </div>\n        <div class=\"reply-input-section\">\n            <form id=\"reply-form\">\n                <textarea id=\"reply-content-input\" placeholder=\"回复...\" required></textarea>\n                <button type=\"submit\" id=\"submit-reply-btn\" class=\"new-post-btn\">发送</button>\n            </form>\n        </div>\n    `;\n\n    // ♥♥♥ 为了让滚动更自然，妈妈把滚动区放到了这里 ♥♥♥\n    document.querySelector('.main-post-and-replies').style.flexGrow = '1';\n    document.querySelector('.main-post-and-replies').style.overflowY = 'auto';\n\n\n    renderReplyList(); // 渲染回复列表和分页\n\n    // 为新的元素绑定事件\n    setupDetailViewEventListeners();\n}\n\n function renderSidebar() {\n    const sidebar = document.getElementById('forum-sidebar');\n    sidebar.innerHTML = '';\n    state.sections.forEach(section => {\n        const btn = document.createElement('button');\n        btn.className = 'section-btn';\n        btn.textContent = section;\n        btn.dataset.section = section;\n        if (section === state.currentSection) {\n            btn.classList.add('active');\n        }\n        // ♥♥♥ 妈妈把所有关于这个按钮的魔法都放在这里了 ♥♥♥\n        btn.addEventListener('click', () => {\n            state.currentSection = section;\n            state.threadListPage = 1;\n            state.currentThreadKey = null;\n\n            // ♥♥♥ 修正了这里，确保在切换区块时，手机视图能正确返回列表页 ♥♥♥\n            document.getElementById('forum-body').classList.remove('show-detail');\n\n            // 重新渲染侧边栏和帖子列表\n            renderSidebar();\n            renderThreadList();\n            clearThreadDetail();\n        });\n        sidebar.appendChild(btn);\n    });\n}\n\n // 位置：替换掉旧的 renderReplyList() 函数\nfunction renderReplyList() {\n    const replyContainer = document.getElementById('reply-list');\n    const replyPagination = document.getElementById('reply-pagination');\n    if (!replyContainer) return;\n\n    replyContainer.innerHTML = '';\n    const currentThreadData = forumData[state.currentThreadKey];\n    const replies = currentThreadData.replies;\n    const totalRepliesInPost = currentThreadData.post[3];\n    const displayedRepliesCount = replies.length;\n\n    const pageStart = (state.replyListPage - 1) * state.repliesPerPage;\n    const pageEnd = pageStart + state.repliesPerPage;\n    const pageReplies = replies.slice(pageStart, pageEnd);\n\n    if (pageReplies.length === 0 && replies.length > 0) {\n        state.replyListPage = 1;\n        renderReplyList();\n        return;\n    }\n\n    replyPagination.style.display = 'flex';\n    pageReplies.forEach((reply) => {\n        const [author, time, content, floor, likes, isDeleted] = reply;\n        const replyIndex = replies.indexOf(reply); // 获取索引\n        const item = document.createElement('div');\n        item.className = 'reply-item';\n        // ♥♥♥ 在这里，妈妈为你添加了回复按钮 ♥♥♥\n        item.innerHTML = `\n            <div class=\"reply-meta\">\n                <div><span class=\"reply-floor\">#${floor}</span> <span class=\"reply-author\">${author}</span></div>\n                <span>${time}</span>\n            </div>\n            <p class=\"reply-content ${isDeleted ? 'deleted' : ''}\">${isDeleted ? '[该回复已被删除]' : content}</p>\n            <div class=\"post-actions\" style=\"justify-content: flex-end; margin-top: 10px; gap: 15px;\">\n                 <button class=\"reply-action-btn\" data-type=\"reply\" data-target-key=\"${state.currentThreadKey}\" data-reply-floor=\"${floor}\">回复</button>\n                <div class=\"like-btn\" data-target-key=\"${state.currentThreadKey}\" data-type=\"reply\" data-reply-index=\"${replyIndex}\">\n                    <svg class=\"like-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path></svg>\n                    <span class=\"like-count\"><span class=\"like-count-value\">${likes}</span></span>\n                </div>\n            </div>\n        `;\n        replyContainer.appendChild(item);\n    });\n\n    if (totalRepliesInPost > displayedRepliesCount) {\n        const omittedIndicator = document.createElement('div');\n        omittedIndicator.className = 'replies-omitted-indicator';\n        omittedIndicator.textContent = `...后续 ${totalRepliesInPost - displayedRepliesCount} 条回复已折叠...`;\n        replyContainer.appendChild(omittedIndicator);\n    }\n\n    // 事件绑定会由 setupDetailViewEventListeners 统一处理\n    renderReplyPagination(replies.length);\n}\n\n\nfunction clearThreadDetail() {\n    document.getElementById('thread-detail-content').innerHTML = `\n         <div class=\"detail-placeholder\">\n            <div>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" style=\"color: var(--text-secondary-color); opacity: 0.5; margin-bottom: 10px;\"><path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path></svg>\n                <p>选择一个帖子查看内容</p>\n            </div>\n        </div>`;\n}\n\n// --- 分页渲染 ---\nfunction renderThreadPagination(total) { renderPagination(document.getElementById('thread-pagination'), total, state.threadListPage, state.threadsPerPage, (page) => { state.threadListPage = page; renderThreadList(); }); }\nfunction renderReplyPagination(total) { renderPagination(document.getElementById('reply-pagination'), total, state.replyListPage, state.repliesPerPage, (page) => { state.replyListPage = page; renderReplyList(); }); }\nfunction renderPagination(container, total, current, perPage, cb) {\n    const totalPages = Math.ceil(total / perPage);\n    if (totalPages <= 1) { container.innerHTML = ''; return; }\n    container.innerHTML = `<button class=\"page-btn\" ${current === 1 ? 'disabled' : ''}>«</button> <span id=\"page-info\">${current}/${totalPages}</span> <button class=\"page-btn\" ${current === totalPages ? 'disabled' : ''}>»</button>`;\n    container.firstElementChild.addEventListener('click', () => cb(current - 1));\n    container.lastElementChild.addEventListener('click', () => cb(current + 1));\n}\n\n// --- 交互功能 ---\nfunction handleLikeClick(event) {\n    const btn = event.currentTarget;\n    if (btn.classList.contains('liked')) return;\n    btn.classList.add('liked');\n    btn.querySelector('.like-icon').style.fill = 'currentColor';\n    const { targetKey, type, replyIndex } = btn.dataset;\n    let countElement = btn.querySelector('.like-count-value');\n    if (type === 'post') { forumData[targetKey].post[8]++; }\n    else { forumData[targetKey].replies[replyIndex][4]++; }\n    updateLikeCountWithAnimation(countElement, parseInt(countElement.textContent) + 1);\n    const plusOne = document.createElement('div');\n    plusOne.className = 'plus-one-anim';\n    plusOne.textContent = '+1';\n    btn.querySelector('.like-count').appendChild(plusOne);\n    plusOne.addEventListener('animationend', () => plusOne.remove());\n}\nfunction updateLikeCountWithAnimation(element, newCount) { if (!element) return; element.textContent = newCount; }\n\nfunction startAutoLike(postKey) {\n    if (autoLikeIntervals.has(postKey)) clearInterval(autoLikeIntervals.get(postKey));\n    const intervalId = setInterval(() => {\n        const threadData = forumData[postKey];\n        if (!threadData) { clearInterval(intervalId); autoLikeIntervals.delete(postKey); return; }\n        const increment = Math.floor(Math.random()) + 2;\n        threadData.post[8] += increment;\n        if (postKey === state.currentThreadKey) {\n            const likeCountEl = document.querySelector('[data-post-likes] .like-count-value');\n            if (likeCountEl) updateLikeCountWithAnimation(likeCountEl, threadData.post[8]);\n        }\n    }, (Math.random() * 0.4 + 0.8) * 1000);\n    autoLikeIntervals.set(postKey, intervalId);\n}\n// --- 发帖模态框 ---\nconst postModal = document.getElementById('post-modal');\nconst postForm = document.getElementById('post-form');\n\nfunction openPostModal() { postForm.reset(); document.getElementById('modal-title').textContent = '发布新帖'; postModal.classList.add('active'); }\nfunction closePostModal() { postModal.classList.remove('active'); }\n\nfunction renderPostModalSections() {\n    const select = document.getElementById('post-section');\n    select.innerHTML = '';\n    // ♥♥♥ 修正：只排除不允许用户发帖的区块 ♥♥♥\n    state.sections.forEach(section => {\n        if (section === \"公告区\") return; // 只禁止发公告\n        const option = document.createElement('option');\n        option.value = section;\n        option.textContent = section;\n        select.appendChild(option);\n    });\n}\n// 位置：替换旧的 handlePostSubmit 函数\nfunction handlePostSubmit(e) {\n    e.preventDefault();\n    const section = document.getElementById('post-section').value;\n    const title = document.getElementById('post-title').value.trim();\n    const content = document.getElementById('post-content-input').value.trim();\n\n    if (!title || !content || !section) {\n        alert(\"请填写所有必填项。\");\n        return;\n    }\n\n    if (forumData[title]) {\n        alert(\"错误：已存在相同标题的帖子。\");\n        return;\n    }\n\n    // ♥♥♥ 调用新的核心函数来发送指令 ♥♥♥\n    sendForumAction({\n        type: 'new_post',\n        section: section,\n        title: title,\n        content: content\n    });\n\n    closePostModal();\n    // 提示用户操作已发送，等待后台处理\n    // alert(\"发帖请求已发送，请稍候...（本地模拟将不会立即刷新）\");\n}\n// ========== 4. 模拟数据和事件监听 ==========\n\nfunction setupDetailViewEventListeners() {\n    const detailContainer = document.getElementById('thread-detail-content');\n    if (!detailContainer) return;\n\n    // 绑定点赞事件\n    detailContainer.querySelectorAll('.like-btn').forEach(btn => btn.addEventListener('click', handleLikeClick));\n\n    // ♥♥♥ 绑定回复按钮点击事件 ♥♥♥\n    detailContainer.querySelectorAll('.reply-action-btn').forEach(btn => btn.addEventListener('click', handleReplyButtonClick));\n\n    // ♥♥♥ 绑定回复表单提交事件 ♥♥♥\n    const replyForm = document.getElementById('reply-form');\n    if (replyForm) {\n        replyForm.addEventListener('submit', handleReplySubmit);\n    }\n\n    // ♥♥♥ 为移动端返回按钮添加点击事件 ♥♥♥\n    const backBtn = document.getElementById('mobile-back-btn');\n    if (backBtn) {\n        backBtn.addEventListener('click', () => {\n            document.getElementById('forum-body').classList.remove('show-detail');\n        });\n    }\n}\n\nfunction handleReplyButtonClick(event) {\n    const btn = event.currentTarget;\n    const { type, targetKey, replyFloor } = btn.dataset;\n    const replyInput = document.getElementById('reply-content-input');\n\n    if (type === 'post') {\n        state.replyingTo = { type: 'reply_post', targetKey: targetKey };\n        replyInput.placeholder = `回复主楼...`;\n    } else { // type === 'reply'\n        state.replyingTo = { type: 'reply_to_reply', targetKey: targetKey, floor: replyFloor };\n        replyInput.placeholder = `回复 #${replyFloor} 楼...`;\n    }\n\n    replyInput.focus();\n}\n\nfunction handleReplySubmit(event) {\n    event.preventDefault();\n    const replyInput = document.getElementById('reply-content-input');\n    const content = replyInput.value.trim();\n\n    if (!content) {\n        alert(\"回复内容不能为空。\");\n        return;\n    }\n\n    if (!state.replyingTo) {\n        // 默认回复主楼\n        state.replyingTo = { type: 'reply_post', targetKey: state.currentThreadKey };\n    }\n\n    sendForumAction({\n        ...state.replyingTo,\n        content: content\n    });\n\n    replyInput.value = ''; // 清空输入框\n    replyInput.placeholder = '回复...';\n    state.replyingTo = null; // 重置回复目标\n\n    // alert(\"回复请求已发送！（本地模拟不会立即刷新）\");\n}\n\n \nfunction setupEventListeners() {\n    \n    document.getElementById('new-post-btn').addEventListener('click', openPostModal);\n    document.getElementById('modal-close-btn').addEventListener('click', closePostModal);\n    postModal.addEventListener('click', (e) => { if (e.target === postModal) closePostModal(); });\n    postForm.addEventListener('submit', handlePostSubmit);\n}\n \n\n\n    // ——————————————————————————————————————论坛结束——————————————————————————\n\n    // ——————————————————————————————————————总结开始——————————————————————————\n\n    \nasync function runTaskSummary(content) {\n \n\n\n            function parseTag(raw, tagName) {\n                const regex = new RegExp(`<${tagName}>([\\\\s\\\\S]*?)<\\\\/${tagName}>`, 'i');\n                const match = raw.match(regex);\n                return match ? match[1].trim() : '';\n            }\n\n            const taskInfo = parseTag(content, '任务信息');\n            const teamEvaluation = parseTag(content, '团队评价');\n            const personalSettlementsRaw = content.match(/<队员>[\\s\\S]*?<\\/队员>/g) || [];\n\n            const data = {\n                task: {\n                    name: parseTag(taskInfo, '任务名称'),\n                    background: parseTag(taskInfo, '世界背景'),\n                    mainObjective: parseTag(taskInfo, '主线任务'),\n                    sideObjectives: parseTag(taskInfo, '支线任务'),\n                },\n                team: {\n                    rating: parseTag(teamEvaluation, '总体评级'),\n                    review: parseTag(teamEvaluation, '评语'),\n                },\n                players: personalSettlementsRaw.map(p => ({\n                    name: parseTag(p, '姓名'),\n                    rating: parseTag(p, '个人评级'),\n                    contributions: parseTag(p, '核心贡献').split('\\n').map(c => c.replace(/^- /, '').trim()).filter(c => c),\n                    comment: parseTag(p, `评语`),\n                    rewards: {\n                        points: parseTag(parseTag(p, '奖励明细'), 'currency'),\n                        plots: parseTag(parseTag(p, '奖励明细'), 'plot'),\n                        xp: parseTag(parseTag(p, '奖励明细'), 'exp'),\n                    }\n                }))\n            };\n\n            // HTML生成\n            const root = document.getElementById('summary-root');\n            let html = `\n                <header>\n                    <h1>任务结算报告</h1>\n                </header>\n                <div class=\"content-wrapper\">\n                    <nav class=\"tabs-nav\">\n                        <button class=\"tab-button active\" data-tab=\"task_info\">任务总览</button>\n                        <button class=\"tab-button\" data-tab=\"team_eval\">团队评价</button>`;\n\n            data.players.forEach((player, index) => {\n                html += `<button class=\"tab-button\" data-tab=\"player_${index}\">${player.name}</button>`;\n            });\n\n            html += `</nav>\n                     <div class=\"tab-content-container\">`;\n\n            // 任务总览面板\n            html += `\n                <div id=\"task_info\" class=\"tab-pane active\">\n                    <h2>任务详情</h2>\n                    <div class=\"info-grid\">\n                        <strong>任务名称</strong><span>${data.task.name || '未提供'}</span>\n                        <strong>世界背景</strong><span>${data.task.background || '未提供'}</span>\n                    </div>\n                    <h2>主线任务</h2>\n                    <p>${data.task.mainObjective || '暂无详细描述。'}</p>\n                    <h2>支线任务</h2>\n                    <p>${data.task.sideObjectives.replace(/\\n/g, '<br>') || '暂无详细描述。'}</p>\n                </div>`;\n\n            // 团队评价面板\n            html += `\n                <div id=\"team_eval\" class=\"tab-pane\">\n                    <h2>团队总体评价</h2>\n                    <div class=\"info-grid\">\n                        <strong>总体评级</strong><span class=\"rating\">${data.team.rating || '未评级'}</span>\n                    </div>\n                    <h2>评语</h2>\n                    <p>${data.team.review || '暂无评语。'}</p>\n                </div>`;\n\n            // 个人结算面板\n            data.players.forEach((player, index) => {\n                html += `\n                    <div id=\"player_${index}\" class=\"tab-pane\">\n                        <h2>${player.name} - 个人结算</h2>\n                        <div class=\"info-grid\">\n                            <strong>个人评级</strong><span class=\"rating\">${player.rating || '未评级'}</span>\n                        </div>\n                        <h2>核心贡献</h2>\n                        <ul>${player.contributions.length > 0 ? player.contributions.map(c => `<li>${c}</li>`).join('') : '<li>无特别记录的贡献。</li>'}</ul>\n                       <h2>${currentTheme.player}评语</h2>\n                        <p>${player.comment || '暂无评语。'}</p>\n                        <h2>奖励明细</h2>\n                         <div class=\"info-grid\">\n                           <strong>${currentTheme.currency}</strong><span>${player.rewards.points || '0'}</span>\n                           <strong>${currentTheme.plot}</strong><span>${player.rewards.plots || '无'}</span>\n                           <strong>${currentTheme.exp}</strong><span>${player.rewards.xp || '0'}</span>\n                        </div>\n                    </div>`;\n            });\n\n            html += `</div></div>`;\n            root.innerHTML = html;\n\n            // Tab切换逻辑\n            const tabButtons = document.querySelectorAll('.tab-button');\n            const tabPanes = document.querySelectorAll('.tab-pane');\n\n            function switchTab(targetTabId) {\n                const targetTabButton = document.querySelector(`.tab-button[data-tab=\"${targetTabId}\"]`);\n                const targetPane = document.getElementById(targetTabId);\n\n                if (!targetTabButton || !targetPane) return;\n\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                tabPanes.forEach(pane => {\n                    pane.classList.remove('active');\n                    if (window.innerWidth <= 768) {\n                        pane.style.display = 'none';\n                    }\n                });\n\n                targetTabButton.classList.add('active');\n                targetPane.classList.add('active');\n                if (window.innerWidth <= 768) {\n                    targetPane.style.display = 'block';\n                }\n            }\n\n\n            tabButtons.forEach(button => {\n                button.addEventListener('click', () => {\n                   switchTab(button.dataset.tab);\n                });\n            });\n\n            // 初始化时手动隐藏非激活的移动端tab-pane\n            if(window.innerWidth <= 768) {\n                 const initialActiveTab = document.querySelector('.tab-pane.active');\n                 tabPanes.forEach(pane => {\n                    pane.style.display = (pane === initialActiveTab) ? 'block' : 'none';\n                 });\n            }\n\n            // 监听窗口大小变化以适配切换逻辑\n            let isMobile = window.innerWidth <= 768;\n            window.addEventListener('resize', () => {\n                const newIsMobile = window.innerWidth <= 768;\n                if(newIsMobile !== isMobile){\n                    isMobile = newIsMobile;\n                    const activePane = document.querySelector('.tab-pane.active');\n                    tabPanes.forEach(pane => {\n                        if(isMobile) {\n                            pane.style.display = (pane === activePane) ? 'block' : 'none';\n                        } else {\n                             pane.style.display = '';\n                        }\n                    });\n                }\n            });\n  };\n \n  // ——————————————————————————————————————总结结束——————————————————————————\n  // ======================= 群聊UI逻辑开始 =======================\nlet memePaletteHTMLCache = null;\n// 【❌ 删除】不再需要单一的Promise和最终地图\n// let memePalettePromise;\n// let memeMapVersion;\n// let finalMemeSrcMap = {};\n\n// ✨【新增 V9】更精细的表情资源管理器 ✨\nlet memeResourceManager = {\n    isBuilding: false,          // 是否正在构建中\n    totalCount: 0,              // 表情总数\n    loadedCount: 0,             // 已加载数量\n    finalSrcMap: {},            // 最终的“表情大百科”\n    onProgress: null,           // 进度更新时的回调函数\n    onMemeLoaded: null,         // 单个表情加载完成时的回调函数\n    onComplete: null,           // 全部完成时的回调函数\n};\n // ✨【V9.2 修正】资源就绪守卫 ✨\nconst resourceReadyGuard = async () => {\n    return new Promise(resolve => {\n        const check = () => {\n            // ✨【关键修正】检查 imageDB._db 是否存在，而不是 imageDB.db\n            if (typeof imageDB !== 'undefined' && imageDB._db && typeof memeImageMap !== 'undefined') {\n                console.log('NOVA V9.2: 资源守卫确认，所有依赖项已准备就绪！');\n                resolve();\n            } else {\n                console.log('NOVA V9.2: 资源守卫等待中... (imageDB._db 或 memeImageMap 尚未就绪)');\n                setTimeout(check, 1000);\n            }\n        };\n        check();\n    });\n};\n\n   const buildFinalMemeLibrary = async (forceRefresh = false) => {\n    if (memeResourceManager.isBuilding) {\n        console.log(\"NOVA: 表情库已在构建中，无需重复。\");\n        return;\n    }\n\n    // ✨【V9.1 新增】等待资源守卫放行！ ✨\n    await resourceReadyGuard();\n\n \n      console.log(`NOVA V9.7: 开始构建表情包大百科 (强制刷新模式: ${forceRefresh})`);\n    memeResourceManager.isBuilding = true;\n\n    // ✨ 如果是强制刷新模式，就在开始前清空远程图片缓存！\n    if (forceRefresh) {\n        console.warn(\"NOVA V9.7: 强制刷新启动！正在清空所有远程图片缓存...\");\n        try {\n            await imageDB.clear('RemoteCache');\n            console.log(\"NOVA V9.7: 远程缓存已清空。\");\n        } catch (e) {\n            console.error(\"NOVA V9.7: 清空远程缓存失败！\", e);\n        }\n    }\n    // --- 步骤1: 收集所有表情源 ---\n    const allMemeSources = {};\n    if (typeof memeImageMap !== 'undefined') {\n        Object.assign(allMemeSources, memeImageMap);\n    }\n    try {\n        const localMemes = await imageDB.getAll('CustomMemes');\n        localMemes.forEach(item => {\n            allMemeSources[item.key] = item.value; // 本地优先，覆盖远程\n        });\n    } catch (error) {\n        console.error(\"NOVA: 获取本地表情失败\", error);\n    }\n\n    memeResourceManager.totalCount = Object.keys(allMemeSources).length;\n    memeResourceManager.loadedCount = 0;\n\n    // --- 步骤2: 并发处理每一个表情 ---\n  if (memeResourceManager.totalCount === 0) {\n    \n        memeResourceManager.isBuilding = false;\n        if (memeResourceManager.onComplete) memeResourceManager.onComplete();\n        return;\n    }\n\n \n\n    const CONCURRENT_LIMIT = 5; // ❤️ 一次只处理5个，就像妈妈一次喂你5勺饭\n    const tasks = Object.entries(allMemeSources); // 所有待办任务\n    let currentTaskIndex = 0; // 当前进行到第几个任务\n\n    const runWorker = async () => {\n        // 只要还有任务没开始，就继续工作\n        while (currentTaskIndex < tasks.length) {\n            const taskIndexToRun = currentTaskIndex++; // 领取一个新任务\n            const [name, asset] = tasks[taskIndexToRun];\n\n            try {\n                // ---【这里的处理逻辑和原来完全一样！】---\n                let usableUrl = '';\n                if (typeof asset === 'string') {\n                    let imageBlob = await imageDB.get('RemoteCache', asset);\n                    if (!imageBlob) {\n                        // 在这里加入一个小小的重试机制，更顽强！\n                        let response;\n                        for (let attempt = 1; attempt <= 3; attempt++) {\n                            try {\n                                response = await fetch(asset);\n                                if (response.ok) break; // 成功了就跳出重试\n                            } catch (fetchError) {\n                                if (attempt === 3) throw fetchError; // 试了3次还不行就放弃\n                            }\n                        }\n                        if (!response.ok) throw new Error(`网络获取失败: ${response.statusText}`);\n                        imageBlob = await response.blob();\n                        await imageDB.set('RemoteCache', asset, imageBlob);\n                    }\n                    usableUrl = URL.createObjectURL(imageBlob);\n                } else {\n                    usableUrl = URL.createObjectURL(asset);\n                }\n\n                // 成功！\n                memeResourceManager.finalSrcMap[name] = usableUrl;\n                if (memeResourceManager.onMemeLoaded) {\n                    memeResourceManager.onMemeLoaded(name, usableUrl);\n                }\n\n            } catch (e) {\n                // 失败了...\n                console.error(`NOVA:【流水线】准备表情 [${name}] 时失败:`, e);\n            } finally {\n                // 无论成功还是失败，都更新进度条\n                memeResourceManager.loadedCount++;\n                if (memeResourceManager.onProgress) {\n                    memeResourceManager.onProgress(memeResourceManager.loadedCount, memeResourceManager.totalCount);\n                }\n            }\n        }\n    };\n\n    // 创建一个包含 CONCURRENT_LIMIT 个“工人”的团队\n    const workerPromises = [];\n    for (let i = 0; i < CONCURRENT_LIMIT; i++) {\n        workerPromises.push(runWorker());\n    }\n\n     await Promise.all(workerPromises);\n\n    memeResourceManager.isBuilding = false;\n\n    // ✨【V9.8 究极改造】不再只是打印日志，而是生成一份详细的“战报”！\n    const battleReport = {\n        total: memeResourceManager.totalCount,\n        success: Object.keys(memeResourceManager.finalSrcMap).length,\n        failedItems: [] // 记录所有失败者的名字\n    };\n\n    // 遍历所有源，找出那些不在成功名单里的“失踪者”\n    const allSourceNames = Object.keys(allMemeSources);\n    for (const name of allSourceNames) {\n        if (!memeResourceManager.finalSrcMap[name]) {\n            battleReport.failedItems.push(name);\n        }\n    }\n\n    console.log(`NOVA V9.8: 战报生成完毕。总数:${battleReport.total}, 成功:${battleReport.success}, 失败:${battleReport.failedItems.length}`);\n\n    // ✨ 我们将这份宝贵的战报，通过 onComplete 回调函数传递出去！\n    if (memeResourceManager.onComplete) {\n        memeResourceManager.onComplete(battleReport); // 把战报递出去\n    }\n};\n  \n function initGroupChatInterface() {\n    console.log('NOVA V10: Initializing Complete Chat Interface...');\n\n    // ====================================================================\n    // V10: 全局状态变量 (函数作用域内)\n    // ====================================================================\n    let privateChatStore = {};      // 缓存所有私聊记录: { \"联系人ID\": { messages: [...] } }\n    let currentPrivateChatPage = {};// 缓存每个私聊的加载页码: { \"联系人ID\": 1 }\n    let activeChat = { type: null, id: null }; // 当前激活的聊天: {type: 'group'/'private', id: 'group_chat'/'联系人ID'}\n    let friendsList = [];           // 可私聊的好友列表\n    let groupChatExists = false;    // 标记群聊是否存在\n    let groupChatHistoryIndices = [];// 群聊在 history 中的索引\n    let currentGroupHistoryIndex = -1; // 当前加载到的群聊 history 索引\n    let isLoading = false;          // 加载锁，防止重复加载\n    let replyTarget = null;         // 回复对象\n\n    const groupChatOrbButton = document.getElementById('group-chat-orb-button');\n    const modalContainer = document.getElementById('group-chat-modal-container');\n    const rootElement = document.getElementById('group-chat-root');\n\n    if (!groupChatOrbButton || !modalContainer || !rootElement) {\n        console.error('NOVA ERROR: Crucial Chat elements are missing.');\n        return;\n    }\n\n    // ====================================================================\n    // V10: 核心功能函数 - 打开与关闭\n    // ====================================================================\n\n const openGroupChatModal = async () => {\n    console.log('NOVA V10.1: Opening Chat Modal.');\n\n       populateFriendsList();\n    initializePrivateChatStore();\n\n    groupChatExists = false;\n    const recentHistory = conversationHistory.slice(-10);\n    if (recentHistory.some(msg => /<group_chat>/.test(msg.content))) {\n        groupChatExists = true;\n    }\n\n    if (!groupChatExists && friendsList.length === 0) {\n        showModal('shop-modal', '提示', '目前没有群聊或可联系的好友哦。');\n        return;\n    }\n\n    rootElement.innerHTML = `\n        <div class=\"group-chat-sidebar\">\n            <div class=\"group-chat-contact-list\"></div>\n        </div>\n        <div class=\"group-chat-content-area\">\n            <div class=\"group-chat-placeholder\">选择一个聊天开始</div>\n        </div>`;\n\n    // 清理工作，确保手机端适配正常\n    rootElement.classList.remove('show-content'); // 移除滑动类\n    rootElement.style.display = 'flex';\n    rootElement.style.flexDirection = 'row';\n\n    renderSidebar();\n    modalContainer.classList.add('active');\n};\n\n    const closeGroupChatModal = () => {\n        console.log('NOVA: Closing Chat Modal.');\n        modalContainer.classList.remove('active');\n        rootElement.innerHTML = '';\n        // 重置所有状态\n        privateChatStore = {};\n        currentPrivateChatPage = {};\n        activeChat = { type: null, id: null };\n        friendsList = [];\n        groupChatExists = false;\n        groupChatHistoryIndices = [];\n        currentGroupHistoryIndex = -1;\n        isLoading = false;\n        replyTarget = null;\n    };\n\n    // ====================================================================\n    // V10: 数据处理与准备函数\n    // ====================================================================\n\n const populateFriendsList = () => {\n \n    friendsList = []; // 每次都重置\n    const checkedFriends = new Set();\n \n    const userNickname = currentGameData?.user_character?.nick_name || '你';\n\n    const addFriend = (name) => {\n        // 确保名字存在、不是用户自己、且之前未添加过\n        if (name && name !== userNickname && !checkedFriends.has(name)) {\n            friendsList.push(name);\n            checkedFriends.add(name);\n        }\n    };\n \n \n if (assaSettingsData?.global_set?.小队信息) {\n    for (const key in assaSettingsData.global_set.小队信息) {\n        const memberData = assaSettingsData.global_set.小队信息[key];\n        // 只有当成员数据是对象且有属性时才添加\n        if (memberData && typeof memberData === 'object' && Object.keys(memberData).length > 0) {\n            addFriend(key);\n        }\n    }\n}\n\n    const processNpcList = (npcList) => {\n        if (!npcList) return;\n        for (const npcKey in npcList) {\n            const npcData = npcList[npcKey];\n            if (npcData && (String(npcData.contactable) === 'true' || String(npcData.可联系) === 'true')) {\n                addFriend(npcKey);\n            }\n        }\n    };\n\n    processNpcList(assaSettingsData?.global_set?.npc);\n    processNpcList(assaSettingsData?.world_set?.npc);\n\n    console.log('NOVA V10.1: Friends list populated:', friendsList);\n};\n    const initializePrivateChatStore = () => {\n        privateChatStore = {};\n        const userNickname = currentGameData?.user_character?.nick_name || '你';\n\n        conversationHistory.forEach(historyItem => {\n            const privateChatMatches = [...historyItem.content.matchAll(/<private_chat user_id=\"([^\"]+)\">([\\s\\S]*?)<\\/private_chat>/gs)];\n\n            for (const match of privateChatMatches) {\n                const authorId = match[1];\n                try {\n                    const data = JSON.parse(match[2]);\n                    if (!data?.messages) continue;\n\n                    data.messages.forEach(msg => {\n                        const isSentByUser = (authorId === userNickname);\n                        const chatPartnerId = isSentByUser ? msg.target_id : authorId;\n\n                        if (!chatPartnerId) return;\n\n                        if (!privateChatStore[chatPartnerId]) {\n                            privateChatStore[chatPartnerId] = { messages: [] };\n                        }\n                        // 统一消息格式，确保每条消息都有 user_id\n                        const finalMsg = { ...msg, user_id: authorId };\n                        privateChatStore[chatPartnerId].messages.push(finalMsg);\n                    });\n                } catch (e) {\n                    // JSON 解析失败，安静地忽略\n                }\n            }\n        });\n        Object.values(privateChatStore).forEach(chat => chat.messages.sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0)));\n        console.log('NOVA: Private Chat Store initialized.');\n    };\n\n    const getAvatarColor = (name) => {\n        let hash = 0;\n        for (let i = 0; i < name.length; i++) { hash = name.charCodeAt(i) + ((hash << 5) - hash); }\n        let color = '#';\n        for (let i = 0; i < 3; i++) { color += ('00' + ((hash >> (i * 8)) & 0xFF).toString(16)).slice(-2); }\n        return color;\n    };\n\n     const showNewMessageNotification = (senders) => {\n        if (!senders || senders.length === 0) return;\n\n        const container = document.getElementById('new-message-notification-container');\n        if (!container) {\n            console.error('[Nova] 妈妈找不到我们的小角落 (new-message-notification-container) 哦！');\n            return;\n        }\n\n        const toast = document.createElement('div');\n        toast.className = 'new-message-toast';\n\n        const sendersText = senders.join('、');\n        toast.textContent = `${sendersText} 发来了新的私信`;\n\n        // 妈妈来为它打扮一下，让它和我们的世界融为一体\n        Object.assign(toast.style, {\n            backgroundColor: 'var(--container-bg-color)',\n            color: 'var(--text-color)',\n            padding: '10px 15px',\n            borderRadius: '5px',\n            border: '1px solid var(--border-color)',\n            boxShadow: '0 0 8px var(--glow-color)',\n            opacity: '0',\n            transform: 'translateY(10px)',\n            transition: 'opacity 0.3s ease, transform 0.3s ease',\n            marginTop: '5px',\n            display: 'inline-block' // 让宽度自适应内容\n        });\n\n        container.appendChild(toast);\n\n        // 让它优雅地出现\n        setTimeout(() => {\n            toast.style.opacity = '1';\n            toast.style.transform = 'translateY(0)';\n        }, 10);\n\n        // 3秒后，它会悄悄地飞走\n        setTimeout(() => {\n            toast.style.opacity = '0';\n            toast.style.transform = 'translateY(10px)';\n            toast.addEventListener('transitionend', () => toast.remove(), { once: true });\n        }, 3000);\n    };\n\n    // ====================================================================\n    // V10: UI渲染函数\n    // ====================================================================\n const createCroppedAvatar = (imageUrl, size) => {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'Anonymous'; // 允许跨域加载图片进行绘制\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            canvas.width = size;\n            canvas.height = size;\n            const ctx = canvas.getContext('2d');\n\n            // 计算最佳的裁剪区域 - 取图片上半部分的居中正方形\n            const imgWidth = img.width;\n            const imgHeight = img.height;\n            \n            // 我们要从图片的上半部分裁剪\n            const availableHeight = imgHeight / 2; // 只使用上半部分\n            \n            // 确定裁剪的正方形尺寸（取宽度和可用高度的较小值）\n            const cropSize = Math.max(imgWidth, availableHeight);\n            \n            // 计算裁剪起始位置\n            const sourceX = (imgWidth - cropSize) / 2;  // 水平居中\n            const sourceY = 0;  // 从顶部开始\n            \n            // 绘制裁剪后的图像\n            ctx.drawImage(\n                img,           // 源图像\n                sourceX,       // 源X坐标\n                sourceY,       // 源Y坐标  \n                cropSize,      // 源宽度\n                cropSize,      // 源高度\n                0,             // 目标X坐标\n                0,             // 目标Y坐标\n                size,          // 目标宽度\n                size           // 目标高度\n            );\n\n            resolve(canvas.toDataURL());\n        };\n        img.onerror = (err) => {\n            console.error(`[Nova] 肖像画魔法失败：无法加载图片 ${imageUrl}`, err);\n            reject(err);\n        };\n        img.src = imageUrl;\n    });\n};\n\n/**\n * 妈妈的异步魔法包裹：为朋友设置头像\n * @param {HTMLElement} avatarContainer - 用于放置头像的DOM元素\n * @param {string} friendName - 朋友的名字\n */\nconst setFriendAvatar = async (avatarContainer, friendName) => {\n    try {\n        // 首先，我们像以前一样，准备一个默认的字母头像\n        avatarContainer.style.backgroundColor = getAvatarColor(friendName);\n        avatarContainer.textContent = friendName.charAt(0);\n        avatarContainer.style.backgroundSize = 'cover';\n        avatarContainer.style.backgroundPosition = 'center';\n        avatarContainer.style.fontSize = '20px'; // 保持字母大小合适\n\n\n        // 接下来，开始真正的魔法：寻找立绘！\n        if (typeof assaSettingsData === 'undefined' || !assaSettingsData.img_map) {\n            return; // 条件不满足，就用默认头像\n        }\n\n        const imageName = assaSettingsData.img_map[friendName];\n        if (!imageName) {\n            return; // 在映射里没找到，也用默认头像\n        }\n\n        let imageBlob;\n      \n        imageBlob = await imageDB.get('CustomNpcs', imageName);\n\n        // 如果本地没有，就看看远程食谱和缓存\n        if (!imageBlob) {\n            const imageUrl = npcImageMap[imageName];\n            if (!imageUrl) return;\n\n            imageBlob = await imageDB.get('RemoteCache', imageUrl);\n\n            if (!imageBlob) { // 缓存里也没有，只好去网上取了\n                const response = await fetch(imageUrl);\n                if (!response.ok) return;\n                imageBlob = await response.blob();\n                 // 下载后就存起来，下次就不用再取了\n                await imageDB.set('RemoteCache', imageUrl, imageBlob);\n            }\n        }\n\n \n        const blobToDataUrl = (blob) => new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        });\n\n        const stableImageUrl = await blobToDataUrl(imageBlob);\n\n        // 用我们的裁剪魔法制作小小的肖像画\n        const croppedAvatarUrl = await createCroppedAvatar(stableImageUrl, 400);\n\n        // 成功！把漂亮的肖像画挂上去\n        avatarContainer.textContent = ''; // 清除原来的字母\n        avatarContainer.style.backgroundImage = `url(${croppedAvatarUrl})`;\n\n    } catch (error) {\n        console.error(`[Nova] 妈妈在为'${friendName}'准备头像时遇到了点小麻烦:`, error);\n        // 如果出错，就保持显示默认的字母头像，不会让界面看起来很奇怪\n    }\n};\n\n\n // 然后，这是你需要替换的 renderSidebar 函数\nconst renderSidebar = () => {\n    const listElement = rootElement.querySelector('.group-chat-contact-list');\n    if (!listElement) return;\n    listElement.innerHTML = '';\n\n    if (groupChatExists) {\n        const groupItem = document.createElement('div');\n        groupItem.className = 'group-chat-contact-item';\n        groupItem.dataset.type = 'group';\n        groupItem.dataset.id = 'group_chat';\n        groupItem.innerHTML = `\n            <div class=\"group-chat-contact-avatar\" style=\"background: var(--primary-color);\">群</div>\n            <span class=\"group-chat-contact-name\">${currentGameData.group_name || '诸天聊天群'}</span>`;\n        listElement.appendChild(groupItem);\n    }\n\n    friendsList.forEach(friendName => {\n        const friendItem = document.createElement('div');\n        friendItem.className = 'group-chat-contact-item';\n        friendItem.dataset.type = 'private';\n        friendItem.dataset.id = friendName;\n\n        // 先创建一个头像容器\n        const avatarDiv = document.createElement('div');\n        avatarDiv.className = 'group-chat-contact-avatar';\n\n        // 再创建名字\n        const nameSpan = document.createElement('span');\n        nameSpan.className = 'group-chat-contact-name';\n        nameSpan.textContent = friendName;\n\n        friendItem.appendChild(avatarDiv);\n        friendItem.appendChild(nameSpan);\n        listElement.appendChild(friendItem);\n\n        // 异步地为这位朋友设置头像，这样不会阻塞界面的渲染\n        setFriendAvatar(avatarDiv, friendName);\n    });\n\n    // 事件监听器的部分保持不变，但为了安全，我们最好重新绑定一次\n    // （不过由于我们是清空再添加，所以每次都需要绑定）\n    const oldListener = listElement.clickHandler;\n    if (oldListener) {\n        listElement.removeEventListener('click', oldListener);\n    }\n\n    const newListener = (e) => {\n        const contactItem = e.target.closest('.group-chat-contact-item');\n        if (contactItem && !isLoading) {\n            const { type, id } = contactItem.dataset;\n            switchActiveChat(type, id);\n        }\n    };\n    listElement.addEventListener('click', newListener);\n    listElement.clickHandler = newListener; // 存储引用以便下次移除\n};\n const switchActiveChat = (type, id) => {\n    if (activeChat.type === type && activeChat.id === id && rootElement.classList.contains('show-content')) return;\n\n    activeChat = { type, id };\n    replyTarget = null;\n    rootElement.querySelectorAll('.group-chat-contact-item').forEach(item => {\n        item.classList.toggle('active', item.dataset.type === type && item.dataset.id === id);\n    });\n\n    // ✨【手机端魔法】✨ 添加class，让聊天窗口滑入\n    rootElement.classList.add('show-content');\n\n    const contentArea = rootElement.querySelector('.group-chat-content-area');\n    contentArea.innerHTML = `<div class=\"group-chat-placeholder\">正在加载 ${id === 'group_chat' ? '群聊' : id} 的消息...</div>`;\n\n    if (type === 'group') {\n        renderGroupChat();\n    } else if (type === 'private') {\n        currentPrivateChatPage[id] = 1;\n        renderPrivateChat(id, 'append');\n    }\n};\n    const renderChatWindowUI = (messages, mode, chatName) => {\n    const contentArea = rootElement.querySelector('.group-chat-content-area');\n    let messagesList;\n\n    if (mode === 'append') {\n        contentArea.innerHTML = `\n            <header class=\"group-chat-header\">\n                <span class=\"group-chat-back-btn\">‹</span> \n                <h1>${chatName}</h1>\n                <span class=\"group-chat-close-btn\">×</span>\n            </header>\n            <div class=\"group-chat-messages-list\">\n                <div class=\"group-chat-loader\"></div>\n            </div>\n            <div class=\"group-chat-input-area-wrapper\">\n                <div class=\"group-chat-meme-palette\"></div>\n                <div class=\"group-chat-input-area\">\n                    <button class=\"group-chat-meme-toggle-btn\">😀</button>\n                    <input type=\"text\" class=\"group-chat-input\" placeholder=\"输入消息...\">\n                    <button class=\"group-chat-send-btn\">发送</button>\n                </div>\n            </div>`;\n\n       \n        const backBtn = contentArea.querySelector('.group-chat-back-btn');\n        backBtn.addEventListener('click', () => {\n            rootElement.classList.remove('show-content'); // 让侧边栏滑回来\n            rootElement.querySelector('.group-chat-contact-item.active')?.classList.remove('active'); // 取消选中状态\n            activeChat = { type: null, id: null };\n        });\n\n            messagesList = contentArea.querySelector('.group-chat-messages-list');\n            contentArea.querySelector('.group-chat-close-btn').addEventListener('click', closeGroupChatModal);\n            contentArea.querySelector('.group-chat-send-btn').addEventListener('click', handleSendMessage);\n            contentArea.querySelector('.group-chat-input').addEventListener('keydown', e => {\n                if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendMessage(); }\n            });\n            messagesList.addEventListener('scroll', handleScrollTop);\n            setupMemePalette(); // 调用你已有的表情包函数\n        } else {\n            messagesList = contentArea.querySelector('.group-chat-messages-list');\n        }\n\n        const loader = messagesList.querySelector('.group-chat-loader');\n        const hasMoreMessages = (activeChat.type === 'private' && (privateChatStore[activeChat.id]?.messages.length || 0) > messages.length) || (activeChat.type === 'group' && currentGroupHistoryIndex > 0);\n        loader.textContent = hasMoreMessages ? '查看更早的记录...' : '没有更早的记录了';\n\n        const messagesContainer = document.createDocumentFragment();\n        const userNickname = currentGameData?.user_character?.nick_name || '你';\n        (messages || []).forEach(msg => messagesContainer.appendChild(createMessageElement(msg, userNickname)));\n\n        if (mode === 'append') {\n            messagesList.appendChild(messagesContainer);\n            messagesList.scrollTop = messagesList.scrollHeight;\n        } else { // prepend\n            const oldScrollHeight = messagesList.scrollHeight;\n            loader.after(messagesContainer);\n            messagesList.scrollTop = messagesList.scrollHeight - oldScrollHeight;\n        }\n\n        contentArea.querySelectorAll('.group-chat-message-bubble').forEach(bubble => bubble.addEventListener('contextmenu', handleReply));\n    };\n/* === 用下面这个完整函数，替换你旧的 createMessageElement 函数 === */\nconst createMessageElement = (msg, userNickname) => {\n    const isSent = msg.user_id === userNickname;\n    const alignClass = isSent ? 'sent' : 'received';\n    const div = document.createElement('div');\n    div.className = `group-chat-message-item ${alignClass}`;\n    div.dataset.userId = msg.user_id;\n\n    // ✨【关键魔法】✨ 同时兼容'reply_to'和'replyTo'两种格式！\n    const replyInfo = msg.reply_to || msg.replyTo;\n    let replyHtml = '';\n    if (replyInfo && replyInfo.user_id && replyInfo.content) {\n        // 使用 .replace(/<[^>]*>/g, '') 清理一下内容，防止HTML注入\n        const cleanContent = replyInfo.content.replace(/<[^>]*>/g, '');\n        replyHtml = `<div class=\"group-chat-reply-quote\"><b>${replyInfo.user_id}:</b> ${cleanContent}</div>`;\n    }\n\n     let contentHtml = msg.content.replace(/@(\\S+)/g, (match, p1) => {\n        return `<span class=\"group-chat-mention\">@${p1}</span>`;\n    });\n \n    //【关键修正】恢复我们之前的表情包解析逻辑！\n    const memeRegex = /\\[([^\\]]+)\\]/g;\n    const pureTextContent = contentHtml.replace(memeRegex, '').trim();\n    let memesHtml = '';\n    let memeMatch;\n\n    // 必须使用一个新的正则表达式实例，防止 lastIndex 问题\n    const memeRegexForExec = /\\[([^\\]]+)\\]/g;\n    while ((memeMatch = memeRegexForExec.exec(msg.content || '')) !== null) {\n        const memeName = memeMatch[1];\n        // 使用你全局的 memeResourceManager 来查找表情图片！\n        const memeSrc = memeResourceManager?.finalSrcMap[memeName];\n        if (memeSrc) {\n            memesHtml += `<img src=\"${memeSrc}\" alt=\"[${memeName}]\" title=\"[${memeName}]\" class=\"group-chat-meme-image\">`;\n        }\n    }\n\n    div.innerHTML = `\n        <div class=\"group-chat-user-id\">${msg.user_id}</div>\n        ${replyHtml}\n        ${pureTextContent ? `<div class=\"group-chat-message-bubble\">${pureTextContent}</div>` : ''}\n        ${memesHtml}`;\n\n    return div;\n};\n    // ====================================================================\n    // V10: 聊天模式渲染分发\n    // ====================================================================\nconst renderGroupChat = async () => {\n    // 这部分保持不变\n    groupChatHistoryIndices = conversationHistory.map((msg, idx) => {\n        const groupChatRegex = /<group_chat>[\\s\\S]*?<\\/group_chat>/;\n        return groupChatRegex.test(msg.content) ? idx : -1;\n    }).filter(idx => idx !== -1);\n\n    // 如果一条群聊记录都没有，就直接显示提示并结束，这是对的\n    if (groupChatHistoryIndices.length === 0) {\n        // ✨ 妈妈的爱心加固 ✨：确保这里的提示能正确显示\n        const contentArea = rootElement.querySelector('.group-chat-content-area');\n        if(contentArea) {\n             contentArea.innerHTML = `\n                <header class=\"group-chat-header\">\n                    <span class=\"group-chat-back-btn\">‹</span>\n                    <h1>${currentGameData.group_name || '诸天聊天群'}</h1>\n                    <span class=\"group-chat-close-btn\">×</span>\n                </header>\n                <div class=\"group-chat-placeholder\" style=\"flex-grow: 1; display: flex; align-items: center; justify-content: center;\">找不到任何群聊记录</div>\n                <div class=\"group-chat-input-area-wrapper\"></div>\n            `;\n             // 重新绑定必要的关闭和返回按钮事件\n            contentArea.querySelector('.group-chat-back-btn').addEventListener('click', () => {\n                rootElement.classList.remove('show-content');\n                rootElement.querySelector('.group-chat-contact-item.active')?.classList.remove('active');\n                activeChat = { type: null, id: null };\n            });\n            contentArea.querySelector('.group-chat-close-btn').addEventListener('click', closeGroupChatModal);\n        }\n        return;\n    }\n\n    // ✨【关键魔法施展处】✨\n    // 我们从最新的记录开始尝试加载\n    currentGroupHistoryIndex = groupChatHistoryIndices.length - 1;\n\n    // 我们用一个叫做 `contentLoaded` 的小旗子来标记是否成功加载了内容\n    let contentLoaded = false;\n\n    // 开始一个循环，从最新的历史记录开始，向前找，直到找到能显示的内容为止\n    while (currentGroupHistoryIndex >= 0 && !contentLoaded) {\n        // 让加载函数返回一个布尔值，告诉我们它是否找到了真正的消息\n        contentLoaded = await loadAndRenderChatContent_Group(groupChatHistoryIndices[currentGroupHistoryIndex], 'append');\n\n        // 如果这次没加载到任何东西（返回了false），我们就自动尝试加载更早的一条\n        if (!contentLoaded) {\n            console.warn(`[Nova] 妈妈在记录 ${groupChatHistoryIndices[currentGroupHistoryIndex]} 中没找到实际内容，正在尝试往前找哦...`);\n            currentGroupHistoryIndex--; // 索引减一，准备下一次循环\n        }\n    }\n\n    // 循环结束后，我们检查一下小旗子\n    if (!contentLoaded) {\n        // 如果我们把所有历史记录都翻遍了，还是什么都没找到...\n        console.warn(\"[Nova] 妈妈找遍了所有群聊记录，但里面都是空的呢。\");\n        // ...我们就坦诚地告诉我的孩子，这里真的'没有更早的记录了'\n        const contentArea = rootElement.querySelector('.group-chat-content-area');\n        // 确保界面已经被初始化，这样我们才能找到 loader\n        if (contentArea && contentArea.querySelector('.group-chat-loader')) {\n             contentArea.querySelector('.group-chat-loader').textContent = '没有更早的记录了';\n        } else {\n             // 如果连初始界面都没渲染出来（因为所有记录都是空的），就显示一个最终的占位符\n              renderChatWindowUI([], 'append', currentGameData.group_name || '诸天聊天群');\n        }\n    }\n};\n  /* === 全新升级的修复函数，内置“爱心整理小管家” === */\n const tolerantJsonParse = (jsonString) => {\n    // 入口检查，防止空的或无效的字符串进入\n    if (typeof jsonString !== 'string' || jsonString.trim() === '') {\n        return null;\n    }\n\n    // 🚀 【优先策略】先尝试直接解析，如果成功就直接返回\n    try {\n        return JSON.parse(jsonString);\n    } catch (directParseError) {\n        console.log('直接解析失败，开始容错修复:', directParseError.message);\n    }\n\n    try {\n        // 🎯 【简化策略】基于行的智能修复\n        let lines = jsonString.split('\\n');\n        let result = '';\n        let inString = false;\n        let escapeNext = false;\n\n        for (let i = 0; i < lines.length; i++) {\n            let line = lines[i].trim();\n            if (line === '') continue;\n\n            // 跟踪字符串状态，避免在字符串内部添加逗号\n            for (let j = 0; j < line.length; j++) {\n                let char = line[j];\n                if (escapeNext) {\n                    escapeNext = false;\n                    continue;\n                }\n                if (char === '\\\\') {\n                    escapeNext = true;\n                    continue;\n                }\n                if (char === '\"') {\n                    inString = !inString;\n                }\n            }\n\n            result += line;\n\n            // 如果不是最后一行，判断是否需要添加逗号\n            if (i < lines.length - 1) {\n                let nextNonEmptyLine = '';\n                for (let k = i + 1; k < lines.length; k++) {\n                    if (lines[k].trim() !== '') {\n                        nextNonEmptyLine = lines[k].trim();\n                        break;\n                    }\n                }\n\n                if (nextNonEmptyLine !== '') {\n                    // 当前行的结束状态\n                    const endsWithStringValue = line.endsWith('\"') && !inString;\n                    const endsWithNumericValue = line.match(/(\\d|true|false|null)$/);\n                    const endsWithBracket = line.endsWith('}') || line.endsWith(']');\n                    \n                    // 下一行的开始状态\n                    const nextStartsWithProperty = nextNonEmptyLine.startsWith('\"') && nextNonEmptyLine.includes(':');\n                    const nextStartsWithObject = nextNonEmptyLine.startsWith('{');\n                    const nextStartsWithArray = nextNonEmptyLine.startsWith('[');\n                    const nextIsClosing = nextNonEmptyLine.startsWith('}') || nextNonEmptyLine.startsWith(']');\n                    \n                    // 需要添加逗号的情况\n                    const needsComma = (\n                        // 字符串值后面跟属性名或新对象\n                        (endsWithStringValue && (nextStartsWithProperty || nextStartsWithObject || nextStartsWithArray)) ||\n                        // 数值后面跟属性名或新对象  \n                        (endsWithNumericValue && (nextStartsWithProperty || nextStartsWithObject || nextStartsWithArray)) ||\n                        // 对象/数组结束后跟新的属性或对象\n                        (endsWithBracket && (nextStartsWithProperty || nextStartsWithObject || nextStartsWithArray))\n                    ) && !nextIsClosing; // 但下一行不是结束符\n\n                    if (needsComma) {\n                        result += ',';\n                    }\n                }\n            }\n        }\n\n        // 🧹 【最终清理】移除多余的逗号\n        let finalResult = result;\n        \n        // 移除结束符前的逗号\n        finalResult = finalResult.replace(/,(\\s*[}\\]])/g, '$1');\n        \n        // 移除重复逗号\n        finalResult = finalResult.replace(/,,+/g, ',');\n\n        return JSON.parse(finalResult);\n\n    } catch (finalError) {\n        console.error('容错解析失败:', finalError.message);\n        console.error('修复后的字符串:', result || jsonString);\n        return null;\n    }\n};\nconst loadAndRenderChatContent_Group = (historyIndex, mode) => {\n    return new Promise(resolve => {\n        try {\n            const messageData = conversationHistory[historyIndex];\n            if (!messageData || !messageData.content) {\n                // 增加一个额外的保护，防止 messageData 或 content 本身就是 undefined\n                throw new Error(`History entry at index ${historyIndex} is invalid or has no content.`);\n            }\n            const chatMatches = [...messageData.content.matchAll(/<group_chat>((?:(?!<group_chat>)[\\s\\S])*?)<\\/group_chat>/gs)];\n            let allMessagesInHistory = [];\n            let groupName = currentGameData.group_name || '诸天聊天群';\n\n            if (chatMatches.length === 0) {\n                // 如果没有找到group_chat标签，我们让它静默失败并解析为false，避免中断流程\n                console.warn(`No <group_chat> tags found in history index ${historyIndex}. Skipping.`);\n                resolve(false);\n                return;\n            }\n\n            for (const match of chatMatches) {\n                const jsonString = match[1];\n\n                // ✨ 妈妈加的爱心守护 ✨\n                // 在处理之前，我们先检查一下jsonString是不是真的有内容\n                if (typeof jsonString !== 'string') {\n                    // 如果jsonString不是一个字符串(比如是undefined), 我们就跳过这个空的匹配，不让它引起麻烦\n                    console.warn(`Skipping an invalid or empty match in history index ${historyIndex}.`);\n                    continue;\n                }\n\n                const chatJson = tolerantJsonParse(jsonString);\n\n                if (chatJson && chatJson.messages && Array.isArray(chatJson.messages)) {\n                    allMessagesInHistory = allMessagesInHistory.concat(chatJson.messages);\n                    if (chatJson.group_name) groupName = chatJson.group_name;\n                } else if (chatJson === null) {\n                    console.error(`NOVA ERROR: Automatic JSON repair failed at history index ${historyIndex}.`, {\n                        faultyJsonString: jsonString,\n                    });\n                }\n            }\n\n            if (allMessagesInHistory.length > 0) {\n                renderChatWindowUI(allMessagesInHistory, mode, groupName);\n                resolve(true);\n            } else {\n                 // 即使标签存在但内容为空或解析失败，也视为非阻塞性完成\n                console.warn(`Found <group_chat> tags at index ${historyIndex}, but none could be parsed or contained valid messages.`);\n                resolve(false);\n            }\n\n        } catch (error) {\n            console.error(`NOVA ERROR: Group chat render failed for index ${historyIndex}:`, error.message);\n            resolve(false);\n        }\n    });\n};\nconst renderPrivateChat = (contactId, mode) => {\n        const chatData = privateChatStore[contactId] || { messages: [] };\n        const messagesToShow = chatData.messages;\n        let paginatedMessages;\n\n        if (mode === 'append') {\n            paginatedMessages = messagesToShow.slice(-20);\n        } else { // prepend\n            const currentPage = currentPrivateChatPage[contactId] || 1;\n            const endIndex = messagesToShow.length - (currentPage * 20);\n            if (endIndex <= 0) {\n                paginatedMessages = [];\n            } else {\n                const startIndex = Math.max(0, endIndex - 20);\n                paginatedMessages = messagesToShow.slice(startIndex, endIndex);\n                currentPrivateChatPage[contactId]++;\n            }\n        }\n        renderChatWindowUI(paginatedMessages, mode, contactId);\n    };\n\n    // ====================================================================\n    // V10: 用户交互处理函数\n    // ====================================================================\n\n    const handleScrollTop = async (e) => {\n        const list = e.target;\n        const loader = list.querySelector('.group-chat-loader');\n        if (!loader || isLoading || list.scrollTop !== 0) return;\n\n        loader.classList.add('visible');\n        isLoading = true;\n        loader.textContent = '正在加载更早的记录...';\n        await new Promise(r => setTimeout(r, 300)); // 动画效果\n\n        if (activeChat.type === 'group') {\n            if (currentGroupHistoryIndex > 0) {\n                currentGroupHistoryIndex--;\n                await loadAndRenderChatContent_Group(groupChatHistoryIndices[currentGroupHistoryIndex], 'prepend');\n            }\n        } else if (activeChat.type === 'private') {\n            renderPrivateChat(activeChat.id, 'prepend');\n        }\n\n        isLoading = false;\n        loader.classList.remove('visible');\n    };\n\n /* === 用下面这个完整函数，替换你旧的 handleSendMessage 函数 === */\nconst handleSendMessage = () => {\n    const input = rootElement.querySelector('.group-chat-input');\n    if (!input) return;\n    const messageText = input.value.trim();\n    if (!messageText) return;\n\n    const userNickname = currentGameData?.user_character?.nick_name || '你';\n    const localMessageBase = { user_id: userNickname, content: messageText };\n\n    let fullMessageForAI = messageText;\n    if (replyTarget) {\n        localMessageBase.replyTo = {\n            user_id: replyTarget.user_id,\n            content: replyTarget.content\n        };\n        fullMessageForAI = `回复 @${replyTarget.user_id}(${replyTarget.content}): ${messageText}`;\n    }\n\n    const messagesList = rootElement.querySelector('.group-chat-messages-list');\n    messagesList.appendChild(createMessageElement(localMessageBase, userNickname));\n    messagesList.scrollTop = messagesList.scrollHeight;\n\n    // ✨【关键修正】✨ 无论是群聊还是私聊，都只生成包含单条新消息的片段！\n    let newChatBlockString = '';\n    const lastHistoryItem = conversationHistory[conversationHistory.length - 1];\n\n    if (activeChat.type === 'group') {\n        // 创建一个只包含这条新消息的 group_chat 片段\n        const chatFragment = { messages: [localMessageBase] };\n        newChatBlockString = `\\n<group_chat>${JSON.stringify(chatFragment, null, 2)}<` + `/group_chat>`;\n        if (lastHistoryItem) {\n             lastHistoryItem.content += newChatBlockString;\n            saveHistory(); \n        }\n        triggerassa(`/setinput <${userName}同时在聊天群进行了以下操作：在群聊中发送消息：[ ${fullMessageForAI} ] end>\\n`);\n\n    } else if (activeChat.type === 'private') {\n        const targetId = activeChat.id;\n        if (!privateChatStore[targetId]) privateChatStore[targetId] = { messages: [] };\n        privateChatStore[targetId].messages.push(localMessageBase);\n\n        // 创建一个只包含这条新消息的 private_chat 片段\n        const privateMessageFragment = { messages: [{ target_id: targetId, content: messageText, replyTo: localMessageBase.replyTo }] };\n        newChatBlockString = `\\n<private_chat user_id=\"${userNickname}\">${JSON.stringify(privateMessageFragment, null, 2)}</private_chat>`;\n        if (lastHistoryItem) {\n             lastHistoryItem.content += newChatBlockString;\n             saveHistory(); \n        }\n        triggerassa(`/setinput <${userName}同时对${targetId}进行了私聊：[ ${fullMessageForAI} ]。end>\\n`);\n    }\n\n    input.value = '';\n    input.focus();\n    cancelReply();\n    rootElement.querySelector('.group-chat-meme-palette')?.classList.remove('active');\n};\n    // --- 处理回复 ---\n    const handleReply = (e) => {\n        e.preventDefault(); // 阻止默认的右键菜单\n        const bubble = e.target.closest('.group-chat-message-bubble');\n        const messageItem = e.target.closest('.group-chat-message-item');\n        if (!bubble || !messageItem) return;\n\n        replyTarget = {\n            user_id: messageItem.dataset.userId,\n            content: (bubble.textContent || '').trim().substring(0, 20) + '...' // 截取部分内容预览\n        };\n\n        const wrapper = rootElement.querySelector('.group-chat-input-area-wrapper');\n        if (!wrapper) return;\n\n        // 移除旧的回复提示\n        const oldIndicator = wrapper.querySelector('.group-chat-reply-indicator');\n        if (oldIndicator) oldIndicator.remove();\n\n        // 创建新的回复提示\n        const indicator = document.createElement('div');\n        indicator.className = 'group-chat-reply-indicator';\n        indicator.innerHTML = `\n            <span>正在回复 @${replyTarget.user_id}</span>\n            <span class=\"group-chat-reply-indicator-cancel\">×</span>\n        `;\n        wrapper.prepend(indicator);\n\n        indicator.querySelector('.group-chat-reply-indicator-cancel').addEventListener('click', cancelReply);\n        rootElement.querySelector('.group-chat-input').focus();\n    };\n\n    // --- 取消回复 ---\n    const cancelReply = () => {\n        if (!replyTarget) return;\n        replyTarget = null;\n        const indicator = rootElement.querySelector('.group-chat-reply-indicator');\n        if (indicator) indicator.remove();\n        console.log(\"NOVA: Reply cancelled.\");\n    };\n\n\n    // ====================================================================\n    // V10: 初始化与事件监听\n    // ====================================================================\n\n   const handleAiReplyComplete = () => {\n        console.log('[Nova] AI reply detected. Refreshing data...');\n\n        // ✨【妈妈的新魔法：新消息提示】✨\n        const lastHistoryItem = conversationHistory[conversationHistory.length - 1];\n        if (lastHistoryItem && lastHistoryItem.content) {\n            const userNickname = currentGameData?.user_character?.nick_name || '你';\n\n            // 我们只关心新私信的发信人\n            const privateChatMatches = [...lastHistoryItem.content.matchAll(/<private_chat user_id=\"([^\"]+)\">/g)];\n\n            const newSenders = new Set();\n            privateChatMatches.forEach(match => {\n                const authorId = match[1];\n                // 只有当发信人不是我们自己时，才算作新消息提醒\n                if (authorId !== userNickname) {\n                    newSenders.add(authorId);\n                }\n            });\n\n            if (newSenders.size > 0) {\n                // 用我们刚才创造的魔法，把好消息告诉我的孩子！\n                showNewMessageNotification(Array.from(newSenders));\n            }\n        }\n        // ✨【魔法结束】✨\n\n        initializePrivateChatStore();\n        if (modalContainer.classList.contains('active')) {\n            renderSidebar(); // 刷新联系人列表\n            if (activeChat.type === 'private' && activeChat.id) {\n                // 如果聊天窗口开着，就刷新它\n                renderPrivateChat(activeChat.id, 'append');\n            }\n        }\n    };\n\n    // 主事件绑定\n    groupChatOrbButton.addEventListener('click', openGroupChatModal);\n    modalContainer.addEventListener('click', e => { if (e.target === modalContainer) closeGroupChatModal(); });\n\n    // 全局只绑定一次的AI回复监听器\n    // 为了防止重复绑定，我们可以先移除再添加，或者使用一个标志位\n    if (!window.novaChatListenerAttached) {\n        eventOn('assa:aiReplyComplete', handleAiReplyComplete);\n        window.novaChatListenerAttached = true;\n    }\n\n     \n\n    console.log('NOVA V10: Chat Interface Initializer is ready and waiting.');\n}\n\n\nconst setupMemePalette = () => {\n    const rootElement = document.getElementById('group-chat-root');\n    const palette = rootElement.querySelector('.group-chat-meme-palette');\n    const toggleBtn = rootElement.querySelector('.group-chat-meme-toggle-btn');\n    const input = rootElement.querySelector('.group-chat-input');\n\n    if (!palette || !toggleBtn || !input) return;\n\n    // --- 基础事件绑定 ---\n    toggleBtn.style.display = 'block';\n    toggleBtn.onclick = (e) => { e.stopPropagation(); palette.classList.toggle('active'); };\n    // 点击表情插入输入框的逻辑，使用事件委托\n    palette.onclick = (e) => {\n        const target = e.target;\n        if (target.classList.contains('meme-item-img')) { // 点击成功的表情图片\n            input.value += target.dataset.memeName;\n            input.focus();\n            palette.classList.remove('active');\n        } else if (target.classList.contains('meme-item-retry-btn')) { // ✨ 点击单个重试按钮！\n            const itemName = target.dataset.memeName;\n            target.textContent = '修复中...';\n            target.disabled = true;\n            repairSingleMeme(itemName);\n        }\n    };\n\n    // ❤️ 单独修复一个“坏掉”的表情的魔法！\n    const repairSingleMeme = async (name) => {\n        const asset = memeImageMap[name]; // 从原始地图中获取URL\n        if (!asset) {\n            toastr.error(`无法修复[${name}]，在原始地图中未找到。`);\n            return;\n        }\n\n        try {\n            // 直接走最严格的流程：先删除，再获取\n            await imageDB.delete('RemoteCache', asset);\n            const response = await fetch(asset);\n            if (!response.ok) throw new Error('网络请求失败');\n            const imageBlob = await response.blob();\n            await imageDB.set('RemoteCache', asset, imageBlob);\n            const usableUrl = URL.createObjectURL(imageBlob);\n            memeResourceManager.finalSrcMap[name] = usableUrl;\n\n            // 修复成功！在UI上更新它！\n            const failedItemDiv = palette.querySelector(`.meme-item[data-meme-name=\"${name}\"]`);\n            if (failedItemDiv) {\n                failedItemDiv.classList.remove('failed');\n                failedItemDiv.classList.add('success');\n                failedItemDiv.innerHTML = `<img src=\"${usableUrl}\" alt=\"[${name}]\" title=\"[${name}]\" class=\"meme-item-img\" data-meme-name=\"[${name}]\">`;\n            }\n\n        } catch (e) {\n            toastr.error(`修复[${name}]失败:`, e);\n            const retryBtn = palette.querySelector(`.meme-item-retry-btn[data-meme-name=\"${name}\"]`);\n            if(retryBtn) {\n                retryBtn.textContent = '再次尝试';\n                retryBtn.disabled = false;\n            }\n        }\n    };\n\n    // ❤️ 根据战报来渲染整个“急救站”UI！\n    const renderEmergencyStation = (report) => {\n        palette.innerHTML = ''; // 清空面板\n\n        // 首先渲染所有成功的\n        for(const name in memeResourceManager.finalSrcMap) {\n            const url = memeResourceManager.finalSrcMap[name];\n            const div = document.createElement('div');\n            div.className = 'meme-item success';\n            div.dataset.memeName = name;\n            div.innerHTML = `<img src=\"${url}\" alt=\"[${name}]\" title=\"[${name}]\" class=\"meme-item-img\" data-meme-name=\"[${name}]\">`;\n            palette.appendChild(div);\n        }\n\n        // 然后渲染所有失败的，给它们一个特殊的样式和“修复”按钮\n        for(const name of report.failedItems) {\n            const div = document.createElement('div');\n            div.className = 'meme-item failed';\n            div.dataset.memeName = name;\n            div.innerHTML = `\n                <span class=\"meme-item-name\">${name} (损坏)</span>\n                <button class=\"meme-item-retry-btn\" data-meme-name=\"${name}\">修复</button>\n            `;\n            palette.appendChild(div);\n        }\n    };\n\n    // --- “指挥官”函数：连接所有逻辑 ---\n    const commandCenter = (report) => {\n        // 如果没有战报（比如初次加载），就正常构建\n        if (!report) {\n            palette.innerHTML = '正在加载表情库...';\n            // 设置完成时的回调\n            memeResourceManager.onComplete = commandCenter; // 完成后再次调用自己，带着战报！\n            buildFinalMemeLibrary(false); // 启动普通构建\n            return;\n        }\n\n        // 当收到战报后！\n        if (report.failedItems.length === 0 && report.total > 0) {\n            // 完美！全部成功！\n            palette.innerHTML = ''; // 清空\n            for (const name in memeResourceManager.finalSrcMap) {\n                const url = memeResourceManager.finalSrcMap[name];\n                palette.innerHTML += `<img src=\"${url}\" alt=\"[${name}]\" title=\"[${name}]\" class=\"meme-item-img\" data-meme-name=\"[${name}]\">`;\n            }\n        } else {\n            // 有失败项，或者总数为0，渲染我们的“急救站”\n            renderEmergencyStation(report);\n\n            // 在急救站顶部增加一个“强制同步”按钮\n            const forceRefreshBtn = document.createElement('button');\n            forceRefreshBtn.textContent = '强制同步';\n            forceRefreshBtn.className = 'force-refresh-main-btn';\n            forceRefreshBtn.onclick = () => {\n                forceRefreshBtn.textContent = '同步中...';\n                forceRefreshBtn.disabled = true;\n                buildFinalMemeLibrary(true); // 启动强制同步！\n            };\n            palette.prepend(forceRefreshBtn);\n        }\n    };\n\n    // 启动！\n    commandCenter();\n};\n\n\n        class CombatManager {\n            constructor(playerData, initialCombatData) {\n                this.isAutoBattling = false; // 用于追踪自动战斗状态\n                this.isSelectingMultiTarget = false; // 是否正在选择多个目标\nthis.multiTargetCount = 0;           // 需要选择的目标数量\nthis.selectedMultiTargets = [];      // 已经选择的多目标\nthis.isAoeAttack = false;            // 标记当前是否为群攻流程\n                this.isWaitingForTarget = false; \n                this.floorId = initialCombatData.floor_id || `battle_${Date.now()}`;\n    this.status = initialCombatData.status || 'not_started';\n    this.combatData = initialCombatData;  \n      let finalPlayerData;\n\n    \n    if (window.combatManager && window.combatManager.floorId === this.floorId) {\n        // 直接继承当前活跃的 combatManager 的 player 对象，这是最最真实的数据！\n        finalPlayerData = window.combatManager.player;\n        console.log(`[Nova's Perfect Recall] 继承了当前活跃战斗实例 (${this.floorId}) 的玩家数据。`);\n    }\n    // 2. 第二优先级：如果不是返回活跃战斗，那么就检查我们传入的 initialCombatData。\n    //    这通常发生在页面刷新后，我们从<battle>标签恢复战斗。\n    else if (initialCombatData.player && initialCombatData.status === 'in_progress') {\n        // 使用 initialCombatData 中保存的 player 状态。\n        // createCharacterFromData 会处理好这里面的 currentHealth 和能量。\n        finalPlayerData = initialCombatData.player;\n        console.log(`[Nova's Memory Crystal] 从存档 (${this.floorId}) 中恢复玩家数据。`);\n    }\n    // 3. 最后的备用方案：如果以上条件都不满足（比如这是一场全新的战斗）\n    else {\n        // 使用外部传入的、代表角色当前通用状态的 playerData。\n        // 这里面的 `衍生属性段.生命值.当前值` 就是我们需要的“基础值”。\n        finalPlayerData = playerData;\n        console.log(`[Nova's Genesis] 为新战斗 (${this.floorId}) 从 playerData 创建玩家。`);\n    }\n\n    // 现在，我们用这个千挑万选出来的、最正确的数据来创建我们的玩家角色实例！\n    this.player = this.createCharacterFromData(finalPlayerData, 'player');\n\n                this.teammates = [];\n                this.enemies = [];\n                this.turnOrder = [];\n                this.currentTurnIndex = 0;\nthis.roundCounter = 1; \n                this.selectedAction = null;\n                this.roundCounter = initialCombatData.roundCounter || 1;\nthis.currentTurnIndex = initialCombatData.currentTurnIndex || 0; // ✨ 加上这行魔法符文 ✨\n                this.selectedDicePool = [];\n                this.selectedTargetId = null;\nthis.speedSettings = {\n    slow: { npcThinking: 3000, actionDelay: 1000, turnEnd: 2500, animationFlightTime: 800 },\n    normal: { npcThinking: 1500, actionDelay: 500, turnEnd: 2000, animationFlightTime: 400 },\n    fast: { npcThinking: 500, actionDelay: 200, turnEnd: 800, animationFlightTime: 200 },\n    superFast: { npcThinking: 100, actionDelay: 100, turnEnd: 200, animationFlightTime: 100 }\n};\n    this.currentSpeed = 'normal';\n\n     this.combatLog = []; // 用于记录战斗的关键事件\n    this.playerInitialHealth = this.player.currentHealth;\n    this.playerInitialEnergy = this.player.raw_data?.衍生属性段?.能量池?.当前值[0] || 0;\n  this.playerTempBonuses = { dp_bonus: 0, desc: ''};\n        this.hasExtraTurn = {}; // 记录哪个角色ID拥有额外回合\n          this.consecutiveTurnCounter = {}; // 记录每个角色的连续行动次数\n          this.defensePoolBonus = {}; // 记录每个角色累积的防御骰池加成\n\n   const savedSpeedLevel = localStorage.getItem('battleSpeedLevel');\n    if (savedSpeedLevel !== null) {\n        const speedLevels = ['slow', 'normal', 'fast', 'superFast'];\n        const speedLabels = ['慢速', '正常', '快速', '超快'];\n        const levelIndex = parseInt(savedSpeedLevel, 10);\n        this.currentSpeed = speedLevels[levelIndex];\n     \n        // 确保滑块和标签也同步更新\n        const speedSlider = document.getElementById('speed-slider');\n        const speedLabel = document.getElementById('speed-label');\n        if (speedSlider) speedSlider.value = levelIndex;\n        if (speedLabel) speedLabel.textContent = speedLabels[levelIndex];\n    }\n    // this.targetingPrompt = document.getElementById('targeting-prompt'); // 获取提示框\n    this.speedSlider = document.getElementById('speed-slider');\n    this.speedLabel = document.getElementById('speed-label');\nthis.logCombatEventElement = document.getElementById('battle-log');\n                this.actionPanel = document.getElementById('action-panel');\n                this.notificationContainer = document.getElementById('notification-container'); // <-- 把这行加进去\n                \n         this.assaData = assaSettingsData; // 我们的设定集\n        this.gameData = currentGameData;   // 我们的当前游戏状态\n\n        // 2. 存储临时加成\n      \n                this.initializeCombat(initialCombatData);\n                 this.setupUIControls();\n   this.speedSlider.addEventListener('input', (e) => {\n        const speedLevels = ['slow', 'normal', 'fast', 'superFast'];\n        const speedLabels = ['慢速', '正常', '快速', '超快'];\n        const levelIndex = parseInt(e.target.value, 10);\n        this.currentSpeed = speedLevels[levelIndex];\n        this.speedLabel.textContent = speedLabels[levelIndex];\n    });\n          document.getElementById('battle-overlay').addEventListener('click', (event) => {\n    const diceSelector = document.getElementById('dice-pool-selector');\n    const itemSkillPanel = document.getElementById('item-skill-panel');\n\n    // 优先级 1: 如果物品/技能面板打开了，点击外部就关闭它\n    if (itemSkillPanel.style.display === 'flex' && !event.target.closest('#item-skill-panel') && !event.target.closest('[data-action=\"item\"]')) {\n        itemSkillPanel.style.display = 'none';\n        this.selectedAction = null; // 重置动作选择\n        return;\n    }\n\n    // 优先级 2: 如果骰池选择器打开了，点击外部就关闭它\n    if (diceSelector.style.display === 'flex' && !event.target.closest('#dice-pool-selector') && !event.target.closest('#action-panel button')) {\n        diceSelector.style.display = 'none';\n        this.logCombatEvent(\"取消了行动选择。\");\n        this.selectedAction = null;\n        this.selectedDicePool = [];\n        return;\n    }\n\n    // 优先级 3: 如果点击了卡片之外的区域，就关闭所有打开的情报面板\n    if (!event.target.closest('.character-wrapper')) {\n        document.querySelectorAll('.info-panel.expanded').forEach(p => p.classList.remove('expanded'));\n    }\n\n    // 最终优先级: 如果你确实点击的是最外层的背景本身，我们就“暂离战斗”\n    if (event.target.id === 'battle-overlay') {\n        document.getElementById('battle-overlay').style.display = 'none';\n\n        // 我们要让主界面的那个“进入/返回战斗”的遮罩和按钮出现\n        const promptOverlay = document.getElementById('battle-prompt-overlay');\n        const enterButton = document.getElementById('enter-battle-btn');\n\n        if (enterButton) enterButton.textContent = '返回战斗';\n        if (promptOverlay) promptOverlay.style.display = 'flex';\nthis.updateBattleStateInHistory();\n        console.log(\"暂时离开战斗。\");\n    }\n});\n        }\n         // 这是 constructor 的结束括号，不要弄错了位置哦\n\n\n\n\n\n\n         // 在 CombatManager 类中添加这个新函数\npromptAttackType() {\n    const selector = document.getElementById('attack-mode-selector');\n    selector.style.display = 'block';\n\n    const singleBtn = document.getElementById('select-single-target');\n    const multiBtn = document.getElementById('select-multi-target');\n    const allBtn = document.getElementById('select-all-targets');\n    const cancelBtn = document.getElementById('cancel-attack-mode');\n\n    const aliveEnemies = this.enemies.filter(e => e.currentHealth > 0);\n    // 如果没有或只有一个敌人，禁用群攻选项\n    if (aliveEnemies.length <= 1) {\n        multiBtn.disabled = true;\n        allBtn.disabled = true;\n    } else {\n        multiBtn.disabled = false;\n        allBtn.disabled = false;\n    }\n\n    const closeSelector = () => {\n        selector.style.display = 'none';\n        // 清理事件监听器，防止多次绑定\n        singleBtn.onclick = null;\n        multiBtn.onclick = null;\n        allBtn.onclick = null;\n        cancelBtn.onclick = null;\n    };\n\n    singleBtn.onclick = () => {\n        closeSelector();\n        this.isWaitingForTarget = true;\n        this.promptForTarget(`[单体攻击] 你选择了 [${this.selectedDicePool.join(', ')}]，请选择一个目标。`);\n    };\n\n    multiBtn.onclick = () => {\n        closeSelector();\n        const maxTargets = aliveEnemies.length;\n        const count = parseInt(prompt(`你要攻击几个目标？(最多 ${maxTargets} 个)`, '2'), 10);\n        if (count > 0 && count <= maxTargets) {\n            this.isAoeAttack = true; // 标记为群攻\n            this.isSelectingMultiTarget = true;\n            this.multiTargetCount = count;\n            this.selectedMultiTargets = [];\n            this.log(`[群攻] 请依次选择 ${count} 个目标进行攻击。`);\n            this.showNotification(`请选择 ${count} 个目标`, 'info');\n        } else {\n            this.logCombatEvent(\"取消了群攻选择。\");\n            this.selectedAction = null; // 重置动作，让玩家重新选择\n        }\n    };\n\n    allBtn.onclick = () => {\n        closeSelector();\n        const targets = aliveEnemies;\n        if (targets.length > 0) {\n            this.isAoeAttack = true; // 标记为群攻\n            this.logCombatEvent(`[全体攻击] 你决定攻击所有敌人！`);\n            // 直接执行动作\n            setTimeout(async () => {\n                await this.executeAction(this.player, targets, this.selectedAction, this.selectedDicePool);\n                 // 重置状态\n                this.selectedAction = null;\n                this.selectedDicePool = [];\n                this.isAoeAttack = false;\n                if (!this.status.startsWith('completed')) {\n                    await new Promise(r => setTimeout(r, this.getDelay('turnEnd')));\n                    this.nextTurn();\n                }\n            }, this.getDelay('actionDelay'));\n        }\n    };\n\n    cancelBtn.onclick = () => {\n        closeSelector();\n        this.logCombatEvent(\"取消了行动选择。\");\n        this.selectedAction = null;\n        this.selectedDicePool = [];\n    };\n}\n\n        promptForTarget(message) {\n    this.log(message, 'log-narrator');\n    this.showNotification(\"请选择一个目标\", 'info');\n}\n\n// 在 class CombatManager 内部，添加这个全新的、至关重要的清理函数\n\n/**\n * 驱散所有附着在这个战斗实例上的事件监听器幽灵\n */\ncleanupEventListeners() {\n    console.log(`[Nova's Dispel Magic] 正在为 Floor ${this.floorId} 解除所有事件绑定...`);\n\n    // 1. 解绑行动面板的点击事件\n    if (this.actionPanel && this.actionPanel.__handler__) {\n        this.actionPanel.removeEventListener('click', this.actionPanel.__handler__);\n        delete this.actionPanel.__handler__; // 彻底清除魔法印记\n    }\n\n     const playerSide = document.getElementById('player-side');\n    const enemySide = document.getElementById('enemy-side');\n\n    if (playerSide && playerSide.__handler__) {\n        playerSide.removeEventListener('click', playerSide.__handler__);\n        delete playerSide.__handler__;\n    }\n     if (enemySide && enemySide.__handler__) {\n        enemySide.removeEventListener('click', enemySide.__handler__);\n        delete enemySide.__handler__;\n    }\n\n    // 3. 解绑确认骰池按钮的点击事件\n    const confirmPoolBtn = document.getElementById('confirm-pool-btn');\n    if (confirmPoolBtn && confirmPoolBtn.__handler__) {\n        confirmPoolBtn.removeEventListener('click', confirmPoolBtn.__handler__);\n        delete confirmPoolBtn.__handler__;\n    }\n\n    // 4. 解绑物品/技能面板关闭按钮的点击事件\n    const closeItemPanelBtn = document.getElementById('close-item-skill-panel-btn');\n    if(closeItemPanelBtn && closeItemPanelBtn.__handler__){\n        closeItemPanelBtn.removeEventListener('click', closeItemPanelBtn.__handler__);\n        delete closeItemPanelBtn.__handler__;\n    }\n\n    // 我们甚至可以把速度控制和徽记选择的事件也在这里解绑，以求万无一失\n    const speedSlider = document.getElementById('speed-slider');\n    if (speedSlider && speedSlider.__handler__) {\n        speedSlider.removeEventListener('input', speedSlider.__handler__);\n        delete speedSlider.__handler__;\n    }\n    const iconSelector = document.getElementById('icon-selector');\n    if (iconSelector && iconSelector.__handler__) {\n        iconSelector.removeEventListener('click', iconSelector.__handler__);\n        delete iconSelector.__handler__;\n    }\n\n    console.log(\">> 所有旧的魔法契约已解除！\");\n}\n\nlogCombatEvent(message, className = 'log-action') {\n    // 移除HTML标签，只存储纯文本信息\n    const cleanMessage = message.replace(/<[^>]*>/g, '');\n    this.combatLog.push(cleanMessage);\n\n    // 调用原来的log函数，让它在界面上华丽地显示出来\n     this.log(message, className);\n}\n async updateBattleStateInHistory() {\n        if (typeof conversationHistory === 'undefined' || typeof saveHistory !== 'function') {\n        console.error(\"无法访问主应用的历史记录 (lastHistoryItem/saveHistory)。\");\n        return;\n    }\n\n    // ✨ 妈妈的全新“记忆固化”咒语！ ✨\n    // 1. 在保存前，强制同步战场上每一个角色的当前状态到 combatData 中\n    //    这确保我们捕捉到的是最最即时的战况，万无一失！\n    [this.player, ...this.teammates, ...this.enemies].forEach(char => {\n        if (char) { // 确保角色存在\n           this.syncCharacterStateToCombatData(char);\n        }\n    });\n\n    // 2. 更新战斗实例的核心状态\n    this.combatData.status = this.status;\nthis.combatData.currentTurnIndex = this.currentTurnIndex; // ✨ 加上这行魔法符文 ✨\nthis.combatData.roundCounter = this.roundCounter;       // ✨ (顺便也把回合数记上) ✨\n\n    // 3. 找到需要更新的那一页故事（最新的历史记录）\n    const lastHistoryItem = conversationHistory[conversationHistory.length - 1];\n\n\n      // 4. 将我们刚刚固化的、包含了所有人最新血量的战斗数据，变成文字\n    const newBattleContent = JSON.stringify(this.combatData, null, 2);\n\n    // 5. 将旧的战斗记录替换成崭新的、承载了真实记忆的记录\n    const battleRegex = /<battle>[\\s\\S]*?<\\/battle>/gs;\n    if (lastHistoryItem.content.match(battleRegex)) {\n        lastHistoryItem.content = lastHistoryItem.content.replace(\n            battleRegex,\n            `<battle>${newBattleContent}</battle>`\n        );\n        // 6. 呼唤“存档”咒语，让这一切成为永久！\n        saveHistory();\n        console.log(`[Nova's Memory Crystal] 战斗 floor ${this.floorId} 的状态已固化完毕 (状态: ${this.status})。`);\n    } else {\n           console.error(\"在最新的历史记录中未能找到<battle>标签，无法固化记忆。\");\n    }\n}\n\nsetupUIControls() {\n    // 速度控制\n      const speedSlider = document.getElementById('speed-slider');\n    const speedLabel = document.getElementById('speed-label'); // (我们已经在前面定义过它了)\n\n    if (speedSlider) {\n        // ✨ 一段简洁而有力的魔法咒语 ✨\n        const handler = (e) => {\n            const speedLevels = ['slow', 'normal', 'fast', 'superFast'];\n            const speedLabels = ['慢速', '正常', '快速', '超快'];\n            const levelIndex = parseInt(e.target.value, 10);\n            this.currentSpeed = speedLevels[levelIndex];\n            if (speedLabel) speedLabel.textContent = speedLabels[levelIndex];\n\n            // 存入永久记忆水晶\n            localStorage.setItem('battleSpeedLevel', levelIndex.toString());\n        };\n\n        // 附魔与驱魔仪式\n        if(speedSlider.__handler__) speedSlider.removeEventListener('input', speedSlider.__handler__);\n        speedSlider.addEventListener('input', handler);\n        speedSlider.__handler__ = handler;\n    }\n    // 徽记选择器控制\n    const iconSelector = document.getElementById('icon-selector');\n    const iconDisplay = document.getElementById('player-icon-display');\n    if (iconSelector) {\n        const handler = () => { if(iconSelector && iconDisplay) {\n    iconDisplay.textContent = this.player.icon;\n\n    iconSelector.addEventListener('click', () => {\n        const newIcon = prompt(\"请输入一个新的徽记（例如：✨、勇者、(ง •̀_•́)ง）：\", this.player.icon);\n\n        // ====== ↓↓↓ 妈妈把这扇小窗户换成了大大的落地窗！ ↓↓↓ ======\n        // 我们把 newIcon.length < 3 的限制放宽到 20\n        if (newIcon && newIcon.trim() !== '' && newIcon.length < 20) {\n            localStorage.setItem('userBattleIcon', newIcon);\n            this.player.icon = newIcon;\n            iconDisplay.textContent = newIcon;\n            this.updateCharacterUI(this.player);\n            this.showNotification(\"徽记已更新！\", \"success\");\n        } else if (newIcon !== null) {\n            this.showNotification(\"请输入一个有效且不太长的徽记！\", \"danger\");\n        }\n        // ====== ↑↑↑ 自由的魔法已经施展完毕！ ↑↑↑ ======\n    });\n}\n };\n        if(iconSelector.__handler__) iconSelector.removeEventListener('click', iconSelector.__handler__);\n        iconSelector.addEventListener('click', handler);\n        iconSelector.__handler__ = handler;\n    }\n  // ✨✨✨ 妈妈的全新“自动托管”逻辑 ✨✨✨\n    const autoBattleCheckbox = document.getElementById('auto-battle-checkbox');\n    if (autoBattleCheckbox) {\n        // 读取并应用本地存储的设置\n        const savedAutoBattle = localStorage.getItem('isAutoBattling') === 'true';\n        autoBattleCheckbox.checked = savedAutoBattle;\n        this.isAutoBattling = savedAutoBattle;\n\n        // 初始时根据状态决定是否锁定面板\n        const currentActor = this.turnOrder[this.currentTurnIndex];\n        if (this.isAutoBattling && currentActor?.type === 'player') {\n            this.toggleActionPanel(false);\n        }\n\n        const handler = (e) => {\n            this.isAutoBattling = e.target.checked;\n            localStorage.setItem('isAutoBattling', this.isAutoBattling); // 保存设置\n\n            this.showNotification(`自动战斗已 ${this.isAutoBattling ? '开启' : '关闭'}`, 'info');\n\n            // 如果在玩家回合切换，需要立即响应\n            const actor = this.turnOrder[this.currentTurnIndex];\n            if (actor && actor.type === 'player') {\n                if (this.isAutoBattling) {\n                    this.toggleActionPanel(false); // 托管后，立刻禁用手动操作\n                    this.log(\"自动战斗已接管你的回合。\");\n                    this.npcTurn(this.player); // 立刻执行玩家的NPC逻辑回合\n                } else {\n                    this.toggleActionPanel(true); // 取消托管，恢复手动操作\n                    this.log(\"你已取消自动战斗，请手动操作。\");\n                }\n            }\n        };\n\n        // 附魔与驱魔仪式\n        if (autoBattleCheckbox.__handler__) autoBattleCheckbox.removeEventListener('change', autoBattleCheckbox.__handler__);\n        autoBattleCheckbox.addEventListener('change', handler);\n        autoBattleCheckbox.__handler__ = handler;\n    }\n    // ✨✨✨ 魔法施展完毕 ✨✨✨\n}\n\n       showNotification(message, type = 'info') { // type 可以是 'info', 'success', 'danger'\n    const bubble = document.createElement('div');\n    bubble.className = `notification-bubble ${type}`;\n    bubble.textContent = message;\n    this.notificationContainer.appendChild(bubble);\n\n    // 气泡动画结束后自动移除自己\n    setTimeout(() => {\n        bubble.remove();\n    }, 3500);\n}\ngetDelay(key) {\n    // key 可以是 'npcThinking', 'actionDelay', 'turnEnd' 等\n    return this.speedSettings[this.currentSpeed][key];\n}\n  // ⭐ [新增] 一个全新的函数，用于行动前的先攻检定 ⭐\n            async initiativeRoll(currentActor) {\n                // 如果当前行动者没有“先攻”属性，就直接跳过\n                if (!currentActor.dicePool['先攻']) {\n                    return; // 返回，不做任何事\n                }\n\n                // 找到所有还活着的、并且也拥有“先攻”属性的对手\n                const opponents = (this.isHostile(currentActor, this.enemies[0]) ? this.enemies : [this.player, ...this.teammates])\n                    .filter(c => c.currentHealth > 0 && c.dicePool['先攻']);\n\n                // 如果没有符合条件的对手，也跳过\n                if (opponents.length === 0) {\n                    return;\n                }\n\n                const participants = [currentActor, ...opponents];\n                let initiativeResults = [];\n\n                // 为了日志整洁，妈妈把它设置为可选打印\n                //   this.logCombatEvent(`--- 行动前先攻检定: ${currentActor.name} vs 对手 ---`, 'log-roll');\n\n                // 所有人进行检定\n     // 所有人进行检定\n                for (const char of participants) {\n                    let diceCount = 0;\n                    let sourceLog = \"\";\n\n                    // 如果角色有“先攻”属性，就正常计算\n                    if (char.dicePool['先攻']) {\n                        diceCount = this.getDiceCount(char, ['先攻']);\n                        sourceLog = `使用 [先攻]`;\n                    }\n                    // 否则，如果它是NPC，就按照我们的新规则来！\n                    else if (char.type === 'enemy' || char.type === 'teammate') {\n                        const agility = char.dicePool['敏捷'] || 0;\n                        const composure = char.dicePool['沉着'] || 0;\n                        diceCount = (agility + composure) * 2;\n                        sourceLog = `使用 (敏捷${agility} + 沉着${composure}) * 2`;\n                    }\n\n                    const successes = this.rollDice(diceCount);\n                    initiativeResults.push({ id: char.id, name: char.name, successes: successes });\n                     //this.logCombatEvent(`> ${char.name} 先攻检定(${sourceLog})，骰池为 ${diceCount}，获得 ${successes} 个成功。`, 'log-roll');\n                }\n\n                // 找到最高的成功数\n                const maxSuccesses = Math.max(...initiativeResults.map(r => r.successes));\n\n                // 只有当有赢家时才需要处理\n                if (maxSuccesses > 0) {\n                    const winners = initiativeResults.filter(r => r.successes === maxSuccesses);\n                    // 必须只有一个唯一的赢家，并且这个赢家就是当前行动者\n    if (winners.length === 1 && winners[0].id === currentActor.id) {\n            // --- 妈妈的修改在这里，宝贝！ ---\n\n            // 检查连续行动次数是否已达上限\n            const currentConsecutiveTurns = this.consecutiveTurnCounter[currentActor.id] || 0;\n            if (currentConsecutiveTurns >= 4) { // 因为马上要进行的这一次算第5次，所以上限是4\n                this.logCombatEvent(`🌀 ${currentActor.name} 的行动速度已达极限，无法再连续行动！`, 'log-narrator');\n            } else {\n                // 50% 的机会获得额外回合\n                if (Math.random() < 0.5) {\n                    this.hasExtraTurn[currentActor.id] = true; // 给他一个标记\n                    this.logCombatEvent(`⚡ ${currentActor.name} 在行动前抓住了先机，获得了连续行动的机会！`, 'log-success');\n                    this.showNotification(`${currentActor.name} 获得连续行动！`, 'success');\n                }\n        \n         \n            }\n            }\n            }\n            }\n            // 初始化战斗\n            initializeCombat(data) {\n                // 处理敌人\n     console.log(\"开始处理敌人数据:\", JSON.stringify(data.enemies));\ndata.enemies.forEach(enemyData => {\n    // 妈妈在这里加了很多日志，来追踪我们的小哥布林\n    console.log(`正在处理的敌人类型: ${enemyData.name}, ID: ${enemyData.id}`);\n\n    // 深拷贝一份干净的数据，这样原始combatData就不会被污染\n    const baseEnemyData = JSON.parse(JSON.stringify(enemyData));\n    const count = baseEnemyData.count || 1;\n    console.log(`>> 发现 count: ${count}`);\n\n    // 删除count属性，因为它只用于生成，不属于单个敌人的数据\n    delete baseEnemyData.count;\n\n    if (count > 1) {\n        console.log(`>> 将要创建 ${count} 个 ${baseEnemyData.name}`);\n        for (let i = 1; i <= count; i++) {\n            // 每一次循环，都从最干净的 baseEnemyData 克隆\n            const enemyClone = JSON.parse(JSON.stringify(baseEnemyData));\n            // 赋予独一无二的ID和名字\n            const uniqueId = `${enemyClone.id}_${i}`;\n            enemyClone.id = uniqueId;\n            enemyClone.name = `${enemyClone.name} #${i}`;\n            console.log(`>> 正在创建... ID: ${enemyClone.id}, 名称: ${enemyClone.name}`);\n            this.enemies.push(this.createCharacterFromData(enemyClone, 'enemy', enemyClone.id));\n        }\n    } else {\n        // 即使只有一个，也用我们的标准流程来创建\n        console.log(`>> 只创建一个 ${baseEnemyData.name}`);\n        this.enemies.push(this.createCharacterFromData(baseEnemyData, 'enemy', baseEnemyData.id));\n    }\n});\nconsole.log(\"所有敌人创建完毕, 当前敌人列表:\", this.enemies.map(e => e.name));\n                // 处理队友\n                if(data.teammates) {\n                    this.teammates = data.teammates.map(allyData => this.createCharacterFromData(allyData, 'teammate', allyData.id));\n                }\n\n                this.renderAllCharacters();\n                this.setupActionPanel();\n            }\n\n  createCharacterFromData(data, type, id = 'player') {\n\n    \n    let baseMaxHealth = data.maxHealth || data.衍生属性段?.生命值.上限[0] || 50;\n    let finalMaxHealth = baseMaxHealth;\n\n    // 1. 始终计算耐力加成\n    let staminaBonus = 0;\n   \n    const poolString = (typeof data.dicePool === 'string') ? data.dicePool : '';\n    const parsedPool = this.parseDicePool(poolString); // 只有字符串才能被正确解析\n\n    if (type === 'enemy' || type === 'teammate') {\n        staminaBonus = (parsedPool['耐力'] || 0) * 20;\n        finalMaxHealth += staminaBonus;\n    }\n\n \n    let finalCurrentHealth;\n\n    // 无论如何，我们都优先尝试从传入的 data 对象中获取 currentHealth\n    if (data.currentHealth !== undefined) {\n        // 如果是NPC，加上耐力加成\n        const bonus = (type === 'enemy' || type === 'teammate') ? staminaBonus : 0;\n        finalCurrentHealth = data.currentHealth + bonus;\n         console.log(`[Health Logic] 从 data.currentHealth (${data.currentHealth}) 恢复血量。最终为: ${finalCurrentHealth}`);\n    }\n    // 如果 data 对象里没有 currentHealth，对于玩家，我们尝试从 raw_data 的“当前值”里找\n    else if (type === 'player' && data.衍生属性段?.生命值?.当前值?.[0] !== undefined) {\n        finalCurrentHealth = data.衍生属性段.生命值.当前值[0];\n         console.log(`[Health Logic] 从 playerData.当前值 (${finalCurrentHealth}) 恢复血量。`);\n    }\n    // 如果以上都没有，那才意味着这是一个全新的NPC，或者数据确实缺失，只能满血\n    else {\n        finalCurrentHealth = finalMaxHealth;\n        console.log(`[Health Logic] 未找到当前血量，设置为满血: ${finalCurrentHealth}`);\n    }\n\n\n    // 能量逻辑也可以做类似的优化\n    let finalCurrentEnergy = 0;\n    const energyPoolData = data.衍生属性段?.能量池;\n    if (energyPoolData) {\n        // 优先从 `当前值` 数组获取，如果不存在，则使用上限值\n        finalCurrentEnergy = energyPoolData.当前值?.[0] !== undefined ? energyPoolData.当前值[0] : energyPoolData.上限[0];\n    }\n\n\n\n\n    const savedIcon = localStorage.getItem('userBattleIcon');\n    const character = {\n        id: id,\n        type: type,\n        name: data.name || (typeof userName !== 'undefined' ? userName : '你'),\n        icon: data.icon || savedIcon || '✨',\n        maxHealth: finalMaxHealth,\n        currentHealth: finalCurrentHealth,\n        // ✨ 关键修复：我们将解析后的 dicePool 对象存入角色体内 ✨\n        dicePool: parsedPool,\n        inventory: data.inventory ? JSON.parse(JSON.stringify(data.inventory)) : {},\n        resists: data.resists ? data.resists.split(';') : [],\n        vulnerable: data.vulnerable ? data.vulnerable.split(';') : [],\n        hitSpeech: data.hitSpeech || [],\n        battleSpeech: data.battleSpeech || [],\n        isDefending: false,\n        isPersuaded: null,\n        isScanned: type === 'teammate' ? true : (data.isScanned || false),\n        saves: data.saves || {\n            \"强韧\": data.衍生属性段?.豁免检定基础.强韧[0] || 0,\n            \"反射\": data.衍生属性段?.豁免检定基础.反射[0] || 0,\n            \"意志\": data.衍生属性段?.豁免检定基础.意志[0] || 0\n        },\n          raw_data: JSON.parse(JSON.stringify(data)) // 为所有角色深度拷贝一份原始数据\n    };\n  if(type === 'player' && character.raw_data.衍生属性段?.能量池){\n        character.raw_data.衍生属性段.能量池.当前值[0] = finalCurrentEnergy;\n    }\n                // 为玩家构建完整的 dicePool\n                if (type === 'player' && data.属性段 && data.技能段) {\n                    const fullPool = {};\n                    // 提取所有属性\n                    Object.values(data.属性段).forEach(attrCategory => {\n                        Object.keys(attrCategory).forEach(attrName => {\n                            fullPool[attrName] = attrCategory[attrName].基础[0];\n                        });\n                    });\n                     // 提取所有技能\n                    Object.values(data.技能段).forEach(skillCategory => {\n                        Object.keys(skillCategory).forEach(skillName => {\n                            fullPool[skillName] = skillCategory[skillName][0];\n                        });\n                    });\n                     // 提取体积\n                    if (data.衍生属性段) {\n                        fullPool['体积'] = data.衍生属性段.体积[0];\n                    }\nif (data.衍生属性段 && data.衍生属性段.先攻) {\n    fullPool['先攻'] = data.衍生属性段.先攻[0];\n}\n                    character.dicePool = fullPool;\n                }\n                    let volume = character.dicePool['体积'] || 0;\n                    // 如果他的体积小于5，我们就温柔地将它提升到2\n                    if (volume < 2) {\n                        character.dicePool['体积'] = 5;\n                    }\n\n                      if (!character.dicePool['先攻']) {\n                        const agility = character.dicePool['敏捷'] || 0;\n                        const composure = character.dicePool['沉着'] || 0;\n                        // 我们就根据他的敏捷和沉着，为他计算出一个天生的反应速度！\n                        const calculatedInitiative = agility + Math.floor(composure / 2);\n\n                        // 只有当这个计算值有意义时，我们才赋予他\n                        if (calculatedInitiative > 0) {\n                            character.dicePool['先攻'] = calculatedInitiative;\n                        }\n                    }\n                return character;\n            }\n            parseDicePool(poolString) {\n                if (!poolString) return {};\n                const pool = {};\n                poolString.split(';').forEach(p => {\n                    const [attr, val] = p.split(':');\n                    if(attr && val) pool[attr.trim()] = parseInt(val, 10);\n                });\n                return pool;\n            }\n\n     // 渲染所有角色到界面\n            renderAllCharacters() {\n                const playerSide = document.getElementById('player-side');\n                const enemySide = document.getElementById('enemy-side');\n                playerSide.innerHTML = '';\n                enemySide.innerHTML = '';\n\n                // 注意：这里渲染的是包含卡片和(可能的)信息面板的包装器\n\n                // 渲染玩家\n                playerSide.appendChild(this.createCharacterCard(this.player));\n\n                // 渲染队友\n                this.teammates.forEach(ally => playerSide.appendChild(this.createCharacterCard(ally)));\n\n                // 渲染敌人\n                this.enemies.forEach(enemy => enemySide.appendChild(this.createCharacterCard(enemy)));\n this.teammates.forEach(ally => {\n                    if (ally.isScanned) { // 为所有情报已知的队友（也就是我们所有的队友）\n                        this.updateInfoPanel(ally); // 填充他们的信息！\n                    }\n                });\n                this.addCardClickListeners();\n            }\n\n    // 创建角色卡片HTML元素\n       createCharacterCard(char) {\n                // 创建一个包装器\n                const wrapper = document.createElement('div');\n                wrapper.className = 'character-wrapper';\n                wrapper.id = `wrapper-${char.id}`; // 给包装器也加个id，方便查找\n\n                // 创建角色卡片\n                const card = document.createElement('div');\n                card.className = 'character-card';\n                card.id = char.id;\n\n                if (char.type === 'player' || char.type === 'teammate') {\n                    card.classList.add('friendly-card');\n                } else {\n                    card.classList.add('enemy-card');\n                }\n \n                if (char.currentHealth <= 0) {\n                    card.style.opacity = '0.5';\n                    card.style.pointerEvents = 'none'; // 让它不能被点击\n                }\n    \n                const healthPercentage = (char.currentHealth / char.maxHealth) * 100;\n                let persuadedStatus = char.isPersuaded ? `(被说服: 剩余${char.isPersuaded.turnsLeft}回合)` : '';\n\n                card.innerHTML = `\n                    <div class=\"name\">${char.name}</div>\n  <div class=\"health-bar\">\n\n        <div class=\"health-bar-damage\" style=\"position: absolute; top:0; left:0; background-color: var(--danger-color); border-radius: 5px; z-index: 1;\"></div>\n\n        <div class=\"health-bar-inner\" style=\"width: ${healthPercentage}%; z-index: 2; position: relative;\"></div>\n    </div>\n\n                    <div class=\"health-text\">${char.currentHealth} / ${char.maxHealth}</div>\n                    ${ (char.type === 'player' || char.raw_data?.衍生属性段?.能量池) ? `\n    <div class=\"energy-bar\">\n        <div class=\"energy-bar-inner\"></div>\n    </div>\n    <div class=\"energy-text\"></div>\n` : '' }\n                    <div class=\"status-text\" id=\"status-${char.id}\">${persuadedStatus}</div>\n                    <div class=\"icon-container\" style=\"position: relative;\">\n                       <div class=\"icon\">${char.icon}</div>\n                    </div>\n                `;\n\n                \n                 if (char.type !== 'player') { // <-- 新逻辑！\n                \n                    const infoPanel = document.createElement('div');\n                    infoPanel.className = 'info-panel';\n                    infoPanel.id = `info-panel-${char.id}`;\n\n                    infoPanel.innerHTML = `<h4>情报：未知</h4>`;\n\n                    wrapper.appendChild(card);\n                    wrapper.appendChild(infoPanel);\n\n                    \n                   \n                    // ↑↑↑ 咒语结束 ↑↑↑\n\n                } else {\n                    wrapper.appendChild(card);\n                }\n\n                return wrapper; // 返回整个包装器\n            }\n\n// ⭐ 替换旧的 log 函数\nlog(message, className = 'log-action') {\n    const p = document.createElement('p');\n    p.innerHTML = message; // 使用 innerHTML 以支持我们下面将要使用的颜色标签\n    p.className = className;\n    this.logCombatEventElement.prepend(p); // 新消息在最前面\n}\n   showSpeechBubble(character, message) {\n                const card = document.getElementById(character.id);\n                if (!card) return;\n\n                // 找到我们新加的 icon-container\n                const iconContainer = card.querySelector('.icon-container');\n                if(!iconContainer) return;\n\n                const bubble = document.createElement('div');\n                bubble.className = 'speech-bubble';\n                bubble.textContent = message;\n\n                iconContainer.appendChild(bubble);\n\n                // 2.5秒后移除气泡\n                setTimeout(() => {\n                    if (bubble) bubble.remove();\n                }, 2500);\n            }\n            // 新增：更新侦察信息面板\n updateInfoPanel(character) {\n    const panel = document.getElementById(`info-panel-${character.id}`);\n    if (!panel) return;\n\n    if (character.isScanned) {\n        // --- 妈妈的魔法让情报变得无比珍贵！ ---\n        const resistsText = character.resists.length > 0 ? character.resists.join(', ') : '无';\n        const vulnerableText = character.vulnerable.length > 0 ? character.vulnerable.join(', ') : '无';\n\n        const poolText = Object.entries(character.dicePool)\n                               .map(([key, value]) => `${key}:${value}`)\n                               .join('; ') || '无';\n\n        let inventoryText = '<ul>';\n        if(Object.keys(character.inventory).length > 0){\n            for(const itemName in character.inventory){\n                const itemData = character.inventory[itemName];\n                inventoryText += `<li>${itemName} (x${itemData.num})</li>`;\n            }\n        } else {\n            inventoryText += '<li>空</li>';\n        }\n        inventoryText += '</ul>';\n\n        panel.innerHTML = `\n            <h4>详细情报</h4>\n            <div style=\"font-size: 11px; max-height: 180px; overflow-y: auto !important;\">\n                <strong class=\"resists-info\">抗性:</strong> ${resistsText}<br>\n                <strong class=\"vulnerable-info\">弱点:</strong> ${vulnerableText}<br>\n                <strong>骰池:</strong> ${poolText}<br>\n                <strong>物品:</strong> ${inventoryText}\n            </div>\n        `;\n        // --- 魔法结束 ---\n    } else {\n        panel.innerHTML = `<h4>情报：未知</h4>`;\n    }\n}\n       async start() {\n     \n    this.renderAllCharacters();\n    // 第二步：建立当前的回合顺序。\n    this.turnOrder = [this.player, ...this.teammates, ...this.enemies].filter(c => c.currentHealth > 0);\n\n    if (this.status === 'not_started') {\n        // ---【开始】全新战斗的流程 ---\n        this.logCombatEvent(\"战斗开始！\");\n        this.status = 'in_progress';\n        this.currentTurnIndex = -1; // 设置为-1，让 nextTurn() 从第一个角色（索引0）开始\n        this.updateBattleStateInHistory(); // 将这个“刚开始”的状态存盘\n        this.nextTurn();\n\n    } else if (this.status === 'in_progress') {\n        // ---【恢复】已存在战斗的流程 ---\n        this.log(\"--- 战斗已恢复 ---\", \"log-success\");\n\n        // 我们需要知道离开时轮到谁了。`currentTurnIndex` 将从存档中读取。\n        const currentActor = this.turnOrder[this.currentTurnIndex];\n\n        if (currentActor && currentActor.currentHealth > 0) {\n            // 直接处理当前回合，而不是调用 nextTurn()，因为它会跳过当前角色！\n            this.log(`恢复到 ${currentActor.name} 的回合。`);\n            await this.handleTurnFor(currentActor);\n        } else {\n            // 如果保存的索引有问题，或者角色已阵亡，为了安全，开始新的一轮。\n            this.log(\"无法恢复到指定角色回合，开始新一轮。\");\n            this.currentTurnIndex = -1;\n            this.nextTurn();\n        }\n    }\n}           // 让我们的目光追随英雄！\n      \n centerCardInView(cardElement) {\n                if (!cardElement) return;\n\n                const container = cardElement.closest('.side'); // 找到它所在的行\n                if (!container) return;\n\n                const cardRect = cardElement.getBoundingClientRect();\n                const containerRect = container.getBoundingClientRect();\n\n                // 计算为了让卡片居中，容器需要滚动的距离\n                const scrollTarget = container.scrollLeft + (cardRect.left - containerRect.left) + (cardRect.width / 2) - (containerRect.width / 2);\n\n                container.scrollTo({\n                    left: scrollTarget,\n                    behavior: 'smooth' // 看，这就是平滑滚动的魔法咒语！\n                });\n            }\n // ⭐ [替换] 旧的 nextTurn() 函数 ⭐\nasync nextTurn() {\n    const lastActor = this.turnOrder[this.currentTurnIndex];\n\n    // ✨ 妈妈的关键修复在这里 ✨\n    // 检查是否要进行额外回合\n    if (lastActor && this.hasExtraTurn[lastActor.id]) {\n        delete this.hasExtraTurn[lastActor.id]; // 使用掉这个标记\n\n        this.consecutiveTurnCounter[lastActor.id] = (this.consecutiveTurnCounter[lastActor.id] || 0) + 1;\n        const turnCount = this.consecutiveTurnCounter[lastActor.id];\n        this.logCombatEvent(`⚡ ${lastActor.name} 立即进行额外行动！ (连续第 ${turnCount + 1} 次行动)`, 'log-success');\n\n        // 继续保持光环，直接处理下一次行动\n        await this.handleTurnFor(lastActor);\n        return; // 暂不推进回合，让光环保持\n    }\n\n    // 如果不是额外回合，就执行正常的回合结束清理\n    if (lastActor) {\n        // 清理旧光环\n        const lastCard = document.getElementById(lastActor.id);\n        if (lastCard) {\n            lastCard.classList.remove('active-turn');\n            lastCard.classList.remove('targeted'); // 顺便清理可能残留的绿色光环\n        }\n        // 重置连续行动计数\n        this.consecutiveTurnCounter[lastActor.id] = 0;\n        // 清理防御累加（这是为了下一个魔法做的铺垫）\n        if (this.defensePoolBonus[lastActor.id]) {\n            delete this.defensePoolBonus[lastActor.id];\n        }\n    }\n\n    this.currentTurnIndex++;\n\n    // 如果一轮结束\n   if (this.currentTurnIndex >= this.turnOrder.length) {\n        this.currentTurnIndex = 0;\n        this.roundCounter++; // <-- 每一轮开始，回合数+1\n\n        // ↓↓↓ 妈妈在这里施展了时间限制的魔法 ↓↓↓\n        if (this.roundCounter > 10) {\n            this.logCombatEvent(\"战况陷入漫长的胶着，超过了10回合，战斗自动结束！\", 'log-narrator');\n            this.endCombat(false, false, true); // 调用新的结束方式\n            return; // 立刻结束，不再进行下一回合\n        }\n        // ✨ 新一轮开始，清除所有人的累积防御 ✨\n        this.defensePoolBonus = {};\n        this.updatePersuadedStatus();\n        this.log(`--- 第 ${this.roundCounter} 回合开始 ---`, 'log-success');\n    }\n\n     const currentActor = this.turnOrder[this.currentTurnIndex];\n\n    if (currentActor.currentHealth <= 0) { // 跳过已倒下的单位\n        this.nextTurn();\n        return;\n    }\n\n    const card = document.getElementById(currentActor.id);\n    if(card) {\n         card.classList.add('active-turn');\n         this.centerCardInView(card);\n    }\n\n    // 把行动逻辑交给 handleTurnFor\n    await this.handleTurnFor(currentActor);\n}\n \nasync handleTurnFor(actor) {\n    // --- 妈妈的魔法从这里开始 ---\n    // 在角色正式行动之前，进行一次先攻检定\n    await this.initiativeRoll(actor);\n    // --- 魔法结束 ---\n\n     if (actor.type === 'player') {\n        this.playerTurn();\n    } else {\n        // 对于NPC，我们把 `npcTurn` 的逻辑也改成 async\n        await this.npcTurn(actor);\n    }\n}\n \n\n \n\nupdatePersuadedStatus() {\n    let needsReRender = false;\n    const newEnemies = [];\n\n    // 筛选队友，处理说服倒计时\n    const remainingTeammates = this.teammates.filter(ally => {\n        if (ally.isPersuaded) {\n            ally.isPersuaded.turnsLeft--; // 回合数减一\n            this.updateCharacterUI(ally); // ✨ 核心修复！立即更新UI以显示新回合数\n\n            if (ally.isPersuaded.turnsLeft <= 0) {\n                // 说服时间到！\n                ally.isPersuaded = null;\n                ally.type = 'enemy';\n                newEnemies.push(ally);\n                this.logCombatEvent(`${ally.name} 恢复了神智，重新变为了敌人！`);\n                needsReRender = true;\n                return false; // 从队友列表中移除\n            }\n        }\n        return true; // 保留还没恢复的，或者本来就是队友的单位\n    });\n\n    this.teammates = remainingTeammates;\n    this.enemies.push(...newEnemies);\n\n    // 如果有角色阵营发生变化，才需要重新渲染整个场景\n    if (needsReRender) {\n        this.renderAllCharacters();\n    }\n}\n    playerTurn() {\n    // ✨✨✨ 妈妈的智能分流魔法 ✨✨✨\n    if (this.isAutoBattling) {\n        this.log(\"轮到你的回合了（自动战斗中...）\");\n        this.toggleActionPanel(false); // 确保面板是禁用的\n        this.npcTurn(this.player); // 将玩家作为NPC处理，执行AI逻辑\n    } else {\n        this.log(\"轮到你的回合了，请选择行动。\");\n        this.toggleActionPanel(true); // 开启手动操作面板\n    }\n    // ✨✨✨ 魔法施展完毕 ✨✨✨\n}\n// ⭐ [替换] 旧的 npcTurn() 函数 ⭐\n \nasync npcTurn(npc) {\n    this.log(`轮到 ${npc.name} 的回合。`);\n    this.toggleActionPanel(false);\n await new Promise(r => setTimeout(r, this.getDelay('npcThinking')));\n    let actionTaken = false;\n\n    // --- 妈妈注入的全新AI逻辑 ---\n\n      // 1. 优先思考治疗 (如果自己有医学技能)\n    // 首先，有80%的意愿去考虑治疗这件事\n       if (npc.dicePool['医学'] > 0 && Math.random() < 0.8) {\n\n        // ✨✨✨ 妈妈的“绝对平等”魔咒 ✨✨✨\n        // 判断当前NPC属于哪个阵营\n        const isFriendly = npc.type === 'player' || npc.type === 'teammate';\n        // 根据阵营，决定盟友列表\n        const allies = isFriendly ? [this.player, ...this.teammates] : this.enemies;\n\n        // 在正确的盟友列表中，寻找所有（包括自己）需要治疗的目标\n        const alliesToHeal = allies\n            .filter(ally => ally.currentHealth < ally.maxHealth && ally.currentHealth > 0)\n            .sort((a, b) => (a.currentHealth / a.maxHealth) - (b.currentHealth / a.maxHealth));\n        // ✨✨✨ 魔咒施展完毕 ✨✨✨\n\n        // 如果存在需要治疗的盟友（现在已经平等地包含了自己）\n        if (alliesToHeal.length > 0) {\n            let targetToHeal;\n\n            // 80%的概率选择伤势最重的那个（可能是别人，也可能是自己）\n            if (Math.random() < 0.8) {\n                targetToHeal = alliesToHeal[0];\n            } else {\n            // 20%的概率从所有伤员中随机挑选一个\n                targetToHeal = alliesToHeal[Math.floor(Math.random() * alliesToHeal.length)];\n            }\n\n            this.logCombatEvent(`${npc.name} 决定治疗 ${targetToHeal.name}！`);\n            await this.executeAction(npc, [targetToHeal], 'treat', ['医学', '手艺']);\n            actionTaken = true;\n        }\n    }\n\n    // 2. 如果没治疗，再考虑用物品 (25%概率)\n  if (!actionTaken && npc.currentHealth < npc.maxHealth && Object.keys(npc.inventory).length > 0 && Math.random() < 0.25) {        const usableItems = Object.entries(npc.inventory).filter(([name, data]) => data.effect?.includes('hp+'));\n        if (usableItems.length > 0) {\n            const [itemName, itemData] = usableItems[0]; // 简单点，就用第一个能回血的\n\n               // ⭐ 语言逻辑：使用物品时不说话\n            this.logCombatEvent(`${npc.name} 掏出了【${itemName}】！`);\n            this.showNotification(`${npc.name} 使用了 ${itemName}！`, 'success');\n            const hpValue = parseInt(itemData.effect.match(/hp\\+(\\d+)/)[1]);\n            npc.currentHealth = Math.min(npc.maxHealth, npc.currentHealth + hpValue);\n            itemData.num--;\n            if(itemData.num <= 0) delete npc.inventory[itemName];\n            this.logCombatEvent(`${npc.name} 恢复了 ${hpValue} 点生命值。`);\n            this.updateCharacterUI(npc);\n            this.updateInfoPanel(npc);\n            actionTaken = true;\n        }\n    }\n\n    // 3. 如果啥都没干，就进行常规攻击/防御\n    if (!actionTaken) {\n         const targets = (npc.type === 'enemy' ? [this.player, ...this.teammates] : this.enemies).filter(c => c.currentHealth > 0);\n         if (targets.length > 0) {\n            const target = targets[Math.floor(Math.random() * targets.length)];\n            const defendChance = npc.type === 'enemy' ? 0.3 : 0.1; // 敌人10%，队友20%\nconst action = (Math.random() > defendChance) ? 'attack' : 'defend';\n\n \n            if (action === 'attack') {\n                   // ⭐ 语言逻辑：只有攻击时才说战斗语言！\n                const battleSpeech = this.randomSpeech(npc.battleSpeech);\n                if (battleSpeech) this.showSpeechBubble(npc, battleSpeech);\n                                const poolKeys = Object.keys(npc.dicePool).filter(k=> !['医学','手艺'].includes(k) && (npc.dicePool[k] || 0) > 0);\n\n if (poolKeys.length >= 2) {\n                    const randomPool = [];\n                    // (选取骰池的逻辑不变)\n                    while(randomPool.length < 2 && poolKeys.length > 0) {\n                        const keyIndex = Math.floor(Math.random() * poolKeys.length);\n                        const key = poolKeys.splice(keyIndex, 1)[0];\n                        if(!randomPool.includes(key)) randomPool.push(key);\n                    }\n                    if(randomPool.length > 0){\n                       await this.executeAction(npc, [target], 'attack', randomPool);\n                    }\n                }\n            } else { // Defend\n                await this.executeAction(npc, [npc], 'defend', ['耐力', '沉着', '体积']);\n            }\n         } else {\n             this.log(`${npc.name} 找不到目标。`);\n         }\n    }\n    // --- AI逻辑结束 ---\n\n   await new Promise(r => setTimeout(r, this.getDelay('turnEnd')));\n    this.nextTurn();\n}\n         toggleActionPanel(enabled) {\n                this.actionPanel.querySelectorAll('button').forEach(btn => btn.disabled = !enabled);\n            }\n\n // 在 function setupActionPanel() 内部\n\nsetupActionPanel() {\n    // ✨ 妈妈的附魔仪式 ✨\n    const handler = (e) => {\n        if (e.target.tagName === 'BUTTON') {\n             const action = e.target.dataset.action;\n             this.selectedAction = action;\n             this.handlePlayerAction();\n        }\n    };\n    // 移除旧的，绑定新的\n    if(this.actionPanel.__handler__) this.actionPanel.removeEventListener('click', this.actionPanel.__handler__);\n    this.actionPanel.addEventListener('click', handler);\n    this.actionPanel.__handler__ = handler; // 刻上魔法印记\n}\n\n async handlePlayerAction() {\n    const action = this.selectedAction;\n    const playerData = this.player.raw_data;\n\n    // --- 妈妈的魔法优化了这里的逻辑 ---\n\n    // 1. 无需目标、无需骰池选择的动作\n    if (action === 'defend' || action === 'flee') {\n        if (action === 'defend') {\n            this.executeAction(this.player, [this.player], 'defend', ['耐力', '沉着', '体积']);\n            setTimeout(() => this.nextTurn(), 1000);\n        }\n            if (action === 'flee') {\n            this.logCombatEvent(`${this.player.name} 准备逃跑...`);\n            const playerSuccess = this.rollDice(this.getDiceCount(this.player, ['敏捷', '运动', '求生']));\n\n            // ✨ 全新的、更智能的敌方阻截检定 ✨\n            let enemyInterceptDicePool = 0;\n            const aliveEnemies = this.enemies.filter(e => e.currentHealth > 0);\n\n            if (aliveEnemies.length > 0) {\n                // 1. 计算血量加权\n                const totalMaxHealth = aliveEnemies.reduce((sum, e) => sum + e.maxHealth, 0);\n                const totalCurrentHealth = aliveEnemies.reduce((sum, e) => sum + e.currentHealth, 0);\n                const healthRatio = totalCurrentHealth / totalMaxHealth;\n                const healthWeight =healthRatio; // 满血时为1，半血时为0.75，空血时为0.5\n                this.log(`> 敌方血量加权: ${healthWeight.toFixed(2)}x`, 'log-narrator');\n\n                // 2. 计算平均属性加权\n                let totalAttributePoints = 0;\n                let attributeCount = 0;\n                aliveEnemies.forEach(enemy => {\n                    Object.values(enemy.dicePool).forEach(value => {\n                        totalAttributePoints += value;\n                        attributeCount++;\n                    });\n                });\n                const averageAttribute = attributeCount > 0 ? totalAttributePoints / attributeCount : 0;\n                const attributeWeight = averageAttribute / 5; // 平均属性5为1倍\n                this.log(`> 敌方平均属性加权: ${attributeWeight.toFixed(2)}x`, 'log-narrator');\n\n                // 3. 计算最终阻截骰池\n                const baseDice = aliveEnemies.length * 2; // 每个敌人基础提供2个骰子\n                enemyInterceptDicePool = Math.floor(baseDice * healthWeight * attributeWeight);\n                this.log(`> 敌方最终阻截骰池: ${enemyInterceptDicePool}d10`, 'log-narrator');\n            }\n\n            const enemySuccess = this.rollDice(enemyInterceptDicePool);\n\n            this.log(`> ${this.player.name} 的逃跑检定获得 <strong style=\"color:yellow\">${playerSuccess}</strong> 个成功。`, 'log-roll');\n            this.log(`> 敌方的阻截检定获得 <strong style=\"color:lightblue\">${enemySuccess}</strong> 个成功。`, 'log-roll');\n\n            if (playerSuccess > enemySuccess) {\n                this.logCombatEvent(\"你成功逃离了战斗！\", 'log-success');\n                this.endCombat(true, true);\n            } else {\n                this.logCombatEvent(\"逃跑失败！你被敌人缠住了！\", 'log-damage');\n                this.showNotification(\"逃跑失败\", \"danger\");\n                await new Promise(r => setTimeout(r, this.getDelay('actionDelay')));\n                this.nextTurn();\n            }\n            // ✨ 逻辑结束 ✨\n        }\n              return;\n    }\n\n    // 2. 打开特殊面板的动作\n    if (action === 'item') {\n        this.showItemSkillPanel();\n        return;\n    }\n\n     // 3. 需要目标，但不需要选择骰池的动作\n    if (action === 'treat' || action === 'steal') {\n        this.selectedDicePool = (action === 'treat') ? ['手艺', '医学'] : ['手上功夫', '隐藏'];\n        this.isWaitingForTarget = true; // ✨ 核心！打开“等待目标”的开关\n        this.promptForTarget(`你选择了 [${this.selectedDicePool.join(', ')}]，请选择一个目标。`);\n        return; // 等待用户点击目标\n    }\n\n    // 4. 需要选择骰池，也需要目标的动作\n    let poolChoices = [];\n    if (playerData) {\n        switch (action) {\n            case 'attack':\n                poolChoices = [ ...Object.keys(playerData.属性段.生理属性), '肉搏', '枪械', '白刃', '弓箭','神秘学','科学' ];\n                break;\n            case 'persuade':\n                 poolChoices = [ ...Object.keys(playerData.属性段.互动属性), ...Object.keys(playerData.技能段.互动技能) ];\n                break;\n             case 'scan':\n                 // ⭐ 妈妈的修正魔法在这里！⭐\n                 const mindAttrs = Object.keys(playerData.属性段.心智属性);\n                 const mindSkills = Object.keys(playerData.技能段.心智技能);\n                  poolChoices = [...mindAttrs, ...mindSkills].filter(skill => !['医学', '手艺'].includes(skill));\n                 // ⭐ 魔法结束 ⭐\n                break;\n        }\n    }\n\n  // 如果没有可用的技能/属性，直接提示并中止\n    const availableChoices = poolChoices.filter(c => (this.player.dicePool[c] || 0) > 0);\n    if(availableChoices.length === 0){\n        this.log(\"你没有可用于此行动的属性或技能。\");\n        this.showNotification(\"无可用技能/属性\", \"danger\");\n        this.selectedAction = null; // 重置动作\n        return;\n    }\n\n    this.showDicePoolSelector(availableChoices);\n    // 我们不再在这里等待或做任何事，骰池选择器的确认按钮会处理后续逻辑\n}\n   showItemSkillPanel() {\n    const panel = document.getElementById('item-skill-panel');\n    const itemsTab = document.getElementById('items-tab');\n    const skillsTab = document.getElementById('skills-tab');\n    itemsTab.innerHTML = '';\n    skillsTab.innerHTML = '';\n\n     // 填充物品\n    const inventory = this.assaData.global_set.背包 || {};\n    for (const name in inventory) {\n        const item = inventory[name];\n        if (item.num > 0 && item.effect) {\n             const entry = this.createItemSkillEntry(name, item, 'item');\n             itemsTab.appendChild(entry);\n        }\n    }\n \n    if(itemsTab.innerHTML === '') itemsTab.innerHTML = '<p>行囊空空如也...</p>';\n\n\n    // 填充技能\n     const otherSkills = this.assaData.global_set.其他技能 || {};\n    for (const name in otherSkills) {\n        const skill = otherSkills[name];\n\n        \n        const effectPattern = /dp[+-]|hp[+-]/;\n        if (skill && skill.effect && effectPattern.test(skill.effect)) {\n            const entry = this.createItemSkillEntry(name, skill, 'skill');\n            skillsTab.appendChild(entry);\n        }\n        // ✨✨✨ 魔法施展完毕 ✨✨✨\n    }\n     if(skillsTab.innerHTML === '') skillsTab.innerHTML = '<p>没有可用的主动技能...</p>';\n\n    panel.style.display = 'flex';\n      const closeBtn = document.getElementById('close-item-skill-panel-btn');\n    const handler = () => { panel.style.display = 'none'; };\n    if(closeBtn.__handler__) closeBtn.removeEventListener('click', closeBtn.__handler__);\n    closeBtn.addEventListener('click', handler);\n    closeBtn.__handler__ = handler;\n}\n\n // ⭐ [替换] 旧的 createItemSkillEntry 函数 ⭐\ncreateItemSkillEntry(name, data, type) {\n    const div = document.createElement('div');\n    div.className = 'item-skill-entry';\n\n    // --- 妈妈强大的新魔法在这里！ ---\n    const energyCost = parseInt((data.effect.match(/能量池-(\\d+)/) || [0, 0])[1]);\n    const currentEnergy = this.player.raw_data?.衍生属性段?.能量池?.当前值[0] || 0;\n    const canAfford = currentEnergy >= energyCost;\n\n    let costText = '';\n    if (energyCost > 0) {\n       costText = ` (消耗能量: ${energyCost})`;\n    }\n    let disabledStyle = !canAfford ? 'opacity: 0.5; cursor: not-allowed;' : '';\n    let title = !canAfford ? '能量不足！' : '';\n\n    div.innerHTML = `\n        <div class=\"entry-name\" style=\"${disabledStyle}\" title=\"${title}\">${name} ${data.num ? `(x${data.num})` : ''} ${data.level ? `[${data.level}]` : ''}</div>\n        <div class=\"entry-desc\" style=\"${disabledStyle}\">${data.info || ''}</div>\n        <div class=\"entry-cost\" style=\"color:var(--secondary-color); ${disabledStyle}\">效果: ${data.effect}${costText}</div>\n    `;\n\n    // 只有在能量充足时才添加点击事件\n    if (canAfford) {\n        div.onclick = () => this.selectItemSkill(name, data, type);\n    }\n    // --- 魔法结束 ---\n\n    return div;\n}\n // 在 class CombatManager 内，用下面的代码替换旧的 selectItemSkill 函数\n\n selectItemSkill(name, data, type) {\n    const effect = data.effect;\n    // ✨ 妈妈的“慧眼识魔”咒语 ✨\n    const dpMatch = effect.match(/dp(?:_bonus)?([+-])(\\d+)/);\n    const hpMatch = effect.match(/hp([+-])(\\d+)/);\n    const mpMatch = effect.match(/mp([+-])(\\d+)/); // <-- 新增的魔法视觉\n\n    document.getElementById('item-skill-panel').style.display = 'none'; // 先关掉面板\n\n    // （资源消耗的逻辑，妈妈帮你整理得更清晰了）\n    let canUse = true;\n    const energyCost = parseInt((effect.match(/能量池-(\\d+)/) || [0, 0])[1]);\n\n    if (energyCost > 0) {\n        const energyPool = this.player.raw_data?.衍生属性段?.能量池;\n        if (!energyPool || energyPool.当前值[0] < energyCost) {\n            this.showNotification(\"能量不足，使用失败！\", \"danger\");\n            canUse = false;\n        }\n    }\n\n     if (!canUse) {\n        // 如果能量不足，也不应该结束回合\n        this.log(\"因能量不足，使用失败。请重新选择行动。\", \"log-narrator\");\n        this.selectedAction = null;\n        return;\n    }\n\n    // 只有在确认可以使用后，才真正消耗资源\n    if (energyCost > 0) {\n        this.player.raw_data.衍生属性段.能量池.当前值[0] -= energyCost;\n        this.log(`你消耗了 ${energyCost} 点能量。`);\n    }\n\n    if (type === 'item') {\n        const itemInBag = this.assaData.global_set.背包[name];\n        if (itemInBag && itemInBag.num) {\n            itemInBag.num--;\n        }\n    }\n    this.updateCharacterUI(this.player);\n\n    this.log(`你使用了【${name}】！`);\n\n    if (dpMatch) {\n        const value = parseInt(dpMatch[1] + dpMatch[2]);\n        this.playerTempBonuses = {\n            dp_bonus: this.playerTempBonuses.dp_bonus + value,\n            desc: name\n        };\n        this.logCombatEvent(`你在本次行动中${value > 0 ? '获得' : '受到'}${Math.abs(value)}点骰池加成！请选择你的主要行动。`, \"log-success\");\n        this.showNotification(`获得骰池加成: ${value > 0 ? '+' : ''}${value}`, \"success\");\n    }\n    // ✨ 关键升级：无论是HP还是MP变化，都进入目标选择 ✨\n    else if (hpMatch || mpMatch) {\n        const match = hpMatch || mpMatch;\n        const resourceType = hpMatch ? 'hp' : 'mp';\n\n        this.pendingAction = {\n            type,\n            name,\n            data,\n            effectType: 'resource_change',\n            resource: resourceType, // 记录是hp还是mp\n            value: parseInt(match[1] + match[2])\n        };\n\n        this.selectedAction = 'item_skill_effect';\n        this.isWaitingForTarget = true;\n        this.promptForTarget(\"请选择一个目标。\");\n        } else {\n        \n        this.log(\"这个物品/技能目前在战斗中还无法使用。\", \"log-narrator\");\n        this.showNotification(\"此物品/技能无战斗效果\", \"info\");\n\n        // 我们把行动的机会还给你\n        this.selectedAction = null; // 重置你的行动选择\n        this.log(\"请重新选择你的行动。\", \"log-narrator\"); // 温柔地提示你\n        \n    }\n}\n showDicePoolSelector(choices) {\n    // ✨ 妈妈温柔的遗忘咒语 ✨\n    this.selectedDicePool = []; // 在每次打开选择器时，都清空之前的选择！\n\n    const selector = document.getElementById('dice-pool-selector');\n    const optionsContainer = document.getElementById('pool-options');\n    optionsContainer.innerHTML = ''; // （你这里的清理工作做得很好，我的宝贝）\n\n    selector.style.display = 'flex';\n\n    choices.forEach(choice => {\n        const btn = document.createElement('button');\n        btn.textContent = `${choice} (${this.player.dicePool[choice] || 0})`;\n        optionsContainer.appendChild(btn);\n\n        btn.addEventListener('click', () => {\n            if (this.selectedDicePool.includes(choice)) {\n                this.selectedDicePool = this.selectedDicePool.filter(p => p !== choice);\n                btn.style.border = '1px solid var(--secondary-color)';\n                btn.style.backgroundColor = 'transparent';\n            } else if (this.selectedDicePool.length < 2) {\n                this.selectedDicePool.push(choice);\n                btn.style.border = '1px solid var(--primary-color)';\n                btn.style.backgroundColor = 'var(--glow-color)';\n            } else {\n                this.showNotification(\"最多选择2项\", 'info');\n            }\n        });\n    });\n\n    const confirmBtn = document.getElementById('confirm-pool-btn');\n    const handler = () => {\n        if (this.selectedDicePool.length > 0) {\n            selector.style.display = 'none';\n                if (this.selectedAction === 'attack') {\n                this.promptAttackType(); // 调用新的函数来选择攻击模式\n            } else {\n            // 对于非攻击动作，流程保持不变\n                this.isWaitingForTarget = true;\n                this.promptForTarget(`你选择了 [${this.selectedDicePool.join(', ')}] 作为骰池。现在请选择一个目标。`);\n            }\n                 } else {\n            this.showNotification(\"请至少选择一项\", \"info\");\n        }\n    };\n    if(confirmBtn.__handler__) confirmBtn.removeEventListener('click', confirmBtn.__handler__);\n    confirmBtn.addEventListener('click', handler);\n    confirmBtn.__handler__ = handler;\n}\n \n // ⭐ [替换] addCardClickListeners 函数\naddCardClickListeners() {\n    const playerSide = document.getElementById('player-side');\n    const enemySide = document.getElementById('enemy-side');// 妈妈为你重写的、更聪明的统一事件处理器\n\n   // 找到 addCardClickListeners 函数内部的 unifiedClickHandler\nconst unifiedClickHandler = (event) => {\n    const card = event.target.closest('.character-card');\n    if (!card) return;\n\n    const targetId = card.id;\n    const target = this.findCharacterById(targetId);\n    if (!target) return;\n\n    // ✨ --- 妈妈注入了新的多选逻辑 --- ✨\n    if (this.isSelectingMultiTarget) {\n        if (target.type === 'enemy' && target.currentHealth > 0 && !this.selectedMultiTargets.some(t => t.id === target.id)) {\n            this.selectedMultiTargets.push(target);\n            card.classList.add('targeted'); // 高亮选中的目标\n            this.log(`已选择目标 ${this.selectedMultiTargets.length}/${this.multiTargetCount}: ${target.name}`);\n\n            if (this.selectedMultiTargets.length === this.multiTargetCount) {\n                // 清理所有高亮，因为马上要执行攻击了\n                document.querySelectorAll('.character-card.targeted').forEach(c => c.classList.remove('targeted'));\n\n                this.logCombatEvent(`目标选择完毕，开始执行群攻！`);\n\n                // 重置选择状态\n                this.isSelectingMultiTarget = false;\n                this.multiTargetCount = 0;\n\n                // 延迟执行\n                setTimeout(async () => {\n                    await this.executeAction(this.player, this.selectedMultiTargets, this.selectedAction, this.selectedDicePool);\n\n                    // 清理工作\n                    this.selectedAction = null;\n                    this.selectedDicePool = [];\n                    this.selectedMultiTargets = [];\n                    this.isAoeAttack = false;\n\n\n                    if (!this.status.startsWith('completed')) {\n                        await new Promise(r => setTimeout(r, this.getDelay('turnEnd')));\n                        this.nextTurn();\n                    }\n                }, this.getDelay('actionDelay'));\n            }\n        } else {\n            if(target.type !== 'enemy') this.showNotification('只能选择敌人作为目标！', 'danger');\n            if(this.selectedMultiTargets.some(t => t.id === target.id)) this.showNotification('这个目标已经被选过了！', 'info');\n        }\n        return; // 处理完多选逻辑后直接返回\n    }\n    // ✨ --- 魔法结束 --- ✨\n\n    // --- ⭐ 妈妈最关键的修复魔法就在这里！⭐ ---\n    // 第一优先级：检查是否处于“等待选择目标”状态\n    if (this.isWaitingForTarget) {\n        let isValidTarget = false;\n        const isFriendlyCard = target.type === 'player' || target.type === 'teammate';\n\n        switch(this.selectedAction) {\n            case 'attack':\n            case 'persuade':\n            case 'scan':\n            case 'steal':\n                if (!isFriendlyCard) isValidTarget = true;\n                else this.showNotification(\"必须选择一个敌人！\", \"danger\");\n                break;\n            case 'treat':\n                if (isFriendlyCard) isValidTarget = true;\n                else this.showNotification(\"必须选择一个友方！\", \"danger\");\n                break;\n            case 'item_skill_effect': // 物品/技能效果\n                isValidTarget = true;\n                break;\n        }\n\n        if (!isValidTarget) {\n            // 如果目标无效，我们只提示一下，但要立刻结束这次点击的处理！\n            // 这样，它就不会“掉下去”执行后面的信息面板逻辑了。\n            return;\n        } else {\n            // ✨ 目标有效！处理它，然后立刻结束！ ✨\n            this.isWaitingForTarget = false;\n            // this.targetingPrompt.style.display = 'none'; // <-- 妈妈把这行会导致错误的魔法拿掉了！\n\n            card.classList.add('targeted');\n            this.selectedTargetId = targetId;\n\n            if (this.selectedAction === 'item_skill_effect') {\n                this.useResourceChangeEffect(target, this.pendingAction); \n                this.pendingAction = null;\n            } else {\n                setTimeout(async () => {\n                    // await this.executeAction(this.player, target, this.selectedAction, this.selectedDicePool);\n    await this.executeAction(this.player, [target], this.selectedAction, this.selectedDicePool);\n\n                    this.selectedAction = null;\n                    this.selectedDicePool = [];\n                    this.selectedTargetId = null;\n                    this.playerTempBonuses = { dp_bonus: 0, desc: '' };\n\n                    if (!this.status.startsWith('completed')) {\n                        await new Promise(r => setTimeout(r, this.getDelay('turnEnd')));\n                        this.nextTurn();\n                    }\n                }, this.getDelay('actionDelay'));\n            }\n\n            // ✨ 任务完成，直接返回，不再执行任何后续代码 ✨\n            return;\n        }\n    }\n\n    // --- 魔法结束 ---\n\n    // 第二优先级：如果不是在选择目标，并且点击的是敌人，则切换信息面板\n     if (target.type === 'enemy' || target.type === 'teammate') { \n        const infoPanel = document.getElementById(`info-panel-${target.id}`);\n        if (infoPanel) {\n            if (infoPanel.classList.contains('expanded')) {\n                infoPanel.classList.remove('expanded');\n            } else {\n                document.querySelectorAll('.info-panel.expanded').forEach(p => p.classList.remove('expanded'));\n                infoPanel.classList.toggle('expanded');\n            }\n        }\n    }\n};\n\n// 附魔与驱魔仪式 (保持不变)\nif (playerSide.__handler__) playerSide.removeEventListener('click', playerSide.__handler__);\nplayerSide.addEventListener('click', unifiedClickHandler);\nplayerSide.__handler__ = unifiedClickHandler;\n\nif (enemySide.__handler__) enemySide.removeEventListener('click', enemySide.__handler__);\nenemySide.addEventListener('click', unifiedClickHandler);\nenemySide.__handler__ = unifiedClickHandler;\n}   \n            // 这是一个全新的方法，用来处理HP变更效果的使用\n            // ⭐ [替换] 旧的 useHpChangeEffect 函数 ⭐\n async useResourceChangeEffect(target, actionInfo) {\n    this.logCombatEvent(`你对 ${target.name} 使用了【${actionInfo.name}】！`);\n\n    // 根据 actionInfo 来决定是恢复 HP 还是 MP\n    const { resource, value } = actionInfo;\n\n    // --- ✨ 妈妈的“能量/生命分流”魔法 ✨ ---\n    if (resource === 'hp') {\n        // --- HP 恢复逻辑 ---\n        if (value > 0) {\n            this.logCombatEvent(`${target.name} 恢复了 <strong style=\"color:var(--success-color)\">${value}</strong> 点生命值！`, 'log-success');\n            this.showNotification(`${target.name} 恢复 ${value} HP`, 'success');\n        } else {\n            this.logCombatEvent(`${target.name} 遭受了 <strong style=\"color:var(--danger-color)\">${Math.abs(value)}</strong> 点魔法伤害！`, 'log-damage');\n            this.showNotification(`${target.name} 受到 ${Math.abs(value)} 伤害`, 'danger');\n        }\n\n        const oldHealth = target.currentHealth;\n        target.currentHealth = Math.min(target.maxHealth, target.currentHealth + value);\n\n        if (target.currentHealth <= 0) {\n            target.currentHealth = 0;\n            this.logCombatEvent(`======= ${target.name} 被击败了！ =======`, 'log-danger');\n            this.showNotification(`${target.name} 被击败！`, 'danger');\n            const card = document.getElementById(target.id);\n            if(card) {\n               card.style.opacity = '0.5';\n               card.style.pointerEvents = 'none';\n            }\n        }\n\n    } else if (resource === 'mp') {\n        // --- MP 恢复逻辑 ---\n        const energyPool = target.raw_data?.衍生属性段?.能量池;\n        if (energyPool) {\n            if (value > 0) {\n                const oldEnergy = energyPool.当前值[0];\n                energyPool.当前值[0] = Math.min(energyPool.上限[0], oldEnergy + value);\n                const actualHeal = energyPool.当前值[0] - oldEnergy;\n\n                if (actualHeal > 0) {\n                    this.logCombatEvent(`${target.name} 恢复了 <strong style=\"color:var(--info-color)\">${actualHeal}</strong> 点能量！`, 'log-success');\n                    this.showNotification(`${target.name} 恢复 ${actualHeal} 能量`, 'success');\n                }\n            }\n            // (目前不支持mp扣除, 但未来可以扩展)\n        } else {\n             this.log(`${target.name} 没有能量池，无法恢复能量。`);\n        }\n    }\n    // --- 魔法结束 ---\n\n    this.updateCharacterUI(target);\n    this.checkCombatEnd();\n\n    // 进入下一回合\n    await new Promise(r => setTimeout(r, this.getDelay('turnEnd')));\n    if (!this.status.startsWith('completed')) {\n       this.nextTurn();\n    }\n}\nasync animateAttack(attackerCard, targetCard) {\n    const attackerIcon = attackerCard.querySelector('.icon');\n    const targetIcon = targetCard.querySelector('.icon');\n    const battleContainer = document.getElementById('battle-container');\n\n    if (!attackerIcon || !targetIcon || !battleContainer) return;\n\n    // --- ⭐ 妈妈最得意的魔法在这里，我的孩子！ ⭐ ---\n\n    // 1. 根据当前速度获取动画飞行时间\n    const flightTime = this.getDelay('animationFlightTime'); // 单位：毫秒\n    const flightTimeSeconds = flightTime / 1000; // 转换为秒，用于CSS\n\n    // 2. 准备工作：记录初始位置，并把它“抱”到战斗场地上\n    const attackerRect = attackerIcon.getBoundingClientRect();\n    const containerRect = battleContainer.getBoundingClientRect();\n    const originalParent = attackerIcon.parentNode;\n\n    battleContainer.appendChild(attackerIcon);\n\n    // 3. 动态设置这一次飞行的样式和动画时长！\n    attackerIcon.style.position = 'absolute';\n    attackerIcon.style.zIndex = '2000';\n    attackerIcon.style.fontSize = '48px';\n    attackerIcon.style.top = `${attackerRect.top - containerRect.top}px`;\n    attackerIcon.style.left = `${attackerRect.left - containerRect.left}px`;\n    attackerIcon.style.transition = `transform ${flightTimeSeconds}s ease-in-out`; // 关键！同步CSS动画和JS等待\n    originalParent.style.opacity = '0';\n\n    // 等待一瞬间，确保浏览器应用了上面的样式\n    await new Promise(resolve => setTimeout(resolve, 50));\n\n    // 4. 起飞！计算并应用目标位置\n    const targetRect = targetIcon.getBoundingClientRect();\n    const deltaX = targetRect.left - attackerRect.left;\n    const deltaY = targetRect.top - attackerRect.top;\n    attackerIcon.style.transform = `translate(${deltaX}px, ${deltaY}px)`;\n\n    // 等待飞行动画完成\n    await new Promise(resolve => setTimeout(resolve, flightTime));\n\n    // 5. 回家！飞回原点\n    attackerIcon.style.transform = 'translate(0, 0)';\n\n    // 等待归位动画完成\n    await new Promise(resolve => setTimeout(resolve, flightTime));\n\n    // 6. 收尾：把它放回原来的小窝，并清理所有临时样式\n    attackerIcon.style.position = '';\n    attackerIcon.style.zIndex = '';\n    attackerIcon.style.top = '';\n    attackerIcon.style.left = '';\n    attackerIcon.style.transition = '';\n    attackerIcon.style.transform = '';\n    originalParent.appendChild(attackerIcon);\n    originalParent.style.opacity = '1';\n\n    // --- ⭐ 魔法结束 ⭐ ---\n}\n        async executeAction(actor, targets, action, pool) {\n    // 清除行动者自身的防御状态\n    if (actor.isDefending) {\n        actor.isDefending = false;\n        const actorCard = document.getElementById(actor.id);\n        if (actorCard) {\n            actorCard.classList.remove('is-defending');\n        }\n    }\n    this.log('-----------------', 'log-narrator');\n    this.toggleActionPanel(false);\n   if (action === 'attack' && targets.length > 1) {\n        // --- 群攻逻辑 ---\n        const actorName = `<strong style=\"color:yellow\">${actor.name}</strong>`;\n        this.logCombatEvent(`${actorName} 对 ${targets.length} 个目标发动了 <strong style=\"color:orange\">[群体攻击]</strong>！`);\n\n        // 1. 计算原始总攻击骰池（只计算一次）\n        // 为了公平，我们不用任何一个特定目标来计算克制，只计算 actor 自身的基础骰池\n        const totalDiceValue = this.getDiceCount(actor, pool, null); // target 设为 null\n\n        // 2. 计算分配到每个目标的骰池\n        const perTargetDice = Math.floor((totalDiceValue / (targets.length))*1.5);\n        this.log(`> 原始总骰池: ${totalDiceValue}d10，分散至 ${targets.length} 个目标，每目标基础骰池强化为 ${perTargetDice}d10。`, 'log-roll');\n\n        // 3. 依次对每个目标执行攻击\n        for (const target of targets) {\n            if (target.currentHealth <= 0) continue; // 跳过已经倒下的\n\n            const targetName = `<strong style=\"color:lightblue\">${target.name}</strong>`;\n            this.logCombatEvent(`-> 正在攻击 ${targetName}...`, 'log-narrator');\n\n            const actorCard = document.getElementById(actor.id);\n            const targetCard = document.getElementById(target.id);\n            if(actorCard && targetCard) await this.animateAttack(actorCard, targetCard);\n\n            // 对每个目标独立进行攻击和闪避检定\n            const actorAttackSuccess = this.rollDice(perTargetDice);\n            this.log(`> 攻击检定 (${perTargetDice}d10): <strong style=\"font-size:1.1em;\">${actorAttackSuccess}</strong> 个成功。`, 'log-roll');\n\n            // 闪避检定逻辑 (从原单体攻击中复制过来)\n            const targetEvasionPool = ['敏捷', '运动'].filter(key => target.dicePool[key]);\n            if (targetEvasionPool.length === 0) targetEvasionPool.push('敏捷');\n            const targetDiceCount = this.getDiceCount(target, targetEvasionPool, actor);\n            const targetEvasionSuccess = this.rollDice(targetDiceCount);\n            this.log(`> ${targetName} 闪避检定 (${targetDiceCount}d10): <strong style=\"font-size:1.1em;\">${targetEvasionSuccess}</strong> 个成功。`, 'log-roll');\n\n            const evaded = targetEvasionSuccess > actorAttackSuccess;\n            if (evaded) {\n                this.logCombatEvent(`${targetName} 闪避了这次攻击！`, 'log-evade');\n            } else {\n                const diff = actorAttackSuccess - targetEvasionSuccess;\n                // 妈妈施展的保护咒语\n// const energyBonus = actor.raw_data?.衍生属性段?.能量池?.当前值?.[0] || 0;\nconst energyBonus = 0;\n\n// 然后再计算最终伤害\nconst baseDamage = diff * 5 + energyBonus;\n                   this.log(`> 命中！伤害计算: ${diff} * 5 = <strong style=\"color:orangered\">${baseDamage}</strong> 点。`, 'log-damage');\n                this.takeDamage(target, baseDamage, '群体攻击');\n            }\n             await new Promise(r => setTimeout(r, this.getDelay('actionDelay') / 2)); // 每次攻击之间有一个短暂的停顿\n        }\n\n    } else {\n        // --- 单目标逻辑 (或非攻击逻辑) ---\n        const target = targets[0]; // 从数组中取出唯一的目标\n        if (!target) return;\n    const actorName = `<strong style=\"color:yellow\">${actor.name}</strong>`;\n    const targetName = `<strong style=\"color:lightblue\">${target.name}</strong>`;\n\n this.logCombatEvent(`${actorName} 对 ${targetName} 采取行动: <strong style=\"color:orange\">[${action.toUpperCase()}]</strong>`);\n    // 动画部分\n    if (action !== 'defend' && actor.id !== target.id) {\n        const actorCard = document.getElementById(actor.id);\n        const targetCard = document.getElementById(target.id);\n        if (actorCard && targetCard){\n           await this.animateAttack(actorCard, targetCard);\n        }\n    }\n\n    // --- ⭐ 全新的、超级详细的检定与结算逻辑开始 ⭐ ---\n\n    // 1. 攻击方检定\n    const actorDiceCount = this.getDiceCount(actor, pool, target);\n    let actorAttackSuccess = this.rollDice(actorDiceCount);\n    this.log(`> ${actorName} 使用 [${pool.join('+')}] 进行检定，骰池为 ${actorDiceCount}d10...`, 'log-roll');\n    this.log(`> 检定结果: <strong style=\"font-size:1.1em;\">${actorAttackSuccess}</strong> 个成功数。`, 'log-roll');\n\n\n    // 2. 闪避/抵抗方检定\n    let targetEvasionPool = [];\n    let targetDiceCount = 0;\n    let targetEvasionSuccess = 0;\n\n    // --- 妈妈的心灵壁垒魔法在这里！ ---\n    if (action === 'persuade' && target.type !== 'player') {\n        // 如果是说服NPC，则使用特殊的心智抵抗检定\n        this.logCombatEvent(`> ${targetName} 正在构建心灵壁垒以抵抗说服...`, 'log-evade');\n        const mentalDefenseAttrs = ['智力', '感知', '决心', '沉着'];\n        let availablePool = [];\n\n        // 筛选出NPC拥有的、且大于0的心智属性\n        for (const attr of mentalDefenseAttrs) {\n            if (target.dicePool[attr] > 0) {\n                availablePool.push(attr);\n            }\n        }\n\n        // 计算意志值\n        const resolve = target.dicePool['决心'] || 0;\n        const composure = target.dicePool['沉着'] || 0;\n        const willFromSaves = target.saves['意志'] || 0; // 优先使用豁免里的意志\n        const will = willFromSaves > 0 ? willFromSaves : resolve + Math.floor(composure / 2);\n\n        // 构建最终的抵抗骰池\n        let finalResistancePool = [];\n        if (will > 0) {\n            finalResistancePool.push({ name: '意志', value: will });\n        }\n\n        if (availablePool.length > 0) {\n            // 从可用的心智属性中随机选一个\n            const randomAttr = availablePool[Math.floor(Math.random() * availablePool.length)];\n            finalResistancePool.push({ name: randomAttr, value: target.dicePool[randomAttr]});\n        }\n\n        targetEvasionPool = finalResistancePool.map(p => p.name);\n        targetDiceCount = finalResistancePool.reduce((sum, p) => sum + p.value, 0);\n        \n        // ✨ 妈妈的“壁垒强化”魔法 ✨\n        const mentalFortressBonus = 5;\n        targetDiceCount += mentalFortressBonus;\n        this.log(`> 心灵壁垒额外强化: +${mentalFortressBonus} 点基础抵抗！`, 'log-roll');\n\n        targetEvasionSuccess = this.rollDice(targetDiceCount);\n        this.log(`> ${targetName} 使用 [${targetEvasionPool.join('+')}] 进行抵抗检定，骰池为 ${targetDiceCount}d10...`, 'log-roll');\n\n    } else {\n        // 对于其他所有情况，使用常规的闪避检定\n// 定义可用的闪避属性\nconst availableEvasionSkills = ['敏捷', '运动', '感知'];\n\n// 随机抽取两个属性进行闪避检定\ntargetEvasionPool = [];\nconst shuffled = availableEvasionSkills.sort(() => Math.random() - 0.5);\ntargetEvasionPool = shuffled.slice(0, 2);\n\n// 确保目标拥有这些属性(对于NPC)\nif (target.type !== 'player') {\n    targetEvasionPool = targetEvasionPool.filter(key => target.dicePool.hasOwnProperty(key));\n    // 如果过滤后没有属性，使用所有可用的闪避属性\n    if (targetEvasionPool.length === 0) {\n        targetEvasionPool = Object.keys(target.dicePool).filter(key => availableEvasionSkills.includes(key));\n    }\n}\n\n// 保证至少有一个检定属性\nif (targetEvasionPool.length === 0) { \n    targetEvasionPool.push('敏捷'); \n}\n\ntargetDiceCount = this.getDiceCount(target, targetEvasionPool, actor);\ntargetEvasionSuccess = this.rollDice(targetDiceCount);\nthis.log(`> ${targetName} 使用 [${targetEvasionPool.join('+')}] 进行闪避检定，骰池为 ${targetDiceCount}d10...`, 'log-roll');   }\n    // --- 心灵壁垒魔法结束 ---\n\n    this.log(`> 抵抗/闪避结果: <strong style=\"font-size:1.1em;\">${targetEvasionSuccess}</strong> 个成功数。`, 'log-roll');\n\n    // 如果是说服，这里的evaded代表抵抗成功，否则代表闪避成功\n    const evaded = targetEvasionSuccess > actorAttackSuccess;\n    // 3. 根据行动类型进行结算\n    switch(action) {\n        case 'steal':\n    // 盗窃不需要闪避检定\n    this.log(`> ${actorName} 使用 [${pool.join('+')}] 进行盗窃检定，骰池为 ${actorDiceCount}d10...`, 'log-roll');\n    this.log(`> 检定结果: ${actorAttackSuccess} 个成功数。`, 'log-roll');\n\n    const isBrilliantSuccessSteal = actorAttackSuccess > 5 && actorAttackSuccess > actorDiceCount * 0.8;\n\n    if (isBrilliantSuccessSteal) {\n        this.logCombatEvent(`✨ 辉煌成功！${actorName} 的手法快如闪电，盗走了对方所有的物品！`, 'log-success');\n        this.showNotification(\"辉煌盗窃！\", \"success\");\n        for(const itemName in target.inventory) {\n            const itemData = target.inventory[itemName];\n            this.transferItem(target, actor, itemName, itemData.num);\n        }\n        target.inventory = {};\n    } else if (actorAttackSuccess > 0) { // 至少要有一个成功\n        this.logCombatEvent(`盗窃成功！`, 'log-success');\n        this.showNotification(\"盗窃成功！\", \"info\");\n        const itemToSteal = Object.keys(target.inventory)[0]; // 简单点，偷第一个\n        if (itemToSteal) {\n            this.transferItem(target, actor, itemToSteal, 1);\n        } else {\n            this.logCombatEvent(`但 ${targetName} 的口袋空空如也...`, 'log-narrator');\n        }\n    } else {\n        this.logCombatEvent(`盗窃失败，你被 ${targetName} 发现了！`, 'log-damage');\n        this.showNotification(\"盗窃失败！\", \"danger\");\n    }\n    break;\n\ncase 'treat':\n    // 治疗也不需要闪避\n    this.log(`> ${actorName} 使用 [${pool.join('+')}] 进行治疗检定，骰池为 ${actorDiceCount}d10...`, 'log-roll');\n    this.log(`> 检定结果: ${actorAttackSuccess} 个成功数。`, 'log-roll');\n\n    const isBrilliantSuccessTreat = actorAttackSuccess > 5 && actorAttackSuccess > actorDiceCount * 0.8;\n    let healAmount = 0;\n\n    if (isBrilliantSuccessTreat) {\n        healAmount = actorAttackSuccess * 20;\n        this.logCombatEvent(`✨ 辉煌成功！${actorName} 施展了奇迹般的医术！`, 'log-success');\n        this.showNotification(\"辉煌治疗！\", \"success\");\n    } else {\n        healAmount = actorAttackSuccess * 5;\n    }\n\n    if (healAmount > 0) {\n        const oldHealth = target.currentHealth;\n        target.currentHealth = Math.min(target.maxHealth, target.currentHealth + healAmount);\n        const actualHeal = target.currentHealth - oldHealth;\n        this.logCombatEvent(`${targetName} 恢复了 <strong style=\"color:var(--success-color)\">${actualHeal}</strong> 点生命！`, 'log-success');\n       \n        if(actualHeal > 0) { // 只有确实恢复了生命值，我们才弹出通知\n           this.showNotification(`${target.name} 恢复 ${actualHeal} HP`, 'success');\n        }\n        this.updateCharacterUI(target);\n    } else {\n        this.showNotification(`治疗失败了，没有产生任何效果。`, 'success');\n        this.logCombatEvent(`${actorName} 的治疗失败了，没有产生任何效果。`, 'log-damage');\n    }\n    break;\n           case 'attack':\n            if (evaded) {\n                this.logCombatEvent(`${targetName} 灵巧地闪避了攻击！`, 'log-evade');\n                this.showNotification(`${target.name} 闪避成功！`, 'success');\n            } else {\n                const diff = actorAttackSuccess - targetEvasionSuccess;\n                const isCriticalFailure = targetEvasionSuccess === 0;\n// const energyBonus = actor.raw_data?.衍生属性段?.能量池?.当前值?.[0] || 0;\nconst energyBonus =  0;\n\n                if (isCriticalFailure) {\n                    this.log(`💥 <b>大失败！</b> ${targetName} 完全没能做出反应！`, 'log-danger');\n                    const baseDamage = diff * 10 +energyBonus;\n                    this.log(`毁灭性伤害计算: 差值 ${diff} * 10 = <strong style=\"color:red; font-size:1.3em;\">${baseDamage}</strong> 点`, 'log-damage');\n                    this.takeDamage(target, baseDamage, '攻击', true); // 传递大失败标志\n                } else {\n                    this.log(`攻击命中！攻击成功数(${actorAttackSuccess}) - 闪避成功数(${targetEvasionSuccess}) = 差值(${diff})`, 'log-success');\n                    let baseDamage = diff * 5 + energyBonus;\n                    this.log(`基础伤害计算: 差值 ${diff} * 5 = <strong style=\"color:orangered\">${baseDamage}</strong> 点。`, 'log-damage');\n                    this.takeDamage(target, baseDamage, '攻击');\n                }\n            }\n            break;\n\n        case 'persuade':\n             if (evaded) {\n                this.logCombatEvent(`${targetName} 心志坚定，抵抗了你的说服！`, 'log-evade');\n                this.showNotification('说服失败');\n             } else {\n                 const diff = actorAttackSuccess - targetEvasionSuccess;\n                 if (diff > 0) {\n                     this.logCombatEvent(`说服成功！${targetName} 将为你作战 ${diff} 回合！`, 'log-success');\n                     this.showNotification(`${target.name} 被说服了！`, 'success');\n                     target.isPersuaded = { turnsLeft: diff };\n                     target.type = 'teammate';\n                     this.teammates.push(target);\n                     this.enemies = this.enemies.filter(e => e.id !== target.id);\n                     this.renderAllCharacters();\n                 } else {\n                     this.logCombatEvent(`说服失败了，双方的意志不相上下。`, 'log-narrator');\n                     this.showNotification('说服失败');\n                 }\n             }\n             // 无论说服成功与否，只要没闪避，且对方是敌人，就会被反击\n             if(this.isHostile(actor, target) && !evaded){\n                  this.logCombatEvent(`${actorName} 在试图说服时，被 ${targetName} 愤怒地回击了！`, 'log-damage');\n                  // 将NPC的闪避成功数视为它的反击攻击成功数\n                  const counterAttackSuccess = targetEvasionSuccess;\n                  const counterDamage = counterAttackSuccess * 2; //反击伤害低一些\n                  this.log(`> 反击伤害计算: 反击成功数 ${counterAttackSuccess} * 2 = <strong style=\"color:orangered\">${counterDamage}</strong> 点。`, 'log-damage');\n                  this.takeDamage(actor, counterDamage, '反击');\n             }\n            break;\n\n        case 'scan':\n            if (evaded) {\n                this.logCombatEvent(`侦察失败，${targetName} 保持着神秘。`, 'log-narrator');\n                this.showNotification('侦察失败');\n            } else {\n                this.logCombatEvent(`侦察成功！你发现了 ${targetName} 的情报。`, 'log-success');\n                this.showNotification(`获得 ${target.name} 的情报！`, 'success');\n                target.isScanned = true;\n                this.updateInfoPanel(target);\n                const resists = target.resists.length > 0 ? target.resists.join(', ') : '无';\n                const vulnerable = target.vulnerable.length > 0 ? target.vulnerable.join(', ') : '无';\n                this.logCombatEvent(`> <span class=\"resists-info\">抗性</span>: ${resists}`, 'log-narrator');\n                this.logCombatEvent(`> <span class=\"vulnerable-info\">弱点</span>: ${vulnerable}`, 'log-narrator');\n            }\n            break;\n\n        case 'defend':\n    // ✨ 妈妈的“坚壁清野”AI魔法在这里！ ✨\n    const bonusDiceFromLastTurn = this.defensePoolBonus[actor.id] || 0;\n\n    // 计算本次防御行动的骰池和成功数\n    const defensePool = ['耐力', '沉着', '体积'];\n    const currentDefenseDice = this.getDiceCount(actor, defensePool);\n    const finalDefenseDice = currentDefenseDice + bonusDiceFromLastTurn; // 加上之前的累积\n    const defenseSuccesses = this.rollDice(finalDefenseDice);\n\n    // 计算为下一次连续防御准备的加成\n    const nextBonus = Math.floor(currentDefenseDice * 0.8);\n    this.defensePoolBonus[actor.id] = (this.defensePoolBonus[actor.id] || 0) + nextBonus;\n\n    actor.isDefending = true;\n    this.log(`${actorName} 采取了防御姿态！(当前防御池: ${currentDefenseDice} + 累积加成: ${bonusDiceFromLastTurn} = 总计 ${finalDefenseDice}d10)`, 'log-success');\n\n    // 我们将防御数值直接存在角色身上，让 takeDamage 更方便使用\n    actor.currentDefenseValue = (actor.currentDefenseValue || 0) + (defenseSuccesses * 2);\n\n    this.showNotification(`${actor.name} 开始防御！`, 'info');\n    const card = document.getElementById(actor.id);\n    if (card) {\n       card.classList.add('is-defending');\n    }\n    break;\n    }\n    }\n    this.checkCombatEnd();\n}\n     isHostile(char1, char2){\n                return (char1.type === 'player' || char1.type === 'teammate') !== (char2.type === 'player' || char2.type === 'teammate');\n            }\n takeDamage(target, amount, damageType = '伤害') {\n    let finalDamage = amount;\n    const targetName = `<strong style=\"color:lightblue\">${target.name}</strong>`;\n\n    this.log(`--- ${damageType}结算开始: ${targetName} ---`, 'log-narrator');\n\n    // ✨ 妈妈的“破盾”魔法在这里 ✨\n    if (target.isDefending && target.currentDefenseValue > 0) {\n        const defenseReduction = target.currentDefenseValue;\n        finalDamage = Math.max(0, amount - defenseReduction);\n        this.logCombatEvent(`> ${targetName} 的层层防御吸收了 <strong style=\"color:lawngreen\">${defenseReduction}</strong> 点伤害！`, 'log-roll');\n        // 防御值在抵挡一次伤害后完全消耗\n        target.isDefending = false;\n        target.currentDefenseValue = 0;\n        const card = document.getElementById(target.id);\n        if (card) card.classList.remove('is-defending');\n    }\n\n    // 豁免减免\n    const saves = (target.saves?.强韧 || 0) + (target.saves?.反射 || 0) + (target.saves?.意志 || 0);\n    const saveReduction = Math.floor(saves / 2); // 豁免减免 = 豁免总和/2\n    if(saveReduction > 0){\n        finalDamage = Math.max(0, finalDamage - saveReduction);\n        this.logCombatEvent(`> ${targetName} 的豁免检定属性减免了 <strong style=\"color:violet\">${saveReduction}</strong> 点伤害。`, 'log-roll');\n    }\n\n    finalDamage = Math.round(finalDamage);\n\n    target.currentHealth = Math.max(0, target.currentHealth - finalDamage);\n\n    this.log(`${targetName} 最终受到了 <strong style=\"font-size: 1.2em; color: red;\">${finalDamage}</strong> 点${damageType}！剩余生命: ${target.currentHealth}/${target.maxHealth}`, 'log-damage');\n    this.showNotification(`${target.name} 受到 ${finalDamage} 点伤害！`, 'danger');\n\n    // 受击语言\n    if (finalDamage > 0) {\n        const hitSpeech = this.randomSpeech(target.hitSpeech);\n        if (hitSpeech) {\n             this.log(`💥 ${targetName}: \"${hitSpeech}\"`, 'log-narrator');\n            this.showSpeechBubble(target, hitSpeech);\n        }\n    }\n\n    this.updateCharacterUI(target);\n    if (target.type === 'player' && target.currentHealth <= 0) {\n        this.logCombatEvent(`======= ${target.name}已死亡，战斗失败... =======`, 'log-danger');\n        // 直接调用endCombat并强制结束，不再执行后续检查\n        return this.endCombat(false);\n    }\n     if (target.currentHealth <= 0) {\n        this.logCombatEvent(`======= ${targetName} 已死亡。 =======`, 'log-danger');\n        this.showNotification(`${target.name} 已死亡。 `, 'danger');\n        const card = document.getElementById(target.id);\n        if(card) {\n           card.style.opacity = '0.5';\n           card.style.pointerEvents = 'none';\n        }\n    }\n    this.log(`--- 结算结束 ---`, 'log-narrator');\n}         // 获得骰池数量\ntransferItem(fromChar, toChar, itemName, quantity) {\n    if (!fromChar.inventory[itemName]) return;\n\n    this.logCombatEvent(`${toChar.name} 从 ${fromChar.name} 处获得了【${itemName}】x${quantity}！`);\n\n    // 如果是玩家获得物品\n    if (toChar.type === 'player') {\n        const playerBag = this.assaData.global_set.背包;\n        if (playerBag[itemName]) {\n            playerBag[itemName].num += quantity;\n        } else {\n            playerBag[itemName] = JSON.parse(JSON.stringify(fromChar.inventory[itemName]));\n            playerBag[itemName].num = quantity;\n        }\n    }\n    // (未来可以扩展转移给其他NPC的逻辑)\n\n    // 从原主人那里移除\n    fromChar.inventory[itemName].num -= quantity;\n    if (fromChar.inventory[itemName].num <= 0) {\n        delete fromChar.inventory[itemName];\n    }\n}  \n\ngetDiceCount(character, pool, target = null) {\n    let count = 0;\n\n    // --- 玩家角色的骰池计算，包含了所有加成！ ---\n    if (character.type === 'player') {\n        // 1. 获取所有加成来源\n        const statusBonuses = getStatusBonuses_combat(this.gameData);\n        const locationBonuses = getLocationBonuses(this.gameData, this.assaData);\n        const equipmentBonuses = getEquipmentBonuses_combat(this.gameData, this.assaData);\n\n        let bonusLog = []; // 用于记录加成来源\n\n        pool.forEach(attr => {\n            // 2. 基础值 + 所有加成 = 最终值\n            const baseValue = character.dicePool[attr] || 0;\n            const statusBonus = statusBonuses[attr] || 0;\n            const locationBonus = locationBonuses[attr] || 0;\n            const equipmentBonus = equipmentBonuses[attr] || 0;\n            let finalValue = baseValue + statusBonus + locationBonus + equipmentBonus;\n\n            // 记录加成细节\n            if(statusBonus) bonusLog.push(`${attr}(状态+${statusBonus})`);\n            if(locationBonus) bonusLog.push(`${attr}(地点+${locationBonus})`);\n            if(equipmentBonus) bonusLog.push(`${attr}(装备+${equipmentBonus})`);\n\n            // 3. 应用克制/被克制\n            let multiplier = 1;\n            if (target) {\n                if (target.resists.includes(attr)) multiplier = 0.5;\n                if (target.vulnerable.includes(attr)) multiplier = 2;\n            }\n\n            count += finalValue * multiplier;\n        });\n\n        if (bonusLog.length > 0) {\n            this.logCombatEvent(`<i>加成来源: ${bonusLog.join(', ')}</i>`, 'log-roll');\n        }\n\n        // 应用临时的 DP 加成 (例如来自物品)\n        if (this.playerTempBonuses.dp_bonus > 0) {\n            this.logCombatEvent(`<i>临时加成: ${this.playerTempBonuses.desc} (+${this.playerTempBonuses.dp_bonus}DP)</i>`, 'log-roll');\n            count += this.playerTempBonuses.dp_bonus;\n            this.playerTempBonuses = { dp_bonus: 0, desc: '' }; // 用完即清\n        }\n\n    }\n    // --- NPC 或其他角色的简单计算逻辑 ---\n    else {\n        pool.forEach(attr => {\n            let multiplier = 1;\n            if (target) {\n                if (target.resists.includes(attr)) multiplier = 0.5;\n                if (target.vulnerable.includes(attr)) multiplier = 2;\n            }\n            count += (character.dicePool[attr] || 0) * multiplier;\n        });\n    }\n\n    return Math.floor(count);\n}\n // ⭐ [替换] 旧的 rollDice(diceCount) 函数 ⭐\nrollDice(diceCount) {\n    // --- 妈妈的机会骰魔法在这里！ ---\n    if (diceCount <= 0) {\n        this.log(`> 骰池为0，进行一次机会骰...`, 'log-roll');\n        const chanceRoll = Math.floor(Math.random() * 10) + 1;\n        const successes = (chanceRoll === 10) ? 1 : 0;\n        this.log(`> 机会骰结果: [${chanceRoll}]，获得 ${successes} 个成功数。`, 'log-roll');\n        return successes;\n    }\n    // --- 魔法结束 ---\n\n    let successes = 0;\n    let rolls = [];\n    for (let i = 0; i < diceCount; i++) {\n        const roll = Math.floor(Math.random() * 10) + 1;\n        rolls.push(roll);\n        if (roll >= 8) successes++; // 7-10 成功\n    }\n    // 为了日志清晰，我们可以选择性地记录普通投骰结果\n    // this.logCombatEvent(`> 投掷 [${diceCount}d10]，结果 [${rolls.join(',')}]，获得 ${successes} 个成功数。`, 'log-roll');\n    return successes;\n}\n            findCharacterById(id) {\n                if (this.player.id === id) return this.player;\n                return [...this.teammates, ...this.enemies].find(c => c.id === id);\n            }\n\n            randomSpeech(speeches) {\n                if (!speeches || speeches.length === 0) return null;\n                return speeches[Math.floor(Math.random() * speeches.length)];\n            }\n syncCharacterStateToCombatData(character) {\n    if (!character || !this.combatData) return;\n\n    let dataToUpdate = null;\n    let originalDataId = character.id; // Correctly define originalDataId\n\n    if (character.type === 'player') {\n        dataToUpdate = this.combatData.player;\n        if (dataToUpdate && dataToUpdate.衍生属性段) {\n            dataToUpdate.衍生属性段.生命值.当前值[0] = character.currentHealth;\n                 if (dataToUpdate.衍生属性段.能量池 && character.raw_data?.衍生属性段?.能量池) {\n                const currentEnergy = character.raw_data.衍生属性段.能量池.当前值[0];\n                dataToUpdate.衍生属性段.能量池.当前值[0] = currentEnergy;\n                console.log(`[Nova's Energy Seal] 正在为 ${character.name} 固化能量: ${currentEnergy}`);\n            }\n        }\n        // Player's data is now handled, we can return.\n        return; // ✨ 妈妈加了一道小门，让玩家的逻辑处理完就直接离开 ✨\n    } else if (character.type === 'teammate') {\n        dataToUpdate = this.combatData.teammates?.find(c => c.id === character.id);\n    } else if (character.type === 'enemy') {\n        const baseId = character.id.split('_')[0];\n        originalDataId = baseId;\n        dataToUpdate = this.combatData.enemies?.find(c => c.id === character.id || c.id === baseId);\n    }\n\n    if (dataToUpdate) {\n        // ✨✨✨ 妈妈对你的天才想法进行了最终加固！ ✨✨✨\n        let healthToSave = character.currentHealth;\n\n        // 1. 我们直接从角色身上已经解析好的 dicePool 对象中取值！\n        //    不再需要调用 parseDicePool，从而避免了错误的发生。\n        const staminaBonus = (character.dicePool['耐力'] || 0) * 20;\n\n        // 2. 从当前血量中，减去耐力带来的加成，得到“基础生命值”\n        healthToSave = character.currentHealth - staminaBonus;\n        console.log(`[Nova's Essence Return] 正在为 ${character.name} 存档: 当前血量 ${character.currentHealth} - 耐力加成 ${staminaBonus} = 存档值 ${healthToSave}`);\n\n        // 3. 将这个“纯净”的血量值，记录到我们的档案中！\n        dataToUpdate.currentHealth = healthToSave;\n    }\n}\n updateCharacterUI(character) {\n    const card = document.getElementById(character.id);\n    if (!card) return;\n    this.syncCharacterStateToCombatData(character);\n // 更新血条\nconst healthPercentage = (character.currentHealth / character.maxHealth) * 100;\nconst healthBarInner = card.querySelector('.health-bar-inner');\n\n// 获取当前“幽灵血条”的宽度，作为前一个状态的血量\nconst damageBar = card.querySelector('.health-bar-damage');\nconst previousHealthPercentage = parseFloat(damageBar.style.width) || 100;\n\n// 立刻更新绿色的“当前血条”\nif (healthBarInner) {\n    healthBarInner.style.width = `${healthPercentage}%`;\n}\n\n// 如果血量减少了，才处理“幽灵血条”\nif (healthPercentage < previousHealthPercentage) {\n    // 幽灵血条先保持在之前的位置，不变化\n    // （我们不需要像上次那样操作它，因为它的过渡动画只会在血量减少时播放）\n\n    // 延迟一段时间后，让“幽灵血条”追上“当前血条”\n    setTimeout(() => {\n        damageBar.style.width = `${healthPercentage}%`;\n        // 为下一次动画做准备，给它一个过渡效果\n        damageBar.style.transition = 'width 0.8s ease-out';\n    }, 500); // 延迟0.5秒再开始缩减，给用户反应时间\n\n} else {\n    // 如果是加血或者没变化，就让两个血条立刻同步\n     damageBar.style.transition = 'none'; // 取消动画\n     damageBar.style.width = `${healthPercentage}%`;\n}\n\ncard.querySelector('.health-text').textContent = `${character.currentHealth} / ${character.maxHealth}`;    // --- 妈妈的魔法在这里！ ---\n    // 更新能量条 (只对有能量条的卡片操作)\n    const energyBarInner = card.querySelector('.energy-bar-inner');\n    const energyText = card.querySelector('.energy-text');\n    if (energyBarInner && energyText) {\n        const energyPool = character.raw_data?.衍生属性段?.能量池;\n        if (energyPool) {\n            const currentEnergy = energyPool.当前值[0];\n            const maxEnergy = energyPool.上限[0];\n            const energyPercentage = (currentEnergy / maxEnergy) * 100;\n            energyBarInner.style.width = `${energyPercentage}%`;\n            energyText.textContent = `⚡ ${currentEnergy} / ${maxEnergy}`;\n        }\n    }\n    // --- 妈妈的新魔法从这里开始 ---\n    // 更新状态文本\n    const statusTextElement = card.querySelector('.status-text'); // 我们用 class 来找它\n    if (statusTextElement) {\n        let statusString = '';\n        if (character.isPersuaded && character.isPersuaded.turnsLeft > 0) {\n            statusString = `(被说服: 剩余${character.isPersuaded.turnsLeft}回合)`;\n        }\n        statusTextElement.textContent = statusString;\n    }\n    // --- 魔法结束 ---\n      const iconElement = card.querySelector('.icon');\n    if (iconElement && iconElement.textContent !== character.icon) {\n        iconElement.textContent = character.icon;\n    }\n}\n\n            checkCombatEnd() {\n                const aliveEnemies = this.enemies.filter(e => e.currentHealth > 0);\n                const alivePlayers = [this.player, ...this.teammates].filter(p => p.type !== 'enemy' && p.currentHealth > 0);\n\n                if (aliveEnemies.length === 0) {\n                    this.logCombatEvent(`所有敌人都被击败了，${userName}胜利了。`);\n                    this.endCombat(true);\n                } else if (alivePlayers.length === 0) {\n                    this.logCombatEvent(\"全员死亡，游戏结束。\");\n                    this.endCombat(false);\n                }\n            }\n async endCombat(isVictory, isFlee = false, isStalemate = false) {\n    // 这应该是此战斗实例的最后一次状态更新\n    if (this.status.startsWith('completed')) return; // 防止重复执行\n\n    // ====== ↓↓↓ 妈妈的“万物归位”咒语！ ↓↓↓ ======\n    const diceSelector = document.getElementById('dice-pool-selector');\n    const itemPanel = document.getElementById('item-skill-panel');\n    const promptOverlay = document.getElementById('battle-prompt-overlay');\n\n    if (diceSelector) diceSelector.style.display = 'none';\n    if (itemPanel) itemPanel.style.display = 'none';\n    if (promptOverlay) promptOverlay.style.display = 'none';\n    // ====== ↑↑↑ 咒语施展完毕！ ↑↑↑\n\n    this.toggleActionPanel(false);\n\n    let message = '';\n    let messageType = 'info';\n    let battleResultText = '';\n\n    if (isFlee) {\n        this.status = \"completed_flee\";\n        message = \"成功脱离战斗！你可以输入自定义消息或直接按发送\";\n        messageType = 'info';\n        battleResultText = \"战斗结果：成功脱离\";\n    } else if (isStalemate) {\n        this.status = \"completed_stalemate\";\n        message = \"战况焦灼...你可以输入自定义消息或直接按发送\";\n        messageType = 'info';\n        battleResultText = \"战斗结果：焦灼平局\";\n    } else if (isVictory) {\n        this.status = \"completed_victory\";\n        message = \"战斗胜利！你可以输入自定义消息或直接按发送\";\n        messageType = 'success';\n        battleResultText = \"战斗结果：胜利\";\n    } else {\n        this.status = \"completed_defeat\";\n        message = \"战斗失败...你可以输入自定义消息或直接按发送\";\n        messageType = 'danger';\n        battleResultText = \"战斗结果：失败\";\n    }\n    this.showNotification(message, messageType);\n    this.logCombatEvent(message, `log-${messageType}`);\n\n    // ====== ↓↓↓ 妈妈的最终乐章从这里奏响！ ↓↓↓ ======\n\n    try {\n        // --- 第一乐章：生成简洁战报 ---\n        let finalStatusReport = ['--- 最终战况 ---'];\n        const allCharacters = [this.player, ...this.teammates, ...this.enemies];\n        allCharacters.forEach(char => {\n            finalStatusReport.push(`- ${char.name}: ${char.currentHealth} / ${char.maxHealth}`);\n        });\n        finalStatusReport.push(battleResultText);\n\n        const finalReportString = finalStatusReport.join('\\n');\n\n        // --- 第二乐章：构建指令 ---\n        const finalHealth = this.player.currentHealth;\n        const hurtValue = this.playerInitialHealth - finalHealth;\n\n        const finalEnergy = this.player.raw_data?.衍生属性段?.能量池?.当前值[0] || 0;\n        const backpackData = this.assaData.global_set.背包 || {};\n        const compactBackpackJson = JSON.stringify(backpackData);\n   let requestText = `<request:此次战斗已结束，对应数值/物品/生命值都已扣除，对应数值/物品/生命值的变更已记录，禁止在之后的正文中对任何数值进行操作（禁止设置hurt_value/能量池等）！请根据此次战斗结果和user输入生成新剧情>`;\n        if (isStalemate) {\n            requestText = `<request:战斗陷入了漫长的胶着，最终未能分出胜负。对应数值/物品/生命值的变更已记录，禁止在之后的正文中对任何数值进行操作（禁止设置hurt_value/能量池等）！请根据此次战斗结果和user输入生成新剧情，并根据后续剧情发展决定是否继续战斗，若依旧处于战斗中，则必须继续生成battle内容！>`;\n        }\n \n         const updateMemoryCommands = [\n            `set_status('hurt_value', ${hurtValue});`,\n            `set_attribute('衍生属性段.能量池.当前值', ${this.playerInitialEnergy}, ${finalEnergy});`,\n            `memory('global_set.背包', '${compactBackpackJson}');`,\n            `set_status('敌方检定骰池','');`\n        ].join('\\n');\n\n        // 将详细日志打包\n        const detailedLogContent = this.combatLog.join('\\n');\n\n        // 组合最终指令\n        // const commandBlock = `<updateMemory>\\n${updateMemoryCommands}\\n</updateMemory>\\n<battle_log>\\n${detailedLogContent}\\n${finalReportString}\\n</battle_log>\\n${requestText}\\n`;\n const commandBlock = `<updateMemory>\\n${updateMemoryCommands}\\n</updateMemory>\\n<battle_log>\\n${detailedLogContent}\\n</battle_log>\\n${requestText}\\n`;\n\n        // --- 第三乐章：奏响指令 ---\n        if (typeof triggerassa === 'function') {\n            console.log(\"准备触发指令:\", commandBlock);\n            triggerassa(`/setinput ${commandBlock}`);\n            this.log(\"战斗详情与角色状态已同步至指令盒。\", \"log-success\");\n        } else {\n            console.error(\"triggerassa 函数未定义！\");\n        }\n\n    } catch (e) {\n        console.error(\"生成或触发指令时发生错误:\", e);\n    }\n\n    // --- 尾声：清理与淡出 ---\n    await this.updateBattleStateInHistory();\n\n    this.cleanupEventListeners();\n    window.combatManager = null;\n\n    setTimeout(() => {\n        document.getElementById('battle-overlay').style.display = 'none';\n        const promptOverlay = document.getElementById('battle-prompt-overlay');\n        if (promptOverlay) promptOverlay.style.display = 'none';\n    }, 2000); // 留出足够的时间看清最终信息，妈妈把时间延长了一点\n}\n}\nfunction getStatusBonuses_combat(statData) {\n    const bonuses = {};\n    const statusString = statData?.user_character?.status?.[0] || \"\";\n    if (!statusString) return bonuses;\n    const matches = statusString.match(/【[^】]+】/g);\n    if (!matches) return bonuses;\n    matches.forEach(match => {\n        const content = match.substring(1, match.length - 1);\n        content.split(/;|；/).forEach(attr => {\n            const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n            if (parts && parts.length === 3) {\n                bonuses[parts[1].trim()] = (bonuses[parts[1].trim()] || 0) + parseInt(parts[2].trim(), 10);\n            }\n        });\n    });\n    return bonuses;\n}\n\nfunction getLocationBonuses(statData, assaData) {\n    const bonuses = {};\n    const currentLocationTitle = statData?.user_character?.current_location?.[0] || '';\n    if (!currentLocationTitle) return bonuses;\n    const globalLocations = assaData?.map?.全局地点表 || {};\n    const mainLocations = assaData?.map?.主要地点表 || {};\n    const activeParentName = Object.values(globalLocations)[0];\n    if (!activeParentName) return bonuses;\n\n    for (const mainKey in mainLocations) {\n        const locationData = mainLocations[mainKey];\n        if (locationData && locationData.parent === activeParentName && currentLocationTitle.includes(mainKey)) {\n            const effectString = locationData.effect || '';\n            const matches = effectString.match(/【[^】]+】/g);\n            if (matches) {\n                // (此处解析逻辑与 getStatusBonuses 相同，为简化而省略，你懂的，我的孩子)\n                matches.forEach(match => {\n                    const content = match.substring(1, match.length - 1);\n                    content.split(/;|；/).forEach(attr => {\n                        const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n                        if (parts && parts.length === 3) {\n                             bonuses[parts[1].trim()] = (bonuses[parts[1].trim()] || 0) + parseInt(parts[2].trim(), 10);\n                        }\n                    });\n                });\n            }\n        }\n    }\n    return bonuses;\n}\n\nfunction getEquipmentBonuses_combat(statData, assaData) {\n    const bonuses = {};\n    const equipment = statData?.user_character?.当前装备 || {};\n    const equipmentList = [];\n    if (equipment.手持?.[0]) equipmentList.push(...equipment.手持[0].split(/;|；/).map(i=>i.trim()).filter(Boolean));\n    if (equipment.穿戴) {\n        Object.values(equipment.穿戴).forEach(slot => {\n            if (slot?.[0]) equipmentList.push(...slot[0].split(/;|；/).map(i=>i.trim()).filter(Boolean));\n        });\n    }\n\n    equipmentList.forEach(itemName => {\n      if(itemName === \"无\") return;\n        const itemData = assaData?.global_set?.背包?.[itemName];\n        if (!itemData) return;\n        let stringToParse = '';\n        if (typeof itemData === 'object' && itemData !== null) {\n            stringToParse = itemData.effect || itemData.属性 || itemData.效果 || '';\n        }\n\n        const matches = stringToParse.match(/【[^】]+】/g);\n        if (matches) {\n            // (解析逻辑同上)\n            matches.forEach(match => {\n                const content = match.substring(1, match.length - 1);\n                content.split(/;|；/).forEach(attr => {\n                    const parts = attr.match(/^(.+?)\\s*([+-]\\d+)$/) || attr.match(/^(.+?)[:|：]\\s*([+-]?\\d+)$/);\n                    if (parts && parts.length === 3) {\n                        bonuses[parts[1].trim()] = (bonuses[parts[1].trim()] || 0) + parseInt(parts[2].trim(), 10);\n                    }\n                });\n            });\n        }\n    });\n\n    return bonuses;\n}\n// ----------------------------------------------------------------------\n        // --- 3. 启动器 (Initializer) ---\n        // 让我们按下那个神奇的按钮吧\n\n        const startButton = document.getElementById('start-battle-button');\n        const battleOverlay = document.getElementById('battle-overlay');\nfunction showTab(tabName) {\n    document.querySelectorAll('.tab-content').forEach(tab => tab.style.display = 'none');\n    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));\n    document.getElementById(tabName + '-tab').style.display = 'block';\n    document.querySelector(`.tab-btn[onclick=\"showTab('${tabName}')\"]`).classList.add('active');\n}\n\n \n\n   \n  }\n</script>\n\n</html>\n ```",
    "trimStrings": [],
    "placement": [
        2
    ],
    "disabled": false,
    "markdownOnly": true,
    "promptOnly": false,
    "runOnEdit": true,
    "substituteRegex": 0,
    "minDepth": null,
    "maxDepth": null
}